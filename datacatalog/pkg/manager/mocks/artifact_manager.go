// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	datacatalog "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/datacatalog"

	mock "github.com/stretchr/testify/mock"
)

// ArtifactManager is an autogenerated mock type for the ArtifactManager type
type ArtifactManager struct {
	mock.Mock
}

type ArtifactManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ArtifactManager) EXPECT() *ArtifactManager_Expecter {
	return &ArtifactManager_Expecter{mock: &_m.Mock}
}

// CreateArtifact provides a mock function with given fields: ctx, request
func (_m *ArtifactManager) CreateArtifact(ctx context.Context, request *datacatalog.CreateArtifactRequest) (*datacatalog.CreateArtifactResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateArtifact")
	}

	var r0 *datacatalog.CreateArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.CreateArtifactRequest) (*datacatalog.CreateArtifactResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.CreateArtifactRequest) *datacatalog.CreateArtifactResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.CreateArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.CreateArtifactRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactManager_CreateArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArtifact'
type ArtifactManager_CreateArtifact_Call struct {
	*mock.Call
}

// CreateArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - request *datacatalog.CreateArtifactRequest
func (_e *ArtifactManager_Expecter) CreateArtifact(ctx interface{}, request interface{}) *ArtifactManager_CreateArtifact_Call {
	return &ArtifactManager_CreateArtifact_Call{Call: _e.mock.On("CreateArtifact", ctx, request)}
}

func (_c *ArtifactManager_CreateArtifact_Call) Run(run func(ctx context.Context, request *datacatalog.CreateArtifactRequest)) *ArtifactManager_CreateArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*datacatalog.CreateArtifactRequest))
	})
	return _c
}

func (_c *ArtifactManager_CreateArtifact_Call) Return(_a0 *datacatalog.CreateArtifactResponse, _a1 error) *ArtifactManager_CreateArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactManager_CreateArtifact_Call) RunAndReturn(run func(context.Context, *datacatalog.CreateArtifactRequest) (*datacatalog.CreateArtifactResponse, error)) *ArtifactManager_CreateArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// GetArtifact provides a mock function with given fields: ctx, request
func (_m *ArtifactManager) GetArtifact(ctx context.Context, request *datacatalog.GetArtifactRequest) (*datacatalog.GetArtifactResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetArtifact")
	}

	var r0 *datacatalog.GetArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.GetArtifactRequest) (*datacatalog.GetArtifactResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.GetArtifactRequest) *datacatalog.GetArtifactResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.GetArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.GetArtifactRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactManager_GetArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArtifact'
type ArtifactManager_GetArtifact_Call struct {
	*mock.Call
}

// GetArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - request *datacatalog.GetArtifactRequest
func (_e *ArtifactManager_Expecter) GetArtifact(ctx interface{}, request interface{}) *ArtifactManager_GetArtifact_Call {
	return &ArtifactManager_GetArtifact_Call{Call: _e.mock.On("GetArtifact", ctx, request)}
}

func (_c *ArtifactManager_GetArtifact_Call) Run(run func(ctx context.Context, request *datacatalog.GetArtifactRequest)) *ArtifactManager_GetArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*datacatalog.GetArtifactRequest))
	})
	return _c
}

func (_c *ArtifactManager_GetArtifact_Call) Return(_a0 *datacatalog.GetArtifactResponse, _a1 error) *ArtifactManager_GetArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactManager_GetArtifact_Call) RunAndReturn(run func(context.Context, *datacatalog.GetArtifactRequest) (*datacatalog.GetArtifactResponse, error)) *ArtifactManager_GetArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// ListArtifacts provides a mock function with given fields: ctx, request
func (_m *ArtifactManager) ListArtifacts(ctx context.Context, request *datacatalog.ListArtifactsRequest) (*datacatalog.ListArtifactsResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListArtifacts")
	}

	var r0 *datacatalog.ListArtifactsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.ListArtifactsRequest) (*datacatalog.ListArtifactsResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.ListArtifactsRequest) *datacatalog.ListArtifactsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.ListArtifactsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.ListArtifactsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactManager_ListArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListArtifacts'
type ArtifactManager_ListArtifacts_Call struct {
	*mock.Call
}

// ListArtifacts is a helper method to define mock.On call
//   - ctx context.Context
//   - request *datacatalog.ListArtifactsRequest
func (_e *ArtifactManager_Expecter) ListArtifacts(ctx interface{}, request interface{}) *ArtifactManager_ListArtifacts_Call {
	return &ArtifactManager_ListArtifacts_Call{Call: _e.mock.On("ListArtifacts", ctx, request)}
}

func (_c *ArtifactManager_ListArtifacts_Call) Run(run func(ctx context.Context, request *datacatalog.ListArtifactsRequest)) *ArtifactManager_ListArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*datacatalog.ListArtifactsRequest))
	})
	return _c
}

func (_c *ArtifactManager_ListArtifacts_Call) Return(_a0 *datacatalog.ListArtifactsResponse, _a1 error) *ArtifactManager_ListArtifacts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactManager_ListArtifacts_Call) RunAndReturn(run func(context.Context, *datacatalog.ListArtifactsRequest) (*datacatalog.ListArtifactsResponse, error)) *ArtifactManager_ListArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateArtifact provides a mock function with given fields: ctx, request
func (_m *ArtifactManager) UpdateArtifact(ctx context.Context, request *datacatalog.UpdateArtifactRequest) (*datacatalog.UpdateArtifactResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArtifact")
	}

	var r0 *datacatalog.UpdateArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.UpdateArtifactRequest) (*datacatalog.UpdateArtifactResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.UpdateArtifactRequest) *datacatalog.UpdateArtifactResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.UpdateArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.UpdateArtifactRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactManager_UpdateArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateArtifact'
type ArtifactManager_UpdateArtifact_Call struct {
	*mock.Call
}

// UpdateArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - request *datacatalog.UpdateArtifactRequest
func (_e *ArtifactManager_Expecter) UpdateArtifact(ctx interface{}, request interface{}) *ArtifactManager_UpdateArtifact_Call {
	return &ArtifactManager_UpdateArtifact_Call{Call: _e.mock.On("UpdateArtifact", ctx, request)}
}

func (_c *ArtifactManager_UpdateArtifact_Call) Run(run func(ctx context.Context, request *datacatalog.UpdateArtifactRequest)) *ArtifactManager_UpdateArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*datacatalog.UpdateArtifactRequest))
	})
	return _c
}

func (_c *ArtifactManager_UpdateArtifact_Call) Return(_a0 *datacatalog.UpdateArtifactResponse, _a1 error) *ArtifactManager_UpdateArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactManager_UpdateArtifact_Call) RunAndReturn(run func(context.Context, *datacatalog.UpdateArtifactRequest) (*datacatalog.UpdateArtifactResponse, error)) *ArtifactManager_UpdateArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// NewArtifactManager creates a new instance of ArtifactManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtifactManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtifactManager {
	mock := &ArtifactManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
