// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/datacatalog/pkg/repositories/models"
)

// DatasetRepo is an autogenerated mock type for the DatasetRepo type
type DatasetRepo struct {
	mock.Mock
}

type DatasetRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *DatasetRepo) EXPECT() *DatasetRepo_Expecter {
	return &DatasetRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, in
func (_m *DatasetRepo) Create(ctx context.Context, in models.Dataset) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatasetRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type DatasetRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - in models.Dataset
func (_e *DatasetRepo_Expecter) Create(ctx interface{}, in interface{}) *DatasetRepo_Create_Call {
	return &DatasetRepo_Create_Call{Call: _e.mock.On("Create", ctx, in)}
}

func (_c *DatasetRepo_Create_Call) Run(run func(ctx context.Context, in models.Dataset)) *DatasetRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Dataset))
	})
	return _c
}

func (_c *DatasetRepo_Create_Call) Return(_a0 error) *DatasetRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatasetRepo_Create_Call) RunAndReturn(run func(context.Context, models.Dataset) error) *DatasetRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, in
func (_m *DatasetRepo) Get(ctx context.Context, in models.DatasetKey) (models.Dataset, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetKey) (models.Dataset, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetKey) models.Dataset); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(models.Dataset)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DatasetKey) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatasetRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type DatasetRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - in models.DatasetKey
func (_e *DatasetRepo_Expecter) Get(ctx interface{}, in interface{}) *DatasetRepo_Get_Call {
	return &DatasetRepo_Get_Call{Call: _e.mock.On("Get", ctx, in)}
}

func (_c *DatasetRepo_Get_Call) Run(run func(ctx context.Context, in models.DatasetKey)) *DatasetRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DatasetKey))
	})
	return _c
}

func (_c *DatasetRepo_Get_Call) Return(_a0 models.Dataset, _a1 error) *DatasetRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatasetRepo_Get_Call) RunAndReturn(run func(context.Context, models.DatasetKey) (models.Dataset, error)) *DatasetRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, in
func (_m *DatasetRepo) List(ctx context.Context, in models.ListModelsInput) ([]models.Dataset, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ListModelsInput) ([]models.Dataset, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ListModelsInput) []models.Dataset); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ListModelsInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatasetRepo_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type DatasetRepo_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - in models.ListModelsInput
func (_e *DatasetRepo_Expecter) List(ctx interface{}, in interface{}) *DatasetRepo_List_Call {
	return &DatasetRepo_List_Call{Call: _e.mock.On("List", ctx, in)}
}

func (_c *DatasetRepo_List_Call) Run(run func(ctx context.Context, in models.ListModelsInput)) *DatasetRepo_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ListModelsInput))
	})
	return _c
}

func (_c *DatasetRepo_List_Call) Return(_a0 []models.Dataset, _a1 error) *DatasetRepo_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatasetRepo_List_Call) RunAndReturn(run func(context.Context, models.ListModelsInput) ([]models.Dataset, error)) *DatasetRepo_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatasetRepo creates a new instance of DatasetRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatasetRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatasetRepo {
	mock := &DatasetRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
