// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/datacatalog/pkg/repositories/models"
)

// TagRepo is an autogenerated mock type for the TagRepo type
type TagRepo struct {
	mock.Mock
}

type TagRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TagRepo) EXPECT() *TagRepo_Expecter {
	return &TagRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, in
func (_m *TagRepo) Create(ctx context.Context, in models.Tag) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Tag) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TagRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TagRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - in models.Tag
func (_e *TagRepo_Expecter) Create(ctx interface{}, in interface{}) *TagRepo_Create_Call {
	return &TagRepo_Create_Call{Call: _e.mock.On("Create", ctx, in)}
}

func (_c *TagRepo_Create_Call) Run(run func(ctx context.Context, in models.Tag)) *TagRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Tag))
	})
	return _c
}

func (_c *TagRepo_Create_Call) Return(_a0 error) *TagRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TagRepo_Create_Call) RunAndReturn(run func(context.Context, models.Tag) error) *TagRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, in
func (_m *TagRepo) Get(ctx context.Context, in models.TagKey) (models.Tag, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TagKey) (models.Tag, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TagKey) models.Tag); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(models.Tag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TagKey) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TagRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - in models.TagKey
func (_e *TagRepo_Expecter) Get(ctx interface{}, in interface{}) *TagRepo_Get_Call {
	return &TagRepo_Get_Call{Call: _e.mock.On("Get", ctx, in)}
}

func (_c *TagRepo_Get_Call) Run(run func(ctx context.Context, in models.TagKey)) *TagRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.TagKey))
	})
	return _c
}

func (_c *TagRepo_Get_Call) Return(_a0 models.Tag, _a1 error) *TagRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TagRepo_Get_Call) RunAndReturn(run func(context.Context, models.TagKey) (models.Tag, error)) *TagRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewTagRepo creates a new instance of TagRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagRepo {
	mock := &TagRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
