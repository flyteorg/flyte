// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/datacatalog/pkg/repositories/models"
)

// ArtifactRepo is an autogenerated mock type for the ArtifactRepo type
type ArtifactRepo struct {
	mock.Mock
}

type ArtifactRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ArtifactRepo) EXPECT() *ArtifactRepo_Expecter {
	return &ArtifactRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, in
func (_m *ArtifactRepo) Create(ctx context.Context, in models.Artifact) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Artifact) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ArtifactRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - in models.Artifact
func (_e *ArtifactRepo_Expecter) Create(ctx interface{}, in interface{}) *ArtifactRepo_Create_Call {
	return &ArtifactRepo_Create_Call{Call: _e.mock.On("Create", ctx, in)}
}

func (_c *ArtifactRepo_Create_Call) Run(run func(ctx context.Context, in models.Artifact)) *ArtifactRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Artifact))
	})
	return _c
}

func (_c *ArtifactRepo_Create_Call) Return(_a0 error) *ArtifactRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactRepo_Create_Call) RunAndReturn(run func(context.Context, models.Artifact) error) *ArtifactRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, in
func (_m *ArtifactRepo) Get(ctx context.Context, in models.ArtifactKey) (models.Artifact, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Artifact
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ArtifactKey) (models.Artifact, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ArtifactKey) models.Artifact); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(models.Artifact)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ArtifactKey) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ArtifactRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - in models.ArtifactKey
func (_e *ArtifactRepo_Expecter) Get(ctx interface{}, in interface{}) *ArtifactRepo_Get_Call {
	return &ArtifactRepo_Get_Call{Call: _e.mock.On("Get", ctx, in)}
}

func (_c *ArtifactRepo_Get_Call) Run(run func(ctx context.Context, in models.ArtifactKey)) *ArtifactRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ArtifactKey))
	})
	return _c
}

func (_c *ArtifactRepo_Get_Call) Return(_a0 models.Artifact, _a1 error) *ArtifactRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactRepo_Get_Call) RunAndReturn(run func(context.Context, models.ArtifactKey) (models.Artifact, error)) *ArtifactRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, datasetKey, in
func (_m *ArtifactRepo) List(ctx context.Context, datasetKey models.DatasetKey, in models.ListModelsInput) ([]models.Artifact, error) {
	ret := _m.Called(ctx, datasetKey, in)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Artifact
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetKey, models.ListModelsInput) ([]models.Artifact, error)); ok {
		return rf(ctx, datasetKey, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetKey, models.ListModelsInput) []models.Artifact); ok {
		r0 = rf(ctx, datasetKey, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Artifact)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.DatasetKey, models.ListModelsInput) error); ok {
		r1 = rf(ctx, datasetKey, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArtifactRepo_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ArtifactRepo_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - datasetKey models.DatasetKey
//   - in models.ListModelsInput
func (_e *ArtifactRepo_Expecter) List(ctx interface{}, datasetKey interface{}, in interface{}) *ArtifactRepo_List_Call {
	return &ArtifactRepo_List_Call{Call: _e.mock.On("List", ctx, datasetKey, in)}
}

func (_c *ArtifactRepo_List_Call) Run(run func(ctx context.Context, datasetKey models.DatasetKey, in models.ListModelsInput)) *ArtifactRepo_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.DatasetKey), args[2].(models.ListModelsInput))
	})
	return _c
}

func (_c *ArtifactRepo_List_Call) Return(_a0 []models.Artifact, _a1 error) *ArtifactRepo_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArtifactRepo_List_Call) RunAndReturn(run func(context.Context, models.DatasetKey, models.ListModelsInput) ([]models.Artifact, error)) *ArtifactRepo_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, artifact
func (_m *ArtifactRepo) Update(ctx context.Context, artifact models.Artifact) error {
	ret := _m.Called(ctx, artifact)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Artifact) error); ok {
		r0 = rf(ctx, artifact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArtifactRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ArtifactRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - artifact models.Artifact
func (_e *ArtifactRepo_Expecter) Update(ctx interface{}, artifact interface{}) *ArtifactRepo_Update_Call {
	return &ArtifactRepo_Update_Call{Call: _e.mock.On("Update", ctx, artifact)}
}

func (_c *ArtifactRepo_Update_Call) Run(run func(ctx context.Context, artifact models.Artifact)) *ArtifactRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Artifact))
	})
	return _c
}

func (_c *ArtifactRepo_Update_Call) Return(_a0 error) *ArtifactRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArtifactRepo_Update_Call) RunAndReturn(run func(context.Context, models.Artifact) error) *ArtifactRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewArtifactRepo creates a new instance of ArtifactRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtifactRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtifactRepo {
	mock := &ArtifactRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
