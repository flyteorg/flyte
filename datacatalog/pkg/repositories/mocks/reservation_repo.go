// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/datacatalog/pkg/repositories/models"

	time "time"
)

// ReservationRepo is an autogenerated mock type for the ReservationRepo type
type ReservationRepo struct {
	mock.Mock
}

type ReservationRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ReservationRepo) EXPECT() *ReservationRepo_Expecter {
	return &ReservationRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, reservation, now
func (_m *ReservationRepo) Create(ctx context.Context, reservation models.Reservation, now time.Time) error {
	ret := _m.Called(ctx, reservation, now)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Reservation, time.Time) error); ok {
		r0 = rf(ctx, reservation, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReservationRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ReservationRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - reservation models.Reservation
//   - now time.Time
func (_e *ReservationRepo_Expecter) Create(ctx interface{}, reservation interface{}, now interface{}) *ReservationRepo_Create_Call {
	return &ReservationRepo_Create_Call{Call: _e.mock.On("Create", ctx, reservation, now)}
}

func (_c *ReservationRepo_Create_Call) Run(run func(ctx context.Context, reservation models.Reservation, now time.Time)) *ReservationRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Reservation), args[2].(time.Time))
	})
	return _c
}

func (_c *ReservationRepo_Create_Call) Return(_a0 error) *ReservationRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReservationRepo_Create_Call) RunAndReturn(run func(context.Context, models.Reservation, time.Time) error) *ReservationRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, reservation, ownerID
func (_m *ReservationRepo) Delete(ctx context.Context, reservation models.ReservationKey, ownerID string) error {
	ret := _m.Called(ctx, reservation, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ReservationKey, string) error); ok {
		r0 = rf(ctx, reservation, ownerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReservationRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ReservationRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - reservation models.ReservationKey
//   - ownerID string
func (_e *ReservationRepo_Expecter) Delete(ctx interface{}, reservation interface{}, ownerID interface{}) *ReservationRepo_Delete_Call {
	return &ReservationRepo_Delete_Call{Call: _e.mock.On("Delete", ctx, reservation, ownerID)}
}

func (_c *ReservationRepo_Delete_Call) Run(run func(ctx context.Context, reservation models.ReservationKey, ownerID string)) *ReservationRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ReservationKey), args[2].(string))
	})
	return _c
}

func (_c *ReservationRepo_Delete_Call) Return(_a0 error) *ReservationRepo_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReservationRepo_Delete_Call) RunAndReturn(run func(context.Context, models.ReservationKey, string) error) *ReservationRepo_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, reservationKey
func (_m *ReservationRepo) Get(ctx context.Context, reservationKey models.ReservationKey) (models.Reservation, error) {
	ret := _m.Called(ctx, reservationKey)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ReservationKey) (models.Reservation, error)); ok {
		return rf(ctx, reservationKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ReservationKey) models.Reservation); ok {
		r0 = rf(ctx, reservationKey)
	} else {
		r0 = ret.Get(0).(models.Reservation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ReservationKey) error); ok {
		r1 = rf(ctx, reservationKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReservationRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ReservationRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - reservationKey models.ReservationKey
func (_e *ReservationRepo_Expecter) Get(ctx interface{}, reservationKey interface{}) *ReservationRepo_Get_Call {
	return &ReservationRepo_Get_Call{Call: _e.mock.On("Get", ctx, reservationKey)}
}

func (_c *ReservationRepo_Get_Call) Run(run func(ctx context.Context, reservationKey models.ReservationKey)) *ReservationRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ReservationKey))
	})
	return _c
}

func (_c *ReservationRepo_Get_Call) Return(_a0 models.Reservation, _a1 error) *ReservationRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReservationRepo_Get_Call) RunAndReturn(run func(context.Context, models.ReservationKey) (models.Reservation, error)) *ReservationRepo_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, reservation, now
func (_m *ReservationRepo) Update(ctx context.Context, reservation models.Reservation, now time.Time) error {
	ret := _m.Called(ctx, reservation, now)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Reservation, time.Time) error); ok {
		r0 = rf(ctx, reservation, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReservationRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ReservationRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - reservation models.Reservation
//   - now time.Time
func (_e *ReservationRepo_Expecter) Update(ctx interface{}, reservation interface{}, now interface{}) *ReservationRepo_Update_Call {
	return &ReservationRepo_Update_Call{Call: _e.mock.On("Update", ctx, reservation, now)}
}

func (_c *ReservationRepo_Update_Call) Run(run func(ctx context.Context, reservation models.Reservation, now time.Time)) *ReservationRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Reservation), args[2].(time.Time))
	})
	return _c
}

func (_c *ReservationRepo_Update_Call) Return(_a0 error) *ReservationRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReservationRepo_Update_Call) RunAndReturn(run func(context.Context, models.Reservation, time.Time) error) *ReservationRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewReservationRepo creates a new instance of ReservationRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReservationRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReservationRepo {
	mock := &ReservationRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
