// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	flyteidlcore "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"
)

// TaskExecutionID is an autogenerated mock type for the TaskExecutionID type
type TaskExecutionID struct {
	mock.Mock
}

type TaskExecutionID_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskExecutionID) EXPECT() *TaskExecutionID_Expecter {
	return &TaskExecutionID_Expecter{mock: &_m.Mock}
}

// GetGeneratedName provides a mock function with given fields:
func (_m *TaskExecutionID) GetGeneratedName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGeneratedName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TaskExecutionID_GetGeneratedName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGeneratedName'
type TaskExecutionID_GetGeneratedName_Call struct {
	*mock.Call
}

// GetGeneratedName is a helper method to define mock.On call
func (_e *TaskExecutionID_Expecter) GetGeneratedName() *TaskExecutionID_GetGeneratedName_Call {
	return &TaskExecutionID_GetGeneratedName_Call{Call: _e.mock.On("GetGeneratedName")}
}

func (_c *TaskExecutionID_GetGeneratedName_Call) Run(run func()) *TaskExecutionID_GetGeneratedName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionID_GetGeneratedName_Call) Return(_a0 string) *TaskExecutionID_GetGeneratedName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionID_GetGeneratedName_Call) RunAndReturn(run func() string) *TaskExecutionID_GetGeneratedName_Call {
	_c.Call.Return(run)
	return _c
}

// GetGeneratedNameWith provides a mock function with given fields: minLength, maxLength
func (_m *TaskExecutionID) GetGeneratedNameWith(minLength int, maxLength int) (string, error) {
	ret := _m.Called(minLength, maxLength)

	if len(ret) == 0 {
		panic("no return value specified for GetGeneratedNameWith")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (string, error)); ok {
		return rf(minLength, maxLength)
	}
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(minLength, maxLength)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(minLength, maxLength)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskExecutionID_GetGeneratedNameWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGeneratedNameWith'
type TaskExecutionID_GetGeneratedNameWith_Call struct {
	*mock.Call
}

// GetGeneratedNameWith is a helper method to define mock.On call
//   - minLength int
//   - maxLength int
func (_e *TaskExecutionID_Expecter) GetGeneratedNameWith(minLength interface{}, maxLength interface{}) *TaskExecutionID_GetGeneratedNameWith_Call {
	return &TaskExecutionID_GetGeneratedNameWith_Call{Call: _e.mock.On("GetGeneratedNameWith", minLength, maxLength)}
}

func (_c *TaskExecutionID_GetGeneratedNameWith_Call) Run(run func(minLength int, maxLength int)) *TaskExecutionID_GetGeneratedNameWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *TaskExecutionID_GetGeneratedNameWith_Call) Return(_a0 string, _a1 error) *TaskExecutionID_GetGeneratedNameWith_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskExecutionID_GetGeneratedNameWith_Call) RunAndReturn(run func(int, int) (string, error)) *TaskExecutionID_GetGeneratedNameWith_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *TaskExecutionID) GetID() flyteidlcore.TaskExecutionIdentifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 flyteidlcore.TaskExecutionIdentifier
	if rf, ok := ret.Get(0).(func() flyteidlcore.TaskExecutionIdentifier); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(flyteidlcore.TaskExecutionIdentifier)
	}

	return r0
}

// TaskExecutionID_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type TaskExecutionID_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *TaskExecutionID_Expecter) GetID() *TaskExecutionID_GetID_Call {
	return &TaskExecutionID_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *TaskExecutionID_GetID_Call) Run(run func()) *TaskExecutionID_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionID_GetID_Call) Return(_a0 flyteidlcore.TaskExecutionIdentifier) *TaskExecutionID_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionID_GetID_Call) RunAndReturn(run func() flyteidlcore.TaskExecutionIdentifier) *TaskExecutionID_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueNodeID provides a mock function with given fields:
func (_m *TaskExecutionID) GetUniqueNodeID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUniqueNodeID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TaskExecutionID_GetUniqueNodeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueNodeID'
type TaskExecutionID_GetUniqueNodeID_Call struct {
	*mock.Call
}

// GetUniqueNodeID is a helper method to define mock.On call
func (_e *TaskExecutionID_Expecter) GetUniqueNodeID() *TaskExecutionID_GetUniqueNodeID_Call {
	return &TaskExecutionID_GetUniqueNodeID_Call{Call: _e.mock.On("GetUniqueNodeID")}
}

func (_c *TaskExecutionID_GetUniqueNodeID_Call) Run(run func()) *TaskExecutionID_GetUniqueNodeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionID_GetUniqueNodeID_Call) Return(_a0 string) *TaskExecutionID_GetUniqueNodeID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionID_GetUniqueNodeID_Call) RunAndReturn(run func() string) *TaskExecutionID_GetUniqueNodeID_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskExecutionID creates a new instance of TaskExecutionID. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskExecutionID(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskExecutionID {
	mock := &TaskExecutionID{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
