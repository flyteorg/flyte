// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"
)

// ResourceRegistrar is an autogenerated mock type for the ResourceRegistrar type
type ResourceRegistrar struct {
	mock.Mock
}

type ResourceRegistrar_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceRegistrar) EXPECT() *ResourceRegistrar_Expecter {
	return &ResourceRegistrar_Expecter{mock: &_m.Mock}
}

// RegisterResourceQuota provides a mock function with given fields: ctx, namespace, quota
func (_m *ResourceRegistrar) RegisterResourceQuota(ctx context.Context, namespace core.ResourceNamespace, quota int) error {
	ret := _m.Called(ctx, namespace, quota)

	if len(ret) == 0 {
		panic("no return value specified for RegisterResourceQuota")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.ResourceNamespace, int) error); ok {
		r0 = rf(ctx, namespace, quota)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceRegistrar_RegisterResourceQuota_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterResourceQuota'
type ResourceRegistrar_RegisterResourceQuota_Call struct {
	*mock.Call
}

// RegisterResourceQuota is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace core.ResourceNamespace
//   - quota int
func (_e *ResourceRegistrar_Expecter) RegisterResourceQuota(ctx interface{}, namespace interface{}, quota interface{}) *ResourceRegistrar_RegisterResourceQuota_Call {
	return &ResourceRegistrar_RegisterResourceQuota_Call{Call: _e.mock.On("RegisterResourceQuota", ctx, namespace, quota)}
}

func (_c *ResourceRegistrar_RegisterResourceQuota_Call) Run(run func(ctx context.Context, namespace core.ResourceNamespace, quota int)) *ResourceRegistrar_RegisterResourceQuota_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.ResourceNamespace), args[2].(int))
	})
	return _c
}

func (_c *ResourceRegistrar_RegisterResourceQuota_Call) Return(_a0 error) *ResourceRegistrar_RegisterResourceQuota_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourceRegistrar_RegisterResourceQuota_Call) RunAndReturn(run func(context.Context, core.ResourceNamespace, int) error) *ResourceRegistrar_RegisterResourceQuota_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceRegistrar creates a new instance of ResourceRegistrar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceRegistrar(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceRegistrar {
	mock := &ResourceRegistrar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
