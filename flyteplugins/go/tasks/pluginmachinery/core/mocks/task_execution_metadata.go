// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/core"
	corev1 "k8s.io/api/core/v1"

	flyteidlcore "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TaskExecutionMetadata is an autogenerated mock type for the TaskExecutionMetadata type
type TaskExecutionMetadata struct {
	mock.Mock
}

type TaskExecutionMetadata_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskExecutionMetadata) EXPECT() *TaskExecutionMetadata_Expecter {
	return &TaskExecutionMetadata_Expecter{mock: &_m.Mock}
}

// GetAnnotations provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetAnnotations() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAnnotations")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// TaskExecutionMetadata_GetAnnotations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnnotations'
type TaskExecutionMetadata_GetAnnotations_Call struct {
	*mock.Call
}

// GetAnnotations is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetAnnotations() *TaskExecutionMetadata_GetAnnotations_Call {
	return &TaskExecutionMetadata_GetAnnotations_Call{Call: _e.mock.On("GetAnnotations")}
}

func (_c *TaskExecutionMetadata_GetAnnotations_Call) Run(run func()) *TaskExecutionMetadata_GetAnnotations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetAnnotations_Call) Return(_a0 map[string]string) *TaskExecutionMetadata_GetAnnotations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetAnnotations_Call) RunAndReturn(run func() map[string]string) *TaskExecutionMetadata_GetAnnotations_Call {
	_c.Call.Return(run)
	return _c
}

// GetConsoleURL provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetConsoleURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConsoleURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TaskExecutionMetadata_GetConsoleURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConsoleURL'
type TaskExecutionMetadata_GetConsoleURL_Call struct {
	*mock.Call
}

// GetConsoleURL is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetConsoleURL() *TaskExecutionMetadata_GetConsoleURL_Call {
	return &TaskExecutionMetadata_GetConsoleURL_Call{Call: _e.mock.On("GetConsoleURL")}
}

func (_c *TaskExecutionMetadata_GetConsoleURL_Call) Run(run func()) *TaskExecutionMetadata_GetConsoleURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetConsoleURL_Call) Return(_a0 string) *TaskExecutionMetadata_GetConsoleURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetConsoleURL_Call) RunAndReturn(run func() string) *TaskExecutionMetadata_GetConsoleURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnvironmentVariables provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetEnvironmentVariables() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironmentVariables")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// TaskExecutionMetadata_GetEnvironmentVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnvironmentVariables'
type TaskExecutionMetadata_GetEnvironmentVariables_Call struct {
	*mock.Call
}

// GetEnvironmentVariables is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetEnvironmentVariables() *TaskExecutionMetadata_GetEnvironmentVariables_Call {
	return &TaskExecutionMetadata_GetEnvironmentVariables_Call{Call: _e.mock.On("GetEnvironmentVariables")}
}

func (_c *TaskExecutionMetadata_GetEnvironmentVariables_Call) Run(run func()) *TaskExecutionMetadata_GetEnvironmentVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetEnvironmentVariables_Call) Return(_a0 map[string]string) *TaskExecutionMetadata_GetEnvironmentVariables_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetEnvironmentVariables_Call) RunAndReturn(run func() map[string]string) *TaskExecutionMetadata_GetEnvironmentVariables_Call {
	_c.Call.Return(run)
	return _c
}

// GetInterruptibleFailureThreshold provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetInterruptibleFailureThreshold() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInterruptibleFailureThreshold")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// TaskExecutionMetadata_GetInterruptibleFailureThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInterruptibleFailureThreshold'
type TaskExecutionMetadata_GetInterruptibleFailureThreshold_Call struct {
	*mock.Call
}

// GetInterruptibleFailureThreshold is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetInterruptibleFailureThreshold() *TaskExecutionMetadata_GetInterruptibleFailureThreshold_Call {
	return &TaskExecutionMetadata_GetInterruptibleFailureThreshold_Call{Call: _e.mock.On("GetInterruptibleFailureThreshold")}
}

func (_c *TaskExecutionMetadata_GetInterruptibleFailureThreshold_Call) Run(run func()) *TaskExecutionMetadata_GetInterruptibleFailureThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetInterruptibleFailureThreshold_Call) Return(_a0 int32) *TaskExecutionMetadata_GetInterruptibleFailureThreshold_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetInterruptibleFailureThreshold_Call) RunAndReturn(run func() int32) *TaskExecutionMetadata_GetInterruptibleFailureThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// GetK8sServiceAccount provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetK8sServiceAccount() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetK8sServiceAccount")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TaskExecutionMetadata_GetK8sServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetK8sServiceAccount'
type TaskExecutionMetadata_GetK8sServiceAccount_Call struct {
	*mock.Call
}

// GetK8sServiceAccount is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetK8sServiceAccount() *TaskExecutionMetadata_GetK8sServiceAccount_Call {
	return &TaskExecutionMetadata_GetK8sServiceAccount_Call{Call: _e.mock.On("GetK8sServiceAccount")}
}

func (_c *TaskExecutionMetadata_GetK8sServiceAccount_Call) Run(run func()) *TaskExecutionMetadata_GetK8sServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetK8sServiceAccount_Call) Return(_a0 string) *TaskExecutionMetadata_GetK8sServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetK8sServiceAccount_Call) RunAndReturn(run func() string) *TaskExecutionMetadata_GetK8sServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetLabels provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetLabels() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLabels")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// TaskExecutionMetadata_GetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabels'
type TaskExecutionMetadata_GetLabels_Call struct {
	*mock.Call
}

// GetLabels is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetLabels() *TaskExecutionMetadata_GetLabels_Call {
	return &TaskExecutionMetadata_GetLabels_Call{Call: _e.mock.On("GetLabels")}
}

func (_c *TaskExecutionMetadata_GetLabels_Call) Run(run func()) *TaskExecutionMetadata_GetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetLabels_Call) Return(_a0 map[string]string) *TaskExecutionMetadata_GetLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetLabels_Call) RunAndReturn(run func() map[string]string) *TaskExecutionMetadata_GetLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaxAttempts provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetMaxAttempts() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMaxAttempts")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// TaskExecutionMetadata_GetMaxAttempts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxAttempts'
type TaskExecutionMetadata_GetMaxAttempts_Call struct {
	*mock.Call
}

// GetMaxAttempts is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetMaxAttempts() *TaskExecutionMetadata_GetMaxAttempts_Call {
	return &TaskExecutionMetadata_GetMaxAttempts_Call{Call: _e.mock.On("GetMaxAttempts")}
}

func (_c *TaskExecutionMetadata_GetMaxAttempts_Call) Run(run func()) *TaskExecutionMetadata_GetMaxAttempts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetMaxAttempts_Call) Return(_a0 uint32) *TaskExecutionMetadata_GetMaxAttempts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetMaxAttempts_Call) RunAndReturn(run func() uint32) *TaskExecutionMetadata_GetMaxAttempts_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetNamespace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TaskExecutionMetadata_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type TaskExecutionMetadata_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetNamespace() *TaskExecutionMetadata_GetNamespace_Call {
	return &TaskExecutionMetadata_GetNamespace_Call{Call: _e.mock.On("GetNamespace")}
}

func (_c *TaskExecutionMetadata_GetNamespace_Call) Run(run func()) *TaskExecutionMetadata_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetNamespace_Call) Return(_a0 string) *TaskExecutionMetadata_GetNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetNamespace_Call) RunAndReturn(run func() string) *TaskExecutionMetadata_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetOverrides provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetOverrides() core.TaskOverrides {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOverrides")
	}

	var r0 core.TaskOverrides
	if rf, ok := ret.Get(0).(func() core.TaskOverrides); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TaskOverrides)
		}
	}

	return r0
}

// TaskExecutionMetadata_GetOverrides_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOverrides'
type TaskExecutionMetadata_GetOverrides_Call struct {
	*mock.Call
}

// GetOverrides is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetOverrides() *TaskExecutionMetadata_GetOverrides_Call {
	return &TaskExecutionMetadata_GetOverrides_Call{Call: _e.mock.On("GetOverrides")}
}

func (_c *TaskExecutionMetadata_GetOverrides_Call) Run(run func()) *TaskExecutionMetadata_GetOverrides_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetOverrides_Call) Return(_a0 core.TaskOverrides) *TaskExecutionMetadata_GetOverrides_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetOverrides_Call) RunAndReturn(run func() core.TaskOverrides) *TaskExecutionMetadata_GetOverrides_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwnerID provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetOwnerID() types.NamespacedName {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOwnerID")
	}

	var r0 types.NamespacedName
	if rf, ok := ret.Get(0).(func() types.NamespacedName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.NamespacedName)
	}

	return r0
}

// TaskExecutionMetadata_GetOwnerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnerID'
type TaskExecutionMetadata_GetOwnerID_Call struct {
	*mock.Call
}

// GetOwnerID is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetOwnerID() *TaskExecutionMetadata_GetOwnerID_Call {
	return &TaskExecutionMetadata_GetOwnerID_Call{Call: _e.mock.On("GetOwnerID")}
}

func (_c *TaskExecutionMetadata_GetOwnerID_Call) Run(run func()) *TaskExecutionMetadata_GetOwnerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetOwnerID_Call) Return(_a0 types.NamespacedName) *TaskExecutionMetadata_GetOwnerID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetOwnerID_Call) RunAndReturn(run func() types.NamespacedName) *TaskExecutionMetadata_GetOwnerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwnerReference provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetOwnerReference() v1.OwnerReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOwnerReference")
	}

	var r0 v1.OwnerReference
	if rf, ok := ret.Get(0).(func() v1.OwnerReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.OwnerReference)
	}

	return r0
}

// TaskExecutionMetadata_GetOwnerReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnerReference'
type TaskExecutionMetadata_GetOwnerReference_Call struct {
	*mock.Call
}

// GetOwnerReference is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetOwnerReference() *TaskExecutionMetadata_GetOwnerReference_Call {
	return &TaskExecutionMetadata_GetOwnerReference_Call{Call: _e.mock.On("GetOwnerReference")}
}

func (_c *TaskExecutionMetadata_GetOwnerReference_Call) Run(run func()) *TaskExecutionMetadata_GetOwnerReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetOwnerReference_Call) Return(_a0 v1.OwnerReference) *TaskExecutionMetadata_GetOwnerReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetOwnerReference_Call) RunAndReturn(run func() v1.OwnerReference) *TaskExecutionMetadata_GetOwnerReference_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlatformResources provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetPlatformResources() *corev1.ResourceRequirements {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPlatformResources")
	}

	var r0 *corev1.ResourceRequirements
	if rf, ok := ret.Get(0).(func() *corev1.ResourceRequirements); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.ResourceRequirements)
		}
	}

	return r0
}

// TaskExecutionMetadata_GetPlatformResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlatformResources'
type TaskExecutionMetadata_GetPlatformResources_Call struct {
	*mock.Call
}

// GetPlatformResources is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetPlatformResources() *TaskExecutionMetadata_GetPlatformResources_Call {
	return &TaskExecutionMetadata_GetPlatformResources_Call{Call: _e.mock.On("GetPlatformResources")}
}

func (_c *TaskExecutionMetadata_GetPlatformResources_Call) Run(run func()) *TaskExecutionMetadata_GetPlatformResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetPlatformResources_Call) Return(_a0 *corev1.ResourceRequirements) *TaskExecutionMetadata_GetPlatformResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetPlatformResources_Call) RunAndReturn(run func() *corev1.ResourceRequirements) *TaskExecutionMetadata_GetPlatformResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecurityContext provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetSecurityContext() flyteidlcore.SecurityContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSecurityContext")
	}

	var r0 flyteidlcore.SecurityContext
	if rf, ok := ret.Get(0).(func() flyteidlcore.SecurityContext); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(flyteidlcore.SecurityContext)
	}

	return r0
}

// TaskExecutionMetadata_GetSecurityContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecurityContext'
type TaskExecutionMetadata_GetSecurityContext_Call struct {
	*mock.Call
}

// GetSecurityContext is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetSecurityContext() *TaskExecutionMetadata_GetSecurityContext_Call {
	return &TaskExecutionMetadata_GetSecurityContext_Call{Call: _e.mock.On("GetSecurityContext")}
}

func (_c *TaskExecutionMetadata_GetSecurityContext_Call) Run(run func()) *TaskExecutionMetadata_GetSecurityContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetSecurityContext_Call) Return(_a0 flyteidlcore.SecurityContext) *TaskExecutionMetadata_GetSecurityContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetSecurityContext_Call) RunAndReturn(run func() flyteidlcore.SecurityContext) *TaskExecutionMetadata_GetSecurityContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskExecutionID provides a mock function with given fields:
func (_m *TaskExecutionMetadata) GetTaskExecutionID() core.TaskExecutionID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskExecutionID")
	}

	var r0 core.TaskExecutionID
	if rf, ok := ret.Get(0).(func() core.TaskExecutionID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TaskExecutionID)
		}
	}

	return r0
}

// TaskExecutionMetadata_GetTaskExecutionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskExecutionID'
type TaskExecutionMetadata_GetTaskExecutionID_Call struct {
	*mock.Call
}

// GetTaskExecutionID is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) GetTaskExecutionID() *TaskExecutionMetadata_GetTaskExecutionID_Call {
	return &TaskExecutionMetadata_GetTaskExecutionID_Call{Call: _e.mock.On("GetTaskExecutionID")}
}

func (_c *TaskExecutionMetadata_GetTaskExecutionID_Call) Run(run func()) *TaskExecutionMetadata_GetTaskExecutionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_GetTaskExecutionID_Call) Return(_a0 core.TaskExecutionID) *TaskExecutionMetadata_GetTaskExecutionID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_GetTaskExecutionID_Call) RunAndReturn(run func() core.TaskExecutionID) *TaskExecutionMetadata_GetTaskExecutionID_Call {
	_c.Call.Return(run)
	return _c
}

// IsInterruptible provides a mock function with given fields:
func (_m *TaskExecutionMetadata) IsInterruptible() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInterruptible")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TaskExecutionMetadata_IsInterruptible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInterruptible'
type TaskExecutionMetadata_IsInterruptible_Call struct {
	*mock.Call
}

// IsInterruptible is a helper method to define mock.On call
func (_e *TaskExecutionMetadata_Expecter) IsInterruptible() *TaskExecutionMetadata_IsInterruptible_Call {
	return &TaskExecutionMetadata_IsInterruptible_Call{Call: _e.mock.On("IsInterruptible")}
}

func (_c *TaskExecutionMetadata_IsInterruptible_Call) Run(run func()) *TaskExecutionMetadata_IsInterruptible_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionMetadata_IsInterruptible_Call) Return(_a0 bool) *TaskExecutionMetadata_IsInterruptible_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionMetadata_IsInterruptible_Call) RunAndReturn(run func() bool) *TaskExecutionMetadata_IsInterruptible_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskExecutionMetadata creates a new instance of TaskExecutionMetadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskExecutionMetadata(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskExecutionMetadata {
	mock := &TaskExecutionMetadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
