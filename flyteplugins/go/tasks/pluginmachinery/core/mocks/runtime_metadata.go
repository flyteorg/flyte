// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"
)

// RuntimeMetadata is an autogenerated mock type for the RuntimeMetadata type
type RuntimeMetadata struct {
	mock.Mock
}

type RuntimeMetadata_GetFlavor struct {
	*mock.Call
}

func (_m RuntimeMetadata_GetFlavor) Return(_a0 string) *RuntimeMetadata_GetFlavor {
	return &RuntimeMetadata_GetFlavor{Call: _m.Call.Return(_a0)}
}

func (_m *RuntimeMetadata) OnGetFlavor() *RuntimeMetadata_GetFlavor {
	c_call := _m.On("GetFlavor")
	return &RuntimeMetadata_GetFlavor{Call: c_call}
}

func (_m *RuntimeMetadata) OnGetFlavorMatch(matchers ...interface{}) *RuntimeMetadata_GetFlavor {
	c_call := _m.On("GetFlavor", matchers...)
	return &RuntimeMetadata_GetFlavor{Call: c_call}
}

// GetFlavor provides a mock function with given fields:
func (_m *RuntimeMetadata) GetFlavor() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type RuntimeMetadata_GetType struct {
	*mock.Call
}

func (_m RuntimeMetadata_GetType) Return(_a0 core.RuntimeMetadata_RuntimeType) *RuntimeMetadata_GetType {
	return &RuntimeMetadata_GetType{Call: _m.Call.Return(_a0)}
}

func (_m *RuntimeMetadata) OnGetType() *RuntimeMetadata_GetType {
	c_call := _m.On("GetType")
	return &RuntimeMetadata_GetType{Call: c_call}
}

func (_m *RuntimeMetadata) OnGetTypeMatch(matchers ...interface{}) *RuntimeMetadata_GetType {
	c_call := _m.On("GetType", matchers...)
	return &RuntimeMetadata_GetType{Call: c_call}
}

// GetType provides a mock function with given fields:
func (_m *RuntimeMetadata) GetType() core.RuntimeMetadata_RuntimeType {
	ret := _m.Called()

	var r0 core.RuntimeMetadata_RuntimeType
	if rf, ok := ret.Get(0).(func() core.RuntimeMetadata_RuntimeType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.RuntimeMetadata_RuntimeType)
	}

	return r0
}

type RuntimeMetadata_GetVersion struct {
	*mock.Call
}

func (_m RuntimeMetadata_GetVersion) Return(_a0 string) *RuntimeMetadata_GetVersion {
	return &RuntimeMetadata_GetVersion{Call: _m.Call.Return(_a0)}
}

func (_m *RuntimeMetadata) OnGetVersion() *RuntimeMetadata_GetVersion {
	c_call := _m.On("GetVersion")
	return &RuntimeMetadata_GetVersion{Call: c_call}
}

func (_m *RuntimeMetadata) OnGetVersionMatch(matchers ...interface{}) *RuntimeMetadata_GetVersion {
	c_call := _m.On("GetVersion", matchers...)
	return &RuntimeMetadata_GetVersion{Call: c_call}
}

// GetVersion provides a mock function with given fields:
func (_m *RuntimeMetadata) GetVersion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
