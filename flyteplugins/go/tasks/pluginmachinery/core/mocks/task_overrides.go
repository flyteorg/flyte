// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	flyteidlcore "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// TaskOverrides is an autogenerated mock type for the TaskOverrides type
type TaskOverrides struct {
	mock.Mock
}

type TaskOverrides_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskOverrides) EXPECT() *TaskOverrides_Expecter {
	return &TaskOverrides_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function with given fields:
func (_m *TaskOverrides) GetConfig() *v1.ConfigMap {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *v1.ConfigMap
	if rf, ok := ret.Get(0).(func() *v1.ConfigMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ConfigMap)
		}
	}

	return r0
}

// TaskOverrides_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type TaskOverrides_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *TaskOverrides_Expecter) GetConfig() *TaskOverrides_GetConfig_Call {
	return &TaskOverrides_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *TaskOverrides_GetConfig_Call) Run(run func()) *TaskOverrides_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskOverrides_GetConfig_Call) Return(_a0 *v1.ConfigMap) *TaskOverrides_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskOverrides_GetConfig_Call) RunAndReturn(run func() *v1.ConfigMap) *TaskOverrides_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetContainerImage provides a mock function with given fields:
func (_m *TaskOverrides) GetContainerImage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContainerImage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TaskOverrides_GetContainerImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContainerImage'
type TaskOverrides_GetContainerImage_Call struct {
	*mock.Call
}

// GetContainerImage is a helper method to define mock.On call
func (_e *TaskOverrides_Expecter) GetContainerImage() *TaskOverrides_GetContainerImage_Call {
	return &TaskOverrides_GetContainerImage_Call{Call: _e.mock.On("GetContainerImage")}
}

func (_c *TaskOverrides_GetContainerImage_Call) Run(run func()) *TaskOverrides_GetContainerImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskOverrides_GetContainerImage_Call) Return(_a0 string) *TaskOverrides_GetContainerImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskOverrides_GetContainerImage_Call) RunAndReturn(run func() string) *TaskOverrides_GetContainerImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtendedResources provides a mock function with given fields:
func (_m *TaskOverrides) GetExtendedResources() *flyteidlcore.ExtendedResources {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExtendedResources")
	}

	var r0 *flyteidlcore.ExtendedResources
	if rf, ok := ret.Get(0).(func() *flyteidlcore.ExtendedResources); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flyteidlcore.ExtendedResources)
		}
	}

	return r0
}

// TaskOverrides_GetExtendedResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtendedResources'
type TaskOverrides_GetExtendedResources_Call struct {
	*mock.Call
}

// GetExtendedResources is a helper method to define mock.On call
func (_e *TaskOverrides_Expecter) GetExtendedResources() *TaskOverrides_GetExtendedResources_Call {
	return &TaskOverrides_GetExtendedResources_Call{Call: _e.mock.On("GetExtendedResources")}
}

func (_c *TaskOverrides_GetExtendedResources_Call) Run(run func()) *TaskOverrides_GetExtendedResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskOverrides_GetExtendedResources_Call) Return(_a0 *flyteidlcore.ExtendedResources) *TaskOverrides_GetExtendedResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskOverrides_GetExtendedResources_Call) RunAndReturn(run func() *flyteidlcore.ExtendedResources) *TaskOverrides_GetExtendedResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetPodTemplate provides a mock function with given fields:
func (_m *TaskOverrides) GetPodTemplate() *flyteidlcore.K8SPod {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPodTemplate")
	}

	var r0 *flyteidlcore.K8SPod
	if rf, ok := ret.Get(0).(func() *flyteidlcore.K8SPod); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flyteidlcore.K8SPod)
		}
	}

	return r0
}

// TaskOverrides_GetPodTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPodTemplate'
type TaskOverrides_GetPodTemplate_Call struct {
	*mock.Call
}

// GetPodTemplate is a helper method to define mock.On call
func (_e *TaskOverrides_Expecter) GetPodTemplate() *TaskOverrides_GetPodTemplate_Call {
	return &TaskOverrides_GetPodTemplate_Call{Call: _e.mock.On("GetPodTemplate")}
}

func (_c *TaskOverrides_GetPodTemplate_Call) Run(run func()) *TaskOverrides_GetPodTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskOverrides_GetPodTemplate_Call) Return(_a0 *flyteidlcore.K8SPod) *TaskOverrides_GetPodTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskOverrides_GetPodTemplate_Call) RunAndReturn(run func() *flyteidlcore.K8SPod) *TaskOverrides_GetPodTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// GetResources provides a mock function with given fields:
func (_m *TaskOverrides) GetResources() *v1.ResourceRequirements {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 *v1.ResourceRequirements
	if rf, ok := ret.Get(0).(func() *v1.ResourceRequirements); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ResourceRequirements)
		}
	}

	return r0
}

// TaskOverrides_GetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResources'
type TaskOverrides_GetResources_Call struct {
	*mock.Call
}

// GetResources is a helper method to define mock.On call
func (_e *TaskOverrides_Expecter) GetResources() *TaskOverrides_GetResources_Call {
	return &TaskOverrides_GetResources_Call{Call: _e.mock.On("GetResources")}
}

func (_c *TaskOverrides_GetResources_Call) Run(run func()) *TaskOverrides_GetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskOverrides_GetResources_Call) Return(_a0 *v1.ResourceRequirements) *TaskOverrides_GetResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskOverrides_GetResources_Call) RunAndReturn(run func() *v1.ResourceRequirements) *TaskOverrides_GetResources_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskOverrides creates a new instance of TaskOverrides. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskOverrides(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskOverrides {
	mock := &TaskOverrides{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
