// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

type Plugin_Expecter struct {
	mock *mock.Mock
}

func (_m *Plugin) EXPECT() *Plugin_Expecter {
	return &Plugin_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with given fields: ctx, tCtx
func (_m *Plugin) Abort(ctx context.Context, tCtx core.TaskExecutionContext) error {
	ret := _m.Called(ctx, tCtx)

	if len(ret) == 0 {
		panic("no return value specified for Abort")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.TaskExecutionContext) error); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Plugin_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type Plugin_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
//   - ctx context.Context
//   - tCtx core.TaskExecutionContext
func (_e *Plugin_Expecter) Abort(ctx interface{}, tCtx interface{}) *Plugin_Abort_Call {
	return &Plugin_Abort_Call{Call: _e.mock.On("Abort", ctx, tCtx)}
}

func (_c *Plugin_Abort_Call) Run(run func(ctx context.Context, tCtx core.TaskExecutionContext)) *Plugin_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.TaskExecutionContext))
	})
	return _c
}

func (_c *Plugin_Abort_Call) Return(_a0 error) *Plugin_Abort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_Abort_Call) RunAndReturn(run func(context.Context, core.TaskExecutionContext) error) *Plugin_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// Finalize provides a mock function with given fields: ctx, tCtx
func (_m *Plugin) Finalize(ctx context.Context, tCtx core.TaskExecutionContext) error {
	ret := _m.Called(ctx, tCtx)

	if len(ret) == 0 {
		panic("no return value specified for Finalize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.TaskExecutionContext) error); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Plugin_Finalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finalize'
type Plugin_Finalize_Call struct {
	*mock.Call
}

// Finalize is a helper method to define mock.On call
//   - ctx context.Context
//   - tCtx core.TaskExecutionContext
func (_e *Plugin_Expecter) Finalize(ctx interface{}, tCtx interface{}) *Plugin_Finalize_Call {
	return &Plugin_Finalize_Call{Call: _e.mock.On("Finalize", ctx, tCtx)}
}

func (_c *Plugin_Finalize_Call) Run(run func(ctx context.Context, tCtx core.TaskExecutionContext)) *Plugin_Finalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.TaskExecutionContext))
	})
	return _c
}

func (_c *Plugin_Finalize_Call) Return(_a0 error) *Plugin_Finalize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_Finalize_Call) RunAndReturn(run func(context.Context, core.TaskExecutionContext) error) *Plugin_Finalize_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with no fields
func (_m *Plugin) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Plugin_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type Plugin_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *Plugin_Expecter) GetID() *Plugin_GetID_Call {
	return &Plugin_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *Plugin_GetID_Call) Run(run func()) *Plugin_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Plugin_GetID_Call) Return(_a0 string) *Plugin_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_GetID_Call) RunAndReturn(run func() string) *Plugin_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProperties provides a mock function with no fields
func (_m *Plugin) GetProperties() core.PluginProperties {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProperties")
	}

	var r0 core.PluginProperties
	if rf, ok := ret.Get(0).(func() core.PluginProperties); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.PluginProperties)
	}

	return r0
}

// Plugin_GetProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProperties'
type Plugin_GetProperties_Call struct {
	*mock.Call
}

// GetProperties is a helper method to define mock.On call
func (_e *Plugin_Expecter) GetProperties() *Plugin_GetProperties_Call {
	return &Plugin_GetProperties_Call{Call: _e.mock.On("GetProperties")}
}

func (_c *Plugin_GetProperties_Call) Run(run func()) *Plugin_GetProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Plugin_GetProperties_Call) Return(_a0 core.PluginProperties) *Plugin_GetProperties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Plugin_GetProperties_Call) RunAndReturn(run func() core.PluginProperties) *Plugin_GetProperties_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: ctx, tCtx
func (_m *Plugin) Handle(ctx context.Context, tCtx core.TaskExecutionContext) (core.Transition, error) {
	ret := _m.Called(ctx, tCtx)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 core.Transition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.TaskExecutionContext) (core.Transition, error)); ok {
		return rf(ctx, tCtx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.TaskExecutionContext) core.Transition); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Get(0).(core.Transition)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.TaskExecutionContext) error); ok {
		r1 = rf(ctx, tCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Plugin_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type Plugin_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - tCtx core.TaskExecutionContext
func (_e *Plugin_Expecter) Handle(ctx interface{}, tCtx interface{}) *Plugin_Handle_Call {
	return &Plugin_Handle_Call{Call: _e.mock.On("Handle", ctx, tCtx)}
}

func (_c *Plugin_Handle_Call) Run(run func(ctx context.Context, tCtx core.TaskExecutionContext)) *Plugin_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.TaskExecutionContext))
	})
	return _c
}

func (_c *Plugin_Handle_Call) Return(_a0 core.Transition, _a1 error) *Plugin_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Plugin_Handle_Call) RunAndReturn(run func(context.Context, core.TaskExecutionContext) (core.Transition, error)) *Plugin_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewPlugin creates a new instance of Plugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *Plugin {
	mock := &Plugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
