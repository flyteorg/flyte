// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PluginStateReader is an autogenerated mock type for the PluginStateReader type
type PluginStateReader struct {
	mock.Mock
}

type PluginStateReader_Expecter struct {
	mock *mock.Mock
}

func (_m *PluginStateReader) EXPECT() *PluginStateReader_Expecter {
	return &PluginStateReader_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: t
func (_m *PluginStateReader) Get(t interface{}) (uint8, error) {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (uint8, error)); ok {
		return rf(t)
	}
	if rf, ok := ret.Get(0).(func(interface{}) uint8); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PluginStateReader_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PluginStateReader_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - t interface{}
func (_e *PluginStateReader_Expecter) Get(t interface{}) *PluginStateReader_Get_Call {
	return &PluginStateReader_Get_Call{Call: _e.mock.On("Get", t)}
}

func (_c *PluginStateReader_Get_Call) Run(run func(t interface{})) *PluginStateReader_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *PluginStateReader_Get_Call) Return(stateVersion uint8, err error) *PluginStateReader_Get_Call {
	_c.Call.Return(stateVersion, err)
	return _c
}

func (_c *PluginStateReader_Get_Call) RunAndReturn(run func(interface{}) (uint8, error)) *PluginStateReader_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateVersion provides a mock function with no fields
func (_m *PluginStateReader) GetStateVersion() uint8 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStateVersion")
	}

	var r0 uint8
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	return r0
}

// PluginStateReader_GetStateVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateVersion'
type PluginStateReader_GetStateVersion_Call struct {
	*mock.Call
}

// GetStateVersion is a helper method to define mock.On call
func (_e *PluginStateReader_Expecter) GetStateVersion() *PluginStateReader_GetStateVersion_Call {
	return &PluginStateReader_GetStateVersion_Call{Call: _e.mock.On("GetStateVersion")}
}

func (_c *PluginStateReader_GetStateVersion_Call) Run(run func()) *PluginStateReader_GetStateVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PluginStateReader_GetStateVersion_Call) Return(_a0 uint8) *PluginStateReader_GetStateVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PluginStateReader_GetStateVersion_Call) RunAndReturn(run func() uint8) *PluginStateReader_GetStateVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewPluginStateReader creates a new instance of PluginStateReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPluginStateReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *PluginStateReader {
	mock := &PluginStateReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
