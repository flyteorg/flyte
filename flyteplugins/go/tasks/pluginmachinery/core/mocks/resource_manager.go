// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"
)

// ResourceManager is an autogenerated mock type for the ResourceManager type
type ResourceManager struct {
	mock.Mock
}

type ResourceManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceManager) EXPECT() *ResourceManager_Expecter {
	return &ResourceManager_Expecter{mock: &_m.Mock}
}

// AllocateResource provides a mock function with given fields: ctx, namespace, allocationToken, constraintsSpec
func (_m *ResourceManager) AllocateResource(ctx context.Context, namespace core.ResourceNamespace, allocationToken string, constraintsSpec core.ResourceConstraintsSpec) (core.AllocationStatus, error) {
	ret := _m.Called(ctx, namespace, allocationToken, constraintsSpec)

	if len(ret) == 0 {
		panic("no return value specified for AllocateResource")
	}

	var r0 core.AllocationStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.ResourceNamespace, string, core.ResourceConstraintsSpec) (core.AllocationStatus, error)); ok {
		return rf(ctx, namespace, allocationToken, constraintsSpec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.ResourceNamespace, string, core.ResourceConstraintsSpec) core.AllocationStatus); ok {
		r0 = rf(ctx, namespace, allocationToken, constraintsSpec)
	} else {
		r0 = ret.Get(0).(core.AllocationStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.ResourceNamespace, string, core.ResourceConstraintsSpec) error); ok {
		r1 = rf(ctx, namespace, allocationToken, constraintsSpec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceManager_AllocateResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllocateResource'
type ResourceManager_AllocateResource_Call struct {
	*mock.Call
}

// AllocateResource is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace core.ResourceNamespace
//   - allocationToken string
//   - constraintsSpec core.ResourceConstraintsSpec
func (_e *ResourceManager_Expecter) AllocateResource(ctx interface{}, namespace interface{}, allocationToken interface{}, constraintsSpec interface{}) *ResourceManager_AllocateResource_Call {
	return &ResourceManager_AllocateResource_Call{Call: _e.mock.On("AllocateResource", ctx, namespace, allocationToken, constraintsSpec)}
}

func (_c *ResourceManager_AllocateResource_Call) Run(run func(ctx context.Context, namespace core.ResourceNamespace, allocationToken string, constraintsSpec core.ResourceConstraintsSpec)) *ResourceManager_AllocateResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.ResourceNamespace), args[2].(string), args[3].(core.ResourceConstraintsSpec))
	})
	return _c
}

func (_c *ResourceManager_AllocateResource_Call) Return(_a0 core.AllocationStatus, _a1 error) *ResourceManager_AllocateResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceManager_AllocateResource_Call) RunAndReturn(run func(context.Context, core.ResourceNamespace, string, core.ResourceConstraintsSpec) (core.AllocationStatus, error)) *ResourceManager_AllocateResource_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *ResourceManager) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ResourceManager_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type ResourceManager_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *ResourceManager_Expecter) GetID() *ResourceManager_GetID_Call {
	return &ResourceManager_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *ResourceManager_GetID_Call) Run(run func()) *ResourceManager_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResourceManager_GetID_Call) Return(_a0 string) *ResourceManager_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourceManager_GetID_Call) RunAndReturn(run func() string) *ResourceManager_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseResource provides a mock function with given fields: ctx, namespace, allocationToken
func (_m *ResourceManager) ReleaseResource(ctx context.Context, namespace core.ResourceNamespace, allocationToken string) error {
	ret := _m.Called(ctx, namespace, allocationToken)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.ResourceNamespace, string) error); ok {
		r0 = rf(ctx, namespace, allocationToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceManager_ReleaseResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseResource'
type ResourceManager_ReleaseResource_Call struct {
	*mock.Call
}

// ReleaseResource is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace core.ResourceNamespace
//   - allocationToken string
func (_e *ResourceManager_Expecter) ReleaseResource(ctx interface{}, namespace interface{}, allocationToken interface{}) *ResourceManager_ReleaseResource_Call {
	return &ResourceManager_ReleaseResource_Call{Call: _e.mock.On("ReleaseResource", ctx, namespace, allocationToken)}
}

func (_c *ResourceManager_ReleaseResource_Call) Run(run func(ctx context.Context, namespace core.ResourceNamespace, allocationToken string)) *ResourceManager_ReleaseResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.ResourceNamespace), args[2].(string))
	})
	return _c
}

func (_c *ResourceManager_ReleaseResource_Call) Return(_a0 error) *ResourceManager_ReleaseResource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourceManager_ReleaseResource_Call) RunAndReturn(run func(context.Context, core.ResourceNamespace, string) error) *ResourceManager_ReleaseResource_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceManager creates a new instance of ResourceManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceManager {
	mock := &ResourceManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
