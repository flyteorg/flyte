// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	types "k8s.io/apimachinery/pkg/types"
)

// EnqueueOwner is an autogenerated mock type for the EnqueueOwner type
type EnqueueOwner struct {
	mock.Mock
}

type EnqueueOwner_Expecter struct {
	mock *mock.Mock
}

func (_m *EnqueueOwner) EXPECT() *EnqueueOwner_Expecter {
	return &EnqueueOwner_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: id
func (_m *EnqueueOwner) Execute(id types.NamespacedName) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.NamespacedName) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnqueueOwner_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type EnqueueOwner_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - id types.NamespacedName
func (_e *EnqueueOwner_Expecter) Execute(id interface{}) *EnqueueOwner_Execute_Call {
	return &EnqueueOwner_Execute_Call{Call: _e.mock.On("Execute", id)}
}

func (_c *EnqueueOwner_Execute_Call) Run(run func(id types.NamespacedName)) *EnqueueOwner_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.NamespacedName))
	})
	return _c
}

func (_c *EnqueueOwner_Execute_Call) Return(_a0 error) *EnqueueOwner_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EnqueueOwner_Execute_Call) RunAndReturn(run func(types.NamespacedName) error) *EnqueueOwner_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewEnqueueOwner creates a new instance of EnqueueOwner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnqueueOwner(t interface {
	mock.TestingT
	Cleanup(func())
}) *EnqueueOwner {
	mock := &EnqueueOwner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
