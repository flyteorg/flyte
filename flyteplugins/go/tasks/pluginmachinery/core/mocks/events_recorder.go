// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"
)

// EventsRecorder is an autogenerated mock type for the EventsRecorder type
type EventsRecorder struct {
	mock.Mock
}

type EventsRecorder_Expecter struct {
	mock *mock.Mock
}

func (_m *EventsRecorder) EXPECT() *EventsRecorder_Expecter {
	return &EventsRecorder_Expecter{mock: &_m.Mock}
}

// RecordRaw provides a mock function with given fields: ctx, ev
func (_m *EventsRecorder) RecordRaw(ctx context.Context, ev core.PhaseInfo) error {
	ret := _m.Called(ctx, ev)

	if len(ret) == 0 {
		panic("no return value specified for RecordRaw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.PhaseInfo) error); ok {
		r0 = rf(ctx, ev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventsRecorder_RecordRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordRaw'
type EventsRecorder_RecordRaw_Call struct {
	*mock.Call
}

// RecordRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - ev core.PhaseInfo
func (_e *EventsRecorder_Expecter) RecordRaw(ctx interface{}, ev interface{}) *EventsRecorder_RecordRaw_Call {
	return &EventsRecorder_RecordRaw_Call{Call: _e.mock.On("RecordRaw", ctx, ev)}
}

func (_c *EventsRecorder_RecordRaw_Call) Run(run func(ctx context.Context, ev core.PhaseInfo)) *EventsRecorder_RecordRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(core.PhaseInfo))
	})
	return _c
}

func (_c *EventsRecorder_RecordRaw_Call) Return(_a0 error) *EventsRecorder_RecordRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventsRecorder_RecordRaw_Call) RunAndReturn(run func(context.Context, core.PhaseInfo) error) *EventsRecorder_RecordRaw_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventsRecorder creates a new instance of EventsRecorder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventsRecorder(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventsRecorder {
	mock := &EventsRecorder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
