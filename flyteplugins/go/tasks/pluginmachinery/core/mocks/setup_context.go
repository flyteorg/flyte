// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"

	promutils "github.com/flyteorg/flyte/flytestdlib/promutils"
)

// SetupContext is an autogenerated mock type for the SetupContext type
type SetupContext struct {
	mock.Mock
}

type SetupContext_Expecter struct {
	mock *mock.Mock
}

func (_m *SetupContext) EXPECT() *SetupContext_Expecter {
	return &SetupContext_Expecter{mock: &_m.Mock}
}

// EnqueueOwner provides a mock function with no fields
func (_m *SetupContext) EnqueueOwner() core.EnqueueOwner {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnqueueOwner")
	}

	var r0 core.EnqueueOwner
	if rf, ok := ret.Get(0).(func() core.EnqueueOwner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.EnqueueOwner)
		}
	}

	return r0
}

// SetupContext_EnqueueOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueOwner'
type SetupContext_EnqueueOwner_Call struct {
	*mock.Call
}

// EnqueueOwner is a helper method to define mock.On call
func (_e *SetupContext_Expecter) EnqueueOwner() *SetupContext_EnqueueOwner_Call {
	return &SetupContext_EnqueueOwner_Call{Call: _e.mock.On("EnqueueOwner")}
}

func (_c *SetupContext_EnqueueOwner_Call) Run(run func()) *SetupContext_EnqueueOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SetupContext_EnqueueOwner_Call) Return(_a0 core.EnqueueOwner) *SetupContext_EnqueueOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SetupContext_EnqueueOwner_Call) RunAndReturn(run func() core.EnqueueOwner) *SetupContext_EnqueueOwner_Call {
	_c.Call.Return(run)
	return _c
}

// KubeClient provides a mock function with no fields
func (_m *SetupContext) KubeClient() core.KubeClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KubeClient")
	}

	var r0 core.KubeClient
	if rf, ok := ret.Get(0).(func() core.KubeClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.KubeClient)
		}
	}

	return r0
}

// SetupContext_KubeClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KubeClient'
type SetupContext_KubeClient_Call struct {
	*mock.Call
}

// KubeClient is a helper method to define mock.On call
func (_e *SetupContext_Expecter) KubeClient() *SetupContext_KubeClient_Call {
	return &SetupContext_KubeClient_Call{Call: _e.mock.On("KubeClient")}
}

func (_c *SetupContext_KubeClient_Call) Run(run func()) *SetupContext_KubeClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SetupContext_KubeClient_Call) Return(_a0 core.KubeClient) *SetupContext_KubeClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SetupContext_KubeClient_Call) RunAndReturn(run func() core.KubeClient) *SetupContext_KubeClient_Call {
	_c.Call.Return(run)
	return _c
}

// MetricsScope provides a mock function with no fields
func (_m *SetupContext) MetricsScope() promutils.Scope {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MetricsScope")
	}

	var r0 promutils.Scope
	if rf, ok := ret.Get(0).(func() promutils.Scope); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(promutils.Scope)
		}
	}

	return r0
}

// SetupContext_MetricsScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetricsScope'
type SetupContext_MetricsScope_Call struct {
	*mock.Call
}

// MetricsScope is a helper method to define mock.On call
func (_e *SetupContext_Expecter) MetricsScope() *SetupContext_MetricsScope_Call {
	return &SetupContext_MetricsScope_Call{Call: _e.mock.On("MetricsScope")}
}

func (_c *SetupContext_MetricsScope_Call) Run(run func()) *SetupContext_MetricsScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SetupContext_MetricsScope_Call) Return(_a0 promutils.Scope) *SetupContext_MetricsScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SetupContext_MetricsScope_Call) RunAndReturn(run func() promutils.Scope) *SetupContext_MetricsScope_Call {
	_c.Call.Return(run)
	return _c
}

// OwnerKind provides a mock function with no fields
func (_m *SetupContext) OwnerKind() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OwnerKind")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetupContext_OwnerKind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OwnerKind'
type SetupContext_OwnerKind_Call struct {
	*mock.Call
}

// OwnerKind is a helper method to define mock.On call
func (_e *SetupContext_Expecter) OwnerKind() *SetupContext_OwnerKind_Call {
	return &SetupContext_OwnerKind_Call{Call: _e.mock.On("OwnerKind")}
}

func (_c *SetupContext_OwnerKind_Call) Run(run func()) *SetupContext_OwnerKind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SetupContext_OwnerKind_Call) Return(_a0 string) *SetupContext_OwnerKind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SetupContext_OwnerKind_Call) RunAndReturn(run func() string) *SetupContext_OwnerKind_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceRegistrar provides a mock function with no fields
func (_m *SetupContext) ResourceRegistrar() core.ResourceRegistrar {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResourceRegistrar")
	}

	var r0 core.ResourceRegistrar
	if rf, ok := ret.Get(0).(func() core.ResourceRegistrar); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.ResourceRegistrar)
		}
	}

	return r0
}

// SetupContext_ResourceRegistrar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceRegistrar'
type SetupContext_ResourceRegistrar_Call struct {
	*mock.Call
}

// ResourceRegistrar is a helper method to define mock.On call
func (_e *SetupContext_Expecter) ResourceRegistrar() *SetupContext_ResourceRegistrar_Call {
	return &SetupContext_ResourceRegistrar_Call{Call: _e.mock.On("ResourceRegistrar")}
}

func (_c *SetupContext_ResourceRegistrar_Call) Run(run func()) *SetupContext_ResourceRegistrar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SetupContext_ResourceRegistrar_Call) Return(_a0 core.ResourceRegistrar) *SetupContext_ResourceRegistrar_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SetupContext_ResourceRegistrar_Call) RunAndReturn(run func() core.ResourceRegistrar) *SetupContext_ResourceRegistrar_Call {
	_c.Call.Return(run)
	return _c
}

// SecretManager provides a mock function with no fields
func (_m *SetupContext) SecretManager() core.SecretManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SecretManager")
	}

	var r0 core.SecretManager
	if rf, ok := ret.Get(0).(func() core.SecretManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.SecretManager)
		}
	}

	return r0
}

// SetupContext_SecretManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretManager'
type SetupContext_SecretManager_Call struct {
	*mock.Call
}

// SecretManager is a helper method to define mock.On call
func (_e *SetupContext_Expecter) SecretManager() *SetupContext_SecretManager_Call {
	return &SetupContext_SecretManager_Call{Call: _e.mock.On("SecretManager")}
}

func (_c *SetupContext_SecretManager_Call) Run(run func()) *SetupContext_SecretManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SetupContext_SecretManager_Call) Return(_a0 core.SecretManager) *SetupContext_SecretManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SetupContext_SecretManager_Call) RunAndReturn(run func() core.SecretManager) *SetupContext_SecretManager_Call {
	_c.Call.Return(run)
	return _c
}

// NewSetupContext creates a new instance of SetupContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSetupContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *SetupContext {
	mock := &SetupContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
