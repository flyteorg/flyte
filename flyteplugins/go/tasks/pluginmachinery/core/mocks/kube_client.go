// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	cache "sigs.k8s.io/controller-runtime/pkg/cache"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	mock "github.com/stretchr/testify/mock"
)

// KubeClient is an autogenerated mock type for the KubeClient type
type KubeClient struct {
	mock.Mock
}

type KubeClient_Expecter struct {
	mock *mock.Mock
}

func (_m *KubeClient) EXPECT() *KubeClient_Expecter {
	return &KubeClient_Expecter{mock: &_m.Mock}
}

// GetCache provides a mock function with given fields:
func (_m *KubeClient) GetCache() cache.Cache {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCache")
	}

	var r0 cache.Cache
	if rf, ok := ret.Get(0).(func() cache.Cache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Cache)
		}
	}

	return r0
}

// KubeClient_GetCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCache'
type KubeClient_GetCache_Call struct {
	*mock.Call
}

// GetCache is a helper method to define mock.On call
func (_e *KubeClient_Expecter) GetCache() *KubeClient_GetCache_Call {
	return &KubeClient_GetCache_Call{Call: _e.mock.On("GetCache")}
}

func (_c *KubeClient_GetCache_Call) Run(run func()) *KubeClient_GetCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeClient_GetCache_Call) Return(_a0 cache.Cache) *KubeClient_GetCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeClient_GetCache_Call) RunAndReturn(run func() cache.Cache) *KubeClient_GetCache_Call {
	_c.Call.Return(run)
	return _c
}

// GetClient provides a mock function with given fields:
func (_m *KubeClient) GetClient() client.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 client.Client
	if rf, ok := ret.Get(0).(func() client.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	return r0
}

// KubeClient_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type KubeClient_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
func (_e *KubeClient_Expecter) GetClient() *KubeClient_GetClient_Call {
	return &KubeClient_GetClient_Call{Call: _e.mock.On("GetClient")}
}

func (_c *KubeClient_GetClient_Call) Run(run func()) *KubeClient_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeClient_GetClient_Call) Return(_a0 client.Client) *KubeClient_GetClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeClient_GetClient_Call) RunAndReturn(run func() client.Client) *KubeClient_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewKubeClient creates a new instance of KubeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKubeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *KubeClient {
	mock := &KubeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
