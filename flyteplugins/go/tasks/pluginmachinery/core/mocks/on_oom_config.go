// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// OnOOMConfig is an autogenerated mock type for the OnOOMConfig type
type OnOOMConfig struct {
	mock.Mock
}

type OnOOMConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *OnOOMConfig) EXPECT() *OnOOMConfig_Expecter {
	return &OnOOMConfig_Expecter{mock: &_m.Mock}
}

// GetExponent provides a mock function with given fields:
func (_m *OnOOMConfig) GetExponent() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExponent")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// OnOOMConfig_GetExponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExponent'
type OnOOMConfig_GetExponent_Call struct {
	*mock.Call
}

// GetExponent is a helper method to define mock.On call
func (_e *OnOOMConfig_Expecter) GetExponent() *OnOOMConfig_GetExponent_Call {
	return &OnOOMConfig_GetExponent_Call{Call: _e.mock.On("GetExponent")}
}

func (_c *OnOOMConfig_GetExponent_Call) Run(run func()) *OnOOMConfig_GetExponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OnOOMConfig_GetExponent_Call) Return(_a0 uint32) *OnOOMConfig_GetExponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OnOOMConfig_GetExponent_Call) RunAndReturn(run func() uint32) *OnOOMConfig_GetExponent_Call {
	_c.Call.Return(run)
	return _c
}

// GetFactor provides a mock function with given fields:
func (_m *OnOOMConfig) GetFactor() float32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFactor")
	}

	var r0 float32
	if rf, ok := ret.Get(0).(func() float32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float32)
	}

	return r0
}

// OnOOMConfig_GetFactor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFactor'
type OnOOMConfig_GetFactor_Call struct {
	*mock.Call
}

// GetFactor is a helper method to define mock.On call
func (_e *OnOOMConfig_Expecter) GetFactor() *OnOOMConfig_GetFactor_Call {
	return &OnOOMConfig_GetFactor_Call{Call: _e.mock.On("GetFactor")}
}

func (_c *OnOOMConfig_GetFactor_Call) Run(run func()) *OnOOMConfig_GetFactor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OnOOMConfig_GetFactor_Call) Return(_a0 float32) *OnOOMConfig_GetFactor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OnOOMConfig_GetFactor_Call) RunAndReturn(run func() float32) *OnOOMConfig_GetFactor_Call {
	_c.Call.Return(run)
	return _c
}

// GetLimit provides a mock function with given fields:
func (_m *OnOOMConfig) GetLimit() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLimit")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OnOOMConfig_GetLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLimit'
type OnOOMConfig_GetLimit_Call struct {
	*mock.Call
}

// GetLimit is a helper method to define mock.On call
func (_e *OnOOMConfig_Expecter) GetLimit() *OnOOMConfig_GetLimit_Call {
	return &OnOOMConfig_GetLimit_Call{Call: _e.mock.On("GetLimit")}
}

func (_c *OnOOMConfig_GetLimit_Call) Run(run func()) *OnOOMConfig_GetLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OnOOMConfig_GetLimit_Call) Return(_a0 string) *OnOOMConfig_GetLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OnOOMConfig_GetLimit_Call) RunAndReturn(run func() string) *OnOOMConfig_GetLimit_Call {
	_c.Call.Return(run)
	return _c
}

// NewOnOOMConfig creates a new instance of OnOOMConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOnOOMConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *OnOOMConfig {
	mock := &OnOOMConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
