// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	catalog "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/catalog"
	mock "github.com/stretchr/testify/mock"
)

// Future is an autogenerated mock type for the Future type
type Future struct {
	mock.Mock
}

type Future_Expecter struct {
	mock *mock.Mock
}

func (_m *Future) EXPECT() *Future_Expecter {
	return &Future_Expecter{mock: &_m.Mock}
}

// GetResponseError provides a mock function with given fields:
func (_m *Future) GetResponseError() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResponseError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Future_GetResponseError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResponseError'
type Future_GetResponseError_Call struct {
	*mock.Call
}

// GetResponseError is a helper method to define mock.On call
func (_e *Future_Expecter) GetResponseError() *Future_GetResponseError_Call {
	return &Future_GetResponseError_Call{Call: _e.mock.On("GetResponseError")}
}

func (_c *Future_GetResponseError_Call) Run(run func()) *Future_GetResponseError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Future_GetResponseError_Call) Return(_a0 error) *Future_GetResponseError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Future_GetResponseError_Call) RunAndReturn(run func() error) *Future_GetResponseError_Call {
	_c.Call.Return(run)
	return _c
}

// GetResponseStatus provides a mock function with given fields:
func (_m *Future) GetResponseStatus() catalog.ResponseStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResponseStatus")
	}

	var r0 catalog.ResponseStatus
	if rf, ok := ret.Get(0).(func() catalog.ResponseStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(catalog.ResponseStatus)
	}

	return r0
}

// Future_GetResponseStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResponseStatus'
type Future_GetResponseStatus_Call struct {
	*mock.Call
}

// GetResponseStatus is a helper method to define mock.On call
func (_e *Future_Expecter) GetResponseStatus() *Future_GetResponseStatus_Call {
	return &Future_GetResponseStatus_Call{Call: _e.mock.On("GetResponseStatus")}
}

func (_c *Future_GetResponseStatus_Call) Run(run func()) *Future_GetResponseStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Future_GetResponseStatus_Call) Return(_a0 catalog.ResponseStatus) *Future_GetResponseStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Future_GetResponseStatus_Call) RunAndReturn(run func() catalog.ResponseStatus) *Future_GetResponseStatus_Call {
	_c.Call.Return(run)
	return _c
}

// OnReady provides a mock function with given fields: handler
func (_m *Future) OnReady(handler catalog.ReadyHandler) {
	_m.Called(handler)
}

// Future_OnReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnReady'
type Future_OnReady_Call struct {
	*mock.Call
}

// OnReady is a helper method to define mock.On call
//   - handler catalog.ReadyHandler
func (_e *Future_Expecter) OnReady(handler interface{}) *Future_OnReady_Call {
	return &Future_OnReady_Call{Call: _e.mock.On("OnReady", handler)}
}

func (_c *Future_OnReady_Call) Run(run func(handler catalog.ReadyHandler)) *Future_OnReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(catalog.ReadyHandler))
	})
	return _c
}

func (_c *Future_OnReady_Call) Return() *Future_OnReady_Call {
	_c.Call.Return()
	return _c
}

func (_c *Future_OnReady_Call) RunAndReturn(run func(catalog.ReadyHandler)) *Future_OnReady_Call {
	_c.Call.Return(run)
	return _c
}

// NewFuture creates a new instance of Future. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFuture(t interface {
	mock.TestingT
	Cleanup(func())
}) *Future {
	mock := &Future{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
