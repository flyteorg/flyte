// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/catalog"

	datacatalog "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/datacatalog"

	io "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/io"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Get struct {
	*mock.Call
}

func (_m Client_Get) Return(_a0 catalog.Entry, _a1 error) *Client_Get {
	return &Client_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Client) OnGet(ctx context.Context, key catalog.Key) *Client_Get {
	c_call := _m.On("Get", ctx, key)
	return &Client_Get{Call: c_call}
}

func (_m *Client) OnGetMatch(matchers ...interface{}) *Client_Get {
	c_call := _m.On("Get", matchers...)
	return &Client_Get{Call: c_call}
}

// Get provides a mock function with given fields: ctx, key
func (_m *Client) Get(ctx context.Context, key catalog.Key) (catalog.Entry, error) {
	ret := _m.Called(ctx, key)

	var r0 catalog.Entry
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key) catalog.Entry); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(catalog.Entry)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Client_GetOrExtendReservation struct {
	*mock.Call
}

func (_m Client_GetOrExtendReservation) Return(_a0 *datacatalog.Reservation, _a1 error) *Client_GetOrExtendReservation {
	return &Client_GetOrExtendReservation{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Client) OnGetOrExtendReservation(ctx context.Context, key catalog.Key, ownerID string, heartbeatInterval time.Duration) *Client_GetOrExtendReservation {
	c_call := _m.On("GetOrExtendReservation", ctx, key, ownerID, heartbeatInterval)
	return &Client_GetOrExtendReservation{Call: c_call}
}

func (_m *Client) OnGetOrExtendReservationMatch(matchers ...interface{}) *Client_GetOrExtendReservation {
	c_call := _m.On("GetOrExtendReservation", matchers...)
	return &Client_GetOrExtendReservation{Call: c_call}
}

// GetOrExtendReservation provides a mock function with given fields: ctx, key, ownerID, heartbeatInterval
func (_m *Client) GetOrExtendReservation(ctx context.Context, key catalog.Key, ownerID string, heartbeatInterval time.Duration) (*datacatalog.Reservation, error) {
	ret := _m.Called(ctx, key, ownerID, heartbeatInterval)

	var r0 *datacatalog.Reservation
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, string, time.Duration) *datacatalog.Reservation); ok {
		r0 = rf(ctx, key, ownerID, heartbeatInterval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key, string, time.Duration) error); ok {
		r1 = rf(ctx, key, ownerID, heartbeatInterval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Client_GetReservationCache struct {
	*mock.Call
}

func (_m Client_GetReservationCache) Return(_a0 catalog.ReservationCache) *Client_GetReservationCache {
	return &Client_GetReservationCache{Call: _m.Call.Return(_a0)}
}

func (_m *Client) OnGetReservationCache(ownerID string) *Client_GetReservationCache {
	c_call := _m.On("GetReservationCache", ownerID)
	return &Client_GetReservationCache{Call: c_call}
}

func (_m *Client) OnGetReservationCacheMatch(matchers ...interface{}) *Client_GetReservationCache {
	c_call := _m.On("GetReservationCache", matchers...)
	return &Client_GetReservationCache{Call: c_call}
}

// GetReservationCache provides a mock function with given fields: ownerID
func (_m *Client) GetReservationCache(ownerID string) catalog.ReservationCache {
	ret := _m.Called(ownerID)

	var r0 catalog.ReservationCache
	if rf, ok := ret.Get(0).(func(string) catalog.ReservationCache); ok {
		r0 = rf(ownerID)
	} else {
		r0 = ret.Get(0).(catalog.ReservationCache)
	}

	return r0
}

type Client_Put struct {
	*mock.Call
}

func (_m Client_Put) Return(_a0 catalog.Status, _a1 error) *Client_Put {
	return &Client_Put{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Client) OnPut(ctx context.Context, key catalog.Key, reader io.OutputReader, metadata catalog.Metadata) *Client_Put {
	c_call := _m.On("Put", ctx, key, reader, metadata)
	return &Client_Put{Call: c_call}
}

func (_m *Client) OnPutMatch(matchers ...interface{}) *Client_Put {
	c_call := _m.On("Put", matchers...)
	return &Client_Put{Call: c_call}
}

// Put provides a mock function with given fields: ctx, key, reader, metadata
func (_m *Client) Put(ctx context.Context, key catalog.Key, reader io.OutputReader, metadata catalog.Metadata) (catalog.Status, error) {
	ret := _m.Called(ctx, key, reader, metadata)

	var r0 catalog.Status
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) catalog.Status); ok {
		r0 = rf(ctx, key, reader, metadata)
	} else {
		r0 = ret.Get(0).(catalog.Status)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) error); ok {
		r1 = rf(ctx, key, reader, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Client_ReleaseReservation struct {
	*mock.Call
}

func (_m Client_ReleaseReservation) Return(_a0 error) *Client_ReleaseReservation {
	return &Client_ReleaseReservation{Call: _m.Call.Return(_a0)}
}

func (_m *Client) OnReleaseReservation(ctx context.Context, key catalog.Key, ownerID string) *Client_ReleaseReservation {
	c_call := _m.On("ReleaseReservation", ctx, key, ownerID)
	return &Client_ReleaseReservation{Call: c_call}
}

func (_m *Client) OnReleaseReservationMatch(matchers ...interface{}) *Client_ReleaseReservation {
	c_call := _m.On("ReleaseReservation", matchers...)
	return &Client_ReleaseReservation{Call: c_call}
}

// ReleaseReservation provides a mock function with given fields: ctx, key, ownerID
func (_m *Client) ReleaseReservation(ctx context.Context, key catalog.Key, ownerID string) error {
	ret := _m.Called(ctx, key, ownerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, string) error); ok {
		r0 = rf(ctx, key, ownerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Client_Update struct {
	*mock.Call
}

func (_m Client_Update) Return(_a0 catalog.Status, _a1 error) *Client_Update {
	return &Client_Update{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Client) OnUpdate(ctx context.Context, key catalog.Key, reader io.OutputReader, metadata catalog.Metadata) *Client_Update {
	c_call := _m.On("Update", ctx, key, reader, metadata)
	return &Client_Update{Call: c_call}
}

func (_m *Client) OnUpdateMatch(matchers ...interface{}) *Client_Update {
	c_call := _m.On("Update", matchers...)
	return &Client_Update{Call: c_call}
}

// Update provides a mock function with given fields: ctx, key, reader, metadata
func (_m *Client) Update(ctx context.Context, key catalog.Key, reader io.OutputReader, metadata catalog.Metadata) (catalog.Status, error) {
	ret := _m.Called(ctx, key, reader, metadata)

	var r0 catalog.Status
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) catalog.Status); ok {
		r0 = rf(ctx, key, reader, metadata)
	} else {
		r0 = ret.Get(0).(catalog.Status)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) error); ok {
		r1 = rf(ctx, key, reader, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReservationCache provides a mock function with given fields: ownerID, entry
func (_m *Client) UpdateReservationCache(ownerID string, entry catalog.ReservationCache) {
	_m.Called(ownerID, entry)
}
