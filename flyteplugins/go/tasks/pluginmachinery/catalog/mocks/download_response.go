// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	bitarray "github.com/flyteorg/flyte/flytestdlib/bitarray"

	mock "github.com/stretchr/testify/mock"
)

// DownloadResponse is an autogenerated mock type for the DownloadResponse type
type DownloadResponse struct {
	mock.Mock
}

type DownloadResponse_Expecter struct {
	mock *mock.Mock
}

func (_m *DownloadResponse) EXPECT() *DownloadResponse_Expecter {
	return &DownloadResponse_Expecter{mock: &_m.Mock}
}

// GetCachedCount provides a mock function with no fields
func (_m *DownloadResponse) GetCachedCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCachedCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// DownloadResponse_GetCachedCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCachedCount'
type DownloadResponse_GetCachedCount_Call struct {
	*mock.Call
}

// GetCachedCount is a helper method to define mock.On call
func (_e *DownloadResponse_Expecter) GetCachedCount() *DownloadResponse_GetCachedCount_Call {
	return &DownloadResponse_GetCachedCount_Call{Call: _e.mock.On("GetCachedCount")}
}

func (_c *DownloadResponse_GetCachedCount_Call) Run(run func()) *DownloadResponse_GetCachedCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DownloadResponse_GetCachedCount_Call) Return(_a0 int) *DownloadResponse_GetCachedCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DownloadResponse_GetCachedCount_Call) RunAndReturn(run func() int) *DownloadResponse_GetCachedCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetCachedResults provides a mock function with no fields
func (_m *DownloadResponse) GetCachedResults() *bitarray.BitSet {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCachedResults")
	}

	var r0 *bitarray.BitSet
	if rf, ok := ret.Get(0).(func() *bitarray.BitSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitarray.BitSet)
		}
	}

	return r0
}

// DownloadResponse_GetCachedResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCachedResults'
type DownloadResponse_GetCachedResults_Call struct {
	*mock.Call
}

// GetCachedResults is a helper method to define mock.On call
func (_e *DownloadResponse_Expecter) GetCachedResults() *DownloadResponse_GetCachedResults_Call {
	return &DownloadResponse_GetCachedResults_Call{Call: _e.mock.On("GetCachedResults")}
}

func (_c *DownloadResponse_GetCachedResults_Call) Run(run func()) *DownloadResponse_GetCachedResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DownloadResponse_GetCachedResults_Call) Return(_a0 *bitarray.BitSet) *DownloadResponse_GetCachedResults_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DownloadResponse_GetCachedResults_Call) RunAndReturn(run func() *bitarray.BitSet) *DownloadResponse_GetCachedResults_Call {
	_c.Call.Return(run)
	return _c
}

// GetResultsSize provides a mock function with no fields
func (_m *DownloadResponse) GetResultsSize() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResultsSize")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// DownloadResponse_GetResultsSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResultsSize'
type DownloadResponse_GetResultsSize_Call struct {
	*mock.Call
}

// GetResultsSize is a helper method to define mock.On call
func (_e *DownloadResponse_Expecter) GetResultsSize() *DownloadResponse_GetResultsSize_Call {
	return &DownloadResponse_GetResultsSize_Call{Call: _e.mock.On("GetResultsSize")}
}

func (_c *DownloadResponse_GetResultsSize_Call) Run(run func()) *DownloadResponse_GetResultsSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DownloadResponse_GetResultsSize_Call) Return(_a0 int) *DownloadResponse_GetResultsSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DownloadResponse_GetResultsSize_Call) RunAndReturn(run func() int) *DownloadResponse_GetResultsSize_Call {
	_c.Call.Return(run)
	return _c
}

// NewDownloadResponse creates a new instance of DownloadResponse. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDownloadResponse(t interface {
	mock.TestingT
	Cleanup(func())
}) *DownloadResponse {
	mock := &DownloadResponse{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
