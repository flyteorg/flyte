// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/catalog"

	mock "github.com/stretchr/testify/mock"
)

// ReadyHandler is an autogenerated mock type for the ReadyHandler type
type ReadyHandler struct {
	mock.Mock
}

type ReadyHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *ReadyHandler) EXPECT() *ReadyHandler_Expecter {
	return &ReadyHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, future
func (_m *ReadyHandler) Execute(ctx context.Context, future catalog.Future) {
	_m.Called(ctx, future)
}

// ReadyHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ReadyHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - future catalog.Future
func (_e *ReadyHandler_Expecter) Execute(ctx interface{}, future interface{}) *ReadyHandler_Execute_Call {
	return &ReadyHandler_Execute_Call{Call: _e.mock.On("Execute", ctx, future)}
}

func (_c *ReadyHandler_Execute_Call) Run(run func(ctx context.Context, future catalog.Future)) *ReadyHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.Future))
	})
	return _c
}

func (_c *ReadyHandler_Execute_Call) Return() *ReadyHandler_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *ReadyHandler_Execute_Call) RunAndReturn(run func(context.Context, catalog.Future)) *ReadyHandler_Execute_Call {
	_c.Run(run)
	return _c
}

// NewReadyHandler creates a new instance of ReadyHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadyHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadyHandler {
	mock := &ReadyHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
