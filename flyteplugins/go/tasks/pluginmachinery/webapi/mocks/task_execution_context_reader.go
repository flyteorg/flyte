// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/core"
	io "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/io"

	mock "github.com/stretchr/testify/mock"
)

// TaskExecutionContextReader is an autogenerated mock type for the TaskExecutionContextReader type
type TaskExecutionContextReader struct {
	mock.Mock
}

type TaskExecutionContextReader_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskExecutionContextReader) EXPECT() *TaskExecutionContextReader_Expecter {
	return &TaskExecutionContextReader_Expecter{mock: &_m.Mock}
}

// InputReader provides a mock function with given fields:
func (_m *TaskExecutionContextReader) InputReader() io.InputReader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InputReader")
	}

	var r0 io.InputReader
	if rf, ok := ret.Get(0).(func() io.InputReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.InputReader)
		}
	}

	return r0
}

// TaskExecutionContextReader_InputReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InputReader'
type TaskExecutionContextReader_InputReader_Call struct {
	*mock.Call
}

// InputReader is a helper method to define mock.On call
func (_e *TaskExecutionContextReader_Expecter) InputReader() *TaskExecutionContextReader_InputReader_Call {
	return &TaskExecutionContextReader_InputReader_Call{Call: _e.mock.On("InputReader")}
}

func (_c *TaskExecutionContextReader_InputReader_Call) Run(run func()) *TaskExecutionContextReader_InputReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionContextReader_InputReader_Call) Return(_a0 io.InputReader) *TaskExecutionContextReader_InputReader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionContextReader_InputReader_Call) RunAndReturn(run func() io.InputReader) *TaskExecutionContextReader_InputReader_Call {
	_c.Call.Return(run)
	return _c
}

// OutputWriter provides a mock function with given fields:
func (_m *TaskExecutionContextReader) OutputWriter() io.OutputWriter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OutputWriter")
	}

	var r0 io.OutputWriter
	if rf, ok := ret.Get(0).(func() io.OutputWriter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.OutputWriter)
		}
	}

	return r0
}

// TaskExecutionContextReader_OutputWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OutputWriter'
type TaskExecutionContextReader_OutputWriter_Call struct {
	*mock.Call
}

// OutputWriter is a helper method to define mock.On call
func (_e *TaskExecutionContextReader_Expecter) OutputWriter() *TaskExecutionContextReader_OutputWriter_Call {
	return &TaskExecutionContextReader_OutputWriter_Call{Call: _e.mock.On("OutputWriter")}
}

func (_c *TaskExecutionContextReader_OutputWriter_Call) Run(run func()) *TaskExecutionContextReader_OutputWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionContextReader_OutputWriter_Call) Return(_a0 io.OutputWriter) *TaskExecutionContextReader_OutputWriter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionContextReader_OutputWriter_Call) RunAndReturn(run func() io.OutputWriter) *TaskExecutionContextReader_OutputWriter_Call {
	_c.Call.Return(run)
	return _c
}

// SecretManager provides a mock function with given fields:
func (_m *TaskExecutionContextReader) SecretManager() core.SecretManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SecretManager")
	}

	var r0 core.SecretManager
	if rf, ok := ret.Get(0).(func() core.SecretManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.SecretManager)
		}
	}

	return r0
}

// TaskExecutionContextReader_SecretManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretManager'
type TaskExecutionContextReader_SecretManager_Call struct {
	*mock.Call
}

// SecretManager is a helper method to define mock.On call
func (_e *TaskExecutionContextReader_Expecter) SecretManager() *TaskExecutionContextReader_SecretManager_Call {
	return &TaskExecutionContextReader_SecretManager_Call{Call: _e.mock.On("SecretManager")}
}

func (_c *TaskExecutionContextReader_SecretManager_Call) Run(run func()) *TaskExecutionContextReader_SecretManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionContextReader_SecretManager_Call) Return(_a0 core.SecretManager) *TaskExecutionContextReader_SecretManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionContextReader_SecretManager_Call) RunAndReturn(run func() core.SecretManager) *TaskExecutionContextReader_SecretManager_Call {
	_c.Call.Return(run)
	return _c
}

// TaskExecutionMetadata provides a mock function with given fields:
func (_m *TaskExecutionContextReader) TaskExecutionMetadata() core.TaskExecutionMetadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TaskExecutionMetadata")
	}

	var r0 core.TaskExecutionMetadata
	if rf, ok := ret.Get(0).(func() core.TaskExecutionMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TaskExecutionMetadata)
		}
	}

	return r0
}

// TaskExecutionContextReader_TaskExecutionMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TaskExecutionMetadata'
type TaskExecutionContextReader_TaskExecutionMetadata_Call struct {
	*mock.Call
}

// TaskExecutionMetadata is a helper method to define mock.On call
func (_e *TaskExecutionContextReader_Expecter) TaskExecutionMetadata() *TaskExecutionContextReader_TaskExecutionMetadata_Call {
	return &TaskExecutionContextReader_TaskExecutionMetadata_Call{Call: _e.mock.On("TaskExecutionMetadata")}
}

func (_c *TaskExecutionContextReader_TaskExecutionMetadata_Call) Run(run func()) *TaskExecutionContextReader_TaskExecutionMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionContextReader_TaskExecutionMetadata_Call) Return(_a0 core.TaskExecutionMetadata) *TaskExecutionContextReader_TaskExecutionMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionContextReader_TaskExecutionMetadata_Call) RunAndReturn(run func() core.TaskExecutionMetadata) *TaskExecutionContextReader_TaskExecutionMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// TaskReader provides a mock function with given fields:
func (_m *TaskExecutionContextReader) TaskReader() core.TaskReader {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TaskReader")
	}

	var r0 core.TaskReader
	if rf, ok := ret.Get(0).(func() core.TaskReader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TaskReader)
		}
	}

	return r0
}

// TaskExecutionContextReader_TaskReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TaskReader'
type TaskExecutionContextReader_TaskReader_Call struct {
	*mock.Call
}

// TaskReader is a helper method to define mock.On call
func (_e *TaskExecutionContextReader_Expecter) TaskReader() *TaskExecutionContextReader_TaskReader_Call {
	return &TaskExecutionContextReader_TaskReader_Call{Call: _e.mock.On("TaskReader")}
}

func (_c *TaskExecutionContextReader_TaskReader_Call) Run(run func()) *TaskExecutionContextReader_TaskReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TaskExecutionContextReader_TaskReader_Call) Return(_a0 core.TaskReader) *TaskExecutionContextReader_TaskReader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskExecutionContextReader_TaskReader_Call) RunAndReturn(run func() core.TaskReader) *TaskExecutionContextReader_TaskReader_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskExecutionContextReader creates a new instance of TaskExecutionContextReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskExecutionContextReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskExecutionContextReader {
	mock := &TaskExecutionContextReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
