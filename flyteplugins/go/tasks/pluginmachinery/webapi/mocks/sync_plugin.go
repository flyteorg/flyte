// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"

	webapi "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/webapi"
)

// SyncPlugin is an autogenerated mock type for the SyncPlugin type
type SyncPlugin struct {
	mock.Mock
}

type SyncPlugin_Expecter struct {
	mock *mock.Mock
}

func (_m *SyncPlugin) EXPECT() *SyncPlugin_Expecter {
	return &SyncPlugin_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: ctx, tCtx
func (_m *SyncPlugin) Do(ctx context.Context, tCtx webapi.TaskExecutionContext) (core.PhaseInfo, error) {
	ret := _m.Called(ctx, tCtx)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 core.PhaseInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, webapi.TaskExecutionContext) (core.PhaseInfo, error)); ok {
		return rf(ctx, tCtx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webapi.TaskExecutionContext) core.PhaseInfo); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Get(0).(core.PhaseInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, webapi.TaskExecutionContext) error); ok {
		r1 = rf(ctx, tCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncPlugin_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type SyncPlugin_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - tCtx webapi.TaskExecutionContext
func (_e *SyncPlugin_Expecter) Do(ctx interface{}, tCtx interface{}) *SyncPlugin_Do_Call {
	return &SyncPlugin_Do_Call{Call: _e.mock.On("Do", ctx, tCtx)}
}

func (_c *SyncPlugin_Do_Call) Run(run func(ctx context.Context, tCtx webapi.TaskExecutionContext)) *SyncPlugin_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webapi.TaskExecutionContext))
	})
	return _c
}

func (_c *SyncPlugin_Do_Call) Return(phase core.PhaseInfo, err error) *SyncPlugin_Do_Call {
	_c.Call.Return(phase, err)
	return _c
}

func (_c *SyncPlugin_Do_Call) RunAndReturn(run func(context.Context, webapi.TaskExecutionContext) (core.PhaseInfo, error)) *SyncPlugin_Do_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with given fields:
func (_m *SyncPlugin) GetConfig() webapi.PluginConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 webapi.PluginConfig
	if rf, ok := ret.Get(0).(func() webapi.PluginConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(webapi.PluginConfig)
	}

	return r0
}

// SyncPlugin_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type SyncPlugin_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *SyncPlugin_Expecter) GetConfig() *SyncPlugin_GetConfig_Call {
	return &SyncPlugin_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *SyncPlugin_GetConfig_Call) Run(run func()) *SyncPlugin_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SyncPlugin_GetConfig_Call) Return(_a0 webapi.PluginConfig) *SyncPlugin_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SyncPlugin_GetConfig_Call) RunAndReturn(run func() webapi.PluginConfig) *SyncPlugin_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewSyncPlugin creates a new instance of SyncPlugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *SyncPlugin {
	mock := &SyncPlugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
