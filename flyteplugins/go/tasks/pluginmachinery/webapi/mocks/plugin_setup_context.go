// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	promutils "github.com/flyteorg/flyte/flytestdlib/promutils"
	mock "github.com/stretchr/testify/mock"
)

// PluginSetupContext is an autogenerated mock type for the PluginSetupContext type
type PluginSetupContext struct {
	mock.Mock
}

type PluginSetupContext_Expecter struct {
	mock *mock.Mock
}

func (_m *PluginSetupContext) EXPECT() *PluginSetupContext_Expecter {
	return &PluginSetupContext_Expecter{mock: &_m.Mock}
}

// MetricsScope provides a mock function with given fields:
func (_m *PluginSetupContext) MetricsScope() promutils.Scope {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MetricsScope")
	}

	var r0 promutils.Scope
	if rf, ok := ret.Get(0).(func() promutils.Scope); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(promutils.Scope)
		}
	}

	return r0
}

// PluginSetupContext_MetricsScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetricsScope'
type PluginSetupContext_MetricsScope_Call struct {
	*mock.Call
}

// MetricsScope is a helper method to define mock.On call
func (_e *PluginSetupContext_Expecter) MetricsScope() *PluginSetupContext_MetricsScope_Call {
	return &PluginSetupContext_MetricsScope_Call{Call: _e.mock.On("MetricsScope")}
}

func (_c *PluginSetupContext_MetricsScope_Call) Run(run func()) *PluginSetupContext_MetricsScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PluginSetupContext_MetricsScope_Call) Return(_a0 promutils.Scope) *PluginSetupContext_MetricsScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PluginSetupContext_MetricsScope_Call) RunAndReturn(run func() promutils.Scope) *PluginSetupContext_MetricsScope_Call {
	_c.Call.Return(run)
	return _c
}

// NewPluginSetupContext creates a new instance of PluginSetupContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPluginSetupContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *PluginSetupContext {
	mock := &PluginSetupContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
