// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"

	webapi "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/webapi"
)

// AsyncPlugin is an autogenerated mock type for the AsyncPlugin type
type AsyncPlugin struct {
	mock.Mock
}

type AsyncPlugin_Expecter struct {
	mock *mock.Mock
}

func (_m *AsyncPlugin) EXPECT() *AsyncPlugin_Expecter {
	return &AsyncPlugin_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, tCtx
func (_m *AsyncPlugin) Create(ctx context.Context, tCtx webapi.TaskExecutionContextReader) (interface{}, interface{}, error) {
	ret := _m.Called(ctx, tCtx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 interface{}
	var r1 interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, webapi.TaskExecutionContextReader) (interface{}, interface{}, error)); ok {
		return rf(ctx, tCtx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webapi.TaskExecutionContextReader) interface{}); ok {
		r0 = rf(ctx, tCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, webapi.TaskExecutionContextReader) interface{}); ok {
		r1 = rf(ctx, tCtx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, webapi.TaskExecutionContextReader) error); ok {
		r2 = rf(ctx, tCtx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AsyncPlugin_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AsyncPlugin_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - tCtx webapi.TaskExecutionContextReader
func (_e *AsyncPlugin_Expecter) Create(ctx interface{}, tCtx interface{}) *AsyncPlugin_Create_Call {
	return &AsyncPlugin_Create_Call{Call: _e.mock.On("Create", ctx, tCtx)}
}

func (_c *AsyncPlugin_Create_Call) Run(run func(ctx context.Context, tCtx webapi.TaskExecutionContextReader)) *AsyncPlugin_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webapi.TaskExecutionContextReader))
	})
	return _c
}

func (_c *AsyncPlugin_Create_Call) Return(resourceMeta interface{}, optionalResource interface{}, err error) *AsyncPlugin_Create_Call {
	_c.Call.Return(resourceMeta, optionalResource, err)
	return _c
}

func (_c *AsyncPlugin_Create_Call) RunAndReturn(run func(context.Context, webapi.TaskExecutionContextReader) (interface{}, interface{}, error)) *AsyncPlugin_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, tCtx
func (_m *AsyncPlugin) Delete(ctx context.Context, tCtx webapi.DeleteContext) error {
	ret := _m.Called(ctx, tCtx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webapi.DeleteContext) error); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AsyncPlugin_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AsyncPlugin_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - tCtx webapi.DeleteContext
func (_e *AsyncPlugin_Expecter) Delete(ctx interface{}, tCtx interface{}) *AsyncPlugin_Delete_Call {
	return &AsyncPlugin_Delete_Call{Call: _e.mock.On("Delete", ctx, tCtx)}
}

func (_c *AsyncPlugin_Delete_Call) Run(run func(ctx context.Context, tCtx webapi.DeleteContext)) *AsyncPlugin_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webapi.DeleteContext))
	})
	return _c
}

func (_c *AsyncPlugin_Delete_Call) Return(_a0 error) *AsyncPlugin_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AsyncPlugin_Delete_Call) RunAndReturn(run func(context.Context, webapi.DeleteContext) error) *AsyncPlugin_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, tCtx
func (_m *AsyncPlugin) Get(ctx context.Context, tCtx webapi.GetContext) (interface{}, error) {
	ret := _m.Called(ctx, tCtx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, webapi.GetContext) (interface{}, error)); ok {
		return rf(ctx, tCtx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webapi.GetContext) interface{}); ok {
		r0 = rf(ctx, tCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, webapi.GetContext) error); ok {
		r1 = rf(ctx, tCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncPlugin_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type AsyncPlugin_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - tCtx webapi.GetContext
func (_e *AsyncPlugin_Expecter) Get(ctx interface{}, tCtx interface{}) *AsyncPlugin_Get_Call {
	return &AsyncPlugin_Get_Call{Call: _e.mock.On("Get", ctx, tCtx)}
}

func (_c *AsyncPlugin_Get_Call) Run(run func(ctx context.Context, tCtx webapi.GetContext)) *AsyncPlugin_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webapi.GetContext))
	})
	return _c
}

func (_c *AsyncPlugin_Get_Call) Return(latest interface{}, err error) *AsyncPlugin_Get_Call {
	_c.Call.Return(latest, err)
	return _c
}

func (_c *AsyncPlugin_Get_Call) RunAndReturn(run func(context.Context, webapi.GetContext) (interface{}, error)) *AsyncPlugin_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with given fields:
func (_m *AsyncPlugin) GetConfig() webapi.PluginConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 webapi.PluginConfig
	if rf, ok := ret.Get(0).(func() webapi.PluginConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(webapi.PluginConfig)
	}

	return r0
}

// AsyncPlugin_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type AsyncPlugin_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *AsyncPlugin_Expecter) GetConfig() *AsyncPlugin_GetConfig_Call {
	return &AsyncPlugin_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *AsyncPlugin_GetConfig_Call) Run(run func()) *AsyncPlugin_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AsyncPlugin_GetConfig_Call) Return(_a0 webapi.PluginConfig) *AsyncPlugin_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AsyncPlugin_GetConfig_Call) RunAndReturn(run func() webapi.PluginConfig) *AsyncPlugin_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceRequirements provides a mock function with given fields: ctx, tCtx
func (_m *AsyncPlugin) ResourceRequirements(ctx context.Context, tCtx webapi.TaskExecutionContextReader) (core.ResourceNamespace, core.ResourceConstraintsSpec, error) {
	ret := _m.Called(ctx, tCtx)

	if len(ret) == 0 {
		panic("no return value specified for ResourceRequirements")
	}

	var r0 core.ResourceNamespace
	var r1 core.ResourceConstraintsSpec
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, webapi.TaskExecutionContextReader) (core.ResourceNamespace, core.ResourceConstraintsSpec, error)); ok {
		return rf(ctx, tCtx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webapi.TaskExecutionContextReader) core.ResourceNamespace); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Get(0).(core.ResourceNamespace)
	}

	if rf, ok := ret.Get(1).(func(context.Context, webapi.TaskExecutionContextReader) core.ResourceConstraintsSpec); ok {
		r1 = rf(ctx, tCtx)
	} else {
		r1 = ret.Get(1).(core.ResourceConstraintsSpec)
	}

	if rf, ok := ret.Get(2).(func(context.Context, webapi.TaskExecutionContextReader) error); ok {
		r2 = rf(ctx, tCtx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AsyncPlugin_ResourceRequirements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceRequirements'
type AsyncPlugin_ResourceRequirements_Call struct {
	*mock.Call
}

// ResourceRequirements is a helper method to define mock.On call
//   - ctx context.Context
//   - tCtx webapi.TaskExecutionContextReader
func (_e *AsyncPlugin_Expecter) ResourceRequirements(ctx interface{}, tCtx interface{}) *AsyncPlugin_ResourceRequirements_Call {
	return &AsyncPlugin_ResourceRequirements_Call{Call: _e.mock.On("ResourceRequirements", ctx, tCtx)}
}

func (_c *AsyncPlugin_ResourceRequirements_Call) Run(run func(ctx context.Context, tCtx webapi.TaskExecutionContextReader)) *AsyncPlugin_ResourceRequirements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webapi.TaskExecutionContextReader))
	})
	return _c
}

func (_c *AsyncPlugin_ResourceRequirements_Call) Return(namespace core.ResourceNamespace, constraints core.ResourceConstraintsSpec, err error) *AsyncPlugin_ResourceRequirements_Call {
	_c.Call.Return(namespace, constraints, err)
	return _c
}

func (_c *AsyncPlugin_ResourceRequirements_Call) RunAndReturn(run func(context.Context, webapi.TaskExecutionContextReader) (core.ResourceNamespace, core.ResourceConstraintsSpec, error)) *AsyncPlugin_ResourceRequirements_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: ctx, tCtx
func (_m *AsyncPlugin) Status(ctx context.Context, tCtx webapi.StatusContext) (core.PhaseInfo, error) {
	ret := _m.Called(ctx, tCtx)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 core.PhaseInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, webapi.StatusContext) (core.PhaseInfo, error)); ok {
		return rf(ctx, tCtx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webapi.StatusContext) core.PhaseInfo); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Get(0).(core.PhaseInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, webapi.StatusContext) error); ok {
		r1 = rf(ctx, tCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncPlugin_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type AsyncPlugin_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx context.Context
//   - tCtx webapi.StatusContext
func (_e *AsyncPlugin_Expecter) Status(ctx interface{}, tCtx interface{}) *AsyncPlugin_Status_Call {
	return &AsyncPlugin_Status_Call{Call: _e.mock.On("Status", ctx, tCtx)}
}

func (_c *AsyncPlugin_Status_Call) Run(run func(ctx context.Context, tCtx webapi.StatusContext)) *AsyncPlugin_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webapi.StatusContext))
	})
	return _c
}

func (_c *AsyncPlugin_Status_Call) Return(phase core.PhaseInfo, err error) *AsyncPlugin_Status_Call {
	_c.Call.Return(phase, err)
	return _c
}

func (_c *AsyncPlugin_Status_Call) RunAndReturn(run func(context.Context, webapi.StatusContext) (core.PhaseInfo, error)) *AsyncPlugin_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewAsyncPlugin creates a new instance of AsyncPlugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsyncPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsyncPlugin {
	mock := &AsyncPlugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
