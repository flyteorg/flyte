// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	io "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/io"
	mock "github.com/stretchr/testify/mock"
)

// ErrorReader is an autogenerated mock type for the ErrorReader type
type ErrorReader struct {
	mock.Mock
}

type ErrorReader_Expecter struct {
	mock *mock.Mock
}

func (_m *ErrorReader) EXPECT() *ErrorReader_Expecter {
	return &ErrorReader_Expecter{mock: &_m.Mock}
}

// IsError provides a mock function with given fields: ctx
func (_m *ErrorReader) IsError(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsError")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ErrorReader_IsError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsError'
type ErrorReader_IsError_Call struct {
	*mock.Call
}

// IsError is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ErrorReader_Expecter) IsError(ctx interface{}) *ErrorReader_IsError_Call {
	return &ErrorReader_IsError_Call{Call: _e.mock.On("IsError", ctx)}
}

func (_c *ErrorReader_IsError_Call) Run(run func(ctx context.Context)) *ErrorReader_IsError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ErrorReader_IsError_Call) Return(_a0 bool, _a1 error) *ErrorReader_IsError_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ErrorReader_IsError_Call) RunAndReturn(run func(context.Context) (bool, error)) *ErrorReader_IsError_Call {
	_c.Call.Return(run)
	return _c
}

// ReadError provides a mock function with given fields: ctx
func (_m *ErrorReader) ReadError(ctx context.Context) (io.ExecutionError, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadError")
	}

	var r0 io.ExecutionError
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (io.ExecutionError, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) io.ExecutionError); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(io.ExecutionError)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ErrorReader_ReadError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadError'
type ErrorReader_ReadError_Call struct {
	*mock.Call
}

// ReadError is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ErrorReader_Expecter) ReadError(ctx interface{}) *ErrorReader_ReadError_Call {
	return &ErrorReader_ReadError_Call{Call: _e.mock.On("ReadError", ctx)}
}

func (_c *ErrorReader_ReadError_Call) Run(run func(ctx context.Context)) *ErrorReader_ReadError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ErrorReader_ReadError_Call) Return(_a0 io.ExecutionError, _a1 error) *ErrorReader_ReadError_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ErrorReader_ReadError_Call) RunAndReturn(run func(context.Context) (io.ExecutionError, error)) *ErrorReader_ReadError_Call {
	_c.Call.Return(run)
	return _c
}

// NewErrorReader creates a new instance of ErrorReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewErrorReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ErrorReader {
	mock := &ErrorReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
