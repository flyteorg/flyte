// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/flyteorg/flyte/flytestdlib/storage"
)

// InputFilePaths is an autogenerated mock type for the InputFilePaths type
type InputFilePaths struct {
	mock.Mock
}

type InputFilePaths_GetInputDataPath struct {
	*mock.Call
}

func (_m InputFilePaths_GetInputDataPath) Return(_a0 storage.DataReference) *InputFilePaths_GetInputDataPath {
	return &InputFilePaths_GetInputDataPath{Call: _m.Call.Return(_a0)}
}

func (_m *InputFilePaths) OnGetInputDataPath() *InputFilePaths_GetInputDataPath {
	c_call := _m.On("GetInputDataPath")
	return &InputFilePaths_GetInputDataPath{Call: c_call}
}

func (_m *InputFilePaths) OnGetInputDataPathMatch(matchers ...interface{}) *InputFilePaths_GetInputDataPath {
	c_call := _m.On("GetInputDataPath", matchers...)
	return &InputFilePaths_GetInputDataPath{Call: c_call}
}

// GetInputDataPath provides a mock function with given fields:
func (_m *InputFilePaths) GetInputDataPath() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

type InputFilePaths_GetInputPath struct {
	*mock.Call
}

func (_m InputFilePaths_GetInputPath) Return(_a0 storage.DataReference, _a1 error) *InputFilePaths_GetInputPath {
	return &InputFilePaths_GetInputPath{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *InputFilePaths) OnGetInputPath(ctx context.Context) *InputFilePaths_GetInputPath {
	c_call := _m.On("GetInputPath", ctx)
	return &InputFilePaths_GetInputPath{Call: c_call}
}

func (_m *InputFilePaths) OnGetInputPathMatch(matchers ...interface{}) *InputFilePaths_GetInputPath {
	c_call := _m.On("GetInputPath", matchers...)
	return &InputFilePaths_GetInputPath{Call: c_call}
}

// GetInputPath provides a mock function with given fields: ctx
func (_m *InputFilePaths) GetInputPath(ctx context.Context) (storage.DataReference, error) {
	ret := _m.Called(ctx)

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func(context.Context) storage.DataReference); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type InputFilePaths_GetInputPrefixPath struct {
	*mock.Call
}

func (_m InputFilePaths_GetInputPrefixPath) Return(_a0 storage.DataReference) *InputFilePaths_GetInputPrefixPath {
	return &InputFilePaths_GetInputPrefixPath{Call: _m.Call.Return(_a0)}
}

func (_m *InputFilePaths) OnGetInputPrefixPath() *InputFilePaths_GetInputPrefixPath {
	c_call := _m.On("GetInputPrefixPath")
	return &InputFilePaths_GetInputPrefixPath{Call: c_call}
}

func (_m *InputFilePaths) OnGetInputPrefixPathMatch(matchers ...interface{}) *InputFilePaths_GetInputPrefixPath {
	c_call := _m.On("GetInputPrefixPath", matchers...)
	return &InputFilePaths_GetInputPrefixPath{Call: c_call}
}

// GetInputPrefixPath provides a mock function with given fields:
func (_m *InputFilePaths) GetInputPrefixPath() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}
