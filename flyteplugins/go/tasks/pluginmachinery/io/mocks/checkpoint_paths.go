// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	storage "github.com/flyteorg/flyte/flytestdlib/storage"
	mock "github.com/stretchr/testify/mock"
)

// CheckpointPaths is an autogenerated mock type for the CheckpointPaths type
type CheckpointPaths struct {
	mock.Mock
}

type CheckpointPaths_Expecter struct {
	mock *mock.Mock
}

func (_m *CheckpointPaths) EXPECT() *CheckpointPaths_Expecter {
	return &CheckpointPaths_Expecter{mock: &_m.Mock}
}

// GetCheckpointPrefix provides a mock function with no fields
func (_m *CheckpointPaths) GetCheckpointPrefix() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCheckpointPrefix")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// CheckpointPaths_GetCheckpointPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheckpointPrefix'
type CheckpointPaths_GetCheckpointPrefix_Call struct {
	*mock.Call
}

// GetCheckpointPrefix is a helper method to define mock.On call
func (_e *CheckpointPaths_Expecter) GetCheckpointPrefix() *CheckpointPaths_GetCheckpointPrefix_Call {
	return &CheckpointPaths_GetCheckpointPrefix_Call{Call: _e.mock.On("GetCheckpointPrefix")}
}

func (_c *CheckpointPaths_GetCheckpointPrefix_Call) Run(run func()) *CheckpointPaths_GetCheckpointPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CheckpointPaths_GetCheckpointPrefix_Call) Return(_a0 storage.DataReference) *CheckpointPaths_GetCheckpointPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CheckpointPaths_GetCheckpointPrefix_Call) RunAndReturn(run func() storage.DataReference) *CheckpointPaths_GetCheckpointPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreviousCheckpointsPrefix provides a mock function with no fields
func (_m *CheckpointPaths) GetPreviousCheckpointsPrefix() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPreviousCheckpointsPrefix")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// CheckpointPaths_GetPreviousCheckpointsPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreviousCheckpointsPrefix'
type CheckpointPaths_GetPreviousCheckpointsPrefix_Call struct {
	*mock.Call
}

// GetPreviousCheckpointsPrefix is a helper method to define mock.On call
func (_e *CheckpointPaths_Expecter) GetPreviousCheckpointsPrefix() *CheckpointPaths_GetPreviousCheckpointsPrefix_Call {
	return &CheckpointPaths_GetPreviousCheckpointsPrefix_Call{Call: _e.mock.On("GetPreviousCheckpointsPrefix")}
}

func (_c *CheckpointPaths_GetPreviousCheckpointsPrefix_Call) Run(run func()) *CheckpointPaths_GetPreviousCheckpointsPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CheckpointPaths_GetPreviousCheckpointsPrefix_Call) Return(_a0 storage.DataReference) *CheckpointPaths_GetPreviousCheckpointsPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CheckpointPaths_GetPreviousCheckpointsPrefix_Call) RunAndReturn(run func() storage.DataReference) *CheckpointPaths_GetPreviousCheckpointsPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// NewCheckpointPaths creates a new instance of CheckpointPaths. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCheckpointPaths(t interface {
	mock.TestingT
	Cleanup(func())
}) *CheckpointPaths {
	mock := &CheckpointPaths{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
