// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	storage "github.com/flyteorg/flyte/flytestdlib/storage"
	mock "github.com/stretchr/testify/mock"
)

// OutputFilePaths is an autogenerated mock type for the OutputFilePaths type
type OutputFilePaths struct {
	mock.Mock
}

type OutputFilePaths_Expecter struct {
	mock *mock.Mock
}

func (_m *OutputFilePaths) EXPECT() *OutputFilePaths_Expecter {
	return &OutputFilePaths_Expecter{mock: &_m.Mock}
}

// GetCheckpointPrefix provides a mock function with given fields:
func (_m *OutputFilePaths) GetCheckpointPrefix() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCheckpointPrefix")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// OutputFilePaths_GetCheckpointPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCheckpointPrefix'
type OutputFilePaths_GetCheckpointPrefix_Call struct {
	*mock.Call
}

// GetCheckpointPrefix is a helper method to define mock.On call
func (_e *OutputFilePaths_Expecter) GetCheckpointPrefix() *OutputFilePaths_GetCheckpointPrefix_Call {
	return &OutputFilePaths_GetCheckpointPrefix_Call{Call: _e.mock.On("GetCheckpointPrefix")}
}

func (_c *OutputFilePaths_GetCheckpointPrefix_Call) Run(run func()) *OutputFilePaths_GetCheckpointPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OutputFilePaths_GetCheckpointPrefix_Call) Return(_a0 storage.DataReference) *OutputFilePaths_GetCheckpointPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutputFilePaths_GetCheckpointPrefix_Call) RunAndReturn(run func() storage.DataReference) *OutputFilePaths_GetCheckpointPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeckPath provides a mock function with given fields:
func (_m *OutputFilePaths) GetDeckPath() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeckPath")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// OutputFilePaths_GetDeckPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeckPath'
type OutputFilePaths_GetDeckPath_Call struct {
	*mock.Call
}

// GetDeckPath is a helper method to define mock.On call
func (_e *OutputFilePaths_Expecter) GetDeckPath() *OutputFilePaths_GetDeckPath_Call {
	return &OutputFilePaths_GetDeckPath_Call{Call: _e.mock.On("GetDeckPath")}
}

func (_c *OutputFilePaths_GetDeckPath_Call) Run(run func()) *OutputFilePaths_GetDeckPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OutputFilePaths_GetDeckPath_Call) Return(_a0 storage.DataReference) *OutputFilePaths_GetDeckPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutputFilePaths_GetDeckPath_Call) RunAndReturn(run func() storage.DataReference) *OutputFilePaths_GetDeckPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetErrorPath provides a mock function with given fields:
func (_m *OutputFilePaths) GetErrorPath() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetErrorPath")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// OutputFilePaths_GetErrorPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetErrorPath'
type OutputFilePaths_GetErrorPath_Call struct {
	*mock.Call
}

// GetErrorPath is a helper method to define mock.On call
func (_e *OutputFilePaths_Expecter) GetErrorPath() *OutputFilePaths_GetErrorPath_Call {
	return &OutputFilePaths_GetErrorPath_Call{Call: _e.mock.On("GetErrorPath")}
}

func (_c *OutputFilePaths_GetErrorPath_Call) Run(run func()) *OutputFilePaths_GetErrorPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OutputFilePaths_GetErrorPath_Call) Return(_a0 storage.DataReference) *OutputFilePaths_GetErrorPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutputFilePaths_GetErrorPath_Call) RunAndReturn(run func() storage.DataReference) *OutputFilePaths_GetErrorPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputPath provides a mock function with given fields:
func (_m *OutputFilePaths) GetOutputPath() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputPath")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// OutputFilePaths_GetOutputPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputPath'
type OutputFilePaths_GetOutputPath_Call struct {
	*mock.Call
}

// GetOutputPath is a helper method to define mock.On call
func (_e *OutputFilePaths_Expecter) GetOutputPath() *OutputFilePaths_GetOutputPath_Call {
	return &OutputFilePaths_GetOutputPath_Call{Call: _e.mock.On("GetOutputPath")}
}

func (_c *OutputFilePaths_GetOutputPath_Call) Run(run func()) *OutputFilePaths_GetOutputPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OutputFilePaths_GetOutputPath_Call) Return(_a0 storage.DataReference) *OutputFilePaths_GetOutputPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutputFilePaths_GetOutputPath_Call) RunAndReturn(run func() storage.DataReference) *OutputFilePaths_GetOutputPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputPrefixPath provides a mock function with given fields:
func (_m *OutputFilePaths) GetOutputPrefixPath() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputPrefixPath")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// OutputFilePaths_GetOutputPrefixPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputPrefixPath'
type OutputFilePaths_GetOutputPrefixPath_Call struct {
	*mock.Call
}

// GetOutputPrefixPath is a helper method to define mock.On call
func (_e *OutputFilePaths_Expecter) GetOutputPrefixPath() *OutputFilePaths_GetOutputPrefixPath_Call {
	return &OutputFilePaths_GetOutputPrefixPath_Call{Call: _e.mock.On("GetOutputPrefixPath")}
}

func (_c *OutputFilePaths_GetOutputPrefixPath_Call) Run(run func()) *OutputFilePaths_GetOutputPrefixPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OutputFilePaths_GetOutputPrefixPath_Call) Return(_a0 storage.DataReference) *OutputFilePaths_GetOutputPrefixPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutputFilePaths_GetOutputPrefixPath_Call) RunAndReturn(run func() storage.DataReference) *OutputFilePaths_GetOutputPrefixPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreviousCheckpointsPrefix provides a mock function with given fields:
func (_m *OutputFilePaths) GetPreviousCheckpointsPrefix() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPreviousCheckpointsPrefix")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// OutputFilePaths_GetPreviousCheckpointsPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreviousCheckpointsPrefix'
type OutputFilePaths_GetPreviousCheckpointsPrefix_Call struct {
	*mock.Call
}

// GetPreviousCheckpointsPrefix is a helper method to define mock.On call
func (_e *OutputFilePaths_Expecter) GetPreviousCheckpointsPrefix() *OutputFilePaths_GetPreviousCheckpointsPrefix_Call {
	return &OutputFilePaths_GetPreviousCheckpointsPrefix_Call{Call: _e.mock.On("GetPreviousCheckpointsPrefix")}
}

func (_c *OutputFilePaths_GetPreviousCheckpointsPrefix_Call) Run(run func()) *OutputFilePaths_GetPreviousCheckpointsPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OutputFilePaths_GetPreviousCheckpointsPrefix_Call) Return(_a0 storage.DataReference) *OutputFilePaths_GetPreviousCheckpointsPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutputFilePaths_GetPreviousCheckpointsPrefix_Call) RunAndReturn(run func() storage.DataReference) *OutputFilePaths_GetPreviousCheckpointsPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// GetRawOutputPrefix provides a mock function with given fields:
func (_m *OutputFilePaths) GetRawOutputPrefix() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRawOutputPrefix")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// OutputFilePaths_GetRawOutputPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawOutputPrefix'
type OutputFilePaths_GetRawOutputPrefix_Call struct {
	*mock.Call
}

// GetRawOutputPrefix is a helper method to define mock.On call
func (_e *OutputFilePaths_Expecter) GetRawOutputPrefix() *OutputFilePaths_GetRawOutputPrefix_Call {
	return &OutputFilePaths_GetRawOutputPrefix_Call{Call: _e.mock.On("GetRawOutputPrefix")}
}

func (_c *OutputFilePaths_GetRawOutputPrefix_Call) Run(run func()) *OutputFilePaths_GetRawOutputPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OutputFilePaths_GetRawOutputPrefix_Call) Return(_a0 storage.DataReference) *OutputFilePaths_GetRawOutputPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutputFilePaths_GetRawOutputPrefix_Call) RunAndReturn(run func() storage.DataReference) *OutputFilePaths_GetRawOutputPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutputFilePaths creates a new instance of OutputFilePaths. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutputFilePaths(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutputFilePaths {
	mock := &OutputFilePaths{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
