// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	workqueue "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/workqueue"
	mock "github.com/stretchr/testify/mock"
)

// WorkItemInfo is an autogenerated mock type for the WorkItemInfo type
type WorkItemInfo struct {
	mock.Mock
}

type WorkItemInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkItemInfo) EXPECT() *WorkItemInfo_Expecter {
	return &WorkItemInfo_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with no fields
func (_m *WorkItemInfo) Error() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkItemInfo_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type WorkItemInfo_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *WorkItemInfo_Expecter) Error() *WorkItemInfo_Error_Call {
	return &WorkItemInfo_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *WorkItemInfo_Error_Call) Run(run func()) *WorkItemInfo_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkItemInfo_Error_Call) Return(_a0 error) *WorkItemInfo_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkItemInfo_Error_Call) RunAndReturn(run func() error) *WorkItemInfo_Error_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with no fields
func (_m *WorkItemInfo) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// WorkItemInfo_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type WorkItemInfo_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *WorkItemInfo_Expecter) ID() *WorkItemInfo_ID_Call {
	return &WorkItemInfo_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *WorkItemInfo_ID_Call) Run(run func()) *WorkItemInfo_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkItemInfo_ID_Call) Return(_a0 string) *WorkItemInfo_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkItemInfo_ID_Call) RunAndReturn(run func() string) *WorkItemInfo_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Item provides a mock function with no fields
func (_m *WorkItemInfo) Item() workqueue.WorkItem {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Item")
	}

	var r0 workqueue.WorkItem
	if rf, ok := ret.Get(0).(func() workqueue.WorkItem); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workqueue.WorkItem)
		}
	}

	return r0
}

// WorkItemInfo_Item_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Item'
type WorkItemInfo_Item_Call struct {
	*mock.Call
}

// Item is a helper method to define mock.On call
func (_e *WorkItemInfo_Expecter) Item() *WorkItemInfo_Item_Call {
	return &WorkItemInfo_Item_Call{Call: _e.mock.On("Item")}
}

func (_c *WorkItemInfo_Item_Call) Run(run func()) *WorkItemInfo_Item_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkItemInfo_Item_Call) Return(_a0 workqueue.WorkItem) *WorkItemInfo_Item_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkItemInfo_Item_Call) RunAndReturn(run func() workqueue.WorkItem) *WorkItemInfo_Item_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with no fields
func (_m *WorkItemInfo) Status() workqueue.WorkStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 workqueue.WorkStatus
	if rf, ok := ret.Get(0).(func() workqueue.WorkStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(workqueue.WorkStatus)
	}

	return r0
}

// WorkItemInfo_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type WorkItemInfo_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *WorkItemInfo_Expecter) Status() *WorkItemInfo_Status_Call {
	return &WorkItemInfo_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *WorkItemInfo_Status_Call) Run(run func()) *WorkItemInfo_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkItemInfo_Status_Call) Return(_a0 workqueue.WorkStatus) *WorkItemInfo_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkItemInfo_Status_Call) RunAndReturn(run func() workqueue.WorkStatus) *WorkItemInfo_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkItemInfo creates a new instance of WorkItemInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkItemInfo(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkItemInfo {
	mock := &WorkItemInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
