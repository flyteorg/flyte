// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	workqueue "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/workqueue"
	mock "github.com/stretchr/testify/mock"
)

// IndexedWorkQueue is an autogenerated mock type for the IndexedWorkQueue type
type IndexedWorkQueue struct {
	mock.Mock
}

type IndexedWorkQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *IndexedWorkQueue) EXPECT() *IndexedWorkQueue_Expecter {
	return &IndexedWorkQueue_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: id
func (_m *IndexedWorkQueue) Get(id string) (workqueue.WorkItemInfo, bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 workqueue.WorkItemInfo
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (workqueue.WorkItemInfo, bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) workqueue.WorkItemInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workqueue.WorkItemInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IndexedWorkQueue_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IndexedWorkQueue_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *IndexedWorkQueue_Expecter) Get(id interface{}) *IndexedWorkQueue_Get_Call {
	return &IndexedWorkQueue_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *IndexedWorkQueue_Get_Call) Run(run func(id string)) *IndexedWorkQueue_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IndexedWorkQueue_Get_Call) Return(info workqueue.WorkItemInfo, found bool, err error) *IndexedWorkQueue_Get_Call {
	_c.Call.Return(info, found, err)
	return _c
}

func (_c *IndexedWorkQueue_Get_Call) RunAndReturn(run func(string) (workqueue.WorkItemInfo, bool, error)) *IndexedWorkQueue_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Queue provides a mock function with given fields: ctx, id, once
func (_m *IndexedWorkQueue) Queue(ctx context.Context, id string, once workqueue.WorkItem) error {
	ret := _m.Called(ctx, id, once)

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, workqueue.WorkItem) error); ok {
		r0 = rf(ctx, id, once)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexedWorkQueue_Queue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queue'
type IndexedWorkQueue_Queue_Call struct {
	*mock.Call
}

// Queue is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - once workqueue.WorkItem
func (_e *IndexedWorkQueue_Expecter) Queue(ctx interface{}, id interface{}, once interface{}) *IndexedWorkQueue_Queue_Call {
	return &IndexedWorkQueue_Queue_Call{Call: _e.mock.On("Queue", ctx, id, once)}
}

func (_c *IndexedWorkQueue_Queue_Call) Run(run func(ctx context.Context, id string, once workqueue.WorkItem)) *IndexedWorkQueue_Queue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(workqueue.WorkItem))
	})
	return _c
}

func (_c *IndexedWorkQueue_Queue_Call) Return(_a0 error) *IndexedWorkQueue_Queue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IndexedWorkQueue_Queue_Call) RunAndReturn(run func(context.Context, string, workqueue.WorkItem) error) *IndexedWorkQueue_Queue_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *IndexedWorkQueue) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexedWorkQueue_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type IndexedWorkQueue_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IndexedWorkQueue_Expecter) Start(ctx interface{}) *IndexedWorkQueue_Start_Call {
	return &IndexedWorkQueue_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *IndexedWorkQueue_Start_Call) Run(run func(ctx context.Context)) *IndexedWorkQueue_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IndexedWorkQueue_Start_Call) Return(_a0 error) *IndexedWorkQueue_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IndexedWorkQueue_Start_Call) RunAndReturn(run func(context.Context) error) *IndexedWorkQueue_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewIndexedWorkQueue creates a new instance of IndexedWorkQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIndexedWorkQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *IndexedWorkQueue {
	mock := &IndexedWorkQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
