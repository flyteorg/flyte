// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/flyteorg/flyte/flyteplugins/go/tasks/plugins/presto/client"

	mock "github.com/stretchr/testify/mock"
)

// PrestoClient is an autogenerated mock type for the PrestoClient type
type PrestoClient struct {
	mock.Mock
}

type PrestoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *PrestoClient) EXPECT() *PrestoClient_Expecter {
	return &PrestoClient_Expecter{mock: &_m.Mock}
}

// ExecuteCommand provides a mock function with given fields: ctx, commandStr, executeArgs
func (_m *PrestoClient) ExecuteCommand(ctx context.Context, commandStr string, executeArgs client.PrestoExecuteArgs) (client.PrestoExecuteResponse, error) {
	ret := _m.Called(ctx, commandStr, executeArgs)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCommand")
	}

	var r0 client.PrestoExecuteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.PrestoExecuteArgs) (client.PrestoExecuteResponse, error)); ok {
		return rf(ctx, commandStr, executeArgs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.PrestoExecuteArgs) client.PrestoExecuteResponse); ok {
		r0 = rf(ctx, commandStr, executeArgs)
	} else {
		r0 = ret.Get(0).(client.PrestoExecuteResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.PrestoExecuteArgs) error); ok {
		r1 = rf(ctx, commandStr, executeArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrestoClient_ExecuteCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteCommand'
type PrestoClient_ExecuteCommand_Call struct {
	*mock.Call
}

// ExecuteCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - commandStr string
//   - executeArgs client.PrestoExecuteArgs
func (_e *PrestoClient_Expecter) ExecuteCommand(ctx interface{}, commandStr interface{}, executeArgs interface{}) *PrestoClient_ExecuteCommand_Call {
	return &PrestoClient_ExecuteCommand_Call{Call: _e.mock.On("ExecuteCommand", ctx, commandStr, executeArgs)}
}

func (_c *PrestoClient_ExecuteCommand_Call) Run(run func(ctx context.Context, commandStr string, executeArgs client.PrestoExecuteArgs)) *PrestoClient_ExecuteCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.PrestoExecuteArgs))
	})
	return _c
}

func (_c *PrestoClient_ExecuteCommand_Call) Return(_a0 client.PrestoExecuteResponse, _a1 error) *PrestoClient_ExecuteCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PrestoClient_ExecuteCommand_Call) RunAndReturn(run func(context.Context, string, client.PrestoExecuteArgs) (client.PrestoExecuteResponse, error)) *PrestoClient_ExecuteCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommandStatus provides a mock function with given fields: ctx, commandID
func (_m *PrestoClient) GetCommandStatus(ctx context.Context, commandID string) (client.PrestoStatus, error) {
	ret := _m.Called(ctx, commandID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommandStatus")
	}

	var r0 client.PrestoStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (client.PrestoStatus, error)); ok {
		return rf(ctx, commandID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) client.PrestoStatus); ok {
		r0 = rf(ctx, commandID)
	} else {
		r0 = ret.Get(0).(client.PrestoStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, commandID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrestoClient_GetCommandStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommandStatus'
type PrestoClient_GetCommandStatus_Call struct {
	*mock.Call
}

// GetCommandStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - commandID string
func (_e *PrestoClient_Expecter) GetCommandStatus(ctx interface{}, commandID interface{}) *PrestoClient_GetCommandStatus_Call {
	return &PrestoClient_GetCommandStatus_Call{Call: _e.mock.On("GetCommandStatus", ctx, commandID)}
}

func (_c *PrestoClient_GetCommandStatus_Call) Run(run func(ctx context.Context, commandID string)) *PrestoClient_GetCommandStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PrestoClient_GetCommandStatus_Call) Return(_a0 client.PrestoStatus, _a1 error) *PrestoClient_GetCommandStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PrestoClient_GetCommandStatus_Call) RunAndReturn(run func(context.Context, string) (client.PrestoStatus, error)) *PrestoClient_GetCommandStatus_Call {
	_c.Call.Return(run)
	return _c
}

// KillCommand provides a mock function with given fields: ctx, commandID
func (_m *PrestoClient) KillCommand(ctx context.Context, commandID string) error {
	ret := _m.Called(ctx, commandID)

	if len(ret) == 0 {
		panic("no return value specified for KillCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, commandID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrestoClient_KillCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KillCommand'
type PrestoClient_KillCommand_Call struct {
	*mock.Call
}

// KillCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - commandID string
func (_e *PrestoClient_Expecter) KillCommand(ctx interface{}, commandID interface{}) *PrestoClient_KillCommand_Call {
	return &PrestoClient_KillCommand_Call{Call: _e.mock.On("KillCommand", ctx, commandID)}
}

func (_c *PrestoClient_KillCommand_Call) Run(run func(ctx context.Context, commandID string)) *PrestoClient_KillCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PrestoClient_KillCommand_Call) Return(_a0 error) *PrestoClient_KillCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PrestoClient_KillCommand_Call) RunAndReturn(run func(context.Context, string) error) *PrestoClient_KillCommand_Call {
	_c.Call.Return(run)
	return _c
}

// NewPrestoClient creates a new instance of PrestoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrestoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PrestoClient {
	mock := &PrestoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
