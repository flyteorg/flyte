// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/flyteorg/flyte/flyteplugins/go/tasks/plugins/hive/client"

	mock "github.com/stretchr/testify/mock"
)

// QuboleClient is an autogenerated mock type for the QuboleClient type
type QuboleClient struct {
	mock.Mock
}

type QuboleClient_Expecter struct {
	mock *mock.Mock
}

func (_m *QuboleClient) EXPECT() *QuboleClient_Expecter {
	return &QuboleClient_Expecter{mock: &_m.Mock}
}

// ExecuteHiveCommand provides a mock function with given fields: ctx, commandStr, timeoutVal, clusterPrimaryLabel, accountKey, tags, commandMetadata
func (_m *QuboleClient) ExecuteHiveCommand(ctx context.Context, commandStr string, timeoutVal uint32, clusterPrimaryLabel string, accountKey string, tags []string, commandMetadata client.CommandMetadata) (*client.QuboleCommandDetails, error) {
	ret := _m.Called(ctx, commandStr, timeoutVal, clusterPrimaryLabel, accountKey, tags, commandMetadata)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteHiveCommand")
	}

	var r0 *client.QuboleCommandDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32, string, string, []string, client.CommandMetadata) (*client.QuboleCommandDetails, error)); ok {
		return rf(ctx, commandStr, timeoutVal, clusterPrimaryLabel, accountKey, tags, commandMetadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32, string, string, []string, client.CommandMetadata) *client.QuboleCommandDetails); ok {
		r0 = rf(ctx, commandStr, timeoutVal, clusterPrimaryLabel, accountKey, tags, commandMetadata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.QuboleCommandDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint32, string, string, []string, client.CommandMetadata) error); ok {
		r1 = rf(ctx, commandStr, timeoutVal, clusterPrimaryLabel, accountKey, tags, commandMetadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuboleClient_ExecuteHiveCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteHiveCommand'
type QuboleClient_ExecuteHiveCommand_Call struct {
	*mock.Call
}

// ExecuteHiveCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - commandStr string
//   - timeoutVal uint32
//   - clusterPrimaryLabel string
//   - accountKey string
//   - tags []string
//   - commandMetadata client.CommandMetadata
func (_e *QuboleClient_Expecter) ExecuteHiveCommand(ctx interface{}, commandStr interface{}, timeoutVal interface{}, clusterPrimaryLabel interface{}, accountKey interface{}, tags interface{}, commandMetadata interface{}) *QuboleClient_ExecuteHiveCommand_Call {
	return &QuboleClient_ExecuteHiveCommand_Call{Call: _e.mock.On("ExecuteHiveCommand", ctx, commandStr, timeoutVal, clusterPrimaryLabel, accountKey, tags, commandMetadata)}
}

func (_c *QuboleClient_ExecuteHiveCommand_Call) Run(run func(ctx context.Context, commandStr string, timeoutVal uint32, clusterPrimaryLabel string, accountKey string, tags []string, commandMetadata client.CommandMetadata)) *QuboleClient_ExecuteHiveCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint32), args[3].(string), args[4].(string), args[5].([]string), args[6].(client.CommandMetadata))
	})
	return _c
}

func (_c *QuboleClient_ExecuteHiveCommand_Call) Return(_a0 *client.QuboleCommandDetails, _a1 error) *QuboleClient_ExecuteHiveCommand_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuboleClient_ExecuteHiveCommand_Call) RunAndReturn(run func(context.Context, string, uint32, string, string, []string, client.CommandMetadata) (*client.QuboleCommandDetails, error)) *QuboleClient_ExecuteHiveCommand_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommandStatus provides a mock function with given fields: ctx, commandID, accountKey
func (_m *QuboleClient) GetCommandStatus(ctx context.Context, commandID string, accountKey string) (client.QuboleStatus, error) {
	ret := _m.Called(ctx, commandID, accountKey)

	if len(ret) == 0 {
		panic("no return value specified for GetCommandStatus")
	}

	var r0 client.QuboleStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (client.QuboleStatus, error)); ok {
		return rf(ctx, commandID, accountKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) client.QuboleStatus); ok {
		r0 = rf(ctx, commandID, accountKey)
	} else {
		r0 = ret.Get(0).(client.QuboleStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, commandID, accountKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuboleClient_GetCommandStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommandStatus'
type QuboleClient_GetCommandStatus_Call struct {
	*mock.Call
}

// GetCommandStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - commandID string
//   - accountKey string
func (_e *QuboleClient_Expecter) GetCommandStatus(ctx interface{}, commandID interface{}, accountKey interface{}) *QuboleClient_GetCommandStatus_Call {
	return &QuboleClient_GetCommandStatus_Call{Call: _e.mock.On("GetCommandStatus", ctx, commandID, accountKey)}
}

func (_c *QuboleClient_GetCommandStatus_Call) Run(run func(ctx context.Context, commandID string, accountKey string)) *QuboleClient_GetCommandStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *QuboleClient_GetCommandStatus_Call) Return(_a0 client.QuboleStatus, _a1 error) *QuboleClient_GetCommandStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuboleClient_GetCommandStatus_Call) RunAndReturn(run func(context.Context, string, string) (client.QuboleStatus, error)) *QuboleClient_GetCommandStatus_Call {
	_c.Call.Return(run)
	return _c
}

// KillCommand provides a mock function with given fields: ctx, commandID, accountKey
func (_m *QuboleClient) KillCommand(ctx context.Context, commandID string, accountKey string) error {
	ret := _m.Called(ctx, commandID, accountKey)

	if len(ret) == 0 {
		panic("no return value specified for KillCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, commandID, accountKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuboleClient_KillCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KillCommand'
type QuboleClient_KillCommand_Call struct {
	*mock.Call
}

// KillCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - commandID string
//   - accountKey string
func (_e *QuboleClient_Expecter) KillCommand(ctx interface{}, commandID interface{}, accountKey interface{}) *QuboleClient_KillCommand_Call {
	return &QuboleClient_KillCommand_Call{Call: _e.mock.On("KillCommand", ctx, commandID, accountKey)}
}

func (_c *QuboleClient_KillCommand_Call) Run(run func(ctx context.Context, commandID string, accountKey string)) *QuboleClient_KillCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *QuboleClient_KillCommand_Call) Return(_a0 error) *QuboleClient_KillCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuboleClient_KillCommand_Call) RunAndReturn(run func(context.Context, string, string) error) *QuboleClient_KillCommand_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuboleClient creates a new instance of QuboleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuboleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuboleClient {
	mock := &QuboleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
