// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	batch "github.com/aws/aws-sdk-go/service/batch"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// BatchServiceClient is an autogenerated mock type for the BatchServiceClient type
type BatchServiceClient struct {
	mock.Mock
}

type BatchServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *BatchServiceClient) EXPECT() *BatchServiceClient_Expecter {
	return &BatchServiceClient_Expecter{mock: &_m.Mock}
}

// DescribeJobsWithContext provides a mock function with given fields: ctx, input, opts
func (_m *BatchServiceClient) DescribeJobsWithContext(ctx context.Context, input *batch.DescribeJobsInput, opts ...request.Option) (*batch.DescribeJobsOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeJobsWithContext")
	}

	var r0 *batch.DescribeJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *batch.DescribeJobsInput, ...request.Option) (*batch.DescribeJobsOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *batch.DescribeJobsInput, ...request.Option) *batch.DescribeJobsOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batch.DescribeJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *batch.DescribeJobsInput, ...request.Option) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchServiceClient_DescribeJobsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeJobsWithContext'
type BatchServiceClient_DescribeJobsWithContext_Call struct {
	*mock.Call
}

// DescribeJobsWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - input *batch.DescribeJobsInput
//   - opts ...request.Option
func (_e *BatchServiceClient_Expecter) DescribeJobsWithContext(ctx interface{}, input interface{}, opts ...interface{}) *BatchServiceClient_DescribeJobsWithContext_Call {
	return &BatchServiceClient_DescribeJobsWithContext_Call{Call: _e.mock.On("DescribeJobsWithContext",
		append([]interface{}{ctx, input}, opts...)...)}
}

func (_c *BatchServiceClient_DescribeJobsWithContext_Call) Run(run func(ctx context.Context, input *batch.DescribeJobsInput, opts ...request.Option)) *BatchServiceClient_DescribeJobsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*batch.DescribeJobsInput), variadicArgs...)
	})
	return _c
}

func (_c *BatchServiceClient_DescribeJobsWithContext_Call) Return(_a0 *batch.DescribeJobsOutput, _a1 error) *BatchServiceClient_DescribeJobsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BatchServiceClient_DescribeJobsWithContext_Call) RunAndReturn(run func(context.Context, *batch.DescribeJobsInput, ...request.Option) (*batch.DescribeJobsOutput, error)) *BatchServiceClient_DescribeJobsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterJobDefinitionWithContext provides a mock function with given fields: ctx, input, opts
func (_m *BatchServiceClient) RegisterJobDefinitionWithContext(ctx context.Context, input *batch.RegisterJobDefinitionInput, opts ...request.Option) (*batch.RegisterJobDefinitionOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterJobDefinitionWithContext")
	}

	var r0 *batch.RegisterJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *batch.RegisterJobDefinitionInput, ...request.Option) (*batch.RegisterJobDefinitionOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *batch.RegisterJobDefinitionInput, ...request.Option) *batch.RegisterJobDefinitionOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batch.RegisterJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *batch.RegisterJobDefinitionInput, ...request.Option) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchServiceClient_RegisterJobDefinitionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterJobDefinitionWithContext'
type BatchServiceClient_RegisterJobDefinitionWithContext_Call struct {
	*mock.Call
}

// RegisterJobDefinitionWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - input *batch.RegisterJobDefinitionInput
//   - opts ...request.Option
func (_e *BatchServiceClient_Expecter) RegisterJobDefinitionWithContext(ctx interface{}, input interface{}, opts ...interface{}) *BatchServiceClient_RegisterJobDefinitionWithContext_Call {
	return &BatchServiceClient_RegisterJobDefinitionWithContext_Call{Call: _e.mock.On("RegisterJobDefinitionWithContext",
		append([]interface{}{ctx, input}, opts...)...)}
}

func (_c *BatchServiceClient_RegisterJobDefinitionWithContext_Call) Run(run func(ctx context.Context, input *batch.RegisterJobDefinitionInput, opts ...request.Option)) *BatchServiceClient_RegisterJobDefinitionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*batch.RegisterJobDefinitionInput), variadicArgs...)
	})
	return _c
}

func (_c *BatchServiceClient_RegisterJobDefinitionWithContext_Call) Return(_a0 *batch.RegisterJobDefinitionOutput, _a1 error) *BatchServiceClient_RegisterJobDefinitionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BatchServiceClient_RegisterJobDefinitionWithContext_Call) RunAndReturn(run func(context.Context, *batch.RegisterJobDefinitionInput, ...request.Option) (*batch.RegisterJobDefinitionOutput, error)) *BatchServiceClient_RegisterJobDefinitionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitJobWithContext provides a mock function with given fields: ctx, input, opts
func (_m *BatchServiceClient) SubmitJobWithContext(ctx context.Context, input *batch.SubmitJobInput, opts ...request.Option) (*batch.SubmitJobOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubmitJobWithContext")
	}

	var r0 *batch.SubmitJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *batch.SubmitJobInput, ...request.Option) (*batch.SubmitJobOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *batch.SubmitJobInput, ...request.Option) *batch.SubmitJobOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batch.SubmitJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *batch.SubmitJobInput, ...request.Option) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchServiceClient_SubmitJobWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitJobWithContext'
type BatchServiceClient_SubmitJobWithContext_Call struct {
	*mock.Call
}

// SubmitJobWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - input *batch.SubmitJobInput
//   - opts ...request.Option
func (_e *BatchServiceClient_Expecter) SubmitJobWithContext(ctx interface{}, input interface{}, opts ...interface{}) *BatchServiceClient_SubmitJobWithContext_Call {
	return &BatchServiceClient_SubmitJobWithContext_Call{Call: _e.mock.On("SubmitJobWithContext",
		append([]interface{}{ctx, input}, opts...)...)}
}

func (_c *BatchServiceClient_SubmitJobWithContext_Call) Run(run func(ctx context.Context, input *batch.SubmitJobInput, opts ...request.Option)) *BatchServiceClient_SubmitJobWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*batch.SubmitJobInput), variadicArgs...)
	})
	return _c
}

func (_c *BatchServiceClient_SubmitJobWithContext_Call) Return(_a0 *batch.SubmitJobOutput, _a1 error) *BatchServiceClient_SubmitJobWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BatchServiceClient_SubmitJobWithContext_Call) RunAndReturn(run func(context.Context, *batch.SubmitJobInput, ...request.Option) (*batch.SubmitJobOutput, error)) *BatchServiceClient_SubmitJobWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateJobWithContext provides a mock function with given fields: ctx, input, opts
func (_m *BatchServiceClient) TerminateJobWithContext(ctx context.Context, input *batch.TerminateJobInput, opts ...request.Option) (*batch.TerminateJobOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateJobWithContext")
	}

	var r0 *batch.TerminateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *batch.TerminateJobInput, ...request.Option) (*batch.TerminateJobOutput, error)); ok {
		return rf(ctx, input, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *batch.TerminateJobInput, ...request.Option) *batch.TerminateJobOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*batch.TerminateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *batch.TerminateJobInput, ...request.Option) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchServiceClient_TerminateJobWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateJobWithContext'
type BatchServiceClient_TerminateJobWithContext_Call struct {
	*mock.Call
}

// TerminateJobWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - input *batch.TerminateJobInput
//   - opts ...request.Option
func (_e *BatchServiceClient_Expecter) TerminateJobWithContext(ctx interface{}, input interface{}, opts ...interface{}) *BatchServiceClient_TerminateJobWithContext_Call {
	return &BatchServiceClient_TerminateJobWithContext_Call{Call: _e.mock.On("TerminateJobWithContext",
		append([]interface{}{ctx, input}, opts...)...)}
}

func (_c *BatchServiceClient_TerminateJobWithContext_Call) Run(run func(ctx context.Context, input *batch.TerminateJobInput, opts ...request.Option)) *BatchServiceClient_TerminateJobWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*batch.TerminateJobInput), variadicArgs...)
	})
	return _c
}

func (_c *BatchServiceClient_TerminateJobWithContext_Call) Return(_a0 *batch.TerminateJobOutput, _a1 error) *BatchServiceClient_TerminateJobWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BatchServiceClient_TerminateJobWithContext_Call) RunAndReturn(run func(context.Context, *batch.TerminateJobInput, ...request.Option) (*batch.TerminateJobOutput, error)) *BatchServiceClient_TerminateJobWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewBatchServiceClient creates a new instance of BatchServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatchServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *BatchServiceClient {
	mock := &BatchServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
