// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	definition "github.com/flyteorg/flyte/flyteplugins/go/tasks/plugins/array/awsbatch/definition"
	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *Cache) Get(key definition.CacheKey) (string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(definition.CacheKey) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(definition.CacheKey) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(definition.CacheKey) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Cache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Cache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key definition.CacheKey
func (_e *Cache_Expecter) Get(key interface{}) *Cache_Get_Call {
	return &Cache_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Cache_Get_Call) Run(run func(key definition.CacheKey)) *Cache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(definition.CacheKey))
	})
	return _c
}

func (_c *Cache_Get_Call) Return(jobDefinition string, found bool) *Cache_Get_Call {
	_c.Call.Return(jobDefinition, found)
	return _c
}

func (_c *Cache_Get_Call) RunAndReturn(run func(definition.CacheKey) (string, bool)) *Cache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: key, _a1
func (_m *Cache) Put(key definition.CacheKey, _a1 string) error {
	ret := _m.Called(key, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(definition.CacheKey, string) error); ok {
		r0 = rf(key, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Cache_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - key definition.CacheKey
//   - _a1 string
func (_e *Cache_Expecter) Put(key interface{}, _a1 interface{}) *Cache_Put_Call {
	return &Cache_Put_Call{Call: _e.mock.On("Put", key, _a1)}
}

func (_c *Cache_Put_Call) Run(run func(key definition.CacheKey, _a1 string)) *Cache_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(definition.CacheKey), args[1].(string))
	})
	return _c
}

func (_c *Cache_Put_Call) Return(_a0 error) *Cache_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Put_Call) RunAndReturn(run func(definition.CacheKey, string) error) *Cache_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
