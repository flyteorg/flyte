// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	batch "github.com/aws/aws-sdk-go/service/batch"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// GetAccountID provides a mock function with given fields:
func (_m *Client) GetAccountID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccountID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Client_GetAccountID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountID'
type Client_GetAccountID_Call struct {
	*mock.Call
}

// GetAccountID is a helper method to define mock.On call
func (_e *Client_Expecter) GetAccountID() *Client_GetAccountID_Call {
	return &Client_GetAccountID_Call{Call: _e.mock.On("GetAccountID")}
}

func (_c *Client_GetAccountID_Call) Run(run func()) *Client_GetAccountID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_GetAccountID_Call) Return(_a0 string) *Client_GetAccountID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_GetAccountID_Call) RunAndReturn(run func() string) *Client_GetAccountID_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobDetailsBatch provides a mock function with given fields: ctx, ids
func (_m *Client) GetJobDetailsBatch(ctx context.Context, ids []string) ([]*batch.JobDetail, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetJobDetailsBatch")
	}

	var r0 []*batch.JobDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*batch.JobDetail, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*batch.JobDetail); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*batch.JobDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetJobDetailsBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobDetailsBatch'
type Client_GetJobDetailsBatch_Call struct {
	*mock.Call
}

// GetJobDetailsBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
func (_e *Client_Expecter) GetJobDetailsBatch(ctx interface{}, ids interface{}) *Client_GetJobDetailsBatch_Call {
	return &Client_GetJobDetailsBatch_Call{Call: _e.mock.On("GetJobDetailsBatch", ctx, ids)}
}

func (_c *Client_GetJobDetailsBatch_Call) Run(run func(ctx context.Context, ids []string)) *Client_GetJobDetailsBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *Client_GetJobDetailsBatch_Call) Return(_a0 []*batch.JobDetail, _a1 error) *Client_GetJobDetailsBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetJobDetailsBatch_Call) RunAndReturn(run func(context.Context, []string) ([]*batch.JobDetail, error)) *Client_GetJobDetailsBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegion provides a mock function with given fields:
func (_m *Client) GetRegion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRegion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Client_GetRegion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegion'
type Client_GetRegion_Call struct {
	*mock.Call
}

// GetRegion is a helper method to define mock.On call
func (_e *Client_Expecter) GetRegion() *Client_GetRegion_Call {
	return &Client_GetRegion_Call{Call: _e.mock.On("GetRegion")}
}

func (_c *Client_GetRegion_Call) Run(run func()) *Client_GetRegion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_GetRegion_Call) Return(_a0 string) *Client_GetRegion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_GetRegion_Call) RunAndReturn(run func() string) *Client_GetRegion_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterJobDefinition provides a mock function with given fields: ctx, name, image, role, platformCapabilities
func (_m *Client) RegisterJobDefinition(ctx context.Context, name string, image string, role string, platformCapabilities string) (string, error) {
	ret := _m.Called(ctx, name, image, role, platformCapabilities)

	if len(ret) == 0 {
		panic("no return value specified for RegisterJobDefinition")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (string, error)); ok {
		return rf(ctx, name, image, role, platformCapabilities)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) string); ok {
		r0 = rf(ctx, name, image, role, platformCapabilities)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, image, role, platformCapabilities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_RegisterJobDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterJobDefinition'
type Client_RegisterJobDefinition_Call struct {
	*mock.Call
}

// RegisterJobDefinition is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - image string
//   - role string
//   - platformCapabilities string
func (_e *Client_Expecter) RegisterJobDefinition(ctx interface{}, name interface{}, image interface{}, role interface{}, platformCapabilities interface{}) *Client_RegisterJobDefinition_Call {
	return &Client_RegisterJobDefinition_Call{Call: _e.mock.On("RegisterJobDefinition", ctx, name, image, role, platformCapabilities)}
}

func (_c *Client_RegisterJobDefinition_Call) Run(run func(ctx context.Context, name string, image string, role string, platformCapabilities string)) *Client_RegisterJobDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *Client_RegisterJobDefinition_Call) Return(arn string, err error) *Client_RegisterJobDefinition_Call {
	_c.Call.Return(arn, err)
	return _c
}

func (_c *Client_RegisterJobDefinition_Call) RunAndReturn(run func(context.Context, string, string, string, string) (string, error)) *Client_RegisterJobDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitJob provides a mock function with given fields: ctx, input
func (_m *Client) SubmitJob(ctx context.Context, input *batch.SubmitJobInput) (string, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for SubmitJob")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *batch.SubmitJobInput) (string, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *batch.SubmitJobInput) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *batch.SubmitJobInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_SubmitJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitJob'
type Client_SubmitJob_Call struct {
	*mock.Call
}

// SubmitJob is a helper method to define mock.On call
//   - ctx context.Context
//   - input *batch.SubmitJobInput
func (_e *Client_Expecter) SubmitJob(ctx interface{}, input interface{}) *Client_SubmitJob_Call {
	return &Client_SubmitJob_Call{Call: _e.mock.On("SubmitJob", ctx, input)}
}

func (_c *Client_SubmitJob_Call) Run(run func(ctx context.Context, input *batch.SubmitJobInput)) *Client_SubmitJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*batch.SubmitJobInput))
	})
	return _c
}

func (_c *Client_SubmitJob_Call) Return(jobID string, err error) *Client_SubmitJob_Call {
	_c.Call.Return(jobID, err)
	return _c
}

func (_c *Client_SubmitJob_Call) RunAndReturn(run func(context.Context, *batch.SubmitJobInput) (string, error)) *Client_SubmitJob_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateJob provides a mock function with given fields: ctx, jobID, reason
func (_m *Client) TerminateJob(ctx context.Context, jobID string, reason string) error {
	ret := _m.Called(ctx, jobID, reason)

	if len(ret) == 0 {
		panic("no return value specified for TerminateJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, jobID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_TerminateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateJob'
type Client_TerminateJob_Call struct {
	*mock.Call
}

// TerminateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID string
//   - reason string
func (_e *Client_Expecter) TerminateJob(ctx interface{}, jobID interface{}, reason interface{}) *Client_TerminateJob_Call {
	return &Client_TerminateJob_Call{Call: _e.mock.On("TerminateJob", ctx, jobID, reason)}
}

func (_c *Client_TerminateJob_Call) Run(run func(ctx context.Context, jobID string, reason string)) *Client_TerminateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Client_TerminateJob_Call) Return(_a0 error) *Client_TerminateJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_TerminateJob_Call) RunAndReturn(run func(context.Context, string, string) error) *Client_TerminateJob_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
