// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: workflow/queue_service.proto

package workflow

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	common "github.com/flyteorg/flyte/gen/go/common"
	core "github.com/flyteorg/flyte/gen/go/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkerIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the organization that this worker is associated with.
	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	// the cluster this worker is part of.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// the name for the worker, when combined with organization, and cluster this will form a unique
	// identifier for the worker.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WorkerIdentifier) Reset() {
	*x = WorkerIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_queue_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerIdentifier) ProtoMessage() {}

func (x *WorkerIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_queue_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerIdentifier.ProtoReflect.Descriptor instead.
func (*WorkerIdentifier) Descriptor() ([]byte, []int) {
	return file_workflow_queue_service_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerIdentifier) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *WorkerIdentifier) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *WorkerIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// request message for queuing an action.
type EnqueueActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier for the action.
	ActionId *common.ActionIdentifier `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// an optional name for the parent action, if it exists. the remaining run metadata (ex. org,
	// project, domain) will be the same as the action_id defined above.
	ParentActionName *string `protobuf:"bytes,2,opt,name=parent_action_name,json=parentActionName,proto3,oneof" json:"parent_action_name,omitempty"`
	// Optional run spec passed in by the root action to be utilized by all downstream actions in the run.
	RunSpec *RunSpec `protobuf:"bytes,3,opt,name=run_spec,json=runSpec,proto3" json:"run_spec,omitempty"`
	// the path to the input data for this action.
	InputUri string `protobuf:"bytes,6,opt,name=input_uri,json=inputUri,proto3" json:"input_uri,omitempty"`
	// the run base path this action should write its output to.
	RunOutputBase string `protobuf:"bytes,7,opt,name=run_output_base,json=runOutputBase,proto3" json:"run_output_base,omitempty"`
	// group this action belongs to, if applicable.
	Group string `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`
	// subject that created the run, if known.
	Subject string `protobuf:"bytes,9,opt,name=subject,proto3" json:"subject,omitempty"`
	// Types that are assignable to Spec:
	//
	//	*EnqueueActionRequest_Task
	//	*EnqueueActionRequest_Trace
	//	*EnqueueActionRequest_Condition
	Spec isEnqueueActionRequest_Spec `protobuf_oneof:"spec"`
}

func (x *EnqueueActionRequest) Reset() {
	*x = EnqueueActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_queue_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueActionRequest) ProtoMessage() {}

func (x *EnqueueActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_queue_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueActionRequest.ProtoReflect.Descriptor instead.
func (*EnqueueActionRequest) Descriptor() ([]byte, []int) {
	return file_workflow_queue_service_proto_rawDescGZIP(), []int{1}
}

func (x *EnqueueActionRequest) GetActionId() *common.ActionIdentifier {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *EnqueueActionRequest) GetParentActionName() string {
	if x != nil && x.ParentActionName != nil {
		return *x.ParentActionName
	}
	return ""
}

func (x *EnqueueActionRequest) GetRunSpec() *RunSpec {
	if x != nil {
		return x.RunSpec
	}
	return nil
}

func (x *EnqueueActionRequest) GetInputUri() string {
	if x != nil {
		return x.InputUri
	}
	return ""
}

func (x *EnqueueActionRequest) GetRunOutputBase() string {
	if x != nil {
		return x.RunOutputBase
	}
	return ""
}

func (x *EnqueueActionRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *EnqueueActionRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (m *EnqueueActionRequest) GetSpec() isEnqueueActionRequest_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *EnqueueActionRequest) GetTask() *TaskAction {
	if x, ok := x.GetSpec().(*EnqueueActionRequest_Task); ok {
		return x.Task
	}
	return nil
}

func (x *EnqueueActionRequest) GetTrace() *TraceAction {
	if x, ok := x.GetSpec().(*EnqueueActionRequest_Trace); ok {
		return x.Trace
	}
	return nil
}

func (x *EnqueueActionRequest) GetCondition() *ConditionAction {
	if x, ok := x.GetSpec().(*EnqueueActionRequest_Condition); ok {
		return x.Condition
	}
	return nil
}

type isEnqueueActionRequest_Spec interface {
	isEnqueueActionRequest_Spec()
}

type EnqueueActionRequest_Task struct {
	// TODO(haytham): Uncomment when we update all code paths to use this.
	// option (validate.required) = true;
	Task *TaskAction `protobuf:"bytes,10,opt,name=task,proto3,oneof"`
}

type EnqueueActionRequest_Trace struct {
	Trace *TraceAction `protobuf:"bytes,11,opt,name=trace,proto3,oneof"`
}

type EnqueueActionRequest_Condition struct {
	Condition *ConditionAction `protobuf:"bytes,12,opt,name=condition,proto3,oneof"`
}

func (*EnqueueActionRequest_Task) isEnqueueActionRequest_Spec() {}

func (*EnqueueActionRequest_Trace) isEnqueueActionRequest_Spec() {}

func (*EnqueueActionRequest_Condition) isEnqueueActionRequest_Spec() {}

type TaskAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a unique identifier for the task this action is associated with, if applicable.
	Id *TaskIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the definition of the task to be executed.
	Spec *TaskSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Enables caching when set and specifies the cache version to use.
	CacheKey *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key,omitempty"`
	// the specific cluster that this action should be executed on. if not set, the cluster from the
	// `RunSpec` will be used.
	Cluster string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *TaskAction) Reset() {
	*x = TaskAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_queue_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAction) ProtoMessage() {}

func (x *TaskAction) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_queue_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAction.ProtoReflect.Descriptor instead.
func (*TaskAction) Descriptor() ([]byte, []int) {
	return file_workflow_queue_service_proto_rawDescGZIP(), []int{2}
}

func (x *TaskAction) GetId() *TaskIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskAction) GetSpec() *TaskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *TaskAction) GetCacheKey() *wrapperspb.StringValue {
	if x != nil {
		return x.CacheKey
	}
	return nil
}

func (x *TaskAction) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

// TraceAction is used to define a trace action that can be used to track the execution of an action that's managed
// by the local worker. This can be used to bring determinism to code that's otherwise not deterministic (e.g. current
// time).
type TraceAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Last known phase.
	Phase Phase `protobuf:"varint,2,opt,name=phase,proto3,enum=flyteidl.workflow.Phase" json:"phase,omitempty"`
	// Time the attempt started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time the attempt ended, if applicable.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	// Output references.
	Outputs *OutputReferences `protobuf:"bytes,5,opt,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *TraceAction) Reset() {
	*x = TraceAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_queue_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceAction) ProtoMessage() {}

func (x *TraceAction) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_queue_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceAction.ProtoReflect.Descriptor instead.
func (*TraceAction) Descriptor() ([]byte, []int) {
	return file_workflow_queue_service_proto_rawDescGZIP(), []int{3}
}

func (x *TraceAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraceAction) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_PHASE_UNSPECIFIED
}

func (x *TraceAction) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TraceAction) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TraceAction) GetOutputs() *OutputReferences {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// ConditionAction is used to define a condition that can be evaluated at runtime. It can be used to
// await a signal from an external system and can carry a value.
type ConditionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the unique identifier for the action. It must be unique within the defined scope below.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Scope:
	//
	//	*ConditionAction_RunId
	//	*ConditionAction_ActionId
	//	*ConditionAction_Global
	Scope isConditionAction_Scope `protobuf_oneof:"scope"`
	// Type is the type of the value the condition is expected. This can be used to properly render
	// a UI element for the condition or validate when a value is received that it is of the expected
	// type.
	Type *core.LiteralType `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Prompt is the prompt that will be shown to the user when the condition is awaited.
	Prompt string `protobuf:"bytes,7,opt,name=prompt,proto3" json:"prompt,omitempty"`
	// Description is a description of the condition. This can be used to provide additional
	// information to the user about the condition.
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ConditionAction) Reset() {
	*x = ConditionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_queue_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionAction) ProtoMessage() {}

func (x *ConditionAction) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_queue_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionAction.ProtoReflect.Descriptor instead.
func (*ConditionAction) Descriptor() ([]byte, []int) {
	return file_workflow_queue_service_proto_rawDescGZIP(), []int{4}
}

func (x *ConditionAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ConditionAction) GetScope() isConditionAction_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *ConditionAction) GetRunId() string {
	if x, ok := x.GetScope().(*ConditionAction_RunId); ok {
		return x.RunId
	}
	return ""
}

func (x *ConditionAction) GetActionId() string {
	if x, ok := x.GetScope().(*ConditionAction_ActionId); ok {
		return x.ActionId
	}
	return ""
}

func (x *ConditionAction) GetGlobal() bool {
	if x, ok := x.GetScope().(*ConditionAction_Global); ok {
		return x.Global
	}
	return false
}

func (x *ConditionAction) GetType() *core.LiteralType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ConditionAction) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *ConditionAction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type isConditionAction_Scope interface {
	isConditionAction_Scope()
}

type ConditionAction_RunId struct {
	// RunId is the unique identifier for the run this action is associated with.
	RunId string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3,oneof"`
}

type ConditionAction_ActionId struct {
	// ActionId is the unique identifier for the action this action is associated with.
	ActionId string `protobuf:"bytes,3,opt,name=action_id,json=actionId,proto3,oneof"`
}

type ConditionAction_Global struct {
	// Global indicates the condition is global and can be used across all runs and actions.
	Global bool `protobuf:"varint,4,opt,name=global,proto3,oneof"`
}

func (*ConditionAction_RunId) isConditionAction_Scope() {}

func (*ConditionAction_ActionId) isConditionAction_Scope() {}

func (*ConditionAction_Global) isConditionAction_Scope() {}

// response message for queuing an action.
type EnqueueActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnqueueActionResponse) Reset() {
	*x = EnqueueActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_queue_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueActionResponse) ProtoMessage() {}

func (x *EnqueueActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_queue_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueActionResponse.ProtoReflect.Descriptor instead.
func (*EnqueueActionResponse) Descriptor() ([]byte, []int) {
	return file_workflow_queue_service_proto_rawDescGZIP(), []int{5}
}

// request message for aborting a run.
type AbortQueuedRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier for the run to be aborted.
	RunId *common.RunIdentifier `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Reason for aborting the action, if applicable.
	Reason *string `protobuf:"bytes,2,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
}

func (x *AbortQueuedRunRequest) Reset() {
	*x = AbortQueuedRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_queue_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortQueuedRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortQueuedRunRequest) ProtoMessage() {}

func (x *AbortQueuedRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_queue_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortQueuedRunRequest.ProtoReflect.Descriptor instead.
func (*AbortQueuedRunRequest) Descriptor() ([]byte, []int) {
	return file_workflow_queue_service_proto_rawDescGZIP(), []int{6}
}

func (x *AbortQueuedRunRequest) GetRunId() *common.RunIdentifier {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *AbortQueuedRunRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

// response message for aborting a run.
type AbortQueuedRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AbortQueuedRunResponse) Reset() {
	*x = AbortQueuedRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_queue_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortQueuedRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortQueuedRunResponse) ProtoMessage() {}

func (x *AbortQueuedRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_queue_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortQueuedRunResponse.ProtoReflect.Descriptor instead.
func (*AbortQueuedRunResponse) Descriptor() ([]byte, []int) {
	return file_workflow_queue_service_proto_rawDescGZIP(), []int{7}
}

type AbortQueuedActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ActionId is the unique identifier for the action to be aborted
	ActionId *common.ActionIdentifier `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// Reason for aborting the action, if applicable.
	Reason *string `protobuf:"bytes,2,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
}

func (x *AbortQueuedActionRequest) Reset() {
	*x = AbortQueuedActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_queue_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortQueuedActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortQueuedActionRequest) ProtoMessage() {}

func (x *AbortQueuedActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_queue_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortQueuedActionRequest.ProtoReflect.Descriptor instead.
func (*AbortQueuedActionRequest) Descriptor() ([]byte, []int) {
	return file_workflow_queue_service_proto_rawDescGZIP(), []int{8}
}

func (x *AbortQueuedActionRequest) GetActionId() *common.ActionIdentifier {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *AbortQueuedActionRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type AbortQueuedActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AbortQueuedActionResponse) Reset() {
	*x = AbortQueuedActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_queue_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortQueuedActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortQueuedActionResponse) ProtoMessage() {}

func (x *AbortQueuedActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_queue_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortQueuedActionResponse.ProtoReflect.Descriptor instead.
func (*AbortQueuedActionResponse) Descriptor() ([]byte, []int) {
	return file_workflow_queue_service_proto_rawDescGZIP(), []int{9}
}

var File_workflow_queue_service_proto protoreflect.FileDescriptor

var file_workflow_queue_service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x1a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x04, 0x0a, 0x14, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x08,
	0x72, 0x75, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x55, 0x72, 0x69, 0x12, 0x2f, 0x0a, 0x0f, 0x72, 0x75, 0x6e,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x72, 0x75, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x40, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x9d, 0x02, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x17, 0x0a, 0x15, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x80, 0x01, 0x0a, 0x15, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x18, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xcf, 0x02, 0x0a, 0x0c, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x45, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x0e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52,
	0x75, 0x6e, 0x12, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xbc, 0x01, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xa2, 0x02, 0x03, 0x46, 0x57, 0x58, 0xaa, 0x02, 0x11,
	0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0xca, 0x02, 0x11, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x5c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xe2, 0x02, 0x1d, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x3a, 0x3a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_workflow_queue_service_proto_rawDescOnce sync.Once
	file_workflow_queue_service_proto_rawDescData = file_workflow_queue_service_proto_rawDesc
)

func file_workflow_queue_service_proto_rawDescGZIP() []byte {
	file_workflow_queue_service_proto_rawDescOnce.Do(func() {
		file_workflow_queue_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflow_queue_service_proto_rawDescData)
	})
	return file_workflow_queue_service_proto_rawDescData
}

var file_workflow_queue_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_workflow_queue_service_proto_goTypes = []interface{}{
	(*WorkerIdentifier)(nil),          // 0: flyteidl.workflow.WorkerIdentifier
	(*EnqueueActionRequest)(nil),      // 1: flyteidl.workflow.EnqueueActionRequest
	(*TaskAction)(nil),                // 2: flyteidl.workflow.TaskAction
	(*TraceAction)(nil),               // 3: flyteidl.workflow.TraceAction
	(*ConditionAction)(nil),           // 4: flyteidl.workflow.ConditionAction
	(*EnqueueActionResponse)(nil),     // 5: flyteidl.workflow.EnqueueActionResponse
	(*AbortQueuedRunRequest)(nil),     // 6: flyteidl.workflow.AbortQueuedRunRequest
	(*AbortQueuedRunResponse)(nil),    // 7: flyteidl.workflow.AbortQueuedRunResponse
	(*AbortQueuedActionRequest)(nil),  // 8: flyteidl.workflow.AbortQueuedActionRequest
	(*AbortQueuedActionResponse)(nil), // 9: flyteidl.workflow.AbortQueuedActionResponse
	(*common.ActionIdentifier)(nil),   // 10: flyteidl.common.ActionIdentifier
	(*RunSpec)(nil),                   // 11: flyteidl.workflow.RunSpec
	(*TaskIdentifier)(nil),            // 12: flyteidl.workflow.TaskIdentifier
	(*TaskSpec)(nil),                  // 13: flyteidl.workflow.TaskSpec
	(*wrapperspb.StringValue)(nil),    // 14: google.protobuf.StringValue
	(Phase)(0),                        // 15: flyteidl.workflow.Phase
	(*timestamppb.Timestamp)(nil),     // 16: google.protobuf.Timestamp
	(*OutputReferences)(nil),          // 17: flyteidl.workflow.OutputReferences
	(*core.LiteralType)(nil),          // 18: flyteidl.core.LiteralType
	(*common.RunIdentifier)(nil),      // 19: flyteidl.common.RunIdentifier
}
var file_workflow_queue_service_proto_depIdxs = []int32{
	10, // 0: flyteidl.workflow.EnqueueActionRequest.action_id:type_name -> flyteidl.common.ActionIdentifier
	11, // 1: flyteidl.workflow.EnqueueActionRequest.run_spec:type_name -> flyteidl.workflow.RunSpec
	2,  // 2: flyteidl.workflow.EnqueueActionRequest.task:type_name -> flyteidl.workflow.TaskAction
	3,  // 3: flyteidl.workflow.EnqueueActionRequest.trace:type_name -> flyteidl.workflow.TraceAction
	4,  // 4: flyteidl.workflow.EnqueueActionRequest.condition:type_name -> flyteidl.workflow.ConditionAction
	12, // 5: flyteidl.workflow.TaskAction.id:type_name -> flyteidl.workflow.TaskIdentifier
	13, // 6: flyteidl.workflow.TaskAction.spec:type_name -> flyteidl.workflow.TaskSpec
	14, // 7: flyteidl.workflow.TaskAction.cache_key:type_name -> google.protobuf.StringValue
	15, // 8: flyteidl.workflow.TraceAction.phase:type_name -> flyteidl.workflow.Phase
	16, // 9: flyteidl.workflow.TraceAction.start_time:type_name -> google.protobuf.Timestamp
	16, // 10: flyteidl.workflow.TraceAction.end_time:type_name -> google.protobuf.Timestamp
	17, // 11: flyteidl.workflow.TraceAction.outputs:type_name -> flyteidl.workflow.OutputReferences
	18, // 12: flyteidl.workflow.ConditionAction.type:type_name -> flyteidl.core.LiteralType
	19, // 13: flyteidl.workflow.AbortQueuedRunRequest.run_id:type_name -> flyteidl.common.RunIdentifier
	10, // 14: flyteidl.workflow.AbortQueuedActionRequest.action_id:type_name -> flyteidl.common.ActionIdentifier
	1,  // 15: flyteidl.workflow.QueueService.EnqueueAction:input_type -> flyteidl.workflow.EnqueueActionRequest
	6,  // 16: flyteidl.workflow.QueueService.AbortQueuedRun:input_type -> flyteidl.workflow.AbortQueuedRunRequest
	8,  // 17: flyteidl.workflow.QueueService.AbortQueuedAction:input_type -> flyteidl.workflow.AbortQueuedActionRequest
	5,  // 18: flyteidl.workflow.QueueService.EnqueueAction:output_type -> flyteidl.workflow.EnqueueActionResponse
	7,  // 19: flyteidl.workflow.QueueService.AbortQueuedRun:output_type -> flyteidl.workflow.AbortQueuedRunResponse
	9,  // 20: flyteidl.workflow.QueueService.AbortQueuedAction:output_type -> flyteidl.workflow.AbortQueuedActionResponse
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_workflow_queue_service_proto_init() }
func file_workflow_queue_service_proto_init() {
	if File_workflow_queue_service_proto != nil {
		return
	}
	file_workflow_run_definition_proto_init()
	file_workflow_task_definition_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_workflow_queue_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_queue_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_queue_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_queue_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_queue_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_queue_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_queue_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortQueuedRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_queue_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortQueuedRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_queue_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortQueuedActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_queue_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortQueuedActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_workflow_queue_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*EnqueueActionRequest_Task)(nil),
		(*EnqueueActionRequest_Trace)(nil),
		(*EnqueueActionRequest_Condition)(nil),
	}
	file_workflow_queue_service_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_workflow_queue_service_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ConditionAction_RunId)(nil),
		(*ConditionAction_ActionId)(nil),
		(*ConditionAction_Global)(nil),
	}
	file_workflow_queue_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_workflow_queue_service_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflow_queue_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflow_queue_service_proto_goTypes,
		DependencyIndexes: file_workflow_queue_service_proto_depIdxs,
		MessageInfos:      file_workflow_queue_service_proto_msgTypes,
	}.Build()
	File_workflow_queue_service_proto = out.File
	file_workflow_queue_service_proto_rawDesc = nil
	file_workflow_queue_service_proto_goTypes = nil
	file_workflow_queue_service_proto_depIdxs = nil
}
