// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: workflow/task_definition.proto

package workflow

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TaskName with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskNameMultiError, or nil
// if none found.
func (m *TaskName) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOrg()); l < 1 || l > 63 {
		err := TaskNameValidationError{
			field:  "Org",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 1 || l > 63 {
		err := TaskNameValidationError{
			field:  "Project",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 63 {
		err := TaskNameValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := TaskNameValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TaskNameMultiError(errors)
	}

	return nil
}

// TaskNameMultiError is an error wrapping multiple validation errors returned
// by TaskName.ValidateAll() if the designated constraints aren't met.
type TaskNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskNameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskNameMultiError) AllErrors() []error { return m }

// TaskNameValidationError is the validation error returned by
// TaskName.Validate if the designated constraints aren't met.
type TaskNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskNameValidationError) ErrorName() string { return "TaskNameValidationError" }

// Error satisfies the builtin error interface
func (e TaskNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskNameValidationError{}

// Validate checks the field values on TaskIdentifier with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskIdentifierMultiError,
// or nil if none found.
func (m *TaskIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetOrg()); l < 1 || l > 63 {
		err := TaskIdentifierValidationError{
			field:  "Org",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProject()); l < 1 || l > 63 {
		err := TaskIdentifierValidationError{
			field:  "Project",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 63 {
		err := TaskIdentifierValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := TaskIdentifierValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 63 {
		err := TaskIdentifierValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TaskIdentifierMultiError(errors)
	}

	return nil
}

// TaskIdentifierMultiError is an error wrapping multiple validation errors
// returned by TaskIdentifier.ValidateAll() if the designated constraints
// aren't met.
type TaskIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskIdentifierMultiError) AllErrors() []error { return m }

// TaskIdentifierValidationError is the validation error returned by
// TaskIdentifier.Validate if the designated constraints aren't met.
type TaskIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskIdentifierValidationError) ErrorName() string { return "TaskIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e TaskIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskIdentifierValidationError{}

// Validate checks the field values on TaskMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskMetadataMultiError, or
// nil if none found.
func (m *TaskMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployedBy() == nil {
		err := TaskMetadataValidationError{
			field:  "DeployedBy",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "DeployedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "DeployedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskMetadataValidationError{
				field:  "DeployedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ShortName

	if m.GetDeployedAt() == nil {
		err := TaskMetadataValidationError{
			field:  "DeployedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for EnvironmentName

	if len(errors) > 0 {
		return TaskMetadataMultiError(errors)
	}

	return nil
}

// TaskMetadataMultiError is an error wrapping multiple validation errors
// returned by TaskMetadata.ValidateAll() if the designated constraints aren't met.
type TaskMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMetadataMultiError) AllErrors() []error { return m }

// TaskMetadataValidationError is the validation error returned by
// TaskMetadata.Validate if the designated constraints aren't met.
type TaskMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskMetadataValidationError) ErrorName() string { return "TaskMetadataValidationError" }

// Error satisfies the builtin error interface
func (e TaskMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskMetadataValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskMultiError, or nil if none found.
func (m *Task) ValidateAll() error {
	return m.validate(true)
}

func (m *Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() == nil {
		err := TaskValidationError{
			field:  "TaskId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTaskId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskValidationError{
				field:  "TaskId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMetadata() == nil {
		err := TaskValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskMultiError(errors)
	}

	return nil
}

// TaskMultiError is an error wrapping multiple validation errors returned by
// Task.ValidateAll() if the designated constraints aren't met.
type TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMultiError) AllErrors() []error { return m }

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on TaskSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskSpecMultiError, or nil
// if none found.
func (m *TaskSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskTemplate() == nil {
		err := TaskSpecValidationError{
			field:  "TaskTemplate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTaskTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskSpecValidationError{
					field:  "TaskTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskSpecValidationError{
					field:  "TaskTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskSpecValidationError{
				field:  "TaskTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDefaultInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskSpecValidationError{
						field:  fmt.Sprintf("DefaultInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskSpecValidationError{
						field:  fmt.Sprintf("DefaultInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskSpecValidationError{
					field:  fmt.Sprintf("DefaultInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetShortName()) > 63 {
		err := TaskSpecValidationError{
			field:  "ShortName",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEnvironment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskSpecValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskSpecValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnvironment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskSpecValidationError{
				field:  "Environment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskSpecMultiError(errors)
	}

	return nil
}

// TaskSpecMultiError is an error wrapping multiple validation errors returned
// by TaskSpec.ValidateAll() if the designated constraints aren't met.
type TaskSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskSpecMultiError) AllErrors() []error { return m }

// TaskSpecValidationError is the validation error returned by
// TaskSpec.Validate if the designated constraints aren't met.
type TaskSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskSpecValidationError) ErrorName() string { return "TaskSpecValidationError" }

// Error satisfies the builtin error interface
func (e TaskSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskSpecValidationError{}

// Validate checks the field values on TaskDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskDetailsMultiError, or
// nil if none found.
func (m *TaskDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() == nil {
		err := TaskDetailsValidationError{
			field:  "TaskId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTaskId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskDetailsValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskDetailsValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskDetailsValidationError{
				field:  "TaskId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMetadata() == nil {
		err := TaskDetailsValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskDetailsValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskDetailsValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskDetailsValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSpec() == nil {
		err := TaskDetailsValidationError{
			field:  "Spec",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskDetailsValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskDetailsValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskDetailsValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskDetailsMultiError(errors)
	}

	return nil
}

// TaskDetailsMultiError is an error wrapping multiple validation errors
// returned by TaskDetails.ValidateAll() if the designated constraints aren't met.
type TaskDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskDetailsMultiError) AllErrors() []error { return m }

// TaskDetailsValidationError is the validation error returned by
// TaskDetails.Validate if the designated constraints aren't met.
type TaskDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskDetailsValidationError) ErrorName() string { return "TaskDetailsValidationError" }

// Error satisfies the builtin error interface
func (e TaskDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskDetailsValidationError{}
