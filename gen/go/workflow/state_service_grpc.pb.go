// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: workflow/state_service.proto

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StateService_Put_FullMethodName   = "/flyteidl.workflow.StateService/Put"
	StateService_Get_FullMethodName   = "/flyteidl.workflow.StateService/Get"
	StateService_Watch_FullMethodName = "/flyteidl.workflow.StateService/Watch"
)

// StateServiceClient is the client API for StateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateServiceClient interface {
	// put the state of an action.
	Put(ctx context.Context, opts ...grpc.CallOption) (StateService_PutClient, error)
	// get the state of an action.
	Get(ctx context.Context, opts ...grpc.CallOption) (StateService_GetClient, error)
	// watch for updates to the state of actions. this api guarantees at-least-once delivery semantics.
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (StateService_WatchClient, error)
}

type stateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStateServiceClient(cc grpc.ClientConnInterface) StateServiceClient {
	return &stateServiceClient{cc}
}

func (c *stateServiceClient) Put(ctx context.Context, opts ...grpc.CallOption) (StateService_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateService_ServiceDesc.Streams[0], StateService_Put_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stateServicePutClient{stream}
	return x, nil
}

type StateService_PutClient interface {
	Send(*PutRequest) error
	Recv() (*PutResponse, error)
	grpc.ClientStream
}

type stateServicePutClient struct {
	grpc.ClientStream
}

func (x *stateServicePutClient) Send(m *PutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stateServicePutClient) Recv() (*PutResponse, error) {
	m := new(PutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateServiceClient) Get(ctx context.Context, opts ...grpc.CallOption) (StateService_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateService_ServiceDesc.Streams[1], StateService_Get_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stateServiceGetClient{stream}
	return x, nil
}

type StateService_GetClient interface {
	Send(*GetRequest) error
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type stateServiceGetClient struct {
	grpc.ClientStream
}

func (x *stateServiceGetClient) Send(m *GetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stateServiceGetClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateServiceClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (StateService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateService_ServiceDesc.Streams[2], StateService_Watch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stateServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateService_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type stateServiceWatchClient struct {
	grpc.ClientStream
}

func (x *stateServiceWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateServiceServer is the server API for StateService service.
// All implementations should embed UnimplementedStateServiceServer
// for forward compatibility
type StateServiceServer interface {
	// put the state of an action.
	Put(StateService_PutServer) error
	// get the state of an action.
	Get(StateService_GetServer) error
	// watch for updates to the state of actions. this api guarantees at-least-once delivery semantics.
	Watch(*WatchRequest, StateService_WatchServer) error
}

// UnimplementedStateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStateServiceServer struct {
}

func (UnimplementedStateServiceServer) Put(StateService_PutServer) error {
	return status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedStateServiceServer) Get(StateService_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStateServiceServer) Watch(*WatchRequest, StateService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

// UnsafeStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateServiceServer will
// result in compilation errors.
type UnsafeStateServiceServer interface {
	mustEmbedUnimplementedStateServiceServer()
}

func RegisterStateServiceServer(s grpc.ServiceRegistrar, srv StateServiceServer) {
	s.RegisterService(&StateService_ServiceDesc, srv)
}

func _StateService_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StateServiceServer).Put(&stateServicePutServer{stream})
}

type StateService_PutServer interface {
	Send(*PutResponse) error
	Recv() (*PutRequest, error)
	grpc.ServerStream
}

type stateServicePutServer struct {
	grpc.ServerStream
}

func (x *stateServicePutServer) Send(m *PutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stateServicePutServer) Recv() (*PutRequest, error) {
	m := new(PutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StateService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StateServiceServer).Get(&stateServiceGetServer{stream})
}

type StateService_GetServer interface {
	Send(*GetResponse) error
	Recv() (*GetRequest, error)
	grpc.ServerStream
}

type stateServiceGetServer struct {
	grpc.ServerStream
}

func (x *stateServiceGetServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stateServiceGetServer) Recv() (*GetRequest, error) {
	m := new(GetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StateService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateServiceServer).Watch(m, &stateServiceWatchServer{stream})
}

type StateService_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type stateServiceWatchServer struct {
	grpc.ServerStream
}

func (x *stateServiceWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StateService_ServiceDesc is the grpc.ServiceDesc for StateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl.workflow.StateService",
	HandlerType: (*StateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Put",
			Handler:       _StateService_Put_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _StateService_Get_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _StateService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "workflow/state_service.proto",
}
