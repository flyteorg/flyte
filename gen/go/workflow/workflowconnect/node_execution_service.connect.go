// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workflow/node_execution_service.proto

package workflowconnect

import (
	connect "connectrpc.com/connect"
	workflow "github.com/flyteorg/flyte/v2/gen/go/workflow"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeExecutionServiceName is the fully-qualified name of the NodeExecutionService service.
	NodeExecutionServiceName = "flyteidl.workflow.NodeExecutionService"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	nodeExecutionServiceServiceDescriptor = workflow.File_workflow_node_execution_service_proto.Services().ByName("NodeExecutionService")
)

// NodeExecutionServiceClient is a client for the flyteidl.workflow.NodeExecutionService service.
type NodeExecutionServiceClient interface {
}

// NewNodeExecutionServiceClient constructs a client for the flyteidl.workflow.NodeExecutionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeExecutionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeExecutionServiceClient {
	return &nodeExecutionServiceClient{}
}

// nodeExecutionServiceClient implements NodeExecutionServiceClient.
type nodeExecutionServiceClient struct {
}

// NodeExecutionServiceHandler is an implementation of the flyteidl.workflow.NodeExecutionService
// service.
type NodeExecutionServiceHandler interface {
}

// NewNodeExecutionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeExecutionServiceHandler(svc NodeExecutionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/flyteidl.workflow.NodeExecutionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeExecutionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeExecutionServiceHandler struct{}
