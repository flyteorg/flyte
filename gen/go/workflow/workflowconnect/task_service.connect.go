// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workflow/task_service.proto

package workflowconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	workflow "github.com/flyteorg/flyte/gen/go/workflow"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TaskServiceName is the fully-qualified name of the TaskService service.
	TaskServiceName = "flyteidl.workflow.TaskService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TaskServiceDeployTaskProcedure is the fully-qualified name of the TaskService's DeployTask RPC.
	TaskServiceDeployTaskProcedure = "/flyteidl.workflow.TaskService/DeployTask"
	// TaskServiceGetTaskDetailsProcedure is the fully-qualified name of the TaskService's
	// GetTaskDetails RPC.
	TaskServiceGetTaskDetailsProcedure = "/flyteidl.workflow.TaskService/GetTaskDetails"
	// TaskServiceListTasksProcedure is the fully-qualified name of the TaskService's ListTasks RPC.
	TaskServiceListTasksProcedure = "/flyteidl.workflow.TaskService/ListTasks"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	taskServiceServiceDescriptor              = workflow.File_workflow_task_service_proto.Services().ByName("TaskService")
	taskServiceDeployTaskMethodDescriptor     = taskServiceServiceDescriptor.Methods().ByName("DeployTask")
	taskServiceGetTaskDetailsMethodDescriptor = taskServiceServiceDescriptor.Methods().ByName("GetTaskDetails")
	taskServiceListTasksMethodDescriptor      = taskServiceServiceDescriptor.Methods().ByName("ListTasks")
)

// TaskServiceClient is a client for the flyteidl.workflow.TaskService service.
type TaskServiceClient interface {
	// Deploy a task.
	DeployTask(context.Context, *connect.Request[workflow.DeployTaskRequest]) (*connect.Response[workflow.DeployTaskResponse], error)
	// Get detailed information about a task.
	GetTaskDetails(context.Context, *connect.Request[workflow.GetTaskDetailsRequest]) (*connect.Response[workflow.GetTaskDetailsResponse], error)
	// Lists tasks, one per task name, returning the latest version and who it was deployed by.
	ListTasks(context.Context, *connect.Request[workflow.ListTasksRequest]) (*connect.Response[workflow.ListTasksResponse], error)
}

// NewTaskServiceClient constructs a client for the flyteidl.workflow.TaskService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTaskServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TaskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &taskServiceClient{
		deployTask: connect.NewClient[workflow.DeployTaskRequest, workflow.DeployTaskResponse](
			httpClient,
			baseURL+TaskServiceDeployTaskProcedure,
			connect.WithSchema(taskServiceDeployTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTaskDetails: connect.NewClient[workflow.GetTaskDetailsRequest, workflow.GetTaskDetailsResponse](
			httpClient,
			baseURL+TaskServiceGetTaskDetailsProcedure,
			connect.WithSchema(taskServiceGetTaskDetailsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listTasks: connect.NewClient[workflow.ListTasksRequest, workflow.ListTasksResponse](
			httpClient,
			baseURL+TaskServiceListTasksProcedure,
			connect.WithSchema(taskServiceListTasksMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// taskServiceClient implements TaskServiceClient.
type taskServiceClient struct {
	deployTask     *connect.Client[workflow.DeployTaskRequest, workflow.DeployTaskResponse]
	getTaskDetails *connect.Client[workflow.GetTaskDetailsRequest, workflow.GetTaskDetailsResponse]
	listTasks      *connect.Client[workflow.ListTasksRequest, workflow.ListTasksResponse]
}

// DeployTask calls flyteidl.workflow.TaskService.DeployTask.
func (c *taskServiceClient) DeployTask(ctx context.Context, req *connect.Request[workflow.DeployTaskRequest]) (*connect.Response[workflow.DeployTaskResponse], error) {
	return c.deployTask.CallUnary(ctx, req)
}

// GetTaskDetails calls flyteidl.workflow.TaskService.GetTaskDetails.
func (c *taskServiceClient) GetTaskDetails(ctx context.Context, req *connect.Request[workflow.GetTaskDetailsRequest]) (*connect.Response[workflow.GetTaskDetailsResponse], error) {
	return c.getTaskDetails.CallUnary(ctx, req)
}

// ListTasks calls flyteidl.workflow.TaskService.ListTasks.
func (c *taskServiceClient) ListTasks(ctx context.Context, req *connect.Request[workflow.ListTasksRequest]) (*connect.Response[workflow.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// TaskServiceHandler is an implementation of the flyteidl.workflow.TaskService service.
type TaskServiceHandler interface {
	// Deploy a task.
	DeployTask(context.Context, *connect.Request[workflow.DeployTaskRequest]) (*connect.Response[workflow.DeployTaskResponse], error)
	// Get detailed information about a task.
	GetTaskDetails(context.Context, *connect.Request[workflow.GetTaskDetailsRequest]) (*connect.Response[workflow.GetTaskDetailsResponse], error)
	// Lists tasks, one per task name, returning the latest version and who it was deployed by.
	ListTasks(context.Context, *connect.Request[workflow.ListTasksRequest]) (*connect.Response[workflow.ListTasksResponse], error)
}

// NewTaskServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTaskServiceHandler(svc TaskServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	taskServiceDeployTaskHandler := connect.NewUnaryHandler(
		TaskServiceDeployTaskProcedure,
		svc.DeployTask,
		connect.WithSchema(taskServiceDeployTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceGetTaskDetailsHandler := connect.NewUnaryHandler(
		TaskServiceGetTaskDetailsProcedure,
		svc.GetTaskDetails,
		connect.WithSchema(taskServiceGetTaskDetailsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	taskServiceListTasksHandler := connect.NewUnaryHandler(
		TaskServiceListTasksProcedure,
		svc.ListTasks,
		connect.WithSchema(taskServiceListTasksMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.workflow.TaskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TaskServiceDeployTaskProcedure:
			taskServiceDeployTaskHandler.ServeHTTP(w, r)
		case TaskServiceGetTaskDetailsProcedure:
			taskServiceGetTaskDetailsHandler.ServeHTTP(w, r)
		case TaskServiceListTasksProcedure:
			taskServiceListTasksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTaskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTaskServiceHandler struct{}

func (UnimplementedTaskServiceHandler) DeployTask(context.Context, *connect.Request[workflow.DeployTaskRequest]) (*connect.Response[workflow.DeployTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.TaskService.DeployTask is not implemented"))
}

func (UnimplementedTaskServiceHandler) GetTaskDetails(context.Context, *connect.Request[workflow.GetTaskDetailsRequest]) (*connect.Response[workflow.GetTaskDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.TaskService.GetTaskDetails is not implemented"))
}

func (UnimplementedTaskServiceHandler) ListTasks(context.Context, *connect.Request[workflow.ListTasksRequest]) (*connect.Response[workflow.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.TaskService.ListTasks is not implemented"))
}
