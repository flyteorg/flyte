// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workflow/run_service.proto

package workflowconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	workflow "github.com/flyteorg/flyte/gen/go/workflow"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RunServiceName is the fully-qualified name of the RunService service.
	RunServiceName = "flyteidl.workflow.RunService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RunServiceCreateRunProcedure is the fully-qualified name of the RunService's CreateRun RPC.
	RunServiceCreateRunProcedure = "/flyteidl.workflow.RunService/CreateRun"
	// RunServiceAbortRunProcedure is the fully-qualified name of the RunService's AbortRun RPC.
	RunServiceAbortRunProcedure = "/flyteidl.workflow.RunService/AbortRun"
	// RunServiceGetRunDetailsProcedure is the fully-qualified name of the RunService's GetRunDetails
	// RPC.
	RunServiceGetRunDetailsProcedure = "/flyteidl.workflow.RunService/GetRunDetails"
	// RunServiceWatchRunDetailsProcedure is the fully-qualified name of the RunService's
	// WatchRunDetails RPC.
	RunServiceWatchRunDetailsProcedure = "/flyteidl.workflow.RunService/WatchRunDetails"
	// RunServiceGetActionDetailsProcedure is the fully-qualified name of the RunService's
	// GetActionDetails RPC.
	RunServiceGetActionDetailsProcedure = "/flyteidl.workflow.RunService/GetActionDetails"
	// RunServiceWatchActionDetailsProcedure is the fully-qualified name of the RunService's
	// WatchActionDetails RPC.
	RunServiceWatchActionDetailsProcedure = "/flyteidl.workflow.RunService/WatchActionDetails"
	// RunServiceGetActionDataProcedure is the fully-qualified name of the RunService's GetActionData
	// RPC.
	RunServiceGetActionDataProcedure = "/flyteidl.workflow.RunService/GetActionData"
	// RunServiceListRunsProcedure is the fully-qualified name of the RunService's ListRuns RPC.
	RunServiceListRunsProcedure = "/flyteidl.workflow.RunService/ListRuns"
	// RunServiceWatchRunsProcedure is the fully-qualified name of the RunService's WatchRuns RPC.
	RunServiceWatchRunsProcedure = "/flyteidl.workflow.RunService/WatchRuns"
	// RunServiceListActionsProcedure is the fully-qualified name of the RunService's ListActions RPC.
	RunServiceListActionsProcedure = "/flyteidl.workflow.RunService/ListActions"
	// RunServiceWatchActionsProcedure is the fully-qualified name of the RunService's WatchActions RPC.
	RunServiceWatchActionsProcedure = "/flyteidl.workflow.RunService/WatchActions"
	// RunServiceWatchClusterEventsProcedure is the fully-qualified name of the RunService's
	// WatchClusterEvents RPC.
	RunServiceWatchClusterEventsProcedure = "/flyteidl.workflow.RunService/WatchClusterEvents"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	runServiceServiceDescriptor                  = workflow.File_workflow_run_service_proto.Services().ByName("RunService")
	runServiceCreateRunMethodDescriptor          = runServiceServiceDescriptor.Methods().ByName("CreateRun")
	runServiceAbortRunMethodDescriptor           = runServiceServiceDescriptor.Methods().ByName("AbortRun")
	runServiceGetRunDetailsMethodDescriptor      = runServiceServiceDescriptor.Methods().ByName("GetRunDetails")
	runServiceWatchRunDetailsMethodDescriptor    = runServiceServiceDescriptor.Methods().ByName("WatchRunDetails")
	runServiceGetActionDetailsMethodDescriptor   = runServiceServiceDescriptor.Methods().ByName("GetActionDetails")
	runServiceWatchActionDetailsMethodDescriptor = runServiceServiceDescriptor.Methods().ByName("WatchActionDetails")
	runServiceGetActionDataMethodDescriptor      = runServiceServiceDescriptor.Methods().ByName("GetActionData")
	runServiceListRunsMethodDescriptor           = runServiceServiceDescriptor.Methods().ByName("ListRuns")
	runServiceWatchRunsMethodDescriptor          = runServiceServiceDescriptor.Methods().ByName("WatchRuns")
	runServiceListActionsMethodDescriptor        = runServiceServiceDescriptor.Methods().ByName("ListActions")
	runServiceWatchActionsMethodDescriptor       = runServiceServiceDescriptor.Methods().ByName("WatchActions")
	runServiceWatchClusterEventsMethodDescriptor = runServiceServiceDescriptor.Methods().ByName("WatchClusterEvents")
)

// RunServiceClient is a client for the flyteidl.workflow.RunService service.
type RunServiceClient interface {
	// Create a new run of the given task.
	CreateRun(context.Context, *connect.Request[workflow.CreateRunRequest]) (*connect.Response[workflow.CreateRunResponse], error)
	// Abort a run.
	AbortRun(context.Context, *connect.Request[workflow.AbortRunRequest]) (*connect.Response[workflow.AbortRunResponse], error)
	// Get detailed information about a run.
	GetRunDetails(context.Context, *connect.Request[workflow.GetRunDetailsRequest]) (*connect.Response[workflow.GetRunDetailsResponse], error)
	// Stream detailed information updates about a run. The call will terminate when the run reaches a terminal phase.
	WatchRunDetails(context.Context, *connect.Request[workflow.WatchRunDetailsRequest]) (*connect.ServerStreamForClient[workflow.WatchRunDetailsResponse], error)
	// Get detailed information about an action.
	GetActionDetails(context.Context, *connect.Request[workflow.GetActionDetailsRequest]) (*connect.Response[workflow.GetActionDetailsResponse], error)
	// Stream detailed information updates about an action. The call will terminate when the action reaches a terminal phase.
	WatchActionDetails(context.Context, *connect.Request[workflow.WatchActionDetailsRequest]) (*connect.ServerStreamForClient[workflow.WatchActionDetailsResponse], error)
	// Get input and output for an action.
	GetActionData(context.Context, *connect.Request[workflow.GetActionDataRequest]) (*connect.Response[workflow.GetActionDataResponse], error)
	// List runs based on the provided filter criteria.
	ListRuns(context.Context, *connect.Request[workflow.ListRunsRequest]) (*connect.Response[workflow.ListRunsResponse], error)
	// Stream updates for runs based on the provided filter criteria. Responses may include newly discovered
	// runs or updates to existing ones from the point of invocation.
	WatchRuns(context.Context, *connect.Request[workflow.WatchRunsRequest]) (*connect.ServerStreamForClient[workflow.WatchRunsResponse], error)
	// List all actions for a given run.
	ListActions(context.Context, *connect.Request[workflow.ListActionsRequest]) (*connect.Response[workflow.ListActionsResponse], error)
	// Stream updates for actions given a run. Responses may include newly discovered nested runs or updates
	// to  existing ones from the point of invocation.
	WatchActions(context.Context, *connect.Request[workflow.WatchActionsRequest]) (*connect.ServerStreamForClient[workflow.WatchActionsResponse], error)
	// Stream of k8s cluster events in human readable form
	WatchClusterEvents(context.Context, *connect.Request[workflow.WatchClusterEventsRequest]) (*connect.ServerStreamForClient[workflow.WatchClusterEventsResponse], error)
}

// NewRunServiceClient constructs a client for the flyteidl.workflow.RunService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RunServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runServiceClient{
		createRun: connect.NewClient[workflow.CreateRunRequest, workflow.CreateRunResponse](
			httpClient,
			baseURL+RunServiceCreateRunProcedure,
			connect.WithSchema(runServiceCreateRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		abortRun: connect.NewClient[workflow.AbortRunRequest, workflow.AbortRunResponse](
			httpClient,
			baseURL+RunServiceAbortRunProcedure,
			connect.WithSchema(runServiceAbortRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRunDetails: connect.NewClient[workflow.GetRunDetailsRequest, workflow.GetRunDetailsResponse](
			httpClient,
			baseURL+RunServiceGetRunDetailsProcedure,
			connect.WithSchema(runServiceGetRunDetailsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		watchRunDetails: connect.NewClient[workflow.WatchRunDetailsRequest, workflow.WatchRunDetailsResponse](
			httpClient,
			baseURL+RunServiceWatchRunDetailsProcedure,
			connect.WithSchema(runServiceWatchRunDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getActionDetails: connect.NewClient[workflow.GetActionDetailsRequest, workflow.GetActionDetailsResponse](
			httpClient,
			baseURL+RunServiceGetActionDetailsProcedure,
			connect.WithSchema(runServiceGetActionDetailsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		watchActionDetails: connect.NewClient[workflow.WatchActionDetailsRequest, workflow.WatchActionDetailsResponse](
			httpClient,
			baseURL+RunServiceWatchActionDetailsProcedure,
			connect.WithSchema(runServiceWatchActionDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getActionData: connect.NewClient[workflow.GetActionDataRequest, workflow.GetActionDataResponse](
			httpClient,
			baseURL+RunServiceGetActionDataProcedure,
			connect.WithSchema(runServiceGetActionDataMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listRuns: connect.NewClient[workflow.ListRunsRequest, workflow.ListRunsResponse](
			httpClient,
			baseURL+RunServiceListRunsProcedure,
			connect.WithSchema(runServiceListRunsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		watchRuns: connect.NewClient[workflow.WatchRunsRequest, workflow.WatchRunsResponse](
			httpClient,
			baseURL+RunServiceWatchRunsProcedure,
			connect.WithSchema(runServiceWatchRunsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listActions: connect.NewClient[workflow.ListActionsRequest, workflow.ListActionsResponse](
			httpClient,
			baseURL+RunServiceListActionsProcedure,
			connect.WithSchema(runServiceListActionsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		watchActions: connect.NewClient[workflow.WatchActionsRequest, workflow.WatchActionsResponse](
			httpClient,
			baseURL+RunServiceWatchActionsProcedure,
			connect.WithSchema(runServiceWatchActionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		watchClusterEvents: connect.NewClient[workflow.WatchClusterEventsRequest, workflow.WatchClusterEventsResponse](
			httpClient,
			baseURL+RunServiceWatchClusterEventsProcedure,
			connect.WithSchema(runServiceWatchClusterEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// runServiceClient implements RunServiceClient.
type runServiceClient struct {
	createRun          *connect.Client[workflow.CreateRunRequest, workflow.CreateRunResponse]
	abortRun           *connect.Client[workflow.AbortRunRequest, workflow.AbortRunResponse]
	getRunDetails      *connect.Client[workflow.GetRunDetailsRequest, workflow.GetRunDetailsResponse]
	watchRunDetails    *connect.Client[workflow.WatchRunDetailsRequest, workflow.WatchRunDetailsResponse]
	getActionDetails   *connect.Client[workflow.GetActionDetailsRequest, workflow.GetActionDetailsResponse]
	watchActionDetails *connect.Client[workflow.WatchActionDetailsRequest, workflow.WatchActionDetailsResponse]
	getActionData      *connect.Client[workflow.GetActionDataRequest, workflow.GetActionDataResponse]
	listRuns           *connect.Client[workflow.ListRunsRequest, workflow.ListRunsResponse]
	watchRuns          *connect.Client[workflow.WatchRunsRequest, workflow.WatchRunsResponse]
	listActions        *connect.Client[workflow.ListActionsRequest, workflow.ListActionsResponse]
	watchActions       *connect.Client[workflow.WatchActionsRequest, workflow.WatchActionsResponse]
	watchClusterEvents *connect.Client[workflow.WatchClusterEventsRequest, workflow.WatchClusterEventsResponse]
}

// CreateRun calls flyteidl.workflow.RunService.CreateRun.
func (c *runServiceClient) CreateRun(ctx context.Context, req *connect.Request[workflow.CreateRunRequest]) (*connect.Response[workflow.CreateRunResponse], error) {
	return c.createRun.CallUnary(ctx, req)
}

// AbortRun calls flyteidl.workflow.RunService.AbortRun.
func (c *runServiceClient) AbortRun(ctx context.Context, req *connect.Request[workflow.AbortRunRequest]) (*connect.Response[workflow.AbortRunResponse], error) {
	return c.abortRun.CallUnary(ctx, req)
}

// GetRunDetails calls flyteidl.workflow.RunService.GetRunDetails.
func (c *runServiceClient) GetRunDetails(ctx context.Context, req *connect.Request[workflow.GetRunDetailsRequest]) (*connect.Response[workflow.GetRunDetailsResponse], error) {
	return c.getRunDetails.CallUnary(ctx, req)
}

// WatchRunDetails calls flyteidl.workflow.RunService.WatchRunDetails.
func (c *runServiceClient) WatchRunDetails(ctx context.Context, req *connect.Request[workflow.WatchRunDetailsRequest]) (*connect.ServerStreamForClient[workflow.WatchRunDetailsResponse], error) {
	return c.watchRunDetails.CallServerStream(ctx, req)
}

// GetActionDetails calls flyteidl.workflow.RunService.GetActionDetails.
func (c *runServiceClient) GetActionDetails(ctx context.Context, req *connect.Request[workflow.GetActionDetailsRequest]) (*connect.Response[workflow.GetActionDetailsResponse], error) {
	return c.getActionDetails.CallUnary(ctx, req)
}

// WatchActionDetails calls flyteidl.workflow.RunService.WatchActionDetails.
func (c *runServiceClient) WatchActionDetails(ctx context.Context, req *connect.Request[workflow.WatchActionDetailsRequest]) (*connect.ServerStreamForClient[workflow.WatchActionDetailsResponse], error) {
	return c.watchActionDetails.CallServerStream(ctx, req)
}

// GetActionData calls flyteidl.workflow.RunService.GetActionData.
func (c *runServiceClient) GetActionData(ctx context.Context, req *connect.Request[workflow.GetActionDataRequest]) (*connect.Response[workflow.GetActionDataResponse], error) {
	return c.getActionData.CallUnary(ctx, req)
}

// ListRuns calls flyteidl.workflow.RunService.ListRuns.
func (c *runServiceClient) ListRuns(ctx context.Context, req *connect.Request[workflow.ListRunsRequest]) (*connect.Response[workflow.ListRunsResponse], error) {
	return c.listRuns.CallUnary(ctx, req)
}

// WatchRuns calls flyteidl.workflow.RunService.WatchRuns.
func (c *runServiceClient) WatchRuns(ctx context.Context, req *connect.Request[workflow.WatchRunsRequest]) (*connect.ServerStreamForClient[workflow.WatchRunsResponse], error) {
	return c.watchRuns.CallServerStream(ctx, req)
}

// ListActions calls flyteidl.workflow.RunService.ListActions.
func (c *runServiceClient) ListActions(ctx context.Context, req *connect.Request[workflow.ListActionsRequest]) (*connect.Response[workflow.ListActionsResponse], error) {
	return c.listActions.CallUnary(ctx, req)
}

// WatchActions calls flyteidl.workflow.RunService.WatchActions.
func (c *runServiceClient) WatchActions(ctx context.Context, req *connect.Request[workflow.WatchActionsRequest]) (*connect.ServerStreamForClient[workflow.WatchActionsResponse], error) {
	return c.watchActions.CallServerStream(ctx, req)
}

// WatchClusterEvents calls flyteidl.workflow.RunService.WatchClusterEvents.
func (c *runServiceClient) WatchClusterEvents(ctx context.Context, req *connect.Request[workflow.WatchClusterEventsRequest]) (*connect.ServerStreamForClient[workflow.WatchClusterEventsResponse], error) {
	return c.watchClusterEvents.CallServerStream(ctx, req)
}

// RunServiceHandler is an implementation of the flyteidl.workflow.RunService service.
type RunServiceHandler interface {
	// Create a new run of the given task.
	CreateRun(context.Context, *connect.Request[workflow.CreateRunRequest]) (*connect.Response[workflow.CreateRunResponse], error)
	// Abort a run.
	AbortRun(context.Context, *connect.Request[workflow.AbortRunRequest]) (*connect.Response[workflow.AbortRunResponse], error)
	// Get detailed information about a run.
	GetRunDetails(context.Context, *connect.Request[workflow.GetRunDetailsRequest]) (*connect.Response[workflow.GetRunDetailsResponse], error)
	// Stream detailed information updates about a run. The call will terminate when the run reaches a terminal phase.
	WatchRunDetails(context.Context, *connect.Request[workflow.WatchRunDetailsRequest], *connect.ServerStream[workflow.WatchRunDetailsResponse]) error
	// Get detailed information about an action.
	GetActionDetails(context.Context, *connect.Request[workflow.GetActionDetailsRequest]) (*connect.Response[workflow.GetActionDetailsResponse], error)
	// Stream detailed information updates about an action. The call will terminate when the action reaches a terminal phase.
	WatchActionDetails(context.Context, *connect.Request[workflow.WatchActionDetailsRequest], *connect.ServerStream[workflow.WatchActionDetailsResponse]) error
	// Get input and output for an action.
	GetActionData(context.Context, *connect.Request[workflow.GetActionDataRequest]) (*connect.Response[workflow.GetActionDataResponse], error)
	// List runs based on the provided filter criteria.
	ListRuns(context.Context, *connect.Request[workflow.ListRunsRequest]) (*connect.Response[workflow.ListRunsResponse], error)
	// Stream updates for runs based on the provided filter criteria. Responses may include newly discovered
	// runs or updates to existing ones from the point of invocation.
	WatchRuns(context.Context, *connect.Request[workflow.WatchRunsRequest], *connect.ServerStream[workflow.WatchRunsResponse]) error
	// List all actions for a given run.
	ListActions(context.Context, *connect.Request[workflow.ListActionsRequest]) (*connect.Response[workflow.ListActionsResponse], error)
	// Stream updates for actions given a run. Responses may include newly discovered nested runs or updates
	// to  existing ones from the point of invocation.
	WatchActions(context.Context, *connect.Request[workflow.WatchActionsRequest], *connect.ServerStream[workflow.WatchActionsResponse]) error
	// Stream of k8s cluster events in human readable form
	WatchClusterEvents(context.Context, *connect.Request[workflow.WatchClusterEventsRequest], *connect.ServerStream[workflow.WatchClusterEventsResponse]) error
}

// NewRunServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunServiceHandler(svc RunServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	runServiceCreateRunHandler := connect.NewUnaryHandler(
		RunServiceCreateRunProcedure,
		svc.CreateRun,
		connect.WithSchema(runServiceCreateRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runServiceAbortRunHandler := connect.NewUnaryHandler(
		RunServiceAbortRunProcedure,
		svc.AbortRun,
		connect.WithSchema(runServiceAbortRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runServiceGetRunDetailsHandler := connect.NewUnaryHandler(
		RunServiceGetRunDetailsProcedure,
		svc.GetRunDetails,
		connect.WithSchema(runServiceGetRunDetailsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runServiceWatchRunDetailsHandler := connect.NewServerStreamHandler(
		RunServiceWatchRunDetailsProcedure,
		svc.WatchRunDetails,
		connect.WithSchema(runServiceWatchRunDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runServiceGetActionDetailsHandler := connect.NewUnaryHandler(
		RunServiceGetActionDetailsProcedure,
		svc.GetActionDetails,
		connect.WithSchema(runServiceGetActionDetailsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runServiceWatchActionDetailsHandler := connect.NewServerStreamHandler(
		RunServiceWatchActionDetailsProcedure,
		svc.WatchActionDetails,
		connect.WithSchema(runServiceWatchActionDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runServiceGetActionDataHandler := connect.NewUnaryHandler(
		RunServiceGetActionDataProcedure,
		svc.GetActionData,
		connect.WithSchema(runServiceGetActionDataMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runServiceListRunsHandler := connect.NewUnaryHandler(
		RunServiceListRunsProcedure,
		svc.ListRuns,
		connect.WithSchema(runServiceListRunsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runServiceWatchRunsHandler := connect.NewServerStreamHandler(
		RunServiceWatchRunsProcedure,
		svc.WatchRuns,
		connect.WithSchema(runServiceWatchRunsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runServiceListActionsHandler := connect.NewUnaryHandler(
		RunServiceListActionsProcedure,
		svc.ListActions,
		connect.WithSchema(runServiceListActionsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	runServiceWatchActionsHandler := connect.NewServerStreamHandler(
		RunServiceWatchActionsProcedure,
		svc.WatchActions,
		connect.WithSchema(runServiceWatchActionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runServiceWatchClusterEventsHandler := connect.NewServerStreamHandler(
		RunServiceWatchClusterEventsProcedure,
		svc.WatchClusterEvents,
		connect.WithSchema(runServiceWatchClusterEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.workflow.RunService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RunServiceCreateRunProcedure:
			runServiceCreateRunHandler.ServeHTTP(w, r)
		case RunServiceAbortRunProcedure:
			runServiceAbortRunHandler.ServeHTTP(w, r)
		case RunServiceGetRunDetailsProcedure:
			runServiceGetRunDetailsHandler.ServeHTTP(w, r)
		case RunServiceWatchRunDetailsProcedure:
			runServiceWatchRunDetailsHandler.ServeHTTP(w, r)
		case RunServiceGetActionDetailsProcedure:
			runServiceGetActionDetailsHandler.ServeHTTP(w, r)
		case RunServiceWatchActionDetailsProcedure:
			runServiceWatchActionDetailsHandler.ServeHTTP(w, r)
		case RunServiceGetActionDataProcedure:
			runServiceGetActionDataHandler.ServeHTTP(w, r)
		case RunServiceListRunsProcedure:
			runServiceListRunsHandler.ServeHTTP(w, r)
		case RunServiceWatchRunsProcedure:
			runServiceWatchRunsHandler.ServeHTTP(w, r)
		case RunServiceListActionsProcedure:
			runServiceListActionsHandler.ServeHTTP(w, r)
		case RunServiceWatchActionsProcedure:
			runServiceWatchActionsHandler.ServeHTTP(w, r)
		case RunServiceWatchClusterEventsProcedure:
			runServiceWatchClusterEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRunServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRunServiceHandler struct{}

func (UnimplementedRunServiceHandler) CreateRun(context.Context, *connect.Request[workflow.CreateRunRequest]) (*connect.Response[workflow.CreateRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.CreateRun is not implemented"))
}

func (UnimplementedRunServiceHandler) AbortRun(context.Context, *connect.Request[workflow.AbortRunRequest]) (*connect.Response[workflow.AbortRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.AbortRun is not implemented"))
}

func (UnimplementedRunServiceHandler) GetRunDetails(context.Context, *connect.Request[workflow.GetRunDetailsRequest]) (*connect.Response[workflow.GetRunDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.GetRunDetails is not implemented"))
}

func (UnimplementedRunServiceHandler) WatchRunDetails(context.Context, *connect.Request[workflow.WatchRunDetailsRequest], *connect.ServerStream[workflow.WatchRunDetailsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.WatchRunDetails is not implemented"))
}

func (UnimplementedRunServiceHandler) GetActionDetails(context.Context, *connect.Request[workflow.GetActionDetailsRequest]) (*connect.Response[workflow.GetActionDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.GetActionDetails is not implemented"))
}

func (UnimplementedRunServiceHandler) WatchActionDetails(context.Context, *connect.Request[workflow.WatchActionDetailsRequest], *connect.ServerStream[workflow.WatchActionDetailsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.WatchActionDetails is not implemented"))
}

func (UnimplementedRunServiceHandler) GetActionData(context.Context, *connect.Request[workflow.GetActionDataRequest]) (*connect.Response[workflow.GetActionDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.GetActionData is not implemented"))
}

func (UnimplementedRunServiceHandler) ListRuns(context.Context, *connect.Request[workflow.ListRunsRequest]) (*connect.Response[workflow.ListRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.ListRuns is not implemented"))
}

func (UnimplementedRunServiceHandler) WatchRuns(context.Context, *connect.Request[workflow.WatchRunsRequest], *connect.ServerStream[workflow.WatchRunsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.WatchRuns is not implemented"))
}

func (UnimplementedRunServiceHandler) ListActions(context.Context, *connect.Request[workflow.ListActionsRequest]) (*connect.Response[workflow.ListActionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.ListActions is not implemented"))
}

func (UnimplementedRunServiceHandler) WatchActions(context.Context, *connect.Request[workflow.WatchActionsRequest], *connect.ServerStream[workflow.WatchActionsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.WatchActions is not implemented"))
}

func (UnimplementedRunServiceHandler) WatchClusterEvents(context.Context, *connect.Request[workflow.WatchClusterEventsRequest], *connect.ServerStream[workflow.WatchClusterEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunService.WatchClusterEvents is not implemented"))
}
