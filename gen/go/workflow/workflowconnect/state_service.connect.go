// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: workflow/state_service.proto

package workflowconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	workflow "github.com/flyteorg/flyte/v2/gen/go/workflow"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StateServiceName is the fully-qualified name of the StateService service.
	StateServiceName = "flyteidl.workflow.StateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StateServicePutProcedure is the fully-qualified name of the StateService's Put RPC.
	StateServicePutProcedure = "/flyteidl.workflow.StateService/Put"
	// StateServiceGetProcedure is the fully-qualified name of the StateService's Get RPC.
	StateServiceGetProcedure = "/flyteidl.workflow.StateService/Get"
	// StateServiceWatchProcedure is the fully-qualified name of the StateService's Watch RPC.
	StateServiceWatchProcedure = "/flyteidl.workflow.StateService/Watch"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	stateServiceServiceDescriptor     = workflow.File_workflow_state_service_proto.Services().ByName("StateService")
	stateServicePutMethodDescriptor   = stateServiceServiceDescriptor.Methods().ByName("Put")
	stateServiceGetMethodDescriptor   = stateServiceServiceDescriptor.Methods().ByName("Get")
	stateServiceWatchMethodDescriptor = stateServiceServiceDescriptor.Methods().ByName("Watch")
)

// StateServiceClient is a client for the flyteidl.workflow.StateService service.
type StateServiceClient interface {
	// put the state of an action.
	Put(context.Context) *connect.BidiStreamForClient[workflow.PutRequest, workflow.PutResponse]
	// get the state of an action.
	Get(context.Context) *connect.BidiStreamForClient[workflow.GetRequest, workflow.GetResponse]
	// watch for updates to the state of actions. this api guarantees at-least-once delivery semantics.
	Watch(context.Context, *connect.Request[workflow.WatchRequest]) (*connect.ServerStreamForClient[workflow.WatchResponse], error)
}

// NewStateServiceClient constructs a client for the flyteidl.workflow.StateService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &stateServiceClient{
		put: connect.NewClient[workflow.PutRequest, workflow.PutResponse](
			httpClient,
			baseURL+StateServicePutProcedure,
			connect.WithSchema(stateServicePutMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[workflow.GetRequest, workflow.GetResponse](
			httpClient,
			baseURL+StateServiceGetProcedure,
			connect.WithSchema(stateServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		watch: connect.NewClient[workflow.WatchRequest, workflow.WatchResponse](
			httpClient,
			baseURL+StateServiceWatchProcedure,
			connect.WithSchema(stateServiceWatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// stateServiceClient implements StateServiceClient.
type stateServiceClient struct {
	put   *connect.Client[workflow.PutRequest, workflow.PutResponse]
	get   *connect.Client[workflow.GetRequest, workflow.GetResponse]
	watch *connect.Client[workflow.WatchRequest, workflow.WatchResponse]
}

// Put calls flyteidl.workflow.StateService.Put.
func (c *stateServiceClient) Put(ctx context.Context) *connect.BidiStreamForClient[workflow.PutRequest, workflow.PutResponse] {
	return c.put.CallBidiStream(ctx)
}

// Get calls flyteidl.workflow.StateService.Get.
func (c *stateServiceClient) Get(ctx context.Context) *connect.BidiStreamForClient[workflow.GetRequest, workflow.GetResponse] {
	return c.get.CallBidiStream(ctx)
}

// Watch calls flyteidl.workflow.StateService.Watch.
func (c *stateServiceClient) Watch(ctx context.Context, req *connect.Request[workflow.WatchRequest]) (*connect.ServerStreamForClient[workflow.WatchResponse], error) {
	return c.watch.CallServerStream(ctx, req)
}

// StateServiceHandler is an implementation of the flyteidl.workflow.StateService service.
type StateServiceHandler interface {
	// put the state of an action.
	Put(context.Context, *connect.BidiStream[workflow.PutRequest, workflow.PutResponse]) error
	// get the state of an action.
	Get(context.Context, *connect.BidiStream[workflow.GetRequest, workflow.GetResponse]) error
	// watch for updates to the state of actions. this api guarantees at-least-once delivery semantics.
	Watch(context.Context, *connect.Request[workflow.WatchRequest], *connect.ServerStream[workflow.WatchResponse]) error
}

// NewStateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStateServiceHandler(svc StateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stateServicePutHandler := connect.NewBidiStreamHandler(
		StateServicePutProcedure,
		svc.Put,
		connect.WithSchema(stateServicePutMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	stateServiceGetHandler := connect.NewBidiStreamHandler(
		StateServiceGetProcedure,
		svc.Get,
		connect.WithSchema(stateServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	stateServiceWatchHandler := connect.NewServerStreamHandler(
		StateServiceWatchProcedure,
		svc.Watch,
		connect.WithSchema(stateServiceWatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.workflow.StateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StateServicePutProcedure:
			stateServicePutHandler.ServeHTTP(w, r)
		case StateServiceGetProcedure:
			stateServiceGetHandler.ServeHTTP(w, r)
		case StateServiceWatchProcedure:
			stateServiceWatchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStateServiceHandler struct{}

func (UnimplementedStateServiceHandler) Put(context.Context, *connect.BidiStream[workflow.PutRequest, workflow.PutResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.StateService.Put is not implemented"))
}

func (UnimplementedStateServiceHandler) Get(context.Context, *connect.BidiStream[workflow.GetRequest, workflow.GetResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.StateService.Get is not implemented"))
}

func (UnimplementedStateServiceHandler) Watch(context.Context, *connect.Request[workflow.WatchRequest], *connect.ServerStream[workflow.WatchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.StateService.Watch is not implemented"))
}
