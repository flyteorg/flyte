{
  "swagger": "2.0",
  "info": {
    "title": "idl2/secret/secret.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "SecretService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/secrets/api/v1": {
      "get": {
        "operationId": "SecretService_ListSecrets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/secretListSecretsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organization",
            "description": "Only org scoped resources are supported right now",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain",
            "description": "domain scoped secret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project-domain scoped secret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Max page results",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "token",
            "description": "Leave this empty if you are getting the first set of results. The next_token would be set in the response that can be used to fetch the next set of results.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "per_cluster_tokens[string]",
            "description": "Per cluster token. This allows the service to return paginated results per cluster.\nService collates the results from all clusters and returns the next token for each cluster.\nThe client can use the next token for each cluster to fetch the next page of results.\nIn multi cluster, inorder to page through next set of results, client needs to send this token in the next request",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SecretService"
        ]
      },
      "post": {
        "operationId": "SecretService_CreateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/secretCreateSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/secretCreateSecretRequest"
            }
          }
        ],
        "tags": [
          "SecretService"
        ]
      }
    },
    "/secrets/api/v1/name/{id.name}": {
      "get": {
        "operationId": "SecretService_GetSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/secretGetSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id.name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.organization",
            "description": "Only org scoped resources are supported right now",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id.domain",
            "description": "domain scoped secret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id.project",
            "description": "Project-domain scoped secret",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SecretService"
        ]
      },
      "delete": {
        "operationId": "SecretService_DeleteSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/secretDeleteSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id.name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id.organization",
            "description": "Only org scoped resources are supported right now",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id.domain",
            "description": "domain scoped secret",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id.project",
            "description": "Project-domain scoped secret",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SecretService"
        ]
      },
      "put": {
        "operationId": "SecretService_UpdateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/secretUpdateSecretResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id.name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretServiceUpdateSecretBody"
            }
          }
        ],
        "tags": [
          "SecretService"
        ]
      }
    }
  },
  "definitions": {
    "SecretServiceUpdateSecretBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "object",
          "properties": {
            "organization": {
              "type": "string",
              "title": "Only org scoped resources are supported right now"
            },
            "domain": {
              "type": "string",
              "title": "domain scoped secret"
            },
            "project": {
              "type": "string",
              "title": "Project-domain scoped secret"
            }
          },
          "title": "SecretIdentifier contains the uniquely identifiable way of storing or retrieving the secret\nName and scope combination are used for defining the format for storage and retrieval of the secret\nFor eg : for org scope secrets\nstorage format org:\u003corg-name\u003e:name:secret-name"
        },
        "secret_spec": {
          "$ref": "#/definitions/secretSecretSpec"
        }
      },
      "title": "UpdateSecretProxyRequest contains the spec and identifier used for secret updation"
    },
    "commonClusterIdentifier": {
      "type": "object",
      "properties": {
        "organization": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "flyteidl2secretSecret": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/secretSecretIdentifier"
        },
        "secret_metadata": {
          "$ref": "#/definitions/secretSecretMetadata"
        }
      },
      "title": "Secret is the returned object for Get and List calls which returns the identifier of the secret along with\nmeta information in future about the creation data, update date, tags etc\nThis doesn't contain the value of the secret"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "secretClusterSecretStatus": {
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/commonClusterIdentifier"
        },
        "presence_status": {
          "$ref": "#/definitions/secretSecretPresenceStatus",
          "title": "presence_status reports the status of the secret in the cluster"
        }
      },
      "title": "ClusterSecretStatus contains the status of the secret in a cluster"
    },
    "secretCreateSecretRequest": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/secretSecretIdentifier"
        },
        "secret_spec": {
          "$ref": "#/definitions/secretSecretSpec"
        }
      },
      "title": "CreateSecretProxyRequest contains the spec and identifier used for secret creation"
    },
    "secretCreateSecretResponse": {
      "type": "object",
      "title": "CreateSecretResponse"
    },
    "secretDeleteSecretResponse": {
      "type": "object",
      "description": "DeleteSecretResponse is an empty response right now on successfully deleting the secret."
    },
    "secretGetSecretResponse": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/flyteidl2secretSecret"
        }
      },
      "title": "GetSecretProxyResponse returns the looked up secret from the secret service"
    },
    "secretListSecretsResponse": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/flyteidl2secretSecret"
          }
        },
        "token": {
          "type": "string",
          "description": "next token to use for fetching new page results."
        },
        "per_cluster_tokens": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Per cluster token. This allows the service to return paginated results per cluster.\nService collates the results from all clusters and returns the next token for each cluster.\nThe client can use the next token for each cluster to fetch the next page of results.\nIn multi cluster, inorder to page through next set of results, client needs to send this token in the next request"
        }
      },
      "description": "ListSecretsResponse returns paginated results of the accessible secrets at the scope defined in the request."
    },
    "secretOverallStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "PARTIALLY_PRESENT",
        "FULLY_PRESENT",
        "UNKNOWN_STATUS"
      ],
      "default": "UNSPECIFIED",
      "title": "- PARTIALLY_PRESENT: Exists in some cluster\n - FULLY_PRESENT: Exists in all enabled clusters\n - UNKNOWN_STATUS: Status is unknown"
    },
    "secretSecretIdentifier": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string",
          "title": "Only org scoped resources are supported right now"
        },
        "domain": {
          "type": "string",
          "title": "domain scoped secret"
        },
        "project": {
          "type": "string",
          "title": "Project-domain scoped secret"
        }
      },
      "title": "SecretIdentifier contains the uniquely identifiable way of storing or retrieving the secret\nName and scope combination are used for defining the format for storage and retrieval of the secret\nFor eg : for org scope secrets\nstorage format org:\u003corg-name\u003e:name:secret-name"
    },
    "secretSecretMetadata": {
      "type": "object",
      "properties": {
        "created_time": {
          "type": "string",
          "format": "date-time",
          "description": "created_time of the secret."
        },
        "secret_status": {
          "$ref": "#/definitions/secretSecretStatus",
          "description": "secret_status reports the overall status of the secret across all the clusters.\nThis relies on number of clusters queried which relies on there enabled state."
        },
        "type": {
          "$ref": "#/definitions/secretSecretType",
          "title": "The secret type"
        }
      },
      "title": "SecretMetadata contain meta info about the secret"
    },
    "secretSecretPresenceStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "MISSING",
        "PRESENT"
      ],
      "default": "UNKNOWN",
      "title": "- MISSING: Secret is missing in the cluster\n - PRESENT: Secret is present in the cluster"
    },
    "secretSecretSpec": {
      "type": "object",
      "properties": {
        "string_value": {
          "type": "string"
        },
        "binary_value": {
          "type": "string",
          "format": "byte"
        },
        "type": {
          "$ref": "#/definitions/secretSecretType",
          "title": "The secret type"
        }
      },
      "description": "SecretSpec contains information used for creating/updating the secret.\nMainly it contains the value of the secret\nIn future we could add meta info like tags, rotation config, whether stored secret has any binary format etc for storage/retrieval."
    },
    "secretSecretStatus": {
      "type": "object",
      "properties": {
        "overall_status": {
          "$ref": "#/definitions/secretOverallStatus",
          "description": "overall_status reports the overall status of the secret across all the clusters."
        },
        "cluster_status": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/secretClusterSecretStatus"
          },
          "title": "cluster_status reports the status of the secret in each cluster"
        }
      },
      "title": "SecretStatus contains the status of the secret across all the clusters"
    },
    "secretSecretType": {
      "type": "string",
      "enum": [
        "SECRET_TYPE_GENERIC",
        "SECRET_TYPE_IMAGE_PULL_SECRET"
      ],
      "default": "SECRET_TYPE_GENERIC",
      "description": " - SECRET_TYPE_GENERIC: Default, unspecified secret type. Assumed to be generic and no type specific handling required.\n - SECRET_TYPE_IMAGE_PULL_SECRET: Secret used specifically for pulling images from a container registry."
    },
    "secretUpdateSecretResponse": {
      "type": "object",
      "title": "UpdateSecretResponse returns an empty response if the secret is successfully updated"
    }
  }
}
