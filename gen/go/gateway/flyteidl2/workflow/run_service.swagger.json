{
  "swagger": "2.0",
  "info": {
    "title": "flyteidl2/workflow/run_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "RunService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "BlobTypeBlobDimensionality": {
      "type": "string",
      "enum": [
        "SINGLE",
        "MULTIPART"
      ],
      "default": "SINGLE"
    },
    "ContainerArchitecture": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "AMD64",
        "ARM64",
        "ARM_V6",
        "ARM_V7"
      ],
      "default": "UNKNOWN",
      "description": "Architecture-type the container image supports."
    },
    "ContainerContextProcessContext": {
      "type": "object",
      "properties": {
        "container_start_time": {
          "type": "string",
          "format": "date-time"
        },
        "container_end_time": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Contains metadata required to identify logs produces by a single light-weight process that was run inside a container"
    },
    "DataLoadingConfigLiteralMapFormat": {
      "type": "string",
      "enum": [
        "JSON",
        "YAML",
        "PROTO"
      ],
      "default": "JSON",
      "description": "- JSON: JSON / YAML for the metadata (which contains inlined primitive values). The representation is inline with the standard json specification as specified - https://www.json.org/json-en.html\n - PROTO: Proto is a serialized binary of `core.LiteralMap` defined in flyteidl/core",
      "title": "LiteralMapFormat decides the encoding format in which the input metadata should be made available to the containers.\nIf the user has access to the protocol buffer definitions, it is recommended to use the PROTO format.\nJSON and YAML do not need any protobuf definitions to read it\nAll remote references in core.LiteralMap are replaced with local filesystem references (the data is downloaded to local filesystem)"
    },
    "ErrorInfoKind": {
      "type": "string",
      "enum": [
        "KIND_UNSPECIFIED",
        "KIND_USER",
        "KIND_SYSTEM"
      ],
      "default": "KIND_UNSPECIFIED"
    },
    "FilterFunction": {
      "type": "string",
      "enum": [
        "EQUAL",
        "NOT_EQUAL",
        "GREATER_THAN",
        "GREATER_THAN_OR_EQUAL",
        "LESS_THAN",
        "LESS_THAN_OR_EQUAL",
        "CONTAINS",
        "VALUE_IN",
        "ENDS_WITH",
        "NOT_ENDS_WITH",
        "CONTAINS_CASE_INSENSITIVE"
      ],
      "default": "EQUAL",
      "description": " - CONTAINS: Case sensitive contains function.\n - CONTAINS_CASE_INSENSITIVE: Case insensitive contains function."
    },
    "GPUAcceleratorDeviceClass": {
      "type": "string",
      "enum": [
        "NVIDIA_GPU",
        "GOOGLE_TPU",
        "AMAZON_NEURON",
        "AMD_GPU",
        "HABANA_GAUDI"
      ],
      "default": "NVIDIA_GPU",
      "description": "Specifies the class of accelerator device.\n\n - NVIDIA_GPU: NVIDIA GPU devices (default for backward compatibility)\n - GOOGLE_TPU: Google TPU devices\n - AMAZON_NEURON: Amazon Neuron devices\n - AMD_GPU: AMD GPU devices\n - HABANA_GAUDI: Habana Gaudi devices"
    },
    "IOStrategyDownloadMode": {
      "type": "string",
      "enum": [
        "DOWNLOAD_EAGER",
        "DOWNLOAD_STREAM",
        "DO_NOT_DOWNLOAD"
      ],
      "default": "DOWNLOAD_EAGER",
      "description": "- DOWNLOAD_EAGER: All data will be downloaded before the main container is executed\n - DOWNLOAD_STREAM: Data will be downloaded as a stream and an End-Of-Stream marker will be written to indicate all data has been downloaded. Refer to protocol for details\n - DO_NOT_DOWNLOAD: Large objects (offloaded) will not be downloaded",
      "title": "Mode to use for downloading"
    },
    "IOStrategyUploadMode": {
      "type": "string",
      "enum": [
        "UPLOAD_ON_EXIT",
        "UPLOAD_EAGER",
        "DO_NOT_UPLOAD"
      ],
      "default": "UPLOAD_ON_EXIT",
      "description": "- UPLOAD_ON_EXIT: All data will be uploaded after the main container exits\n - UPLOAD_EAGER: Data will be uploaded as it appears. Refer to protocol specification for details\n - DO_NOT_UPLOAD: Data will not be uploaded, only references will be written",
      "title": "Mode to use for uploading"
    },
    "ResourcesResourceEntry": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/ResourcesResourceName",
          "description": "Resource name."
        },
        "value": {
          "type": "string",
          "title": "Value must be a valid k8s quantity. See\nhttps://github.com/kubernetes/apimachinery/blob/master/pkg/api/resource/quantity.go#L30-L80"
        }
      },
      "description": "Encapsulates a resource name and value."
    },
    "ResourcesResourceName": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CPU",
        "GPU",
        "MEMORY",
        "STORAGE",
        "EPHEMERAL_STORAGE"
      ],
      "default": "UNKNOWN",
      "description": "Known resource names.\n\n - EPHEMERAL_STORAGE: For Kubernetes-based deployments, pods use ephemeral local storage for scratch space, caching, and for logs."
    },
    "SchemaColumnSchemaColumnType": {
      "type": "string",
      "enum": [
        "INTEGER",
        "FLOAT",
        "STRING",
        "BOOLEAN",
        "DATETIME",
        "DURATION"
      ],
      "default": "INTEGER"
    },
    "SchemaTypeSchemaColumn": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "A unique name -within the schema type- for the column"
        },
        "type": {
          "$ref": "#/definitions/SchemaColumnSchemaColumnType",
          "description": "The column type. This allows a limited set of types currently."
        }
      }
    },
    "SecretMountType": {
      "type": "string",
      "enum": [
        "ANY",
        "ENV_VAR",
        "FILE"
      ],
      "default": "ANY",
      "description": " - ANY: Default case, indicates the client can tolerate either mounting options.\n - ENV_VAR: ENV_VAR indicates the secret needs to be mounted as an environment variable.\n - FILE: FILE indicates the secret needs to be mounted as a file."
    },
    "SortDirection": {
      "type": "string",
      "enum": [
        "DESCENDING",
        "ASCENDING"
      ],
      "default": "DESCENDING",
      "description": " - DESCENDING: By default, fields are sorted in descending order."
    },
    "SqlDialect": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "ANSI",
        "HIVE",
        "OTHER"
      ],
      "default": "UNDEFINED",
      "description": "The dialect of the SQL statement. This is used to validate and parse SQL statements at compilation time to avoid\nexpensive runtime operations. If set to an unsupported dialect, no validation will be done on the statement.\nWe support the following dialect: ansi, hive."
    },
    "StructuredDatasetTypeDatasetColumn": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A unique name within the schema type for the column."
        },
        "literal_type": {
          "$ref": "#/definitions/coreLiteralType",
          "description": "The column type."
        }
      }
    },
    "TaskLogLinkType": {
      "type": "string",
      "enum": [
        "EXTERNAL",
        "DASHBOARD",
        "IDE"
      ],
      "default": "EXTERNAL",
      "description": " - EXTERNAL: The link for task log. For example, the aws cloudwatch logs, gcp stackdriver logs, etc.\n - DASHBOARD: The link for spark UI, ray dashboard, etc.\n - IDE: The link for vscode or other IDEs."
    },
    "TaskLogMessageFormat": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CSV",
        "JSON"
      ],
      "default": "UNKNOWN"
    },
    "commonActionIdentifier": {
      "type": "object",
      "properties": {
        "run": {
          "$ref": "#/definitions/commonRunIdentifier",
          "description": "Identifier for the run."
        },
        "name": {
          "type": "string",
          "description": "Name of the action. Must be unique within the run."
        }
      },
      "description": "Unique identifier of an action."
    },
    "commonAppSpec": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        }
      }
    },
    "commonApplication": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/commonApplicationIdentifier"
        },
        "spec": {
          "$ref": "#/definitions/commonAppSpec"
        }
      }
    },
    "commonApplicationIdentifier": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        }
      }
    },
    "commonClusterIdentifier": {
      "type": "object",
      "properties": {
        "organization": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "commonDomain": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "organization": {
          "$ref": "#/definitions/commonOrganization"
        }
      }
    },
    "commonEnrichedIdentity": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/commonUser"
        },
        "application": {
          "$ref": "#/definitions/commonApplication"
        }
      }
    },
    "commonFilter": {
      "type": "object",
      "properties": {
        "function": {
          "$ref": "#/definitions/FilterFunction"
        },
        "field": {
          "type": "string",
          "title": "e.g. name or version"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Only in the case of a VALUE_IN function, values may contain multiple entries."
        }
      }
    },
    "commonLaunchPlan": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/commonProject"
        }
      }
    },
    "commonListRequest": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "Indicates the number of resources to be returned.\n+required"
        },
        "token": {
          "type": "string",
          "title": "In the case of multiple pages of results, the server-provided token can be used to fetch the next page\nin a query.\n+optional"
        },
        "sort_by": {
          "$ref": "#/definitions/commonSort",
          "title": "Deprecated, use sort_by_fields instead.\nSpecifies how listed entities should be sorted in the response.\n+optional"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonFilter"
          },
          "title": "Indicates a list of filters. This field is used for grpc get requests.\n+optional"
        },
        "raw_filters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Indicates a raw list of filters passed as string.This field is used for REST get requests\n+optional"
        },
        "sort_by_fields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonSort"
          },
          "title": "Specifies how listed entities should be sorted in the response.\nSort fields are applied in order.\n+optional"
        }
      }
    },
    "commonOrganization": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "commonPermission": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/commonResource"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/flyteidl2commonAction"
          }
        }
      },
      "description": "Defines a set of allowed actions on a specific authorization resource."
    },
    "commonPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/commonPolicyIdentifier"
        },
        "bindings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonPolicyBinding"
          }
        },
        "description": {
          "type": "string",
          "title": "Optional: human readable description"
        }
      },
      "description": "A policy is a collection of roles bound to a resource."
    },
    "commonPolicyBinding": {
      "type": "object",
      "properties": {
        "role_id": {
          "$ref": "#/definitions/commonRoleIdentifier",
          "description": "The role designates the permitted set of actions which can be applied to the resource."
        },
        "resource": {
          "$ref": "#/definitions/commonResource"
        }
      },
      "description": "A policy binding represents a role (a set of actions) defined on a resource."
    },
    "commonPolicyIdentifier": {
      "type": "object",
      "properties": {
        "organization": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "Unique name for this policy within the organization"
        }
      }
    },
    "commonProject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/commonDomain"
        }
      }
    },
    "commonProjectIdentifier": {
      "type": "object",
      "properties": {
        "organization": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "commonResource": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/commonOrganization"
        },
        "domain": {
          "$ref": "#/definitions/commonDomain"
        },
        "project": {
          "$ref": "#/definitions/commonProject"
        },
        "workflow": {
          "$ref": "#/definitions/commonWorkflow"
        },
        "launch_plan": {
          "$ref": "#/definitions/commonLaunchPlan"
        },
        "cluster": {
          "$ref": "#/definitions/commonClusterIdentifier"
        }
      }
    },
    "commonRole": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/commonRoleIdentifier"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonPermission"
          }
        },
        "role_spec": {
          "$ref": "#/definitions/commonRoleSpec"
        },
        "role_type": {
          "$ref": "#/definitions/commonRoleType"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/flyteidl2commonAction"
          }
        }
      }
    },
    "commonRoleIdentifier": {
      "type": "object",
      "properties": {
        "organization": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "Unique name for this role within the organization"
        }
      }
    },
    "commonRoleSpec": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Optional, human readable description for this role."
        }
      }
    },
    "commonRoleType": {
      "type": "string",
      "enum": [
        "ROLE_TYPE_NONE",
        "ROLE_TYPE_ADMIN",
        "ROLE_TYPE_CONTRIBUTOR",
        "ROLE_TYPE_VIEWER",
        "ROLE_TYPE_CUSTOM",
        "ROLE_TYPE_CLUSTER_MANAGER",
        "ROLE_TYPE_FLYTE_PROJECT_ADMIN",
        "ROLE_TYPE_SERVERLESS_VIEWER",
        "ROLE_TYPE_SERVERLESS_CONTRIBUTOR",
        "ROLE_TYPE_SUPPORT"
      ],
      "default": "ROLE_TYPE_NONE",
      "description": "- ROLE_TYPE_NONE: Default group. Not used in practice.\n - ROLE_TYPE_ADMIN: The admin role has a collective set of permissions to do everything\n - ROLE_TYPE_CONTRIBUTOR: The contributor role has a collective set of permissions to view inventory, view executions, write inventory and create executions\n - ROLE_TYPE_VIEWER: The viewer role has a collective set of permissions to view inventory and view executions\n - ROLE_TYPE_CUSTOM: Represent a role with user-defined sets of permissions.\n - ROLE_TYPE_CLUSTER_MANAGER: The role with permissions to administer a specific customer cluster.\n - ROLE_TYPE_FLYTE_PROJECT_ADMIN: Role with permissions specific to administer flyte project(s).\n - ROLE_TYPE_SERVERLESS_VIEWER: The viewer role for serverless\n - ROLE_TYPE_SERVERLESS_CONTRIBUTOR: The contributor role for serverless\n - ROLE_TYPE_SUPPORT: The support role would have contributor permissions plus the access to support endpoints",
      "title": "A role type is a short-hand for understanding the permissions associated with a role.\nBoilerplate role types include a conventional collection of permissions\nCustom role types include a user-defined collection of permissions"
    },
    "commonRunIdentifier": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "Org this run belongs to."
        },
        "project": {
          "type": "string",
          "description": "Project this run belongs to."
        },
        "domain": {
          "type": "string",
          "description": "Domain this run belongs to."
        },
        "name": {
          "type": "string",
          "description": "Name of the run. Must be unique across all runs in this org, project, and domain pairing."
        }
      },
      "description": "Unique identifier of a run."
    },
    "commonSort": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "Indicates an attribute to sort the response values.\n+required"
        },
        "direction": {
          "$ref": "#/definitions/SortDirection",
          "title": "Indicates the direction to apply sort key for response values.\n+optional"
        }
      },
      "description": "Specifies sort ordering in a list request."
    },
    "commonTriggerIdentifier": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/commonTriggerName"
        },
        "revision": {
          "type": "string",
          "format": "uint64",
          "description": "Revision of the trigger."
        }
      },
      "title": "Identifies a trigger revision within an org, project and domain"
    },
    "commonTriggerName": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "Org this trigger belongs to."
        },
        "project": {
          "type": "string",
          "description": "Project this trigger belongs to."
        },
        "domain": {
          "type": "string",
          "description": "Domain this trigger belongs to."
        },
        "name": {
          "type": "string",
          "description": "Unique name of the trigger."
        },
        "task_name": {
          "type": "string"
        }
      },
      "title": "Identifies trigger within an org, project and domain"
    },
    "commonUser": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/commonUserIdentifier"
        },
        "spec": {
          "$ref": "#/definitions/commonUserSpec"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonRole"
          }
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/commonPolicy"
          }
        }
      },
      "description": "Encapsulates user profile details for a member of an organization."
    },
    "commonUserIdentifier": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        }
      }
    },
    "commonUserSpec": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "user_handle": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "photo_url": {
          "type": "string"
        }
      }
    },
    "commonWorkflow": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/commonProject"
        }
      }
    },
    "coreArtifactBindingData": {
      "type": "object",
      "properties": {
        "partition_key": {
          "type": "string"
        },
        "bind_to_time_partition": {
          "type": "boolean"
        },
        "time_transform": {
          "$ref": "#/definitions/coreTimeTransform",
          "title": "This is only relevant in the time partition case"
        }
      },
      "title": "Only valid for triggers"
    },
    "coreArtifactID": {
      "type": "object",
      "properties": {
        "artifact_key": {
          "$ref": "#/definitions/coreArtifactKey"
        },
        "version": {
          "type": "string"
        },
        "partitions": {
          "$ref": "#/definitions/corePartitions",
          "description": "Think of a partition as a tag on an Artifact, except it's a key-value pair.\nDifferent partitions naturally have different versions (execution ids)."
        },
        "time_partition": {
          "$ref": "#/definitions/coreTimePartition",
          "description": "There is no such thing as an empty time partition - if it's not set, then there is no time partition."
        }
      }
    },
    "coreArtifactKey": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string",
          "description": "Project and domain and suffix needs to be unique across a given artifact store."
        },
        "domain": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "org": {
          "type": "string"
        }
      }
    },
    "coreArtifactQuery": {
      "type": "object",
      "properties": {
        "artifact_id": {
          "$ref": "#/definitions/coreArtifactID"
        },
        "artifact_tag": {
          "$ref": "#/definitions/coreArtifactTag"
        },
        "uri": {
          "type": "string"
        },
        "binding": {
          "$ref": "#/definitions/coreArtifactBindingData",
          "description": "This is used in the trigger case, where a user specifies a value for an input that is one of the triggering\nartifacts, or a partition value derived from a triggering artifact."
        }
      },
      "title": "Uniqueness constraints for Artifacts\n - project, domain, name, version, partitions\nOption 2 (tags are standalone, point to an individual artifact id):\n - project, domain, name, alias (points to one partition if partitioned)\n - project, domain, name, partition key, partition value"
    },
    "coreArtifactTag": {
      "type": "object",
      "properties": {
        "artifact_key": {
          "$ref": "#/definitions/coreArtifactKey"
        },
        "value": {
          "$ref": "#/definitions/coreLabelValue"
        }
      }
    },
    "coreBinary": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Serialized data (MessagePack) for supported types like Dataclass, Pydantic BaseModel, and untyped dict."
        },
        "tag": {
          "type": "string",
          "description": "The serialization format identifier (e.g., MessagePack). Consumers must define unique tags and validate them before deserialization."
        }
      },
      "description": "A simple byte array with a tag to help different parts of the system communicate about what is in the byte array.\nIt's strongly advisable that consumers of this type define a unique tag and validate the tag before parsing the data."
    },
    "coreBlob": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/coreBlobMetadata"
        },
        "uri": {
          "type": "string"
        }
      },
      "description": "Refers to an offloaded set of files. It encapsulates the type of the store and a unique uri for where the data is.\nThere are no restrictions on how the uri is formatted since it will depend on how to interact with the store."
    },
    "coreBlobMetadata": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/coreBlobType"
        }
      }
    },
    "coreBlobType": {
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "title": "Format can be a free form string understood by SDK/UI etc like\ncsv, parquet etc"
        },
        "dimensionality": {
          "$ref": "#/definitions/BlobTypeBlobDimensionality"
        }
      },
      "title": "Defines type behavior for blob objects"
    },
    "coreCatalogCacheStatus": {
      "type": "string",
      "enum": [
        "CACHE_DISABLED",
        "CACHE_MISS",
        "CACHE_HIT",
        "CACHE_POPULATED",
        "CACHE_LOOKUP_FAILURE",
        "CACHE_PUT_FAILURE",
        "CACHE_SKIPPED",
        "CACHE_EVICTED"
      ],
      "default": "CACHE_DISABLED",
      "description": "- CACHE_DISABLED: Used to indicate that caching was disabled\n - CACHE_MISS: Used to indicate that the cache lookup resulted in no matches\n - CACHE_HIT: used to indicate that the associated artifact was a result of a previous execution\n - CACHE_POPULATED: used to indicate that the resultant artifact was added to the cache\n - CACHE_LOOKUP_FAILURE: Used to indicate that cache lookup failed because of an error\n - CACHE_PUT_FAILURE: Used to indicate that cache lookup failed because of an error\n - CACHE_SKIPPED: Used to indicate the cache lookup was skipped\n - CACHE_EVICTED: Used to indicate that the cache was evicted",
      "title": "Indicates the status of CatalogCaching. The reason why this is not embedded in TaskNodeMetadata is, that we may use for other types of nodes as well in the future"
    },
    "coreContainer": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string",
          "title": "Container image url. Eg: docker/redis:latest"
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Command to be executed, if not provided, the default entrypoint in the container image will be used."
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "These will default to Flyte given paths. If provided, the system will not append known paths. If the task still\nneeds flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the\nsystem will populate these before executing the container."
        },
        "resources": {
          "$ref": "#/definitions/coreResources",
          "description": "Container resources requirement as specified by the container engine."
        },
        "env": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coreKeyValuePair"
          },
          "description": "Environment variables will be set as the container is starting up."
        },
        "config": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coreKeyValuePair"
          },
          "description": "Allows extra configs to be available for the container.\nTODO: elaborate on how configs will become available.\nDeprecated, please use TaskTemplate.config instead."
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coreContainerPort"
          },
          "title": "Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but\nnot supported on AWS Batch)\nOnly K8s"
        },
        "data_config": {
          "$ref": "#/definitions/coreDataLoadingConfig",
          "title": "BETA: Optional configuration for DataLoading. If not specified, then default values are used.\nThis makes it possible to to run a completely portable container, that uses inputs and outputs\nonly from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.\nIf data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories\nare not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation\nto understand the default paths.\nOnly K8s"
        },
        "architecture": {
          "$ref": "#/definitions/ContainerArchitecture"
        }
      }
    },
    "coreContainerContext": {
      "type": "object",
      "properties": {
        "container_name": {
          "type": "string"
        },
        "process": {
          "$ref": "#/definitions/ContainerContextProcessContext"
        }
      },
      "title": "Contains metadata required to identify logs produces by a single container"
    },
    "coreContainerPort": {
      "type": "object",
      "properties": {
        "container_port": {
          "type": "integer",
          "format": "int64",
          "description": "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 \u003c x \u003c 65536."
        },
        "name": {
          "type": "string",
          "description": "Name of the port to expose on the pod's IP address."
        }
      },
      "description": "Defines port properties for a container."
    },
    "coreDataLoadingConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Flag enables DataLoading Config. If this is not set, data loading will not be used!"
        },
        "input_path": {
          "type": "string",
          "title": "File system path (start at root). This folder will contain all the inputs exploded to a separate file.\nExample, if the input interface needs (x: int, y: blob, z: multipart_blob) and the input path is '/var/flyte/inputs', then the file system will look like\n/var/flyte/inputs/inputs.\u003cmetadata format dependent -\u003e .pb .json .yaml\u003e -\u003e Format as defined previously. The Blob and Multipart blob will reference local filesystem instead of remote locations\n/var/flyte/inputs/x -\u003e X is a file that contains the value of x (integer) in string format\n/var/flyte/inputs/y -\u003e Y is a file in Binary format\n/var/flyte/inputs/z/... -\u003e Note Z itself is a directory\nMore information about the protocol - refer to docs #TODO reference docs here"
        },
        "output_path": {
          "type": "string",
          "title": "File system path (start at root). This folder should contain all the outputs for the task as individual files and/or an error text file"
        },
        "format": {
          "$ref": "#/definitions/DataLoadingConfigLiteralMapFormat",
          "title": "In the inputs folder, there will be an additional summary/metadata file that contains references to all files or inlined primitive values.\nThis format decides the actual encoding for the data. Refer to the encoding to understand the specifics of the contents and the encoding"
        },
        "io_strategy": {
          "$ref": "#/definitions/coreIOStrategy"
        }
      },
      "description": "This configuration allows executing raw containers in Flyte using the Flyte CoPilot system.\nFlyte CoPilot, eliminates the needs of flytekit or sdk inside the container. Any inputs required by the users container are side-loaded in the input_path\nAny outputs generated by the user container - within output_path are automatically uploaded."
    },
    "coreError": {
      "type": "object",
      "properties": {
        "failed_node_id": {
          "type": "string",
          "description": "The node id that threw the error."
        },
        "message": {
          "type": "string",
          "description": "Error message thrown."
        }
      },
      "description": "Represents an error thrown from a node."
    },
    "coreExtendedResources": {
      "type": "object",
      "properties": {
        "gpu_accelerator": {
          "$ref": "#/definitions/coreGPUAccelerator",
          "description": "GPU accelerator to select for task. Contains information about device type, and\nfor multi-instance GPUs, the partition size to use."
        },
        "shared_memory": {
          "$ref": "#/definitions/coreSharedMemory"
        }
      },
      "description": "Encapsulates all non-standard resources, not captured by v1.ResourceRequirements, to\nallocate to a task."
    },
    "coreGPUAccelerator": {
      "type": "object",
      "properties": {
        "device": {
          "type": "string",
          "description": "This can be any arbitrary string, and should be informed by the labels or taints\nassociated with the nodes in question. Default cloud provider labels typically\nuse the following values: `nvidia-tesla-t4`, `nvidia-tesla-a100`, etc."
        },
        "unpartitioned": {
          "type": "boolean"
        },
        "partition_size": {
          "type": "string",
          "description": "Like `device`, this can be any arbitrary string, and should be informed by\nthe labels or taints associated with the nodes in question. Default cloud\nprovider labels typically use the following values: `1g.5gb`, `2g.10gb`, etc."
        },
        "device_class": {
          "$ref": "#/definitions/GPUAcceleratorDeviceClass",
          "description": "The class of accelerator device. Defaults to NVIDIA_GPU if not specified."
        }
      },
      "description": "Metadata associated with the GPU accelerator to allocate to a task. Contains\ninformation about device type, and for multi-instance GPUs, the partition size to\nuse."
    },
    "coreGranularity": {
      "type": "string",
      "enum": [
        "UNSET",
        "MINUTE",
        "HOUR",
        "DAY",
        "MONTH"
      ],
      "default": "UNSET",
      "title": "- DAY: default"
    },
    "coreIOStrategy": {
      "type": "object",
      "properties": {
        "download_mode": {
          "$ref": "#/definitions/IOStrategyDownloadMode",
          "title": "Mode to use to manage downloads"
        },
        "upload_mode": {
          "$ref": "#/definitions/IOStrategyUploadMode",
          "title": "Mode to use to manage uploads"
        }
      },
      "title": "Strategy to use when dealing with Blob, Schema, or multipart blob data (large datasets)"
    },
    "coreIdentifier": {
      "type": "object",
      "properties": {
        "resource_type": {
          "$ref": "#/definitions/coreResourceType",
          "description": "Identifies the specific type of resource that this identifier corresponds to."
        },
        "project": {
          "type": "string",
          "description": "Name of the project the resource belongs to."
        },
        "domain": {
          "type": "string",
          "description": "Name of the domain the resource belongs to.\nA domain can be considered as a subset within a specific project."
        },
        "name": {
          "type": "string",
          "description": "User provided value for the resource."
        },
        "version": {
          "type": "string",
          "description": "Specific version of the resource."
        },
        "org": {
          "type": "string",
          "description": "Optional, org key applied to the resource."
        }
      },
      "description": "Encapsulation of fields that uniquely identifies a Flyte resource."
    },
    "coreInputBindingData": {
      "type": "object",
      "properties": {
        "var": {
          "type": "string"
        }
      }
    },
    "coreK8sObjectMetadata": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional labels to add to the pod definition."
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional annotations to add to the pod definition."
        }
      },
      "description": "Metadata for building a kubernetes object when a task is executed."
    },
    "coreK8sPod": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/coreK8sObjectMetadata",
          "description": "Contains additional metadata for building a kubernetes pod."
        },
        "pod_spec": {
          "type": "object",
          "title": "Defines the primary pod spec created when a task is executed.\nThis should be a JSON-marshalled pod spec, which can be defined in\n- go, using: https://github.com/kubernetes/api/blob/release-1.21/core/v1/types.go#L2936\n- python: using https://github.com/kubernetes-client/python/blob/release-19.0/kubernetes/client/models/v1_pod_spec.py"
        },
        "data_config": {
          "$ref": "#/definitions/coreDataLoadingConfig",
          "title": "BETA: Optional configuration for DataLoading. If not specified, then default values are used.\nThis makes it possible to to run a completely portable container, that uses inputs and outputs\nonly from the local file-system and without having any reference to flytekit. This is supported only on K8s at the moment.\nIf data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories\nare not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation\nto understand the default paths.\nOnly K8s"
        },
        "primary_container_name": {
          "type": "string",
          "description": "Defines the primary container name when pod template override is executed."
        }
      },
      "description": "Defines a pod spec and additional pod metadata that is created when a task is executed."
    },
    "coreKeyValuePair": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "required."
        },
        "value": {
          "type": "string",
          "description": "+optional."
        }
      },
      "description": "A generic key value pair."
    },
    "coreLabelValue": {
      "type": "object",
      "properties": {
        "static_value": {
          "type": "string",
          "title": "The string static value is for use in the Partitions object"
        },
        "time_value": {
          "type": "string",
          "format": "date-time",
          "title": "The time value is for use in the TimePartition case"
        },
        "triggered_binding": {
          "$ref": "#/definitions/coreArtifactBindingData"
        },
        "input_binding": {
          "$ref": "#/definitions/coreInputBindingData"
        },
        "runtime_binding": {
          "$ref": "#/definitions/coreRuntimeBinding"
        }
      }
    },
    "coreLiteral": {
      "type": "object",
      "properties": {
        "scalar": {
          "$ref": "#/definitions/coreScalar",
          "description": "A simple value."
        },
        "collection": {
          "$ref": "#/definitions/coreLiteralCollection",
          "description": "A collection of literals to allow nesting."
        },
        "map": {
          "$ref": "#/definitions/coreLiteralMap",
          "description": "A map of strings to literals."
        },
        "offloaded_metadata": {
          "$ref": "#/definitions/coreLiteralOffloadedMetadata",
          "description": "Offloaded literal metadata\nWhen you deserialize the offloaded metadata, it would be of Literal and its type would be defined by LiteralType stored in offloaded_metadata."
        },
        "hash": {
          "type": "string",
          "title": "A hash representing this literal.\nThis is used for caching purposes. For more details refer to RFC 1893\n(https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md)"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Additional metadata for literals."
        }
      },
      "description": "A simple value. This supports any level of nesting (e.g. array of array of array of Blobs) as well as simple primitives."
    },
    "coreLiteralCollection": {
      "type": "object",
      "properties": {
        "literals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coreLiteral"
          }
        }
      },
      "description": "A collection of literals. This is a workaround since oneofs in proto messages cannot contain a repeated field."
    },
    "coreLiteralMap": {
      "type": "object",
      "properties": {
        "literals": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/coreLiteral"
          }
        }
      },
      "description": "A map of literals. This is a workaround since oneofs in proto messages cannot contain a repeated field."
    },
    "coreLiteralOffloadedMetadata": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The location of the offloaded core.Literal."
        },
        "size_bytes": {
          "type": "string",
          "format": "uint64",
          "description": "The size of the offloaded data."
        },
        "inferred_type": {
          "$ref": "#/definitions/coreLiteralType",
          "description": "The inferred literal type of the offloaded data."
        }
      },
      "description": "A message that contains the metadata of the offloaded data."
    },
    "coreLiteralType": {
      "type": "object",
      "properties": {
        "simple": {
          "$ref": "#/definitions/coreSimpleType",
          "description": "A simple type that can be compared one-to-one with another."
        },
        "schema": {
          "$ref": "#/definitions/coreSchemaType",
          "description": "A complex type that requires matching of inner fields."
        },
        "collection_type": {
          "$ref": "#/definitions/coreLiteralType",
          "description": "Defines the type of the value of a collection. Only homogeneous collections are allowed."
        },
        "map_value_type": {
          "$ref": "#/definitions/coreLiteralType",
          "description": "Defines the type of the value of a map type. The type of the key is always a string."
        },
        "blob": {
          "$ref": "#/definitions/coreBlobType",
          "description": "A blob might have specialized implementation details depending on associated metadata."
        },
        "enum_type": {
          "$ref": "#/definitions/flyteidl2coreEnumType",
          "description": "Defines an enum with pre-defined string values."
        },
        "structured_dataset_type": {
          "$ref": "#/definitions/coreStructuredDatasetType",
          "title": "Generalized schema support"
        },
        "union_type": {
          "$ref": "#/definitions/coreUnionType",
          "description": "Defines an union type with pre-defined LiteralTypes."
        },
        "metadata": {
          "type": "object",
          "description": "This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by\nconsumers to identify special behavior or display extended information for the type."
        },
        "annotation": {
          "$ref": "#/definitions/coreTypeAnnotation",
          "description": "This field contains arbitrary data that might have special semantic\nmeaning for the client but does not effect internal flyte behavior."
        },
        "structure": {
          "$ref": "#/definitions/coreTypeStructure",
          "description": "Hints to improve type matching."
        }
      },
      "description": "Defines a strong type to allow type checking between interfaces."
    },
    "coreLogContext": {
      "type": "object",
      "properties": {
        "pods": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/corePodLogContext"
          }
        },
        "primary_pod_name": {
          "type": "string"
        }
      },
      "title": "Contains metadata required to identify logs produces by a set of pods"
    },
    "coreOAuth2Client": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "title": "client_id is the public id for the client to use. The system will not perform any pre-auth validation that the\nsecret requested matches the client_id indicated here.\n+required"
        },
        "client_secret": {
          "$ref": "#/definitions/flyteidl2coreSecret",
          "title": "client_secret is a reference to the secret used to authenticate the OAuth2 client.\n+required"
        }
      },
      "description": "OAuth2Client encapsulates OAuth2 Client Credentials to be used when making calls on behalf of that task."
    },
    "coreOAuth2TokenRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name indicates a unique id for the token request within this task token requests. It'll be used as a suffix for\nenvironment variables and as a filename for mounting tokens as files.\n+required"
        },
        "type": {
          "$ref": "#/definitions/coreOAuth2TokenRequestType",
          "title": "type indicates the type of the request to make. Defaults to CLIENT_CREDENTIALS.\n+required"
        },
        "client": {
          "$ref": "#/definitions/coreOAuth2Client",
          "title": "client references the client_id/secret to use to request the OAuth2 token.\n+required"
        },
        "idp_discovery_endpoint": {
          "type": "string",
          "title": "idp_discovery_endpoint references the discovery endpoint used to retrieve token endpoint and other related\ninformation.\n+optional"
        },
        "token_endpoint": {
          "type": "string",
          "title": "token_endpoint references the token issuance endpoint. If idp_discovery_endpoint is not provided, this parameter is\nmandatory.\n+optional"
        }
      },
      "description": "OAuth2TokenRequest encapsulates information needed to request an OAuth2 token.\nFLYTE_TOKENS_ENV_PREFIX will be passed to indicate the prefix of the environment variables that will be present if\ntokens are passed through environment variables.\nFLYTE_TOKENS_PATH_PREFIX will be passed to indicate the prefix of the path where secrets will be mounted if tokens\nare passed through file mounts."
    },
    "coreOAuth2TokenRequestType": {
      "type": "string",
      "enum": [
        "CLIENT_CREDENTIALS"
      ],
      "default": "CLIENT_CREDENTIALS",
      "description": "Type of the token requested.\n\n - CLIENT_CREDENTIALS: CLIENT_CREDENTIALS indicates a 2-legged OAuth token requested using client credentials."
    },
    "coreOperator": {
      "type": "string",
      "enum": [
        "MINUS",
        "PLUS"
      ],
      "default": "MINUS"
    },
    "coreParameter": {
      "type": "object",
      "properties": {
        "var": {
          "$ref": "#/definitions/coreVariable",
          "description": "+required Variable. Defines the type of the variable backing this parameter."
        },
        "default": {
          "$ref": "#/definitions/coreLiteral",
          "description": "Defines a default value that has to match the variable type defined."
        },
        "required": {
          "type": "boolean",
          "description": "+optional, is this value required to be filled."
        },
        "artifact_query": {
          "$ref": "#/definitions/coreArtifactQuery",
          "description": "This is an execution time search basically that should result in exactly one Artifact with a Type that\nmatches the type of the variable."
        },
        "artifact_id": {
          "$ref": "#/definitions/coreArtifactID"
        }
      },
      "description": "A parameter is used as input to a launch plan and has\nthe special ability to have a default value or mark itself as required."
    },
    "corePartitions": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/coreLabelValue"
          }
        }
      }
    },
    "corePodLogContext": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "pod_name": {
          "type": "string"
        },
        "containers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coreContainerContext"
          }
        },
        "primary_container_name": {
          "type": "string"
        },
        "init_containers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coreContainerContext"
          }
        }
      },
      "title": "Contains metadata required to identify logs produces by a single pod"
    },
    "corePrimitive": {
      "type": "object",
      "properties": {
        "integer": {
          "type": "string",
          "format": "int64"
        },
        "float_value": {
          "type": "number",
          "format": "double"
        },
        "string_value": {
          "type": "string"
        },
        "boolean": {
          "type": "boolean"
        },
        "datetime": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "string"
        }
      },
      "title": "Primitive Types"
    },
    "coreResourceType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "TASK",
        "WORKFLOW",
        "LAUNCH_PLAN",
        "DATASET"
      ],
      "default": "UNSPECIFIED",
      "description": "Indicates a resource type within Flyte.\n\n - DATASET: A dataset represents an entity modeled in Flyte DataCatalog. A Dataset is also a versioned entity and can be a compilation of multiple individual objects.\nEventually all Catalog objects should be modeled similar to Flyte Objects. The Dataset entities makes it possible for the UI  and CLI to act on the objects\nin a similar manner to other Flyte objects"
    },
    "coreResources": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ResourcesResourceEntry"
          },
          "description": "The desired set of resources requested. ResourceNames must be unique within the list."
        },
        "limits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ResourcesResourceEntry"
          },
          "description": "Defines a set of bounds (e.g. min/max) within which the task can reliably run. ResourceNames must be unique\nwithin the list."
        }
      },
      "description": "A customizable interface to convey resources requested for a container. This can be interpreted differently for different\ncontainer engines."
    },
    "coreRetryStrategy": {
      "type": "object",
      "properties": {
        "retries": {
          "type": "integer",
          "format": "int64",
          "description": "Number of retries. Retries will be consumed when the job fails with a recoverable error.\nThe number of retries must be less than or equals to 10."
        }
      },
      "description": "Retry strategy associated with an executable unit."
    },
    "coreRuntimeBinding": {
      "type": "object"
    },
    "coreScalar": {
      "type": "object",
      "properties": {
        "primitive": {
          "$ref": "#/definitions/corePrimitive"
        },
        "blob": {
          "$ref": "#/definitions/coreBlob"
        },
        "binary": {
          "$ref": "#/definitions/coreBinary"
        },
        "schema": {
          "$ref": "#/definitions/coreSchema"
        },
        "none_type": {
          "$ref": "#/definitions/coreVoid"
        },
        "error": {
          "$ref": "#/definitions/coreError"
        },
        "generic": {
          "type": "object"
        },
        "structured_dataset": {
          "$ref": "#/definitions/coreStructuredDataset"
        },
        "union": {
          "$ref": "#/definitions/coreUnion"
        }
      }
    },
    "coreSchema": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/coreSchemaType"
        }
      },
      "description": "A strongly typed schema that defines the interface of data retrieved from the underlying storage medium."
    },
    "coreSchemaType": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SchemaTypeSchemaColumn"
          },
          "description": "A list of ordered columns this schema comprises of."
        }
      },
      "description": "Defines schema columns and types to strongly type-validate schemas interoperability."
    },
    "coreSecurityContext": {
      "type": "object",
      "properties": {
        "run_as": {
          "$ref": "#/definitions/flyteidl2coreIdentity",
          "description": "run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the\nbackend plugin to choose the appropriate identity for the execution engine the task will run on."
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/flyteidl2coreSecret"
          },
          "description": "secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the\npod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS\nBatch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access\nto the secret) and to pass it to the remote execution engine."
        },
        "tokens": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coreOAuth2TokenRequest"
          },
          "description": "tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the\npod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS\nBatch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access\nto the secret) and to pass it to the remote execution engine."
        }
      },
      "description": "SecurityContext holds security attributes that apply to tasks."
    },
    "coreSharedMemory": {
      "type": "object",
      "properties": {
        "mount_path": {
          "type": "string",
          "title": "Mount path to place in container"
        },
        "mount_name": {
          "type": "string",
          "title": "Name for volume"
        },
        "size_limit": {
          "type": "string",
          "title": "Size limit for shared memory. If not set, then the shared memory is equal\nto the allocated memory.\n+optional"
        }
      },
      "description": "Metadata associated with configuring a shared memory volume for a task."
    },
    "coreSimpleType": {
      "type": "string",
      "enum": [
        "NONE",
        "INTEGER",
        "FLOAT",
        "STRING",
        "BOOLEAN",
        "DATETIME",
        "DURATION",
        "BINARY",
        "ERROR",
        "STRUCT"
      ],
      "default": "NONE",
      "description": "Define a set of simple types."
    },
    "coreSql": {
      "type": "object",
      "properties": {
        "statement": {
          "type": "string",
          "title": "The actual query to run, the query can have templated parameters.\nWe use Flyte's Golang templating format for Query templating.\nFor example,\ninsert overwrite directory '{{ .rawOutputDataPrefix }}' stored as parquet\nselect *\nfrom my_table\nwhere ds = '{{ .Inputs.ds }}'"
        },
        "dialect": {
          "$ref": "#/definitions/SqlDialect"
        }
      },
      "description": "Sql represents a generic sql workload with a statement and dialect."
    },
    "coreStructuredDataset": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "title": "String location uniquely identifying where the data is.\nShould start with the storage location (e.g. s3://, gs://, bq://, etc.)"
        },
        "metadata": {
          "$ref": "#/definitions/coreStructuredDatasetMetadata"
        }
      }
    },
    "coreStructuredDatasetMetadata": {
      "type": "object",
      "properties": {
        "structured_dataset_type": {
          "$ref": "#/definitions/coreStructuredDatasetType",
          "description": "Bundle the type information along with the literal.\nThis is here because StructuredDatasets can often be more defined at run time than at compile time.\nThat is, at compile time you might only declare a task to return a pandas dataframe or a StructuredDataset,\nwithout any column information, but at run time, you might have that column information.\nflytekit python will copy this type information into the literal, from the type information, if not provided by\nthe various plugins (encoders).\nSince this field is run time generated, it's not used for any type checking."
        }
      }
    },
    "coreStructuredDatasetType": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StructuredDatasetTypeDatasetColumn"
          },
          "description": "A list of ordered columns this schema comprises of."
        },
        "format": {
          "type": "string",
          "description": "This is the storage format, the format of the bits at rest\nparquet, feather, csv, etc.\nFor two types to be compatible, the format will need to be an exact match."
        },
        "external_schema_type": {
          "type": "string",
          "description": "This is a string representing the type that the bytes in external_schema_bytes are formatted in.\nThis is an optional field that will not be used for type checking."
        },
        "external_schema_bytes": {
          "type": "string",
          "format": "byte",
          "description": "The serialized bytes of a third-party schema library like Arrow.\nThis is an optional field that will not be used for type checking."
        }
      }
    },
    "coreTaskLog": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "message_format": {
          "$ref": "#/definitions/TaskLogMessageFormat"
        },
        "ttl": {
          "type": "string"
        },
        "ShowWhilePending": {
          "type": "boolean"
        },
        "HideOnceFinished": {
          "type": "boolean"
        },
        "link_type": {
          "$ref": "#/definitions/TaskLogLinkType"
        },
        "ready": {
          "type": "boolean"
        }
      },
      "title": "Log information for the task that is specific to a log sink\nWhen our log story is flushed out, we may have more metadata here like log link expiry"
    },
    "coreTaskTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/coreIdentifier",
          "description": "Auto generated taskId by the system. Task Id uniquely identifies this task globally."
        },
        "type": {
          "type": "string",
          "description": "A predefined yet extensible Task type identifier. This can be used to customize any of the components. If no\nextensions are provided in the system, Flyte will resolve the this task to its TaskCategory and default the\nimplementation registered for the TaskCategory."
        },
        "metadata": {
          "$ref": "#/definitions/flyteidl2coreTaskMetadata",
          "description": "Extra metadata about the task."
        },
        "interface": {
          "$ref": "#/definitions/coreTypedInterface",
          "description": "A strongly typed interface for the task. This enables others to use this task within a workflow and guarantees\ncompile-time validation of the workflow to avoid costly runtime failures."
        },
        "custom": {
          "type": "object",
          "description": "Custom data about the task. This is extensible to allow various plugins in the system."
        },
        "container": {
          "$ref": "#/definitions/coreContainer"
        },
        "k8s_pod": {
          "$ref": "#/definitions/coreK8sPod"
        },
        "sql": {
          "$ref": "#/definitions/coreSql"
        },
        "task_type_version": {
          "type": "integer",
          "format": "int32",
          "description": "This can be used to customize task handling at execution time for the same task type."
        },
        "security_context": {
          "$ref": "#/definitions/coreSecurityContext",
          "description": "security_context encapsulates security attributes requested to run this task."
        },
        "extended_resources": {
          "$ref": "#/definitions/coreExtendedResources",
          "description": "Encapsulates all non-standard resources, not captured by\nv1.ResourceRequirements, to allocate to a task."
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata about the custom defined for this task. This is extensible to allow various plugins in the system\nto use as required.\nreserve the field numbers 1 through 15 for very frequently occurring message elements"
        },
        "debuggable": {
          "type": "boolean",
          "description": "Whether the task is able to run the debugger (vscode server) inside the task container."
        }
      },
      "description": "A Task structure that uniquely identifies a task in the system\nTasks are registered as a first step in the system."
    },
    "coreTimePartition": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/coreLabelValue"
        },
        "granularity": {
          "$ref": "#/definitions/coreGranularity"
        }
      }
    },
    "coreTimeTransform": {
      "type": "object",
      "properties": {
        "transform": {
          "type": "string"
        },
        "op": {
          "$ref": "#/definitions/coreOperator"
        }
      }
    },
    "coreTypeAnnotation": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "description": "A arbitrary JSON payload to describe a type."
        }
      },
      "description": "TypeAnnotation encapsulates registration time information about a type. This can be used for various control-plane operations. TypeAnnotation will not be available at runtime when a task runs."
    },
    "coreTypeStructure": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string",
          "title": "Must exactly match for types to be castable"
        },
        "dataclass_type": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/coreLiteralType"
          },
          "title": "dataclass_type only exists for dataclasses.\nThis is used to resolve the type of the fields of dataclass\nThe key is the field name, and the value is the literal type of the field\ne.g. For dataclass Foo, with fields a, and a is a string\nFoo.a will be resolved as a literal type of string from dataclass_type"
        }
      },
      "description": "Hints to improve type matching\ne.g. allows distinguishing output from custom type transformers\neven if the underlying IDL serialization matches."
    },
    "coreTypedInterface": {
      "type": "object",
      "properties": {
        "inputs": {
          "$ref": "#/definitions/coreVariableMap"
        },
        "outputs": {
          "$ref": "#/definitions/coreVariableMap"
        }
      },
      "description": "Defines strongly typed inputs and outputs."
    },
    "coreUnion": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/coreLiteral"
        },
        "type": {
          "$ref": "#/definitions/coreLiteralType"
        }
      },
      "description": "The runtime representation of a tagged union value. See `UnionType` for more details."
    },
    "coreUnionType": {
      "type": "object",
      "properties": {
        "variants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coreLiteralType"
          },
          "description": "Predefined set of variants in union."
        }
      },
      "description": "Defines a tagged union type, also known as a variant (and formally as the sum type).\n\nA sum type S is defined by a sequence of types (A, B, C, ...), each tagged by a string tag\nA value of type S is constructed from a value of any of the variant types. The specific choice of type is recorded by\nstoring the varaint's tag with the literal value and can be examined in runtime.\n\nType S is typically written as\nS := Apple A | Banana B | Cantaloupe C | ...\n\nNotably, a nullable (optional) type is a sum type between some type X and the singleton type representing a null-value:\nOptional X := X | Null\n\nSee also: https://en.wikipedia.org/wiki/Tagged_union"
    },
    "coreVariable": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/coreLiteralType",
          "description": "Variable literal type."
        },
        "description": {
          "type": "string",
          "title": "+optional string describing input variable"
        },
        "artifact_partial_id": {
          "$ref": "#/definitions/coreArtifactID",
          "description": "+optional This object allows the user to specify how Artifacts are created.\nname, tag, partitions can be specified. The other fields (version and project/domain) are ignored."
        },
        "artifact_tag": {
          "$ref": "#/definitions/coreArtifactTag"
        }
      },
      "description": "Defines a strongly typed variable."
    },
    "coreVariableMap": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/coreVariable"
          },
          "description": "Defines a map of variable names to variables."
        }
      },
      "title": "A map of Variables"
    },
    "coreVoid": {
      "type": "object",
      "description": "Used to denote a nil/null/None assignment to a scalar value. The underlying LiteralType for Void is intentionally\nundefined since it can be assigned to a scalar of any LiteralType."
    },
    "flyteidl2commonAction": {
      "type": "string",
      "enum": [
        "ACTION_NONE",
        "ACTION_CREATE",
        "ACTION_READ",
        "ACTION_UPDATE",
        "ACTION_DELETE",
        "ACTION_VIEW_FLYTE_INVENTORY",
        "ACTION_VIEW_FLYTE_EXECUTIONS",
        "ACTION_REGISTER_FLYTE_INVENTORY",
        "ACTION_CREATE_FLYTE_EXECUTIONS",
        "ACTION_ADMINISTER_PROJECT",
        "ACTION_MANAGE_PERMISSIONS",
        "ACTION_ADMINISTER_ACCOUNT",
        "ACTION_MANAGE_CLUSTER",
        "ACTION_EDIT_EXECUTION_RELATED_ATTRIBUTES",
        "ACTION_EDIT_CLUSTER_RELATED_ATTRIBUTES",
        "ACTION_EDIT_UNUSED_ATTRIBUTES",
        "ACTION_SUPPORT_SYSTEM_LOGS"
      ],
      "default": "ACTION_NONE",
      "title": "- ACTION_VIEW_FLYTE_INVENTORY: Read Flyte workflows, tasks and launch plans\n - ACTION_VIEW_FLYTE_EXECUTIONS: View Flyte executions\n - ACTION_REGISTER_FLYTE_INVENTORY: Register new versions of Flyte workflows, tasks and launch plans\n - ACTION_CREATE_FLYTE_EXECUTIONS: Create new Flyte workflow and task executions\n - ACTION_ADMINISTER_PROJECT: Create new projects and update project descriptions\n - ACTION_MANAGE_PERMISSIONS: Add users, roles and update role assignments.\n - ACTION_ADMINISTER_ACCOUNT: Manage billing, account-wide settings\n - ACTION_MANAGE_CLUSTER: Operations for clusters\n - ACTION_EDIT_EXECUTION_RELATED_ATTRIBUTES: Edit execution related attributes, including TASK_RESOURCE, WORKFLOW_EXECUTION_CONFIG, and EXTERNAL_RESOURCE\n - ACTION_EDIT_CLUSTER_RELATED_ATTRIBUTES: Edit cluster related attributes, including CLUSTER_RESOURCE and CLUSTER_ASSIGNMENT\n - ACTION_EDIT_UNUSED_ATTRIBUTES: Edit unused attributes, including EXECUTION_QUEUE, EXECUTION_CLUSTER_LABEL, QUALITY_OF_SERVICE_SPECIFICATION, and PLUGIN_OVERRIDE\n - ACTION_SUPPORT_SYSTEM_LOGS: View system logs"
    },
    "flyteidl2coreEnumType": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Predefined set of enum values."
        }
      },
      "description": "Enables declaring enum types, with predefined string values\nFor len(values) \u003e 0, the first value in the ordered list is regarded as the default value. If you wish\nTo provide no defaults, make the first value as undefined."
    },
    "flyteidl2coreIdentity": {
      "type": "object",
      "properties": {
        "iam_role": {
          "type": "string",
          "description": "iam_role references the fully qualified name of Identity \u0026 Access Management role to impersonate."
        },
        "k8s_service_account": {
          "type": "string",
          "description": "k8s_service_account references a kubernetes service account to impersonate."
        },
        "oauth2_client": {
          "$ref": "#/definitions/coreOAuth2Client",
          "description": "oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when\nmaking external calls."
        },
        "execution_identity": {
          "type": "string",
          "title": "execution_identity references the subject who makes the execution"
        }
      },
      "description": "Identity encapsulates the various security identities a task can run as. It's up to the underlying plugin to pick the\nright identity for the execution environment."
    },
    "flyteidl2coreRuntimeMetadata": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/flyteidl2coreRuntimeMetadataRuntimeType",
          "description": "Type of runtime."
        },
        "version": {
          "type": "string",
          "description": "Version of the runtime. All versions should be backward compatible. However, certain cases call for version\nchecks to ensure tighter validation or setting expectations."
        },
        "flavor": {
          "type": "string",
          "description": "+optional It can be used to provide extra information about the runtime (e.g. python, golang... etc.)."
        }
      },
      "description": "Runtime information. This is loosely defined to allow for extensibility."
    },
    "flyteidl2coreRuntimeMetadataRuntimeType": {
      "type": "string",
      "enum": [
        "OTHER",
        "FLYTE_SDK"
      ],
      "default": "OTHER"
    },
    "flyteidl2coreSecret": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "title": "The name of the secret group where to find the key referenced below. For K8s secrets, this should be the name of\nthe v1/secret object. For Confidant, this should be the Credential name. For Vault, this should be the secret name.\nFor AWS Secret Manager, this should be the name of the secret.\n+required"
        },
        "group_version": {
          "type": "string",
          "title": "The group version to fetch. This is not supported in all secret management systems. It'll be ignored for the ones\nthat do not support it.\n+optional"
        },
        "key": {
          "type": "string",
          "title": "The name of the secret to mount. This has to match an existing secret in the system. It's up to the implementation\nof the secret management system to require case sensitivity. For K8s secrets, Confidant and Vault, this should\nmatch one of the keys inside the secret. For AWS Secret Manager, it's ignored.\n+optional"
        },
        "mount_requirement": {
          "$ref": "#/definitions/SecretMountType",
          "title": "mount_requirement is optional. Indicates where the secret has to be mounted. If provided, the execution will fail\nif the underlying key management system cannot satisfy that requirement. If not provided, the default location\nwill depend on the key management system.\n+optional"
        },
        "env_var": {
          "type": "string",
          "title": "env_var is optional. Custom environment variable to set the value of the secret. If mount_requirement is ENV_VAR,\nthen the value is the secret itself. If mount_requirement is FILE, then the value is the path to the secret file.\n+optional"
        }
      },
      "description": "Secret encapsulates information about the secret a task needs to proceed. An environment variable\nFLYTE_SECRETS_ENV_PREFIX will be passed to indicate the prefix of the environment variables that will be present if\nsecrets are passed through environment variables.\nFLYTE_SECRETS_DEFAULT_DIR will be passed to indicate the prefix of the path where secrets will be mounted if secrets\nare passed through file mounts."
    },
    "flyteidl2coreTaskMetadata": {
      "type": "object",
      "properties": {
        "discoverable": {
          "type": "boolean",
          "description": "Indicates whether the system should attempt to lookup this task's output to avoid duplication of work."
        },
        "runtime": {
          "$ref": "#/definitions/flyteidl2coreRuntimeMetadata",
          "description": "Runtime information about the task."
        },
        "timeout": {
          "type": "string",
          "description": "The overall timeout of a task including user-triggered retries."
        },
        "retries": {
          "$ref": "#/definitions/coreRetryStrategy",
          "description": "Number of retries per task."
        },
        "discovery_version": {
          "type": "string",
          "description": "Indicates a logical version to apply to this task for the purpose of discovery."
        },
        "deprecated_error_message": {
          "type": "string",
          "description": "If set, this indicates that this task is deprecated.  This will enable owners of tasks to notify consumers\nof the ending of support for a given task."
        },
        "interruptible": {
          "type": "boolean"
        },
        "cache_serializable": {
          "type": "boolean",
          "title": "Indicates whether the system should attempt to execute discoverable instances in serial to avoid duplicate work"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Arbitrary tags that allow users and the platform to store small but arbitrary labels"
        },
        "pod_template_name": {
          "type": "string",
          "description": "pod_template_name is the unique name of a PodTemplate k8s resource to be used as the base configuration if this\ntask creates a k8s Pod. If this value is set, the specified PodTemplate will be used instead of, but applied\nidentically as, the default PodTemplate configured in FlytePropeller."
        },
        "cache_ignore_input_vars": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "cache_ignore_input_vars is the input variables that should not be included when calculating hash for cache."
        },
        "is_eager": {
          "type": "boolean",
          "description": "is_eager indicates whether the task is eager or not.\nThis would be used by CreateTask endpoint."
        },
        "generates_deck": {
          "type": "boolean",
          "description": "Indicates whether the task will generate a deck when it finishes executing.\nThe BoolValue can have three states:\n- nil: The value is not set.\n- true: The task will generate a deck.\n- false: The task will not generate a deck."
        },
        "metadata": {
          "$ref": "#/definitions/coreK8sObjectMetadata",
          "description": "Metadata applied to task pods or task CR objects.\nIn flytekit, labels and annotations resulting in this metadata field\nare provided via `@task(labels=..., annotations=...)`.\nFor tasks backed by pods like PythonFunctionTask, these take precedence\nover the metadata provided via `@task(pod_template=PodTemplate(labels=...))` which are transported\nin the K8sPod message. For tasks backed by CRDs, this metadata is applied to\nthe CR object itself while the metadata in the pod template/K8sPod is applied\nto the pod template spec of the CR object."
        }
      },
      "title": "Task Metadata"
    },
    "flyteidl2workflowAction": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/commonActionIdentifier",
          "description": "Id for this action."
        },
        "metadata": {
          "$ref": "#/definitions/workflowActionMetadata",
          "description": "Metadata for this action."
        },
        "status": {
          "$ref": "#/definitions/workflowActionStatus",
          "description": "Last known status."
        }
      },
      "description": "Lightweight representation of an action."
    },
    "flyteidl2workflowPhase": {
      "type": "string",
      "enum": [
        "PHASE_UNSPECIFIED",
        "PHASE_QUEUED",
        "PHASE_WAITING_FOR_RESOURCES",
        "PHASE_INITIALIZING",
        "PHASE_RUNNING",
        "PHASE_SUCCEEDED",
        "PHASE_FAILED",
        "PHASE_ABORTED",
        "PHASE_TIMED_OUT"
      ],
      "default": "PHASE_UNSPECIFIED",
      "title": "TODO: define phase transitions"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "taskAnnotations": {
      "type": "object",
      "properties": {
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of custom annotations to be applied to the execution resource."
        }
      },
      "description": "Annotation values to be applied to an execution resource.\nIn the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined\nto specify how to merge annotations defined at registration and execution time."
    },
    "taskEnvironment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the environment."
        }
      },
      "description": "Environment for a task."
    },
    "taskEnvs": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coreKeyValuePair"
          },
          "description": "Map of custom environment variables to be applied to the execution resource."
        }
      },
      "description": "Environment variable values to be applied to an execution resource.\nIn the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined\nto specify how to merge environment variables defined at registration and execution time."
    },
    "taskInputs": {
      "type": "object",
      "properties": {
        "literals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/taskNamedLiteral"
          },
          "description": "Ordered inputs. THIS FIELD MUST REMAIN FIRST as this would break Run service assumptions if it were to move."
        },
        "context": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coreKeyValuePair"
          },
          "title": "Context for the action. If an action receives context, it'll automatically pass it to any actions it spawns.\nContext will not be used for cache key computation.\nExamples for context include:\n - User-provided metadata that is not part of the action's inputs.\n - Information about the environment the action is running in (e.g. cluster, region, etc.)\n - Tracing information about the action"
        }
      },
      "description": "Input payload for an action."
    },
    "taskLabels": {
      "type": "object",
      "properties": {
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of custom labels to be applied to the execution resource."
        }
      },
      "description": "Label values to be applied to an execution resource.\nIn the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined\nto specify how to merge labels defined at registration and execution time."
    },
    "taskNamedLiteral": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the literal."
        },
        "value": {
          "$ref": "#/definitions/coreLiteral",
          "description": "Literal value."
        }
      },
      "description": "Named literal value."
    },
    "taskNamedParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "parameter": {
          "$ref": "#/definitions/coreParameter"
        }
      }
    },
    "taskOutputReferences": {
      "type": "object",
      "properties": {
        "output_uri": {
          "type": "string",
          "description": "The output uri."
        },
        "report_uri": {
          "type": "string",
          "title": "Native URI to HTML report"
        }
      },
      "description": "Output references."
    },
    "taskOutputs": {
      "type": "object",
      "properties": {
        "literals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/taskNamedLiteral"
          },
          "description": "Ordered outputs. THIS FIELD MUST REMAIN FIRST as this would break Run service assumptions if it were to move."
        }
      },
      "description": "Output payload for an action."
    },
    "taskRunSpec": {
      "type": "object",
      "properties": {
        "labels": {
          "$ref": "#/definitions/taskLabels",
          "description": "Labels to apply to the run."
        },
        "annotations": {
          "$ref": "#/definitions/taskAnnotations",
          "description": "Annotations to apply to the run."
        },
        "envs": {
          "$ref": "#/definitions/taskEnvs",
          "description": "Envs to apply to the run."
        },
        "interruptible": {
          "type": "boolean",
          "description": "Explicit override for executing this run as interruptible or not. If not set, use the default."
        },
        "overwrite_cache": {
          "type": "boolean",
          "description": "If true, recompute outputs for this run and overwrite any existing cache."
        },
        "cluster": {
          "type": "string",
          "description": "the specific cluster that this action should be executed on. this value will be used as the\ndefault for all actions in the run unless overridden."
        }
      }
    },
    "taskTaskIdentifier": {
      "type": "object",
      "properties": {
        "org": {
          "type": "string",
          "description": "Org this task belongs to."
        },
        "project": {
          "type": "string",
          "description": "Project this task belongs to."
        },
        "domain": {
          "type": "string",
          "description": "Domain this task belongs to."
        },
        "name": {
          "type": "string",
          "description": "Unique name of the task. Should not be interpreted/parsed. Use `short_name` and `environment_name` for user facing names."
        },
        "version": {
          "type": "string",
          "description": "Version of the task."
        }
      },
      "description": "TaskIdentifier is the unique identifier for a task."
    },
    "taskTaskSpec": {
      "type": "object",
      "properties": {
        "task_template": {
          "$ref": "#/definitions/coreTaskTemplate",
          "description": "The template for this task."
        },
        "default_inputs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/taskNamedParameter"
          },
          "description": "Ordered default inputs.\nThese can be overridden when an run is created.\nClient should not send required=true flag in underlying flyteidl2.core.Parameter."
        },
        "short_name": {
          "type": "string",
          "description": "User facing display name for this task. Not required to be unique.\nThis is passed in via the SDK when the task is created and is either a user defined override or the name of the task."
        },
        "environment": {
          "$ref": "#/definitions/taskEnvironment",
          "description": "Optional environment for this task. Note, some tasks may not be run in the context of an environment."
        }
      },
      "description": "Specification for a task."
    },
    "taskTraceSpec": {
      "type": "object",
      "properties": {
        "interface": {
          "$ref": "#/definitions/coreTypedInterface",
          "description": "A strongly typed interface for the trace."
        }
      },
      "description": "Specification for a trace action."
    },
    "workflowAbortActionResponse": {
      "type": "object"
    },
    "workflowAbortInfo": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "description": "Reason provided for the abort."
        },
        "aborted_by": {
          "$ref": "#/definitions/commonEnrichedIdentity",
          "description": "Identity that aborted the run."
        }
      },
      "description": "AbortInfo captures details of an aborted run."
    },
    "workflowAbortRunResponse": {
      "type": "object",
      "description": "Response message for aborting a run."
    },
    "workflowActionAttempt": {
      "type": "object",
      "properties": {
        "phase": {
          "$ref": "#/definitions/flyteidl2workflowPhase",
          "description": "Last known phase."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Time the attempt started."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "Time the attempt ended, if applicable."
        },
        "error_info": {
          "$ref": "#/definitions/workflowErrorInfo",
          "description": "Error info for the attempt, if failed."
        },
        "attempt": {
          "type": "integer",
          "format": "int64",
          "description": "The attempt number, starting with 1."
        },
        "log_info": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/coreTaskLog"
          },
          "description": "Log references."
        },
        "outputs": {
          "$ref": "#/definitions/taskOutputReferences",
          "description": "Output references."
        },
        "logs_available": {
          "type": "boolean",
          "description": "Indicates whether logs are available for tailing. It doesn't necessarily indicate the logs are present, but that\nwe have the info we need to look them up."
        },
        "cache_status": {
          "$ref": "#/definitions/coreCatalogCacheStatus",
          "title": "cache status of the action attempt"
        },
        "cluster_events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowClusterEvent"
          },
          "description": "Cluster events like k8s events in a human-readable form."
        },
        "phase_transitions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowPhaseTransition"
          },
          "description": "History of phase transitions."
        },
        "cluster": {
          "type": "string",
          "description": "The cluster this attempt is assigned to."
        },
        "log_context": {
          "$ref": "#/definitions/coreLogContext",
          "description": "Contains corresponding k8s pods and containers information for this action attempt."
        }
      },
      "description": "ActionAttempt is a single attempt of an action."
    },
    "workflowActionDetails": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/commonActionIdentifier",
          "description": "Id for this action."
        },
        "metadata": {
          "$ref": "#/definitions/workflowActionMetadata",
          "description": "Metadata for this action."
        },
        "status": {
          "$ref": "#/definitions/workflowActionStatus",
          "description": "Last known status."
        },
        "error_info": {
          "$ref": "#/definitions/workflowErrorInfo",
          "description": "Error info for the action, if failed."
        },
        "abort_info": {
          "$ref": "#/definitions/workflowAbortInfo",
          "description": "Abort info for the action, if aborted."
        },
        "task": {
          "$ref": "#/definitions/taskTaskSpec"
        },
        "trace": {
          "$ref": "#/definitions/taskTraceSpec"
        },
        "attempts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowActionAttempt"
          },
          "description": "List of action attempts."
        }
      },
      "description": "ActionDetails is the full details of an action."
    },
    "workflowActionMetadata": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent action if not the root."
        },
        "group": {
          "type": "string",
          "description": "Group this action belongs to, if applicable."
        },
        "executed_by": {
          "$ref": "#/definitions/commonEnrichedIdentity",
          "description": "Identity that executed this run."
        },
        "task": {
          "$ref": "#/definitions/workflowTaskActionMetadata",
          "description": "Task action."
        },
        "trace": {
          "$ref": "#/definitions/workflowTraceActionMetadata",
          "description": "Trace action."
        },
        "condition": {
          "$ref": "#/definitions/workflowConditionActionMetadata",
          "description": "Condition action."
        },
        "action_type": {
          "$ref": "#/definitions/workflowActionType",
          "description": "Action type."
        },
        "trigger_id": {
          "$ref": "#/definitions/commonTriggerIdentifier",
          "description": "If this run was initiated by a trigger, this will store the trigger identifier."
        }
      },
      "description": "Static, lightweight metadata about an action."
    },
    "workflowActionStatus": {
      "type": "object",
      "properties": {
        "phase": {
          "$ref": "#/definitions/flyteidl2workflowPhase",
          "description": "Last known phase."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Time the action started."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "Time the action ended, if applicable."
        },
        "attempts": {
          "type": "integer",
          "format": "int64",
          "description": "Number of action attempts."
        },
        "cache_status": {
          "$ref": "#/definitions/coreCatalogCacheStatus",
          "title": "cache status of the action's latest attempt"
        }
      },
      "description": "Lightweight status of an action. For more detailed status see ActionDetails."
    },
    "workflowActionType": {
      "type": "string",
      "enum": [
        "ACTION_TYPE_UNSPECIFIED",
        "ACTION_TYPE_TASK",
        "ACTION_TYPE_TRACE",
        "ACTION_TYPE_CONDITION"
      ],
      "default": "ACTION_TYPE_UNSPECIFIED"
    },
    "workflowClusterEvent": {
      "type": "object",
      "properties": {
        "occurred_at": {
          "type": "string",
          "format": "date-time",
          "description": "occurred_at is the timestamp indicating the instant that this reason happened."
        },
        "message": {
          "type": "string",
          "description": "message is the explanation for the most recent phase transition or status update."
        }
      }
    },
    "workflowConditionActionMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "run_id": {
          "type": "string",
          "description": "RunId is the unique identifier for the run this action is associated with."
        },
        "action_id": {
          "type": "string",
          "description": "ActionId is the unique identifier for the action this action is associated with."
        },
        "global": {
          "type": "boolean",
          "description": "Global indicates the condition is global and can be used across all runs and actions."
        }
      }
    },
    "workflowCreateRunResponse": {
      "type": "object",
      "properties": {
        "run": {
          "$ref": "#/definitions/workflowRun"
        }
      },
      "description": "Response message for creating a run."
    },
    "workflowEnrichedAction": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/flyteidl2workflowAction",
          "description": "The action itself."
        },
        "meets_filter": {
          "type": "boolean",
          "title": "Whether this action meets specified filters of the request or not.\nIf an action that was previously meeting the filter but no longer does, will be sent with this flag set to false"
        },
        "children_phase_counts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "title": "Child phase info for this action (Map of phase to counts of children in given phase)"
        }
      },
      "title": "EnrichedAction is a wrapper around Action that contains additional information"
    },
    "workflowErrorInfo": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Error message."
        },
        "kind": {
          "$ref": "#/definitions/ErrorInfoKind",
          "description": "Error kind."
        }
      },
      "description": "ErrorInfo captures details of an error."
    },
    "workflowGetActionDataResponse": {
      "type": "object",
      "properties": {
        "inputs": {
          "$ref": "#/definitions/taskInputs",
          "description": "Inputs for the action."
        },
        "outputs": {
          "$ref": "#/definitions/taskOutputs",
          "description": "Outputs for the action."
        }
      },
      "description": "Response message for querying action data."
    },
    "workflowGetActionDetailsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/workflowActionDetails",
          "description": "Detailed information about the action."
        }
      },
      "description": "Response message for getting detailed information about an action."
    },
    "workflowGetRunDetailsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/workflowRunDetails",
          "description": "Detailed information about the run."
        }
      },
      "description": "Response message for getting detailed information about a run."
    },
    "workflowListActionsResponse": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/flyteidl2workflowAction"
          },
          "description": "List of actions matching the filter criteria."
        },
        "token": {
          "type": "string",
          "description": "Token for fetching the next page of results, if any."
        }
      },
      "description": "Response message for listing actions."
    },
    "workflowListRunsResponse": {
      "type": "object",
      "properties": {
        "runs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowRun"
          },
          "description": "List of runs matching the filter criteria."
        },
        "token": {
          "type": "string",
          "description": "Token for fetching the next page of results, if any."
        }
      },
      "description": "Response message for listing runs."
    },
    "workflowPhaseTransition": {
      "type": "object",
      "properties": {
        "phase": {
          "$ref": "#/definitions/flyteidl2workflowPhase",
          "description": "The phase."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Time this phase started."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "Time this phase ended, if applicable. For terminal phases, start time will equal end time."
        }
      }
    },
    "workflowRun": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/flyteidl2workflowAction",
          "description": "Lightweight information about the root action."
        }
      }
    },
    "workflowRunDetails": {
      "type": "object",
      "properties": {
        "run_spec": {
          "$ref": "#/definitions/taskRunSpec",
          "description": "Run spec."
        },
        "action": {
          "$ref": "#/definitions/workflowActionDetails",
          "description": "Detailed information about the root action."
        }
      }
    },
    "workflowRunSource": {
      "type": "string",
      "enum": [
        "RUN_SOURCE_UNSPECIFIED",
        "RUN_SOURCE_WEB",
        "RUN_SOURCE_CLI",
        "RUN_SOURCE_SCHEDULE_TRIGGER"
      ],
      "default": "RUN_SOURCE_UNSPECIFIED"
    },
    "workflowTaskActionMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/taskTaskIdentifier",
          "description": "Id of the task this action is associated with."
        },
        "task_type": {
          "type": "string",
          "description": "Extensible task type."
        },
        "short_name": {
          "type": "string",
          "description": "The short name for this task."
        }
      }
    },
    "workflowTraceActionMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "workflowWatchActionDetailsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/workflowActionDetails",
          "description": "Detailed information about the action."
        }
      },
      "description": "Response message for watching detailed information about an action."
    },
    "workflowWatchActionsResponse": {
      "type": "object",
      "properties": {
        "enriched_actions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowEnrichedAction"
          },
          "title": "New or updated actions matching the filter criteria. Enriched with children status counts"
        }
      },
      "description": "Response message for watching actions, comes with enriched action metadata."
    },
    "workflowWatchClusterEventsResponse": {
      "type": "object",
      "properties": {
        "cluster_events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowClusterEvent"
          }
        }
      }
    },
    "workflowWatchRunDetailsResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/workflowRunDetails",
          "description": "Detailed information about the run."
        }
      },
      "description": "Response message for watching detailed information about a run."
    },
    "workflowWatchRunsResponse": {
      "type": "object",
      "properties": {
        "runs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/workflowRun"
          },
          "description": "New or updated runs matching the filter criteria."
        }
      },
      "description": "Response message for watching runs."
    }
  }
}
