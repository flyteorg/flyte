// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: secret/secret.proto

package secretconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	secret "github.com/flyteorg/flyte/gen/go/secret"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SecretServiceName is the fully-qualified name of the SecretService service.
	SecretServiceName = "flyteidl.secret.SecretService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SecretServiceCreateSecretProcedure is the fully-qualified name of the SecretService's
	// CreateSecret RPC.
	SecretServiceCreateSecretProcedure = "/flyteidl.secret.SecretService/CreateSecret"
	// SecretServiceUpdateSecretProcedure is the fully-qualified name of the SecretService's
	// UpdateSecret RPC.
	SecretServiceUpdateSecretProcedure = "/flyteidl.secret.SecretService/UpdateSecret"
	// SecretServiceGetSecretProcedure is the fully-qualified name of the SecretService's GetSecret RPC.
	SecretServiceGetSecretProcedure = "/flyteidl.secret.SecretService/GetSecret"
	// SecretServiceDeleteSecretProcedure is the fully-qualified name of the SecretService's
	// DeleteSecret RPC.
	SecretServiceDeleteSecretProcedure = "/flyteidl.secret.SecretService/DeleteSecret"
	// SecretServiceListSecretsProcedure is the fully-qualified name of the SecretService's ListSecrets
	// RPC.
	SecretServiceListSecretsProcedure = "/flyteidl.secret.SecretService/ListSecrets"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	secretServiceServiceDescriptor            = secret.File_secret_secret_proto.Services().ByName("SecretService")
	secretServiceCreateSecretMethodDescriptor = secretServiceServiceDescriptor.Methods().ByName("CreateSecret")
	secretServiceUpdateSecretMethodDescriptor = secretServiceServiceDescriptor.Methods().ByName("UpdateSecret")
	secretServiceGetSecretMethodDescriptor    = secretServiceServiceDescriptor.Methods().ByName("GetSecret")
	secretServiceDeleteSecretMethodDescriptor = secretServiceServiceDescriptor.Methods().ByName("DeleteSecret")
	secretServiceListSecretsMethodDescriptor  = secretServiceServiceDescriptor.Methods().ByName("ListSecrets")
)

// SecretServiceClient is a client for the flyteidl.secret.SecretService service.
type SecretServiceClient interface {
	CreateSecret(context.Context, *connect.Request[secret.CreateSecretRequest]) (*connect.Response[secret.CreateSecretResponse], error)
	UpdateSecret(context.Context, *connect.Request[secret.UpdateSecretRequest]) (*connect.Response[secret.UpdateSecretResponse], error)
	GetSecret(context.Context, *connect.Request[secret.GetSecretRequest]) (*connect.Response[secret.GetSecretResponse], error)
	DeleteSecret(context.Context, *connect.Request[secret.DeleteSecretRequest]) (*connect.Response[secret.DeleteSecretResponse], error)
	ListSecrets(context.Context, *connect.Request[secret.ListSecretsRequest]) (*connect.Response[secret.ListSecretsResponse], error)
}

// NewSecretServiceClient constructs a client for the flyteidl.secret.SecretService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSecretServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SecretServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &secretServiceClient{
		createSecret: connect.NewClient[secret.CreateSecretRequest, secret.CreateSecretResponse](
			httpClient,
			baseURL+SecretServiceCreateSecretProcedure,
			connect.WithSchema(secretServiceCreateSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSecret: connect.NewClient[secret.UpdateSecretRequest, secret.UpdateSecretResponse](
			httpClient,
			baseURL+SecretServiceUpdateSecretProcedure,
			connect.WithSchema(secretServiceUpdateSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSecret: connect.NewClient[secret.GetSecretRequest, secret.GetSecretResponse](
			httpClient,
			baseURL+SecretServiceGetSecretProcedure,
			connect.WithSchema(secretServiceGetSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSecret: connect.NewClient[secret.DeleteSecretRequest, secret.DeleteSecretResponse](
			httpClient,
			baseURL+SecretServiceDeleteSecretProcedure,
			connect.WithSchema(secretServiceDeleteSecretMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSecrets: connect.NewClient[secret.ListSecretsRequest, secret.ListSecretsResponse](
			httpClient,
			baseURL+SecretServiceListSecretsProcedure,
			connect.WithSchema(secretServiceListSecretsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// secretServiceClient implements SecretServiceClient.
type secretServiceClient struct {
	createSecret *connect.Client[secret.CreateSecretRequest, secret.CreateSecretResponse]
	updateSecret *connect.Client[secret.UpdateSecretRequest, secret.UpdateSecretResponse]
	getSecret    *connect.Client[secret.GetSecretRequest, secret.GetSecretResponse]
	deleteSecret *connect.Client[secret.DeleteSecretRequest, secret.DeleteSecretResponse]
	listSecrets  *connect.Client[secret.ListSecretsRequest, secret.ListSecretsResponse]
}

// CreateSecret calls flyteidl.secret.SecretService.CreateSecret.
func (c *secretServiceClient) CreateSecret(ctx context.Context, req *connect.Request[secret.CreateSecretRequest]) (*connect.Response[secret.CreateSecretResponse], error) {
	return c.createSecret.CallUnary(ctx, req)
}

// UpdateSecret calls flyteidl.secret.SecretService.UpdateSecret.
func (c *secretServiceClient) UpdateSecret(ctx context.Context, req *connect.Request[secret.UpdateSecretRequest]) (*connect.Response[secret.UpdateSecretResponse], error) {
	return c.updateSecret.CallUnary(ctx, req)
}

// GetSecret calls flyteidl.secret.SecretService.GetSecret.
func (c *secretServiceClient) GetSecret(ctx context.Context, req *connect.Request[secret.GetSecretRequest]) (*connect.Response[secret.GetSecretResponse], error) {
	return c.getSecret.CallUnary(ctx, req)
}

// DeleteSecret calls flyteidl.secret.SecretService.DeleteSecret.
func (c *secretServiceClient) DeleteSecret(ctx context.Context, req *connect.Request[secret.DeleteSecretRequest]) (*connect.Response[secret.DeleteSecretResponse], error) {
	return c.deleteSecret.CallUnary(ctx, req)
}

// ListSecrets calls flyteidl.secret.SecretService.ListSecrets.
func (c *secretServiceClient) ListSecrets(ctx context.Context, req *connect.Request[secret.ListSecretsRequest]) (*connect.Response[secret.ListSecretsResponse], error) {
	return c.listSecrets.CallUnary(ctx, req)
}

// SecretServiceHandler is an implementation of the flyteidl.secret.SecretService service.
type SecretServiceHandler interface {
	CreateSecret(context.Context, *connect.Request[secret.CreateSecretRequest]) (*connect.Response[secret.CreateSecretResponse], error)
	UpdateSecret(context.Context, *connect.Request[secret.UpdateSecretRequest]) (*connect.Response[secret.UpdateSecretResponse], error)
	GetSecret(context.Context, *connect.Request[secret.GetSecretRequest]) (*connect.Response[secret.GetSecretResponse], error)
	DeleteSecret(context.Context, *connect.Request[secret.DeleteSecretRequest]) (*connect.Response[secret.DeleteSecretResponse], error)
	ListSecrets(context.Context, *connect.Request[secret.ListSecretsRequest]) (*connect.Response[secret.ListSecretsResponse], error)
}

// NewSecretServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSecretServiceHandler(svc SecretServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	secretServiceCreateSecretHandler := connect.NewUnaryHandler(
		SecretServiceCreateSecretProcedure,
		svc.CreateSecret,
		connect.WithSchema(secretServiceCreateSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	secretServiceUpdateSecretHandler := connect.NewUnaryHandler(
		SecretServiceUpdateSecretProcedure,
		svc.UpdateSecret,
		connect.WithSchema(secretServiceUpdateSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	secretServiceGetSecretHandler := connect.NewUnaryHandler(
		SecretServiceGetSecretProcedure,
		svc.GetSecret,
		connect.WithSchema(secretServiceGetSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	secretServiceDeleteSecretHandler := connect.NewUnaryHandler(
		SecretServiceDeleteSecretProcedure,
		svc.DeleteSecret,
		connect.WithSchema(secretServiceDeleteSecretMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	secretServiceListSecretsHandler := connect.NewUnaryHandler(
		SecretServiceListSecretsProcedure,
		svc.ListSecrets,
		connect.WithSchema(secretServiceListSecretsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.secret.SecretService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SecretServiceCreateSecretProcedure:
			secretServiceCreateSecretHandler.ServeHTTP(w, r)
		case SecretServiceUpdateSecretProcedure:
			secretServiceUpdateSecretHandler.ServeHTTP(w, r)
		case SecretServiceGetSecretProcedure:
			secretServiceGetSecretHandler.ServeHTTP(w, r)
		case SecretServiceDeleteSecretProcedure:
			secretServiceDeleteSecretHandler.ServeHTTP(w, r)
		case SecretServiceListSecretsProcedure:
			secretServiceListSecretsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSecretServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSecretServiceHandler struct{}

func (UnimplementedSecretServiceHandler) CreateSecret(context.Context, *connect.Request[secret.CreateSecretRequest]) (*connect.Response[secret.CreateSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.secret.SecretService.CreateSecret is not implemented"))
}

func (UnimplementedSecretServiceHandler) UpdateSecret(context.Context, *connect.Request[secret.UpdateSecretRequest]) (*connect.Response[secret.UpdateSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.secret.SecretService.UpdateSecret is not implemented"))
}

func (UnimplementedSecretServiceHandler) GetSecret(context.Context, *connect.Request[secret.GetSecretRequest]) (*connect.Response[secret.GetSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.secret.SecretService.GetSecret is not implemented"))
}

func (UnimplementedSecretServiceHandler) DeleteSecret(context.Context, *connect.Request[secret.DeleteSecretRequest]) (*connect.Response[secret.DeleteSecretResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.secret.SecretService.DeleteSecret is not implemented"))
}

func (UnimplementedSecretServiceHandler) ListSecrets(context.Context, *connect.Request[secret.ListSecretsRequest]) (*connect.Response[secret.ListSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.secret.SecretService.ListSecrets is not implemented"))
}
