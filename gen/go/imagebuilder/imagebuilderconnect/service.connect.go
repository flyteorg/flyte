// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: imagebuilder/service.proto

package imagebuilderconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	imagebuilder "github.com/flyteorg/flyte/gen/go/imagebuilder"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ImageServiceName is the fully-qualified name of the ImageService service.
	ImageServiceName = "flyteidl.imagebuilder.ImageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ImageServiceGetImageProcedure is the fully-qualified name of the ImageService's GetImage RPC.
	ImageServiceGetImageProcedure = "/flyteidl.imagebuilder.ImageService/GetImage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	imageServiceServiceDescriptor        = imagebuilder.File_imagebuilder_service_proto.Services().ByName("ImageService")
	imageServiceGetImageMethodDescriptor = imageServiceServiceDescriptor.Methods().ByName("GetImage")
)

// ImageServiceClient is a client for the flyteidl.imagebuilder.ImageService service.
type ImageServiceClient interface {
	GetImage(context.Context, *connect.Request[imagebuilder.GetImageRequest]) (*connect.Response[imagebuilder.GetImageResponse], error)
}

// NewImageServiceClient constructs a client for the flyteidl.imagebuilder.ImageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewImageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ImageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &imageServiceClient{
		getImage: connect.NewClient[imagebuilder.GetImageRequest, imagebuilder.GetImageResponse](
			httpClient,
			baseURL+ImageServiceGetImageProcedure,
			connect.WithSchema(imageServiceGetImageMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// imageServiceClient implements ImageServiceClient.
type imageServiceClient struct {
	getImage *connect.Client[imagebuilder.GetImageRequest, imagebuilder.GetImageResponse]
}

// GetImage calls flyteidl.imagebuilder.ImageService.GetImage.
func (c *imageServiceClient) GetImage(ctx context.Context, req *connect.Request[imagebuilder.GetImageRequest]) (*connect.Response[imagebuilder.GetImageResponse], error) {
	return c.getImage.CallUnary(ctx, req)
}

// ImageServiceHandler is an implementation of the flyteidl.imagebuilder.ImageService service.
type ImageServiceHandler interface {
	GetImage(context.Context, *connect.Request[imagebuilder.GetImageRequest]) (*connect.Response[imagebuilder.GetImageResponse], error)
}

// NewImageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewImageServiceHandler(svc ImageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	imageServiceGetImageHandler := connect.NewUnaryHandler(
		ImageServiceGetImageProcedure,
		svc.GetImage,
		connect.WithSchema(imageServiceGetImageMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.imagebuilder.ImageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ImageServiceGetImageProcedure:
			imageServiceGetImageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedImageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedImageServiceHandler struct{}

func (UnimplementedImageServiceHandler) GetImage(context.Context, *connect.Request[imagebuilder.GetImageRequest]) (*connect.Response[imagebuilder.GetImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.imagebuilder.ImageService.GetImage is not implemented"))
}
