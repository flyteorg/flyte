// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: idl2/workflow/run_logs_service.proto

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RunLogsService_TailLogs_FullMethodName = "/flyteidl.workflow.RunLogsService/TailLogs"
)

// RunLogsServiceClient is the client API for RunLogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunLogsServiceClient interface {
	TailLogs(ctx context.Context, in *TailLogsRequest, opts ...grpc.CallOption) (RunLogsService_TailLogsClient, error)
}

type runLogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunLogsServiceClient(cc grpc.ClientConnInterface) RunLogsServiceClient {
	return &runLogsServiceClient{cc}
}

func (c *runLogsServiceClient) TailLogs(ctx context.Context, in *TailLogsRequest, opts ...grpc.CallOption) (RunLogsService_TailLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RunLogsService_ServiceDesc.Streams[0], RunLogsService_TailLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &runLogsServiceTailLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RunLogsService_TailLogsClient interface {
	Recv() (*TailLogsResponse, error)
	grpc.ClientStream
}

type runLogsServiceTailLogsClient struct {
	grpc.ClientStream
}

func (x *runLogsServiceTailLogsClient) Recv() (*TailLogsResponse, error) {
	m := new(TailLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunLogsServiceServer is the server API for RunLogsService service.
// All implementations should embed UnimplementedRunLogsServiceServer
// for forward compatibility
type RunLogsServiceServer interface {
	TailLogs(*TailLogsRequest, RunLogsService_TailLogsServer) error
}

// UnimplementedRunLogsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRunLogsServiceServer struct {
}

func (UnimplementedRunLogsServiceServer) TailLogs(*TailLogsRequest, RunLogsService_TailLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method TailLogs not implemented")
}

// UnsafeRunLogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunLogsServiceServer will
// result in compilation errors.
type UnsafeRunLogsServiceServer interface {
	mustEmbedUnimplementedRunLogsServiceServer()
}

func RegisterRunLogsServiceServer(s grpc.ServiceRegistrar, srv RunLogsServiceServer) {
	s.RegisterService(&RunLogsService_ServiceDesc, srv)
}

func _RunLogsService_TailLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunLogsServiceServer).TailLogs(m, &runLogsServiceTailLogsServer{stream})
}

type RunLogsService_TailLogsServer interface {
	Send(*TailLogsResponse) error
	grpc.ServerStream
}

type runLogsServiceTailLogsServer struct {
	grpc.ServerStream
}

func (x *runLogsServiceTailLogsServer) Send(m *TailLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RunLogsService_ServiceDesc is the grpc.ServiceDesc for RunLogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunLogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl.workflow.RunLogsService",
	HandlerType: (*RunLogsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailLogs",
			Handler:       _RunLogsService_TailLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "idl2/workflow/run_logs_service.proto",
}
