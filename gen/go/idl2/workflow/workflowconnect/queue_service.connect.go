// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: idl2/workflow/queue_service.proto

package workflowconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	workflow "github.com/flyteorg/flyte/v2/gen/go/workflow"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QueueServiceName is the fully-qualified name of the QueueService service.
	QueueServiceName = "flyteidl.workflow.QueueService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// QueueServiceEnqueueActionProcedure is the fully-qualified name of the QueueService's
	// EnqueueAction RPC.
	QueueServiceEnqueueActionProcedure = "/flyteidl.workflow.QueueService/EnqueueAction"
	// QueueServiceAbortQueuedRunProcedure is the fully-qualified name of the QueueService's
	// AbortQueuedRun RPC.
	QueueServiceAbortQueuedRunProcedure = "/flyteidl.workflow.QueueService/AbortQueuedRun"
	// QueueServiceAbortQueuedActionProcedure is the fully-qualified name of the QueueService's
	// AbortQueuedAction RPC.
	QueueServiceAbortQueuedActionProcedure = "/flyteidl.workflow.QueueService/AbortQueuedAction"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	queueServiceServiceDescriptor                 = workflow.File_idl2_workflow_queue_service_proto.Services().ByName("QueueService")
	queueServiceEnqueueActionMethodDescriptor     = queueServiceServiceDescriptor.Methods().ByName("EnqueueAction")
	queueServiceAbortQueuedRunMethodDescriptor    = queueServiceServiceDescriptor.Methods().ByName("AbortQueuedRun")
	queueServiceAbortQueuedActionMethodDescriptor = queueServiceServiceDescriptor.Methods().ByName("AbortQueuedAction")
)

// QueueServiceClient is a client for the flyteidl.workflow.QueueService service.
type QueueServiceClient interface {
	// queue a new action for execution.
	EnqueueAction(context.Context, *connect.Request[workflow.EnqueueActionRequest]) (*connect.Response[workflow.EnqueueActionResponse], error)
	// abort a queued run.
	AbortQueuedRun(context.Context, *connect.Request[workflow.AbortQueuedRunRequest]) (*connect.Response[workflow.AbortQueuedRunResponse], error)
	// AbortAction aborts a single action that was previously queued or is currently being processed by a worker.
	AbortQueuedAction(context.Context, *connect.Request[workflow.AbortQueuedActionRequest]) (*connect.Response[workflow.AbortQueuedActionResponse], error)
}

// NewQueueServiceClient constructs a client for the flyteidl.workflow.QueueService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQueueServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QueueServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &queueServiceClient{
		enqueueAction: connect.NewClient[workflow.EnqueueActionRequest, workflow.EnqueueActionResponse](
			httpClient,
			baseURL+QueueServiceEnqueueActionProcedure,
			connect.WithSchema(queueServiceEnqueueActionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		abortQueuedRun: connect.NewClient[workflow.AbortQueuedRunRequest, workflow.AbortQueuedRunResponse](
			httpClient,
			baseURL+QueueServiceAbortQueuedRunProcedure,
			connect.WithSchema(queueServiceAbortQueuedRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		abortQueuedAction: connect.NewClient[workflow.AbortQueuedActionRequest, workflow.AbortQueuedActionResponse](
			httpClient,
			baseURL+QueueServiceAbortQueuedActionProcedure,
			connect.WithSchema(queueServiceAbortQueuedActionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// queueServiceClient implements QueueServiceClient.
type queueServiceClient struct {
	enqueueAction     *connect.Client[workflow.EnqueueActionRequest, workflow.EnqueueActionResponse]
	abortQueuedRun    *connect.Client[workflow.AbortQueuedRunRequest, workflow.AbortQueuedRunResponse]
	abortQueuedAction *connect.Client[workflow.AbortQueuedActionRequest, workflow.AbortQueuedActionResponse]
}

// EnqueueAction calls flyteidl.workflow.QueueService.EnqueueAction.
func (c *queueServiceClient) EnqueueAction(ctx context.Context, req *connect.Request[workflow.EnqueueActionRequest]) (*connect.Response[workflow.EnqueueActionResponse], error) {
	return c.enqueueAction.CallUnary(ctx, req)
}

// AbortQueuedRun calls flyteidl.workflow.QueueService.AbortQueuedRun.
func (c *queueServiceClient) AbortQueuedRun(ctx context.Context, req *connect.Request[workflow.AbortQueuedRunRequest]) (*connect.Response[workflow.AbortQueuedRunResponse], error) {
	return c.abortQueuedRun.CallUnary(ctx, req)
}

// AbortQueuedAction calls flyteidl.workflow.QueueService.AbortQueuedAction.
func (c *queueServiceClient) AbortQueuedAction(ctx context.Context, req *connect.Request[workflow.AbortQueuedActionRequest]) (*connect.Response[workflow.AbortQueuedActionResponse], error) {
	return c.abortQueuedAction.CallUnary(ctx, req)
}

// QueueServiceHandler is an implementation of the flyteidl.workflow.QueueService service.
type QueueServiceHandler interface {
	// queue a new action for execution.
	EnqueueAction(context.Context, *connect.Request[workflow.EnqueueActionRequest]) (*connect.Response[workflow.EnqueueActionResponse], error)
	// abort a queued run.
	AbortQueuedRun(context.Context, *connect.Request[workflow.AbortQueuedRunRequest]) (*connect.Response[workflow.AbortQueuedRunResponse], error)
	// AbortAction aborts a single action that was previously queued or is currently being processed by a worker.
	AbortQueuedAction(context.Context, *connect.Request[workflow.AbortQueuedActionRequest]) (*connect.Response[workflow.AbortQueuedActionResponse], error)
}

// NewQueueServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQueueServiceHandler(svc QueueServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	queueServiceEnqueueActionHandler := connect.NewUnaryHandler(
		QueueServiceEnqueueActionProcedure,
		svc.EnqueueAction,
		connect.WithSchema(queueServiceEnqueueActionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	queueServiceAbortQueuedRunHandler := connect.NewUnaryHandler(
		QueueServiceAbortQueuedRunProcedure,
		svc.AbortQueuedRun,
		connect.WithSchema(queueServiceAbortQueuedRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	queueServiceAbortQueuedActionHandler := connect.NewUnaryHandler(
		QueueServiceAbortQueuedActionProcedure,
		svc.AbortQueuedAction,
		connect.WithSchema(queueServiceAbortQueuedActionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.workflow.QueueService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case QueueServiceEnqueueActionProcedure:
			queueServiceEnqueueActionHandler.ServeHTTP(w, r)
		case QueueServiceAbortQueuedRunProcedure:
			queueServiceAbortQueuedRunHandler.ServeHTTP(w, r)
		case QueueServiceAbortQueuedActionProcedure:
			queueServiceAbortQueuedActionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQueueServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQueueServiceHandler struct{}

func (UnimplementedQueueServiceHandler) EnqueueAction(context.Context, *connect.Request[workflow.EnqueueActionRequest]) (*connect.Response[workflow.EnqueueActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.QueueService.EnqueueAction is not implemented"))
}

func (UnimplementedQueueServiceHandler) AbortQueuedRun(context.Context, *connect.Request[workflow.AbortQueuedRunRequest]) (*connect.Response[workflow.AbortQueuedRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.QueueService.AbortQueuedRun is not implemented"))
}

func (UnimplementedQueueServiceHandler) AbortQueuedAction(context.Context, *connect.Request[workflow.AbortQueuedActionRequest]) (*connect.Response[workflow.AbortQueuedActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.QueueService.AbortQueuedAction is not implemented"))
}
