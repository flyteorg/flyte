// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: idl2/workflow/run_logs_service.proto

package workflowconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	workflow "github.com/flyteorg/flyte/v2/gen/go/workflow"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RunLogsServiceName is the fully-qualified name of the RunLogsService service.
	RunLogsServiceName = "flyteidl.workflow.RunLogsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RunLogsServiceTailLogsProcedure is the fully-qualified name of the RunLogsService's TailLogs RPC.
	RunLogsServiceTailLogsProcedure = "/flyteidl.workflow.RunLogsService/TailLogs"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	runLogsServiceServiceDescriptor        = workflow.File_idl2_workflow_run_logs_service_proto.Services().ByName("RunLogsService")
	runLogsServiceTailLogsMethodDescriptor = runLogsServiceServiceDescriptor.Methods().ByName("TailLogs")
)

// RunLogsServiceClient is a client for the flyteidl.workflow.RunLogsService service.
type RunLogsServiceClient interface {
	TailLogs(context.Context, *connect.Request[workflow.TailLogsRequest]) (*connect.ServerStreamForClient[workflow.TailLogsResponse], error)
}

// NewRunLogsServiceClient constructs a client for the flyteidl.workflow.RunLogsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunLogsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RunLogsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runLogsServiceClient{
		tailLogs: connect.NewClient[workflow.TailLogsRequest, workflow.TailLogsResponse](
			httpClient,
			baseURL+RunLogsServiceTailLogsProcedure,
			connect.WithSchema(runLogsServiceTailLogsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// runLogsServiceClient implements RunLogsServiceClient.
type runLogsServiceClient struct {
	tailLogs *connect.Client[workflow.TailLogsRequest, workflow.TailLogsResponse]
}

// TailLogs calls flyteidl.workflow.RunLogsService.TailLogs.
func (c *runLogsServiceClient) TailLogs(ctx context.Context, req *connect.Request[workflow.TailLogsRequest]) (*connect.ServerStreamForClient[workflow.TailLogsResponse], error) {
	return c.tailLogs.CallServerStream(ctx, req)
}

// RunLogsServiceHandler is an implementation of the flyteidl.workflow.RunLogsService service.
type RunLogsServiceHandler interface {
	TailLogs(context.Context, *connect.Request[workflow.TailLogsRequest], *connect.ServerStream[workflow.TailLogsResponse]) error
}

// NewRunLogsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunLogsServiceHandler(svc RunLogsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	runLogsServiceTailLogsHandler := connect.NewServerStreamHandler(
		RunLogsServiceTailLogsProcedure,
		svc.TailLogs,
		connect.WithSchema(runLogsServiceTailLogsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl.workflow.RunLogsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RunLogsServiceTailLogsProcedure:
			runLogsServiceTailLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRunLogsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRunLogsServiceHandler struct{}

func (UnimplementedRunLogsServiceHandler) TailLogs(context.Context, *connect.Request[workflow.TailLogsRequest], *connect.ServerStream[workflow.TailLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl.workflow.RunLogsService.TailLogs is not implemented"))
}
