// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: idl2/workflow/task_service.proto

package workflow

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeployTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeployTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployTaskRequestMultiError, or nil if none found.
func (m *DeployTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() == nil {
		err := DeployTaskRequestValidationError{
			field:  "TaskId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTaskId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeployTaskRequestValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeployTaskRequestValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeployTaskRequestValidationError{
				field:  "TaskId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSpec() == nil {
		err := DeployTaskRequestValidationError{
			field:  "Spec",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeployTaskRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeployTaskRequestValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeployTaskRequestValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeployTaskRequestMultiError(errors)
	}

	return nil
}

// DeployTaskRequestMultiError is an error wrapping multiple validation errors
// returned by DeployTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type DeployTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployTaskRequestMultiError) AllErrors() []error { return m }

// DeployTaskRequestValidationError is the validation error returned by
// DeployTaskRequest.Validate if the designated constraints aren't met.
type DeployTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployTaskRequestValidationError) ErrorName() string {
	return "DeployTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeployTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployTaskRequestValidationError{}

// Validate checks the field values on DeployTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployTaskResponseMultiError, or nil if none found.
func (m *DeployTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeployTaskResponseMultiError(errors)
	}

	return nil
}

// DeployTaskResponseMultiError is an error wrapping multiple validation errors
// returned by DeployTaskResponse.ValidateAll() if the designated constraints
// aren't met.
type DeployTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployTaskResponseMultiError) AllErrors() []error { return m }

// DeployTaskResponseValidationError is the validation error returned by
// DeployTaskResponse.Validate if the designated constraints aren't met.
type DeployTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployTaskResponseValidationError) ErrorName() string {
	return "DeployTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeployTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployTaskResponseValidationError{}

// Validate checks the field values on GetTaskDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaskDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskDetailsRequestMultiError, or nil if none found.
func (m *GetTaskDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() == nil {
		err := GetTaskDetailsRequestValidationError{
			field:  "TaskId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTaskId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskDetailsRequestValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskDetailsRequestValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskDetailsRequestValidationError{
				field:  "TaskId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTaskDetailsRequestMultiError(errors)
	}

	return nil
}

// GetTaskDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTaskDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTaskDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskDetailsRequestMultiError) AllErrors() []error { return m }

// GetTaskDetailsRequestValidationError is the validation error returned by
// GetTaskDetailsRequest.Validate if the designated constraints aren't met.
type GetTaskDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskDetailsRequestValidationError) ErrorName() string {
	return "GetTaskDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskDetailsRequestValidationError{}

// Validate checks the field values on GetTaskDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaskDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskDetailsResponseMultiError, or nil if none found.
func (m *GetTaskDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskDetailsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskDetailsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskDetailsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTaskDetailsResponseMultiError(errors)
	}

	return nil
}

// GetTaskDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTaskDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTaskDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskDetailsResponseMultiError) AllErrors() []error { return m }

// GetTaskDetailsResponseValidationError is the validation error returned by
// GetTaskDetailsResponse.Validate if the designated constraints aren't met.
type GetTaskDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskDetailsResponseValidationError) ErrorName() string {
	return "GetTaskDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskDetailsResponseValidationError{}

// Validate checks the field values on ListTasksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTasksRequestMultiError, or nil if none found.
func (m *ListTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTasksRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTasksRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTasksRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetKnownFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTasksRequestValidationError{
						field:  fmt.Sprintf("KnownFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTasksRequestValidationError{
						field:  fmt.Sprintf("KnownFilters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTasksRequestValidationError{
					field:  fmt.Sprintf("KnownFilters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	oneofScopeByPresent := false
	switch v := m.ScopeBy.(type) {
	case *ListTasksRequest_Org:
		if v == nil {
			err := ListTasksRequestValidationError{
				field:  "ScopeBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofScopeByPresent = true

		if utf8.RuneCountInString(m.GetOrg()) < 1 {
			err := ListTasksRequestValidationError{
				field:  "Org",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ListTasksRequest_ProjectId:
		if v == nil {
			err := ListTasksRequestValidationError{
				field:  "ScopeBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofScopeByPresent = true

		if m.GetProjectId() == nil {
			err := ListTasksRequestValidationError{
				field:  "ProjectId",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProjectId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTasksRequestValidationError{
						field:  "ProjectId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTasksRequestValidationError{
						field:  "ProjectId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProjectId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTasksRequestValidationError{
					field:  "ProjectId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofScopeByPresent {
		err := ListTasksRequestValidationError{
			field:  "ScopeBy",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTasksRequestMultiError(errors)
	}

	return nil
}

// ListTasksRequestMultiError is an error wrapping multiple validation errors
// returned by ListTasksRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTasksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTasksRequestMultiError) AllErrors() []error { return m }

// ListTasksRequestValidationError is the validation error returned by
// ListTasksRequest.Validate if the designated constraints aren't met.
type ListTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTasksRequestValidationError) ErrorName() string { return "ListTasksRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTasksRequestValidationError{}

// Validate checks the field values on ListTasksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTasksResponseMultiError, or nil if none found.
func (m *ListTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTasksResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTasksResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTasksResponseValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Token

	if len(errors) > 0 {
		return ListTasksResponseMultiError(errors)
	}

	return nil
}

// ListTasksResponseMultiError is an error wrapping multiple validation errors
// returned by ListTasksResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTasksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTasksResponseMultiError) AllErrors() []error { return m }

// ListTasksResponseValidationError is the validation error returned by
// ListTasksResponse.Validate if the designated constraints aren't met.
type ListTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTasksResponseValidationError) ErrorName() string {
	return "ListTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTasksResponseValidationError{}

// Validate checks the field values on ListTasksRequest_KnownFilter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTasksRequest_KnownFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTasksRequest_KnownFilter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTasksRequest_KnownFilterMultiError, or nil if none found.
func (m *ListTasksRequest_KnownFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTasksRequest_KnownFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.FilterBy.(type) {
	case *ListTasksRequest_KnownFilter_DeployedBy:
		if v == nil {
			err := ListTasksRequest_KnownFilterValidationError{
				field:  "FilterBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for DeployedBy
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListTasksRequest_KnownFilterMultiError(errors)
	}

	return nil
}

// ListTasksRequest_KnownFilterMultiError is an error wrapping multiple
// validation errors returned by ListTasksRequest_KnownFilter.ValidateAll() if
// the designated constraints aren't met.
type ListTasksRequest_KnownFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTasksRequest_KnownFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTasksRequest_KnownFilterMultiError) AllErrors() []error { return m }

// ListTasksRequest_KnownFilterValidationError is the validation error returned
// by ListTasksRequest_KnownFilter.Validate if the designated constraints
// aren't met.
type ListTasksRequest_KnownFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTasksRequest_KnownFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTasksRequest_KnownFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTasksRequest_KnownFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTasksRequest_KnownFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTasksRequest_KnownFilterValidationError) ErrorName() string {
	return "ListTasksRequest_KnownFilterValidationError"
}

// Error satisfies the builtin error interface
func (e ListTasksRequest_KnownFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTasksRequest_KnownFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTasksRequest_KnownFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTasksRequest_KnownFilterValidationError{}
