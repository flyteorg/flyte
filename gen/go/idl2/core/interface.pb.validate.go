// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: idl2/core/interface.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Variable with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Variable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Variable with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VariableMultiError, or nil
// if none found.
func (m *Variable) ValidateAll() error {
	return m.validate(true)
}

func (m *Variable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VariableValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VariableValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VariableValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetArtifactPartialId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VariableValidationError{
					field:  "ArtifactPartialId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VariableValidationError{
					field:  "ArtifactPartialId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArtifactPartialId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VariableValidationError{
				field:  "ArtifactPartialId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetArtifactTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VariableValidationError{
					field:  "ArtifactTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VariableValidationError{
					field:  "ArtifactTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArtifactTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VariableValidationError{
				field:  "ArtifactTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VariableMultiError(errors)
	}

	return nil
}

// VariableMultiError is an error wrapping multiple validation errors returned
// by Variable.ValidateAll() if the designated constraints aren't met.
type VariableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VariableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VariableMultiError) AllErrors() []error { return m }

// VariableValidationError is the validation error returned by
// Variable.Validate if the designated constraints aren't met.
type VariableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VariableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VariableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VariableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VariableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VariableValidationError) ErrorName() string { return "VariableValidationError" }

// Error satisfies the builtin error interface
func (e VariableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVariable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VariableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VariableValidationError{}

// Validate checks the field values on VariableMap with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VariableMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VariableMap with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VariableMapMultiError, or
// nil if none found.
func (m *VariableMap) ValidateAll() error {
	return m.validate(true)
}

func (m *VariableMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetVariables()))
		i := 0
		for key := range m.GetVariables() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetVariables()[key]
			_ = val

			// no validation rules for Variables[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, VariableMapValidationError{
							field:  fmt.Sprintf("Variables[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, VariableMapValidationError{
							field:  fmt.Sprintf("Variables[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return VariableMapValidationError{
						field:  fmt.Sprintf("Variables[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return VariableMapMultiError(errors)
	}

	return nil
}

// VariableMapMultiError is an error wrapping multiple validation errors
// returned by VariableMap.ValidateAll() if the designated constraints aren't met.
type VariableMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VariableMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VariableMapMultiError) AllErrors() []error { return m }

// VariableMapValidationError is the validation error returned by
// VariableMap.Validate if the designated constraints aren't met.
type VariableMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VariableMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VariableMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VariableMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VariableMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VariableMapValidationError) ErrorName() string { return "VariableMapValidationError" }

// Error satisfies the builtin error interface
func (e VariableMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVariableMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VariableMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VariableMapValidationError{}

// Validate checks the field values on TypedInterface with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TypedInterface) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TypedInterface with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TypedInterfaceMultiError,
// or nil if none found.
func (m *TypedInterface) ValidateAll() error {
	return m.validate(true)
}

func (m *TypedInterface) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TypedInterfaceValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TypedInterfaceValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TypedInterfaceValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TypedInterfaceValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TypedInterfaceValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TypedInterfaceValidationError{
				field:  "Outputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TypedInterfaceMultiError(errors)
	}

	return nil
}

// TypedInterfaceMultiError is an error wrapping multiple validation errors
// returned by TypedInterface.ValidateAll() if the designated constraints
// aren't met.
type TypedInterfaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypedInterfaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypedInterfaceMultiError) AllErrors() []error { return m }

// TypedInterfaceValidationError is the validation error returned by
// TypedInterface.Validate if the designated constraints aren't met.
type TypedInterfaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypedInterfaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypedInterfaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypedInterfaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypedInterfaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypedInterfaceValidationError) ErrorName() string { return "TypedInterfaceValidationError" }

// Error satisfies the builtin error interface
func (e TypedInterfaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypedInterface.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypedInterfaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypedInterfaceValidationError{}

// Validate checks the field values on Parameter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Parameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Parameter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParameterMultiError, or nil
// if none found.
func (m *Parameter) ValidateAll() error {
	return m.validate(true)
}

func (m *Parameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParameterValidationError{
					field:  "Var",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParameterValidationError{
					field:  "Var",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParameterValidationError{
				field:  "Var",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Behavior.(type) {
	case *Parameter_Default:
		if v == nil {
			err := ParameterValidationError{
				field:  "Behavior",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDefault()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterValidationError{
						field:  "Default",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterValidationError{
						field:  "Default",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDefault()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterValidationError{
					field:  "Default",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Parameter_Required:
		if v == nil {
			err := ParameterValidationError{
				field:  "Behavior",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Required
	case *Parameter_ArtifactQuery:
		if v == nil {
			err := ParameterValidationError{
				field:  "Behavior",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetArtifactQuery()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterValidationError{
						field:  "ArtifactQuery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterValidationError{
						field:  "ArtifactQuery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArtifactQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterValidationError{
					field:  "ArtifactQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Parameter_ArtifactId:
		if v == nil {
			err := ParameterValidationError{
				field:  "Behavior",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetArtifactId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParameterValidationError{
						field:  "ArtifactId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParameterValidationError{
						field:  "ArtifactId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArtifactId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParameterValidationError{
					field:  "ArtifactId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ParameterMultiError(errors)
	}

	return nil
}

// ParameterMultiError is an error wrapping multiple validation errors returned
// by Parameter.ValidateAll() if the designated constraints aren't met.
type ParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParameterMultiError) AllErrors() []error { return m }

// ParameterValidationError is the validation error returned by
// Parameter.Validate if the designated constraints aren't met.
type ParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterValidationError) ErrorName() string { return "ParameterValidationError" }

// Error satisfies the builtin error interface
func (e ParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterValidationError{}

// Validate checks the field values on ParameterMap with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParameterMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParameterMap with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParameterMapMultiError, or
// nil if none found.
func (m *ParameterMap) ValidateAll() error {
	return m.validate(true)
}

func (m *ParameterMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetParameters()))
		i := 0
		for key := range m.GetParameters() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetParameters()[key]
			_ = val

			// no validation rules for Parameters[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ParameterMapValidationError{
							field:  fmt.Sprintf("Parameters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ParameterMapValidationError{
							field:  fmt.Sprintf("Parameters[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ParameterMapValidationError{
						field:  fmt.Sprintf("Parameters[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ParameterMapMultiError(errors)
	}

	return nil
}

// ParameterMapMultiError is an error wrapping multiple validation errors
// returned by ParameterMap.ValidateAll() if the designated constraints aren't met.
type ParameterMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParameterMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParameterMapMultiError) AllErrors() []error { return m }

// ParameterMapValidationError is the validation error returned by
// ParameterMap.Validate if the designated constraints aren't met.
type ParameterMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterMapValidationError) ErrorName() string { return "ParameterMapValidationError" }

// Error satisfies the builtin error interface
func (e ParameterMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameterMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterMapValidationError{}
