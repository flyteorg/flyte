// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: idl2/core/identifier.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Identifier with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Identifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Identifier with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdentifierMultiError, or
// nil if none found.
func (m *Identifier) ValidateAll() error {
	return m.validate(true)
}

func (m *Identifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	// no validation rules for Project

	// no validation rules for Domain

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Org

	if len(errors) > 0 {
		return IdentifierMultiError(errors)
	}

	return nil
}

// IdentifierMultiError is an error wrapping multiple validation errors
// returned by Identifier.ValidateAll() if the designated constraints aren't met.
type IdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentifierMultiError) AllErrors() []error { return m }

// IdentifierValidationError is the validation error returned by
// Identifier.Validate if the designated constraints aren't met.
type IdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentifierValidationError) ErrorName() string { return "IdentifierValidationError" }

// Error satisfies the builtin error interface
func (e IdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentifierValidationError{}

// Validate checks the field values on WorkflowExecutionIdentifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowExecutionIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowExecutionIdentifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowExecutionIdentifierMultiError, or nil if none found.
func (m *WorkflowExecutionIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecutionIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	// no validation rules for Domain

	// no validation rules for Name

	// no validation rules for Org

	if len(errors) > 0 {
		return WorkflowExecutionIdentifierMultiError(errors)
	}

	return nil
}

// WorkflowExecutionIdentifierMultiError is an error wrapping multiple
// validation errors returned by WorkflowExecutionIdentifier.ValidateAll() if
// the designated constraints aren't met.
type WorkflowExecutionIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionIdentifierMultiError) AllErrors() []error { return m }

// WorkflowExecutionIdentifierValidationError is the validation error returned
// by WorkflowExecutionIdentifier.Validate if the designated constraints
// aren't met.
type WorkflowExecutionIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionIdentifierValidationError) ErrorName() string {
	return "WorkflowExecutionIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecutionIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionIdentifierValidationError{}

// Validate checks the field values on NodeExecutionIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NodeExecutionIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeExecutionIdentifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NodeExecutionIdentifierMultiError, or nil if none found.
func (m *NodeExecutionIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeExecutionIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	if all {
		switch v := interface{}(m.GetExecutionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NodeExecutionIdentifierValidationError{
					field:  "ExecutionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NodeExecutionIdentifierValidationError{
					field:  "ExecutionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecutionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeExecutionIdentifierValidationError{
				field:  "ExecutionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NodeExecutionIdentifierMultiError(errors)
	}

	return nil
}

// NodeExecutionIdentifierMultiError is an error wrapping multiple validation
// errors returned by NodeExecutionIdentifier.ValidateAll() if the designated
// constraints aren't met.
type NodeExecutionIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeExecutionIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeExecutionIdentifierMultiError) AllErrors() []error { return m }

// NodeExecutionIdentifierValidationError is the validation error returned by
// NodeExecutionIdentifier.Validate if the designated constraints aren't met.
type NodeExecutionIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeExecutionIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeExecutionIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeExecutionIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeExecutionIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeExecutionIdentifierValidationError) ErrorName() string {
	return "NodeExecutionIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e NodeExecutionIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeExecutionIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeExecutionIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeExecutionIdentifierValidationError{}

// Validate checks the field values on TaskExecutionIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskExecutionIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskExecutionIdentifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskExecutionIdentifierMultiError, or nil if none found.
func (m *TaskExecutionIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskExecutionIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaskId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskExecutionIdentifierValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskExecutionIdentifierValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskExecutionIdentifierValidationError{
				field:  "TaskId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNodeExecutionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskExecutionIdentifierValidationError{
					field:  "NodeExecutionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskExecutionIdentifierValidationError{
					field:  "NodeExecutionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNodeExecutionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskExecutionIdentifierValidationError{
				field:  "NodeExecutionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RetryAttempt

	if len(errors) > 0 {
		return TaskExecutionIdentifierMultiError(errors)
	}

	return nil
}

// TaskExecutionIdentifierMultiError is an error wrapping multiple validation
// errors returned by TaskExecutionIdentifier.ValidateAll() if the designated
// constraints aren't met.
type TaskExecutionIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskExecutionIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskExecutionIdentifierMultiError) AllErrors() []error { return m }

// TaskExecutionIdentifierValidationError is the validation error returned by
// TaskExecutionIdentifier.Validate if the designated constraints aren't met.
type TaskExecutionIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskExecutionIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskExecutionIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskExecutionIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskExecutionIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskExecutionIdentifierValidationError) ErrorName() string {
	return "TaskExecutionIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e TaskExecutionIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskExecutionIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskExecutionIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskExecutionIdentifierValidationError{}

// Validate checks the field values on SignalIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SignalIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignalIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignalIdentifierMultiError, or nil if none found.
func (m *SignalIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *SignalIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignalId

	if all {
		switch v := interface{}(m.GetExecutionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignalIdentifierValidationError{
					field:  "ExecutionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignalIdentifierValidationError{
					field:  "ExecutionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecutionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignalIdentifierValidationError{
				field:  "ExecutionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SignalIdentifierMultiError(errors)
	}

	return nil
}

// SignalIdentifierMultiError is an error wrapping multiple validation errors
// returned by SignalIdentifier.ValidateAll() if the designated constraints
// aren't met.
type SignalIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignalIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignalIdentifierMultiError) AllErrors() []error { return m }

// SignalIdentifierValidationError is the validation error returned by
// SignalIdentifier.Validate if the designated constraints aren't met.
type SignalIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignalIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignalIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignalIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignalIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignalIdentifierValidationError) ErrorName() string { return "SignalIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e SignalIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignalIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignalIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignalIdentifierValidationError{}
