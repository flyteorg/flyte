// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: idl2/core/types.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SchemaType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SchemaType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SchemaType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SchemaTypeMultiError, or
// nil if none found.
func (m *SchemaType) ValidateAll() error {
	return m.validate(true)
}

func (m *SchemaType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SchemaTypeValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SchemaTypeValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaTypeValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SchemaTypeMultiError(errors)
	}

	return nil
}

// SchemaTypeMultiError is an error wrapping multiple validation errors
// returned by SchemaType.ValidateAll() if the designated constraints aren't met.
type SchemaTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaTypeMultiError) AllErrors() []error { return m }

// SchemaTypeValidationError is the validation error returned by
// SchemaType.Validate if the designated constraints aren't met.
type SchemaTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaTypeValidationError) ErrorName() string { return "SchemaTypeValidationError" }

// Error satisfies the builtin error interface
func (e SchemaTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaTypeValidationError{}

// Validate checks the field values on StructuredDatasetType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StructuredDatasetType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StructuredDatasetType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StructuredDatasetTypeMultiError, or nil if none found.
func (m *StructuredDatasetType) ValidateAll() error {
	return m.validate(true)
}

func (m *StructuredDatasetType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StructuredDatasetTypeValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StructuredDatasetTypeValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StructuredDatasetTypeValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Format

	// no validation rules for ExternalSchemaType

	// no validation rules for ExternalSchemaBytes

	if len(errors) > 0 {
		return StructuredDatasetTypeMultiError(errors)
	}

	return nil
}

// StructuredDatasetTypeMultiError is an error wrapping multiple validation
// errors returned by StructuredDatasetType.ValidateAll() if the designated
// constraints aren't met.
type StructuredDatasetTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StructuredDatasetTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StructuredDatasetTypeMultiError) AllErrors() []error { return m }

// StructuredDatasetTypeValidationError is the validation error returned by
// StructuredDatasetType.Validate if the designated constraints aren't met.
type StructuredDatasetTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StructuredDatasetTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StructuredDatasetTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StructuredDatasetTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StructuredDatasetTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StructuredDatasetTypeValidationError) ErrorName() string {
	return "StructuredDatasetTypeValidationError"
}

// Error satisfies the builtin error interface
func (e StructuredDatasetTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStructuredDatasetType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StructuredDatasetTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StructuredDatasetTypeValidationError{}

// Validate checks the field values on BlobType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlobType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlobType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlobTypeMultiError, or nil
// if none found.
func (m *BlobType) ValidateAll() error {
	return m.validate(true)
}

func (m *BlobType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Format

	// no validation rules for Dimensionality

	if len(errors) > 0 {
		return BlobTypeMultiError(errors)
	}

	return nil
}

// BlobTypeMultiError is an error wrapping multiple validation errors returned
// by BlobType.ValidateAll() if the designated constraints aren't met.
type BlobTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlobTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlobTypeMultiError) AllErrors() []error { return m }

// BlobTypeValidationError is the validation error returned by
// BlobType.Validate if the designated constraints aren't met.
type BlobTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobTypeValidationError) ErrorName() string { return "BlobTypeValidationError" }

// Error satisfies the builtin error interface
func (e BlobTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlobType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobTypeValidationError{}

// Validate checks the field values on EnumType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumTypeMultiError, or nil
// if none found.
func (m *EnumType) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnumTypeMultiError(errors)
	}

	return nil
}

// EnumTypeMultiError is an error wrapping multiple validation errors returned
// by EnumType.ValidateAll() if the designated constraints aren't met.
type EnumTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnumTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnumTypeMultiError) AllErrors() []error { return m }

// EnumTypeValidationError is the validation error returned by
// EnumType.Validate if the designated constraints aren't met.
type EnumTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumTypeValidationError) ErrorName() string { return "EnumTypeValidationError" }

// Error satisfies the builtin error interface
func (e EnumTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumTypeValidationError{}

// Validate checks the field values on UnionType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnionType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnionType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnionTypeMultiError, or nil
// if none found.
func (m *UnionType) ValidateAll() error {
	return m.validate(true)
}

func (m *UnionType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVariants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnionTypeValidationError{
						field:  fmt.Sprintf("Variants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnionTypeValidationError{
						field:  fmt.Sprintf("Variants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnionTypeValidationError{
					field:  fmt.Sprintf("Variants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnionTypeMultiError(errors)
	}

	return nil
}

// UnionTypeMultiError is an error wrapping multiple validation errors returned
// by UnionType.ValidateAll() if the designated constraints aren't met.
type UnionTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnionTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnionTypeMultiError) AllErrors() []error { return m }

// UnionTypeValidationError is the validation error returned by
// UnionType.Validate if the designated constraints aren't met.
type UnionTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnionTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnionTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnionTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnionTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnionTypeValidationError) ErrorName() string { return "UnionTypeValidationError" }

// Error satisfies the builtin error interface
func (e UnionTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnionType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnionTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnionTypeValidationError{}

// Validate checks the field values on TypeStructure with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TypeStructure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TypeStructure with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TypeStructureMultiError, or
// nil if none found.
func (m *TypeStructure) ValidateAll() error {
	return m.validate(true)
}

func (m *TypeStructure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tag

	{
		sorted_keys := make([]string, len(m.GetDataclassType()))
		i := 0
		for key := range m.GetDataclassType() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDataclassType()[key]
			_ = val

			// no validation rules for DataclassType[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TypeStructureValidationError{
							field:  fmt.Sprintf("DataclassType[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TypeStructureValidationError{
							field:  fmt.Sprintf("DataclassType[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TypeStructureValidationError{
						field:  fmt.Sprintf("DataclassType[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return TypeStructureMultiError(errors)
	}

	return nil
}

// TypeStructureMultiError is an error wrapping multiple validation errors
// returned by TypeStructure.ValidateAll() if the designated constraints
// aren't met.
type TypeStructureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypeStructureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypeStructureMultiError) AllErrors() []error { return m }

// TypeStructureValidationError is the validation error returned by
// TypeStructure.Validate if the designated constraints aren't met.
type TypeStructureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeStructureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeStructureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeStructureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeStructureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeStructureValidationError) ErrorName() string { return "TypeStructureValidationError" }

// Error satisfies the builtin error interface
func (e TypeStructureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypeStructure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeStructureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeStructureValidationError{}

// Validate checks the field values on TypeAnnotation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TypeAnnotation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TypeAnnotation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TypeAnnotationMultiError,
// or nil if none found.
func (m *TypeAnnotation) ValidateAll() error {
	return m.validate(true)
}

func (m *TypeAnnotation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAnnotations()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TypeAnnotationValidationError{
					field:  "Annotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TypeAnnotationValidationError{
					field:  "Annotations",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnnotations()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TypeAnnotationValidationError{
				field:  "Annotations",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TypeAnnotationMultiError(errors)
	}

	return nil
}

// TypeAnnotationMultiError is an error wrapping multiple validation errors
// returned by TypeAnnotation.ValidateAll() if the designated constraints
// aren't met.
type TypeAnnotationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypeAnnotationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypeAnnotationMultiError) AllErrors() []error { return m }

// TypeAnnotationValidationError is the validation error returned by
// TypeAnnotation.Validate if the designated constraints aren't met.
type TypeAnnotationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeAnnotationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeAnnotationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeAnnotationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeAnnotationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeAnnotationValidationError) ErrorName() string { return "TypeAnnotationValidationError" }

// Error satisfies the builtin error interface
func (e TypeAnnotationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypeAnnotation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeAnnotationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeAnnotationValidationError{}

// Validate checks the field values on LiteralType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LiteralType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiteralType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LiteralTypeMultiError, or
// nil if none found.
func (m *LiteralType) ValidateAll() error {
	return m.validate(true)
}

func (m *LiteralType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiteralTypeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiteralTypeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiteralTypeValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAnnotation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiteralTypeValidationError{
					field:  "Annotation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiteralTypeValidationError{
					field:  "Annotation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnnotation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiteralTypeValidationError{
				field:  "Annotation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStructure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiteralTypeValidationError{
					field:  "Structure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiteralTypeValidationError{
					field:  "Structure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStructure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiteralTypeValidationError{
				field:  "Structure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Type.(type) {
	case *LiteralType_Simple:
		if v == nil {
			err := LiteralTypeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Simple
	case *LiteralType_Schema:
		if v == nil {
			err := LiteralTypeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSchema()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "Schema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "Schema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralTypeValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LiteralType_CollectionType:
		if v == nil {
			err := LiteralTypeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCollectionType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "CollectionType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "CollectionType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCollectionType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralTypeValidationError{
					field:  "CollectionType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LiteralType_MapValueType:
		if v == nil {
			err := LiteralTypeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMapValueType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "MapValueType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "MapValueType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMapValueType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralTypeValidationError{
					field:  "MapValueType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LiteralType_Blob:
		if v == nil {
			err := LiteralTypeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBlob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBlob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralTypeValidationError{
					field:  "Blob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LiteralType_EnumType:
		if v == nil {
			err := LiteralTypeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEnumType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "EnumType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "EnumType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnumType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralTypeValidationError{
					field:  "EnumType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LiteralType_StructuredDatasetType:
		if v == nil {
			err := LiteralTypeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStructuredDatasetType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "StructuredDatasetType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "StructuredDatasetType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStructuredDatasetType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralTypeValidationError{
					field:  "StructuredDatasetType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LiteralType_UnionType:
		if v == nil {
			err := LiteralTypeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUnionType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "UnionType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralTypeValidationError{
						field:  "UnionType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnionType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralTypeValidationError{
					field:  "UnionType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LiteralTypeMultiError(errors)
	}

	return nil
}

// LiteralTypeMultiError is an error wrapping multiple validation errors
// returned by LiteralType.ValidateAll() if the designated constraints aren't met.
type LiteralTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiteralTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiteralTypeMultiError) AllErrors() []error { return m }

// LiteralTypeValidationError is the validation error returned by
// LiteralType.Validate if the designated constraints aren't met.
type LiteralTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiteralTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiteralTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiteralTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiteralTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiteralTypeValidationError) ErrorName() string { return "LiteralTypeValidationError" }

// Error satisfies the builtin error interface
func (e LiteralTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiteralType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiteralTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiteralTypeValidationError{}

// Validate checks the field values on OutputReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OutputReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OutputReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OutputReferenceMultiError, or nil if none found.
func (m *OutputReference) ValidateAll() error {
	return m.validate(true)
}

func (m *OutputReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for Var

	for idx, item := range m.GetAttrPath() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OutputReferenceValidationError{
						field:  fmt.Sprintf("AttrPath[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OutputReferenceValidationError{
						field:  fmt.Sprintf("AttrPath[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OutputReferenceValidationError{
					field:  fmt.Sprintf("AttrPath[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OutputReferenceMultiError(errors)
	}

	return nil
}

// OutputReferenceMultiError is an error wrapping multiple validation errors
// returned by OutputReference.ValidateAll() if the designated constraints
// aren't met.
type OutputReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutputReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutputReferenceMultiError) AllErrors() []error { return m }

// OutputReferenceValidationError is the validation error returned by
// OutputReference.Validate if the designated constraints aren't met.
type OutputReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutputReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutputReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutputReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutputReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutputReferenceValidationError) ErrorName() string { return "OutputReferenceValidationError" }

// Error satisfies the builtin error interface
func (e OutputReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutputReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutputReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutputReferenceValidationError{}

// Validate checks the field values on PromiseAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PromiseAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PromiseAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PromiseAttributeMultiError, or nil if none found.
func (m *PromiseAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *PromiseAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Value.(type) {
	case *PromiseAttribute_StringValue:
		if v == nil {
			err := PromiseAttributeValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	case *PromiseAttribute_IntValue:
		if v == nil {
			err := PromiseAttributeValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for IntValue
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PromiseAttributeMultiError(errors)
	}

	return nil
}

// PromiseAttributeMultiError is an error wrapping multiple validation errors
// returned by PromiseAttribute.ValidateAll() if the designated constraints
// aren't met.
type PromiseAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromiseAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromiseAttributeMultiError) AllErrors() []error { return m }

// PromiseAttributeValidationError is the validation error returned by
// PromiseAttribute.Validate if the designated constraints aren't met.
type PromiseAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromiseAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromiseAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromiseAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromiseAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromiseAttributeValidationError) ErrorName() string { return "PromiseAttributeValidationError" }

// Error satisfies the builtin error interface
func (e PromiseAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromiseAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromiseAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromiseAttributeValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ErrorMultiError, or nil if none found.
func (m *Error) ValidateAll() error {
	return m.validate(true)
}

func (m *Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FailedNodeId

	// no validation rules for Message

	if len(errors) > 0 {
		return ErrorMultiError(errors)
	}

	return nil
}

// ErrorMultiError is an error wrapping multiple validation errors returned by
// Error.ValidateAll() if the designated constraints aren't met.
type ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMultiError) AllErrors() []error { return m }

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on SchemaType_SchemaColumn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SchemaType_SchemaColumn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SchemaType_SchemaColumn with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SchemaType_SchemaColumnMultiError, or nil if none found.
func (m *SchemaType_SchemaColumn) ValidateAll() error {
	return m.validate(true)
}

func (m *SchemaType_SchemaColumn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	if len(errors) > 0 {
		return SchemaType_SchemaColumnMultiError(errors)
	}

	return nil
}

// SchemaType_SchemaColumnMultiError is an error wrapping multiple validation
// errors returned by SchemaType_SchemaColumn.ValidateAll() if the designated
// constraints aren't met.
type SchemaType_SchemaColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaType_SchemaColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaType_SchemaColumnMultiError) AllErrors() []error { return m }

// SchemaType_SchemaColumnValidationError is the validation error returned by
// SchemaType_SchemaColumn.Validate if the designated constraints aren't met.
type SchemaType_SchemaColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaType_SchemaColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaType_SchemaColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaType_SchemaColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaType_SchemaColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaType_SchemaColumnValidationError) ErrorName() string {
	return "SchemaType_SchemaColumnValidationError"
}

// Error satisfies the builtin error interface
func (e SchemaType_SchemaColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchemaType_SchemaColumn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaType_SchemaColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaType_SchemaColumnValidationError{}

// Validate checks the field values on StructuredDatasetType_DatasetColumn with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StructuredDatasetType_DatasetColumn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StructuredDatasetType_DatasetColumn
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StructuredDatasetType_DatasetColumnMultiError, or nil if none found.
func (m *StructuredDatasetType_DatasetColumn) ValidateAll() error {
	return m.validate(true)
}

func (m *StructuredDatasetType_DatasetColumn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetLiteralType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StructuredDatasetType_DatasetColumnValidationError{
					field:  "LiteralType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StructuredDatasetType_DatasetColumnValidationError{
					field:  "LiteralType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiteralType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StructuredDatasetType_DatasetColumnValidationError{
				field:  "LiteralType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StructuredDatasetType_DatasetColumnMultiError(errors)
	}

	return nil
}

// StructuredDatasetType_DatasetColumnMultiError is an error wrapping multiple
// validation errors returned by
// StructuredDatasetType_DatasetColumn.ValidateAll() if the designated
// constraints aren't met.
type StructuredDatasetType_DatasetColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StructuredDatasetType_DatasetColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StructuredDatasetType_DatasetColumnMultiError) AllErrors() []error { return m }

// StructuredDatasetType_DatasetColumnValidationError is the validation error
// returned by StructuredDatasetType_DatasetColumn.Validate if the designated
// constraints aren't met.
type StructuredDatasetType_DatasetColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StructuredDatasetType_DatasetColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StructuredDatasetType_DatasetColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StructuredDatasetType_DatasetColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StructuredDatasetType_DatasetColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StructuredDatasetType_DatasetColumnValidationError) ErrorName() string {
	return "StructuredDatasetType_DatasetColumnValidationError"
}

// Error satisfies the builtin error interface
func (e StructuredDatasetType_DatasetColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStructuredDatasetType_DatasetColumn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StructuredDatasetType_DatasetColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StructuredDatasetType_DatasetColumnValidationError{}
