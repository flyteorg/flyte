// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: logs/dataplane/payload.proto

package dataplane

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PodResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodResource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PodResourceMultiError, or
// nil if none found.
func (m *PodResource) ValidateAll() error {
	return m.validate(true)
}

func (m *PodResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := PodResourceValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PodResourceValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Container

	if len(errors) > 0 {
		return PodResourceMultiError(errors)
	}

	return nil
}

// PodResourceMultiError is an error wrapping multiple validation errors
// returned by PodResource.ValidateAll() if the designated constraints aren't met.
type PodResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodResourceMultiError) AllErrors() []error { return m }

// PodResourceValidationError is the validation error returned by
// PodResource.Validate if the designated constraints aren't met.
type PodResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodResourceValidationError) ErrorName() string { return "PodResourceValidationError" }

// Error satisfies the builtin error interface
func (e PodResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodResourceValidationError{}

// Validate checks the field values on TailTaskExecutionLogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TailTaskExecutionLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TailTaskExecutionLogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TailTaskExecutionLogsRequestMultiError, or nil if none found.
func (m *TailTaskExecutionLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TailTaskExecutionLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLoggingContext() == nil {
		err := TailTaskExecutionLogsRequestValidationError{
			field:  "LoggingContext",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLoggingContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TailTaskExecutionLogsRequestValidationError{
					field:  "LoggingContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TailTaskExecutionLogsRequestValidationError{
					field:  "LoggingContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoggingContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TailTaskExecutionLogsRequestValidationError{
				field:  "LoggingContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Source

	// no validation rules for NoFollow

	if len(errors) > 0 {
		return TailTaskExecutionLogsRequestMultiError(errors)
	}

	return nil
}

// TailTaskExecutionLogsRequestMultiError is an error wrapping multiple
// validation errors returned by TailTaskExecutionLogsRequest.ValidateAll() if
// the designated constraints aren't met.
type TailTaskExecutionLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailTaskExecutionLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailTaskExecutionLogsRequestMultiError) AllErrors() []error { return m }

// TailTaskExecutionLogsRequestValidationError is the validation error returned
// by TailTaskExecutionLogsRequest.Validate if the designated constraints
// aren't met.
type TailTaskExecutionLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailTaskExecutionLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailTaskExecutionLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailTaskExecutionLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailTaskExecutionLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailTaskExecutionLogsRequestValidationError) ErrorName() string {
	return "TailTaskExecutionLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TailTaskExecutionLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailTaskExecutionLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailTaskExecutionLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailTaskExecutionLogsRequestValidationError{}

// Validate checks the field values on TailTaskExecutionLogsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TailTaskExecutionLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TailTaskExecutionLogsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TailTaskExecutionLogsResponseMultiError, or nil if none found.
func (m *TailTaskExecutionLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TailTaskExecutionLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Result.(type) {
	case *TailTaskExecutionLogsResponse_Logs_:
		if v == nil {
			err := TailTaskExecutionLogsResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLogs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailTaskExecutionLogsResponseValidationError{
						field:  "Logs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailTaskExecutionLogsResponseValidationError{
						field:  "Logs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLogs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailTaskExecutionLogsResponseValidationError{
					field:  "Logs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TailTaskExecutionLogsResponseMultiError(errors)
	}

	return nil
}

// TailTaskExecutionLogsResponseMultiError is an error wrapping multiple
// validation errors returned by TailTaskExecutionLogsResponse.ValidateAll()
// if the designated constraints aren't met.
type TailTaskExecutionLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailTaskExecutionLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailTaskExecutionLogsResponseMultiError) AllErrors() []error { return m }

// TailTaskExecutionLogsResponseValidationError is the validation error
// returned by TailTaskExecutionLogsResponse.Validate if the designated
// constraints aren't met.
type TailTaskExecutionLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailTaskExecutionLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailTaskExecutionLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailTaskExecutionLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailTaskExecutionLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailTaskExecutionLogsResponseValidationError) ErrorName() string {
	return "TailTaskExecutionLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TailTaskExecutionLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailTaskExecutionLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailTaskExecutionLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailTaskExecutionLogsResponseValidationError{}

// Validate checks the field values on LoggingContext with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoggingContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoggingContext with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoggingContextMultiError,
// or nil if none found.
func (m *LoggingContext) ValidateAll() error {
	return m.validate(true)
}

func (m *LoggingContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := LoggingContextValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKubernetesNamespace()) < 1 {
		err := LoggingContextValidationError{
			field:  "KubernetesNamespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKubernetesPodName()) < 1 {
		err := LoggingContextValidationError{
			field:  "KubernetesPodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKubernetesContainerName()) < 1 {
		err := LoggingContextValidationError{
			field:  "KubernetesContainerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExecutionAttemptStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggingContextValidationError{
					field:  "ExecutionAttemptStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggingContextValidationError{
					field:  "ExecutionAttemptStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecutionAttemptStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggingContextValidationError{
				field:  "ExecutionAttemptStartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExecutionAttemptEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggingContextValidationError{
					field:  "ExecutionAttemptEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggingContextValidationError{
					field:  "ExecutionAttemptEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecutionAttemptEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggingContextValidationError{
				field:  "ExecutionAttemptEndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for KubernetesPodLabels

	if len(errors) > 0 {
		return LoggingContextMultiError(errors)
	}

	return nil
}

// LoggingContextMultiError is an error wrapping multiple validation errors
// returned by LoggingContext.ValidateAll() if the designated constraints
// aren't met.
type LoggingContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoggingContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoggingContextMultiError) AllErrors() []error { return m }

// LoggingContextValidationError is the validation error returned by
// LoggingContext.Validate if the designated constraints aren't met.
type LoggingContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggingContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggingContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggingContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggingContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggingContextValidationError) ErrorName() string { return "LoggingContextValidationError" }

// Error satisfies the builtin error interface
func (e LoggingContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoggingContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggingContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggingContextValidationError{}

// Validate checks the field values on ContainerIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerIdentifierMultiError, or nil if none found.
func (m *ContainerIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ContainerIdentifierValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKubernetesNamespace()) < 1 {
		err := ContainerIdentifierValidationError{
			field:  "KubernetesNamespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKubernetesPodName()) < 1 {
		err := ContainerIdentifierValidationError{
			field:  "KubernetesPodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for KubernetesContainerName

	if len(errors) > 0 {
		return ContainerIdentifierMultiError(errors)
	}

	return nil
}

// ContainerIdentifierMultiError is an error wrapping multiple validation
// errors returned by ContainerIdentifier.ValidateAll() if the designated
// constraints aren't met.
type ContainerIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerIdentifierMultiError) AllErrors() []error { return m }

// ContainerIdentifierValidationError is the validation error returned by
// ContainerIdentifier.Validate if the designated constraints aren't met.
type ContainerIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerIdentifierValidationError) ErrorName() string {
	return "ContainerIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerIdentifierValidationError{}

// Validate checks the field values on ContainerSelector with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContainerSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerSelector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerSelectorMultiError, or nil if none found.
func (m *ContainerSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ContainerSelectorValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKubernetesNamespace()) < 1 {
		err := ContainerSelectorValidationError{
			field:  "KubernetesNamespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for KubernetesPodNamePrefix

	// no validation rules for KubernetesContainerName

	// no validation rules for KubernetesPodLabelSelector

	if len(errors) > 0 {
		return ContainerSelectorMultiError(errors)
	}

	return nil
}

// ContainerSelectorMultiError is an error wrapping multiple validation errors
// returned by ContainerSelector.ValidateAll() if the designated constraints
// aren't met.
type ContainerSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerSelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerSelectorMultiError) AllErrors() []error { return m }

// ContainerSelectorValidationError is the validation error returned by
// ContainerSelector.Validate if the designated constraints aren't met.
type ContainerSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerSelectorValidationError) ErrorName() string {
	return "ContainerSelectorValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerSelectorValidationError{}

// Validate checks the field values on LiveLogsOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LiveLogsOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiveLogsOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LiveLogsOptionsMultiError, or nil if none found.
func (m *LiveLogsOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *LiveLogsOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogPodStatus

	// no validation rules for LogTimestamps

	if len(errors) > 0 {
		return LiveLogsOptionsMultiError(errors)
	}

	return nil
}

// LiveLogsOptionsMultiError is an error wrapping multiple validation errors
// returned by LiveLogsOptions.ValidateAll() if the designated constraints
// aren't met.
type LiveLogsOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiveLogsOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiveLogsOptionsMultiError) AllErrors() []error { return m }

// LiveLogsOptionsValidationError is the validation error returned by
// LiveLogsOptions.Validate if the designated constraints aren't met.
type LiveLogsOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiveLogsOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiveLogsOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiveLogsOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiveLogsOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiveLogsOptionsValidationError) ErrorName() string { return "LiveLogsOptionsValidationError" }

// Error satisfies the builtin error interface
func (e LiveLogsOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiveLogsOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiveLogsOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiveLogsOptionsValidationError{}

// Validate checks the field values on TailLogsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TailLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TailLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TailLogsRequestMultiError, or nil if none found.
func (m *TailLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TailLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStartTime() == nil {
		err := TailLogsRequestValidationError{
			field:  "StartTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TailLogsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TailLogsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TailLogsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetLiveLogsOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TailLogsRequestValidationError{
					field:  "LiveLogsOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TailLogsRequestValidationError{
					field:  "LiveLogsOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiveLogsOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TailLogsRequestValidationError{
				field:  "LiveLogsOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Target.(type) {
	case *TailLogsRequest_Container:
		if v == nil {
			err := TailLogsRequestValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailLogsRequestValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailLogsRequestValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailLogsRequestValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TailLogsRequest_ContainerSelector:
		if v == nil {
			err := TailLogsRequestValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainerSelector()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailLogsRequestValidationError{
						field:  "ContainerSelector",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailLogsRequestValidationError{
						field:  "ContainerSelector",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainerSelector()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailLogsRequestValidationError{
					field:  "ContainerSelector",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TailLogsRequestMultiError(errors)
	}

	return nil
}

// TailLogsRequestMultiError is an error wrapping multiple validation errors
// returned by TailLogsRequest.ValidateAll() if the designated constraints
// aren't met.
type TailLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailLogsRequestMultiError) AllErrors() []error { return m }

// TailLogsRequestValidationError is the validation error returned by
// TailLogsRequest.Validate if the designated constraints aren't met.
type TailLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailLogsRequestValidationError) ErrorName() string { return "TailLogsRequestValidationError" }

// Error satisfies the builtin error interface
func (e TailLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailLogsRequestValidationError{}

// Validate checks the field values on LogLine with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogLine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogLine with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogLineMultiError, or nil if none found.
func (m *LogLine) ValidateAll() error {
	return m.validate(true)
}

func (m *LogLine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogLineValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogLineValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogLineValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	// no validation rules for Originator

	if len(errors) > 0 {
		return LogLineMultiError(errors)
	}

	return nil
}

// LogLineMultiError is an error wrapping multiple validation errors returned
// by LogLine.ValidateAll() if the designated constraints aren't met.
type LogLineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogLineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogLineMultiError) AllErrors() []error { return m }

// LogLineValidationError is the validation error returned by LogLine.Validate
// if the designated constraints aren't met.
type LogLineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogLineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogLineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogLineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogLineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogLineValidationError) ErrorName() string { return "LogLineValidationError" }

// Error satisfies the builtin error interface
func (e LogLineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogLine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogLineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogLineValidationError{}

// Validate checks the field values on LogLines with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogLines) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogLines with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogLinesMultiError, or nil
// if none found.
func (m *LogLines) ValidateAll() error {
	return m.validate(true)
}

func (m *LogLines) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerIndex

	if m.GetContainer() == nil {
		err := LogLinesValidationError{
			field:  "Container",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetContainer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogLinesValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogLinesValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogLinesValidationError{
				field:  "Container",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStructuredLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogLinesValidationError{
						field:  fmt.Sprintf("StructuredLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogLinesValidationError{
						field:  fmt.Sprintf("StructuredLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogLinesValidationError{
					field:  fmt.Sprintf("StructuredLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LogLinesMultiError(errors)
	}

	return nil
}

// LogLinesMultiError is an error wrapping multiple validation errors returned
// by LogLines.ValidateAll() if the designated constraints aren't met.
type LogLinesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogLinesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogLinesMultiError) AllErrors() []error { return m }

// LogLinesValidationError is the validation error returned by
// LogLines.Validate if the designated constraints aren't met.
type LogLinesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogLinesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogLinesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogLinesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogLinesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogLinesValidationError) ErrorName() string { return "LogLinesValidationError" }

// Error satisfies the builtin error interface
func (e LogLinesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogLines.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogLinesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogLinesValidationError{}

// Validate checks the field values on LogContainersList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LogContainersList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogContainersList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogContainersListMultiError, or nil if none found.
func (m *LogContainersList) ValidateAll() error {
	return m.validate(true)
}

func (m *LogContainersList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogContainersListValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogContainersListValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogContainersListValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LogContainersListMultiError(errors)
	}

	return nil
}

// LogContainersListMultiError is an error wrapping multiple validation errors
// returned by LogContainersList.ValidateAll() if the designated constraints
// aren't met.
type LogContainersListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogContainersListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogContainersListMultiError) AllErrors() []error { return m }

// LogContainersListValidationError is the validation error returned by
// LogContainersList.Validate if the designated constraints aren't met.
type LogContainersListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogContainersListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogContainersListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogContainersListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogContainersListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogContainersListValidationError) ErrorName() string {
	return "LogContainersListValidationError"
}

// Error satisfies the builtin error interface
func (e LogContainersListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogContainersList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogContainersListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogContainersListValidationError{}

// Validate checks the field values on LogLinesBatch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogLinesBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogLinesBatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogLinesBatchMultiError, or
// nil if none found.
func (m *LogLinesBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *LogLinesBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogLinesBatchValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogLinesBatchValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogLinesBatchValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LogLinesBatchMultiError(errors)
	}

	return nil
}

// LogLinesBatchMultiError is an error wrapping multiple validation errors
// returned by LogLinesBatch.ValidateAll() if the designated constraints
// aren't met.
type LogLinesBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogLinesBatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogLinesBatchMultiError) AllErrors() []error { return m }

// LogLinesBatchValidationError is the validation error returned by
// LogLinesBatch.Validate if the designated constraints aren't met.
type LogLinesBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogLinesBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogLinesBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogLinesBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogLinesBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogLinesBatchValidationError) ErrorName() string { return "LogLinesBatchValidationError" }

// Error satisfies the builtin error interface
func (e LogLinesBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogLinesBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogLinesBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogLinesBatchValidationError{}

// Validate checks the field values on TailLogsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TailLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TailLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TailLogsResponseMultiError, or nil if none found.
func (m *TailLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TailLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofRespPresent := false
	switch v := m.Resp.(type) {
	case *TailLogsResponse_Containers:
		if v == nil {
			err := TailLogsResponseValidationError{
				field:  "Resp",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofRespPresent = true

		if m.GetContainers() == nil {
			err := TailLogsResponseValidationError{
				field:  "Containers",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailLogsResponseValidationError{
						field:  "Containers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailLogsResponseValidationError{
						field:  "Containers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailLogsResponseValidationError{
					field:  "Containers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TailLogsResponse_LogLinesBatch:
		if v == nil {
			err := TailLogsResponseValidationError{
				field:  "Resp",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofRespPresent = true

		if m.GetLogLinesBatch() == nil {
			err := TailLogsResponseValidationError{
				field:  "LogLinesBatch",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLogLinesBatch()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailLogsResponseValidationError{
						field:  "LogLinesBatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailLogsResponseValidationError{
						field:  "LogLinesBatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLogLinesBatch()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailLogsResponseValidationError{
					field:  "LogLinesBatch",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofRespPresent {
		err := TailLogsResponseValidationError{
			field:  "Resp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TailLogsResponseMultiError(errors)
	}

	return nil
}

// TailLogsResponseMultiError is an error wrapping multiple validation errors
// returned by TailLogsResponse.ValidateAll() if the designated constraints
// aren't met.
type TailLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailLogsResponseMultiError) AllErrors() []error { return m }

// TailLogsResponseValidationError is the validation error returned by
// TailLogsResponse.Validate if the designated constraints aren't met.
type TailLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailLogsResponseValidationError) ErrorName() string { return "TailLogsResponseValidationError" }

// Error satisfies the builtin error interface
func (e TailLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailLogsResponseValidationError{}

// Validate checks the field values on TailTaskExecutionLogsResponse_Logs with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TailTaskExecutionLogsResponse_Logs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TailTaskExecutionLogsResponse_Logs
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TailTaskExecutionLogsResponse_LogsMultiError, or nil if none found.
func (m *TailTaskExecutionLogsResponse_Logs) ValidateAll() error {
	return m.validate(true)
}

func (m *TailTaskExecutionLogsResponse_Logs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStructuredLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailTaskExecutionLogsResponse_LogsValidationError{
						field:  fmt.Sprintf("StructuredLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailTaskExecutionLogsResponse_LogsValidationError{
						field:  fmt.Sprintf("StructuredLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailTaskExecutionLogsResponse_LogsValidationError{
					field:  fmt.Sprintf("StructuredLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TailTaskExecutionLogsResponse_LogsMultiError(errors)
	}

	return nil
}

// TailTaskExecutionLogsResponse_LogsMultiError is an error wrapping multiple
// validation errors returned by
// TailTaskExecutionLogsResponse_Logs.ValidateAll() if the designated
// constraints aren't met.
type TailTaskExecutionLogsResponse_LogsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailTaskExecutionLogsResponse_LogsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailTaskExecutionLogsResponse_LogsMultiError) AllErrors() []error { return m }

// TailTaskExecutionLogsResponse_LogsValidationError is the validation error
// returned by TailTaskExecutionLogsResponse_Logs.Validate if the designated
// constraints aren't met.
type TailTaskExecutionLogsResponse_LogsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailTaskExecutionLogsResponse_LogsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailTaskExecutionLogsResponse_LogsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailTaskExecutionLogsResponse_LogsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailTaskExecutionLogsResponse_LogsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailTaskExecutionLogsResponse_LogsValidationError) ErrorName() string {
	return "TailTaskExecutionLogsResponse_LogsValidationError"
}

// Error satisfies the builtin error interface
func (e TailTaskExecutionLogsResponse_LogsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailTaskExecutionLogsResponse_Logs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailTaskExecutionLogsResponse_LogsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailTaskExecutionLogsResponse_LogsValidationError{}
