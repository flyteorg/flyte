// Code generated by mockery. DO NOT EDIT.

package imagebuilder

import (
	context "context"

	imagebuilder "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/imagebuilder"
	mock "github.com/stretchr/testify/mock"
)

// ImageServiceServer is an autogenerated mock type for the ImageServiceServer type
type ImageServiceServer struct {
	mock.Mock
}

type ImageServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ImageServiceServer) EXPECT() *ImageServiceServer_Expecter {
	return &ImageServiceServer_Expecter{mock: &_m.Mock}
}

// GetImage provides a mock function with given fields: _a0, _a1
func (_m *ImageServiceServer) GetImage(_a0 context.Context, _a1 *imagebuilder.GetImageRequest) (*imagebuilder.GetImageResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *imagebuilder.GetImageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImageRequest) (*imagebuilder.GetImageResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.GetImageRequest) *imagebuilder.GetImageResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.GetImageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.GetImageRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageServiceServer_GetImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImage'
type ImageServiceServer_GetImage_Call struct {
	*mock.Call
}

// GetImage is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *imagebuilder.GetImageRequest
func (_e *ImageServiceServer_Expecter) GetImage(_a0 interface{}, _a1 interface{}) *ImageServiceServer_GetImage_Call {
	return &ImageServiceServer_GetImage_Call{Call: _e.mock.On("GetImage", _a0, _a1)}
}

func (_c *ImageServiceServer_GetImage_Call) Run(run func(_a0 context.Context, _a1 *imagebuilder.GetImageRequest)) *ImageServiceServer_GetImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*imagebuilder.GetImageRequest))
	})
	return _c
}

func (_c *ImageServiceServer_GetImage_Call) Return(_a0 *imagebuilder.GetImageResponse, _a1 error) *ImageServiceServer_GetImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ImageServiceServer_GetImage_Call) RunAndReturn(run func(context.Context, *imagebuilder.GetImageRequest) (*imagebuilder.GetImageResponse, error)) *ImageServiceServer_GetImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewImageServiceServer creates a new instance of ImageServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImageServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImageServiceServer {
	mock := &ImageServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
