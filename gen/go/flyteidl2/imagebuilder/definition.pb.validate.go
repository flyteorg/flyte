// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/imagebuilder/definition.proto

package imagebuilder

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ImageIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImageIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImageIdentifierMultiError, or nil if none found.
func (m *ImageIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ImageIdentifierMultiError(errors)
	}

	return nil
}

// ImageIdentifierMultiError is an error wrapping multiple validation errors
// returned by ImageIdentifier.ValidateAll() if the designated constraints
// aren't met.
type ImageIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageIdentifierMultiError) AllErrors() []error { return m }

// ImageIdentifierValidationError is the validation error returned by
// ImageIdentifier.Validate if the designated constraints aren't met.
type ImageIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageIdentifierValidationError) ErrorName() string { return "ImageIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e ImageIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageIdentifierValidationError{}

// Validate checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ImageMultiError, or nil if none found.
func (m *Image) ValidateAll() error {
	return m.validate(true)
}

func (m *Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImageValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImageValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Fqin

	if len(errors) > 0 {
		return ImageMultiError(errors)
	}

	return nil
}

// ImageMultiError is an error wrapping multiple validation errors returned by
// Image.ValidateAll() if the designated constraints aren't met.
type ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageMultiError) AllErrors() []error { return m }

// ImageValidationError is the validation error returned by Image.Validate if
// the designated constraints aren't met.
type ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageValidationError) ErrorName() string { return "ImageValidationError" }

// Error satisfies the builtin error interface
func (e ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageValidationError{}

// Validate checks the field values on AptPackages with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AptPackages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AptPackages with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AptPackagesMultiError, or
// nil if none found.
func (m *AptPackages) ValidateAll() error {
	return m.validate(true)
}

func (m *AptPackages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecretMounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AptPackagesValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AptPackagesValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AptPackagesValidationError{
					field:  fmt.Sprintf("SecretMounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AptPackagesMultiError(errors)
	}

	return nil
}

// AptPackagesMultiError is an error wrapping multiple validation errors
// returned by AptPackages.ValidateAll() if the designated constraints aren't met.
type AptPackagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AptPackagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AptPackagesMultiError) AllErrors() []error { return m }

// AptPackagesValidationError is the validation error returned by
// AptPackages.Validate if the designated constraints aren't met.
type AptPackagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AptPackagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AptPackagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AptPackagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AptPackagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AptPackagesValidationError) ErrorName() string { return "AptPackagesValidationError" }

// Error satisfies the builtin error interface
func (e AptPackagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAptPackages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AptPackagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AptPackagesValidationError{}

// Validate checks the field values on PipOptions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipOptionsMultiError, or
// nil if none found.
func (m *PipOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *PipOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IndexUrl

	// no validation rules for Pre

	// no validation rules for ExtraArgs

	if len(errors) > 0 {
		return PipOptionsMultiError(errors)
	}

	return nil
}

// PipOptionsMultiError is an error wrapping multiple validation errors
// returned by PipOptions.ValidateAll() if the designated constraints aren't met.
type PipOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipOptionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipOptionsMultiError) AllErrors() []error { return m }

// PipOptionsValidationError is the validation error returned by
// PipOptions.Validate if the designated constraints aren't met.
type PipOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipOptionsValidationError) ErrorName() string { return "PipOptionsValidationError" }

// Error satisfies the builtin error interface
func (e PipOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipOptionsValidationError{}

// Validate checks the field values on PipPackages with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipPackages) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipPackages with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipPackagesMultiError, or
// nil if none found.
func (m *PipPackages) ValidateAll() error {
	return m.validate(true)
}

func (m *PipPackages) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipPackagesValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipPackagesValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipPackagesValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSecretMounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipPackagesValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipPackagesValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipPackagesValidationError{
					field:  fmt.Sprintf("SecretMounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipPackagesMultiError(errors)
	}

	return nil
}

// PipPackagesMultiError is an error wrapping multiple validation errors
// returned by PipPackages.ValidateAll() if the designated constraints aren't met.
type PipPackagesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipPackagesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipPackagesMultiError) AllErrors() []error { return m }

// PipPackagesValidationError is the validation error returned by
// PipPackages.Validate if the designated constraints aren't met.
type PipPackagesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipPackagesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipPackagesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipPackagesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipPackagesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipPackagesValidationError) ErrorName() string { return "PipPackagesValidationError" }

// Error satisfies the builtin error interface
func (e PipPackagesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipPackages.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipPackagesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipPackagesValidationError{}

// Validate checks the field values on Requirements with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Requirements) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Requirements with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RequirementsMultiError, or
// nil if none found.
func (m *Requirements) ValidateAll() error {
	return m.validate(true)
}

func (m *Requirements) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for File

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequirementsValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequirementsValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequirementsValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSecretMounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RequirementsValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RequirementsValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RequirementsValidationError{
					field:  fmt.Sprintf("SecretMounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RequirementsMultiError(errors)
	}

	return nil
}

// RequirementsMultiError is an error wrapping multiple validation errors
// returned by Requirements.ValidateAll() if the designated constraints aren't met.
type RequirementsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequirementsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequirementsMultiError) AllErrors() []error { return m }

// RequirementsValidationError is the validation error returned by
// Requirements.Validate if the designated constraints aren't met.
type RequirementsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequirementsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequirementsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequirementsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequirementsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequirementsValidationError) ErrorName() string { return "RequirementsValidationError" }

// Error satisfies the builtin error interface
func (e RequirementsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequirements.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequirementsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequirementsValidationError{}

// Validate checks the field values on PythonWheels with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PythonWheels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PythonWheels with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PythonWheelsMultiError, or
// nil if none found.
func (m *PythonWheels) ValidateAll() error {
	return m.validate(true)
}

func (m *PythonWheels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dir

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PythonWheelsValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PythonWheelsValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PythonWheelsValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSecretMounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PythonWheelsValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PythonWheelsValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PythonWheelsValidationError{
					field:  fmt.Sprintf("SecretMounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PythonWheelsMultiError(errors)
	}

	return nil
}

// PythonWheelsMultiError is an error wrapping multiple validation errors
// returned by PythonWheels.ValidateAll() if the designated constraints aren't met.
type PythonWheelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PythonWheelsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PythonWheelsMultiError) AllErrors() []error { return m }

// PythonWheelsValidationError is the validation error returned by
// PythonWheels.Validate if the designated constraints aren't met.
type PythonWheelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PythonWheelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PythonWheelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PythonWheelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PythonWheelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PythonWheelsValidationError) ErrorName() string { return "PythonWheelsValidationError" }

// Error satisfies the builtin error interface
func (e PythonWheelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPythonWheels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PythonWheelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PythonWheelsValidationError{}

// Validate checks the field values on UVProject with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UVProject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UVProject with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UVProjectMultiError, or nil
// if none found.
func (m *UVProject) ValidateAll() error {
	return m.validate(true)
}

func (m *UVProject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pyproject

	// no validation rules for Uvlock

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UVProjectValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UVProjectValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UVProjectValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSecretMounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UVProjectValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UVProjectValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UVProjectValidationError{
					field:  fmt.Sprintf("SecretMounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UVProjectMultiError(errors)
	}

	return nil
}

// UVProjectMultiError is an error wrapping multiple validation errors returned
// by UVProject.ValidateAll() if the designated constraints aren't met.
type UVProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UVProjectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UVProjectMultiError) AllErrors() []error { return m }

// UVProjectValidationError is the validation error returned by
// UVProject.Validate if the designated constraints aren't met.
type UVProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UVProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UVProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UVProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UVProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UVProjectValidationError) ErrorName() string { return "UVProjectValidationError" }

// Error satisfies the builtin error interface
func (e UVProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUVProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UVProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UVProjectValidationError{}

// Validate checks the field values on Commands with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Commands) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Commands with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommandsMultiError, or nil
// if none found.
func (m *Commands) ValidateAll() error {
	return m.validate(true)
}

func (m *Commands) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecretMounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommandsValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommandsValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommandsValidationError{
					field:  fmt.Sprintf("SecretMounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CommandsMultiError(errors)
	}

	return nil
}

// CommandsMultiError is an error wrapping multiple validation errors returned
// by Commands.ValidateAll() if the designated constraints aren't met.
type CommandsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommandsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommandsMultiError) AllErrors() []error { return m }

// CommandsValidationError is the validation error returned by
// Commands.Validate if the designated constraints aren't met.
type CommandsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommandsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommandsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommandsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommandsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommandsValidationError) ErrorName() string { return "CommandsValidationError" }

// Error satisfies the builtin error interface
func (e CommandsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommands.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommandsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommandsValidationError{}

// Validate checks the field values on WorkDir with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkDir) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkDir with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WorkDirMultiError, or nil if none found.
func (m *WorkDir) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkDir) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Workdir

	if len(errors) > 0 {
		return WorkDirMultiError(errors)
	}

	return nil
}

// WorkDirMultiError is an error wrapping multiple validation errors returned
// by WorkDir.ValidateAll() if the designated constraints aren't met.
type WorkDirMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkDirMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkDirMultiError) AllErrors() []error { return m }

// WorkDirValidationError is the validation error returned by WorkDir.Validate
// if the designated constraints aren't met.
type WorkDirValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkDirValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkDirValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkDirValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkDirValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkDirValidationError) ErrorName() string { return "WorkDirValidationError" }

// Error satisfies the builtin error interface
func (e WorkDirValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkDir.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkDirValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkDirValidationError{}

// Validate checks the field values on CopyConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CopyConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CopyConfigMultiError, or
// nil if none found.
func (m *CopyConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Src

	// no validation rules for Dst

	if len(errors) > 0 {
		return CopyConfigMultiError(errors)
	}

	return nil
}

// CopyConfigMultiError is an error wrapping multiple validation errors
// returned by CopyConfig.ValidateAll() if the designated constraints aren't met.
type CopyConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyConfigMultiError) AllErrors() []error { return m }

// CopyConfigValidationError is the validation error returned by
// CopyConfig.Validate if the designated constraints aren't met.
type CopyConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyConfigValidationError) ErrorName() string { return "CopyConfigValidationError" }

// Error satisfies the builtin error interface
func (e CopyConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyConfigValidationError{}

// Validate checks the field values on Env with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Env) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Env with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EnvMultiError, or nil if none found.
func (m *Env) ValidateAll() error {
	return m.validate(true)
}

func (m *Env) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvVariables

	if len(errors) > 0 {
		return EnvMultiError(errors)
	}

	return nil
}

// EnvMultiError is an error wrapping multiple validation errors returned by
// Env.ValidateAll() if the designated constraints aren't met.
type EnvMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnvMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnvMultiError) AllErrors() []error { return m }

// EnvValidationError is the validation error returned by Env.Validate if the
// designated constraints aren't met.
type EnvValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvValidationError) ErrorName() string { return "EnvValidationError" }

// Error satisfies the builtin error interface
func (e EnvValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnv.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvValidationError{}

// Validate checks the field values on PoetryProject with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PoetryProject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PoetryProject with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PoetryProjectMultiError, or
// nil if none found.
func (m *PoetryProject) ValidateAll() error {
	return m.validate(true)
}

func (m *PoetryProject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pyproject

	// no validation rules for PoetryLock

	// no validation rules for ExtraArgs

	for idx, item := range m.GetSecretMounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PoetryProjectValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PoetryProjectValidationError{
						field:  fmt.Sprintf("SecretMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PoetryProjectValidationError{
					field:  fmt.Sprintf("SecretMounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PoetryProjectMultiError(errors)
	}

	return nil
}

// PoetryProjectMultiError is an error wrapping multiple validation errors
// returned by PoetryProject.ValidateAll() if the designated constraints
// aren't met.
type PoetryProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PoetryProjectMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PoetryProjectMultiError) AllErrors() []error { return m }

// PoetryProjectValidationError is the validation error returned by
// PoetryProject.Validate if the designated constraints aren't met.
type PoetryProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PoetryProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PoetryProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PoetryProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PoetryProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PoetryProjectValidationError) ErrorName() string { return "PoetryProjectValidationError" }

// Error satisfies the builtin error interface
func (e PoetryProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoetryProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PoetryProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PoetryProjectValidationError{}

// Validate checks the field values on Layer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Layer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Layer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LayerMultiError, or nil if none found.
func (m *Layer) ValidateAll() error {
	return m.validate(true)
}

func (m *Layer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Layer.(type) {
	case *Layer_AptPackages:
		if v == nil {
			err := LayerValidationError{
				field:  "Layer",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAptPackages()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "AptPackages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "AptPackages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAptPackages()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LayerValidationError{
					field:  "AptPackages",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Layer_PipPackages:
		if v == nil {
			err := LayerValidationError{
				field:  "Layer",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPipPackages()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "PipPackages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "PipPackages",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPipPackages()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LayerValidationError{
					field:  "PipPackages",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Layer_Commands:
		if v == nil {
			err := LayerValidationError{
				field:  "Layer",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCommands()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "Commands",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "Commands",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCommands()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LayerValidationError{
					field:  "Commands",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Layer_Requirements:
		if v == nil {
			err := LayerValidationError{
				field:  "Layer",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequirements()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "Requirements",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "Requirements",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequirements()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LayerValidationError{
					field:  "Requirements",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Layer_PythonWheels:
		if v == nil {
			err := LayerValidationError{
				field:  "Layer",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPythonWheels()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "PythonWheels",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "PythonWheels",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPythonWheels()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LayerValidationError{
					field:  "PythonWheels",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Layer_Workdir:
		if v == nil {
			err := LayerValidationError{
				field:  "Layer",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorkdir()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "Workdir",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "Workdir",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorkdir()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LayerValidationError{
					field:  "Workdir",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Layer_CopyConfig:
		if v == nil {
			err := LayerValidationError{
				field:  "Layer",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCopyConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "CopyConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "CopyConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCopyConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LayerValidationError{
					field:  "CopyConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Layer_UvProject:
		if v == nil {
			err := LayerValidationError{
				field:  "Layer",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUvProject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "UvProject",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "UvProject",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUvProject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LayerValidationError{
					field:  "UvProject",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Layer_Env:
		if v == nil {
			err := LayerValidationError{
				field:  "Layer",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEnv()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "Env",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "Env",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnv()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LayerValidationError{
					field:  "Env",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Layer_PoetryProject:
		if v == nil {
			err := LayerValidationError{
				field:  "Layer",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPoetryProject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "PoetryProject",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LayerValidationError{
						field:  "PoetryProject",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPoetryProject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LayerValidationError{
					field:  "PoetryProject",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LayerMultiError(errors)
	}

	return nil
}

// LayerMultiError is an error wrapping multiple validation errors returned by
// Layer.ValidateAll() if the designated constraints aren't met.
type LayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LayerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LayerMultiError) AllErrors() []error { return m }

// LayerValidationError is the validation error returned by Layer.Validate if
// the designated constraints aren't met.
type LayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LayerValidationError) ErrorName() string { return "LayerValidationError" }

// Error satisfies the builtin error interface
func (e LayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLayer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LayerValidationError{}

// Validate checks the field values on ImageSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageSpecMultiError, or nil
// if none found.
func (m *ImageSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BaseImage

	// no validation rules for PythonVersion

	for idx, item := range m.GetLayers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImageSpecValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImageSpecValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImageSpecValidationError{
					field:  fmt.Sprintf("Layers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImageSpecMultiError(errors)
	}

	return nil
}

// ImageSpecMultiError is an error wrapping multiple validation errors returned
// by ImageSpec.ValidateAll() if the designated constraints aren't met.
type ImageSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageSpecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageSpecMultiError) AllErrors() []error { return m }

// ImageSpecValidationError is the validation error returned by
// ImageSpec.Validate if the designated constraints aren't met.
type ImageSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageSpecValidationError) ErrorName() string { return "ImageSpecValidationError" }

// Error satisfies the builtin error interface
func (e ImageSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageSpecValidationError{}
