// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl2/imagebuilder/definition.proto

package imagebuilder

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	core "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ImageIdentifier is how to identify an image
type ImageIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ImageIdentifier) Reset() {
	*x = ImageIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageIdentifier) ProtoMessage() {}

func (x *ImageIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageIdentifier.ProtoReflect.Descriptor instead.
func (*ImageIdentifier) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{0}
}

func (x *ImageIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Simple container to surface if image exists
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ImageIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Fully qualified, pullable, image name
	Fqin string `protobuf:"bytes,2,opt,name=fqin,proto3" json:"fqin,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{1}
}

func (x *Image) GetId() *ImageIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Image) GetFqin() string {
	if x != nil {
		return x.Fqin
	}
	return ""
}

// AptPackages defines a list of apt packages to install in the image.
type AptPackages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of apt packages to install
	Packages     []string       `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`
	SecretMounts []*core.Secret `protobuf:"bytes,2,rep,name=secret_mounts,json=secretMounts,proto3" json:"secret_mounts,omitempty"`
}

func (x *AptPackages) Reset() {
	*x = AptPackages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AptPackages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AptPackages) ProtoMessage() {}

func (x *AptPackages) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AptPackages.ProtoReflect.Descriptor instead.
func (*AptPackages) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{2}
}

func (x *AptPackages) GetPackages() []string {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *AptPackages) GetSecretMounts() []*core.Secret {
	if x != nil {
		return x.SecretMounts
	}
	return nil
}

// PipOptions defines options for pip packages to install in the image.
type PipOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional index URL for pip packages
	IndexUrl string `protobuf:"bytes,2,opt,name=index_url,json=indexUrl,proto3" json:"index_url,omitempty"`
	// Optional list of extra index URLs for pip packages
	ExtraIndexUrls []string `protobuf:"bytes,3,rep,name=extra_index_urls,json=extraIndexUrls,proto3" json:"extra_index_urls,omitempty"`
	// Optional pre-release flag for pip packages
	Pre bool `protobuf:"varint,4,opt,name=pre,proto3" json:"pre,omitempty"`
	// Optional extra arguments for pip install command
	ExtraArgs string `protobuf:"bytes,5,opt,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty"`
}

func (x *PipOptions) Reset() {
	*x = PipOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipOptions) ProtoMessage() {}

func (x *PipOptions) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipOptions.ProtoReflect.Descriptor instead.
func (*PipOptions) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{3}
}

func (x *PipOptions) GetIndexUrl() string {
	if x != nil {
		return x.IndexUrl
	}
	return ""
}

func (x *PipOptions) GetExtraIndexUrls() []string {
	if x != nil {
		return x.ExtraIndexUrls
	}
	return nil
}

func (x *PipOptions) GetPre() bool {
	if x != nil {
		return x.Pre
	}
	return false
}

func (x *PipOptions) GetExtraArgs() string {
	if x != nil {
		return x.ExtraArgs
	}
	return ""
}

// PipPackages defines a list of pip packages to install in the image.
type PipPackages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of pip packages to install
	Packages []string `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`
	// Options for pip packages.
	Options      *PipOptions    `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	SecretMounts []*core.Secret `protobuf:"bytes,3,rep,name=secret_mounts,json=secretMounts,proto3" json:"secret_mounts,omitempty"`
}

func (x *PipPackages) Reset() {
	*x = PipPackages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipPackages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipPackages) ProtoMessage() {}

func (x *PipPackages) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipPackages.ProtoReflect.Descriptor instead.
func (*PipPackages) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{4}
}

func (x *PipPackages) GetPackages() []string {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *PipPackages) GetOptions() *PipOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PipPackages) GetSecretMounts() []*core.Secret {
	if x != nil {
		return x.SecretMounts
	}
	return nil
}

// Requirements defines a python requirements file to use in the image.
type Requirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requirements file to use.
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// Options for pip packages.
	Options      *PipOptions    `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	SecretMounts []*core.Secret `protobuf:"bytes,3,rep,name=secret_mounts,json=secretMounts,proto3" json:"secret_mounts,omitempty"`
}

func (x *Requirements) Reset() {
	*x = Requirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Requirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Requirements) ProtoMessage() {}

func (x *Requirements) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Requirements.ProtoReflect.Descriptor instead.
func (*Requirements) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{5}
}

func (x *Requirements) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Requirements) GetOptions() *PipOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Requirements) GetSecretMounts() []*core.Secret {
	if x != nil {
		return x.SecretMounts
	}
	return nil
}

type PythonWheels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The directory containing Python wheel files.
	Dir string `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
	// Options for pip packages.
	Options      *PipOptions    `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	SecretMounts []*core.Secret `protobuf:"bytes,3,rep,name=secret_mounts,json=secretMounts,proto3" json:"secret_mounts,omitempty"`
}

func (x *PythonWheels) Reset() {
	*x = PythonWheels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonWheels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonWheels) ProtoMessage() {}

func (x *PythonWheels) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonWheels.ProtoReflect.Descriptor instead.
func (*PythonWheels) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{6}
}

func (x *PythonWheels) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *PythonWheels) GetOptions() *PipOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PythonWheels) GetSecretMounts() []*core.Secret {
	if x != nil {
		return x.SecretMounts
	}
	return nil
}

// UVProject defines a UV project configuration, which includes
// a pyproject.toml file and a uvlock file.
type UVProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pyproject string `protobuf:"bytes,1,opt,name=pyproject,proto3" json:"pyproject,omitempty"`
	Uvlock    string `protobuf:"bytes,2,opt,name=uvlock,proto3" json:"uvlock,omitempty"`
	// Options for pip packages.
	Options      *PipOptions    `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	SecretMounts []*core.Secret `protobuf:"bytes,4,rep,name=secret_mounts,json=secretMounts,proto3" json:"secret_mounts,omitempty"`
}

func (x *UVProject) Reset() {
	*x = UVProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UVProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UVProject) ProtoMessage() {}

func (x *UVProject) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UVProject.ProtoReflect.Descriptor instead.
func (*UVProject) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{7}
}

func (x *UVProject) GetPyproject() string {
	if x != nil {
		return x.Pyproject
	}
	return ""
}

func (x *UVProject) GetUvlock() string {
	if x != nil {
		return x.Uvlock
	}
	return ""
}

func (x *UVProject) GetOptions() *PipOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *UVProject) GetSecretMounts() []*core.Secret {
	if x != nil {
		return x.SecretMounts
	}
	return nil
}

// Commands defines a list of commands to run in the image.
type Commands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The command to run.
	Cmd          []string       `protobuf:"bytes,2,rep,name=cmd,proto3" json:"cmd,omitempty"`
	SecretMounts []*core.Secret `protobuf:"bytes,3,rep,name=secret_mounts,json=secretMounts,proto3" json:"secret_mounts,omitempty"`
}

func (x *Commands) Reset() {
	*x = Commands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commands) ProtoMessage() {}

func (x *Commands) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commands.ProtoReflect.Descriptor instead.
func (*Commands) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{8}
}

func (x *Commands) GetCmd() []string {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *Commands) GetSecretMounts() []*core.Secret {
	if x != nil {
		return x.SecretMounts
	}
	return nil
}

// WorkDir defines the working directory to set in the image.
type WorkDir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The working directory to use.
	Workdir string `protobuf:"bytes,1,opt,name=workdir,proto3" json:"workdir,omitempty"`
}

func (x *WorkDir) Reset() {
	*x = WorkDir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkDir) ProtoMessage() {}

func (x *WorkDir) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkDir.ProtoReflect.Descriptor instead.
func (*WorkDir) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{9}
}

func (x *WorkDir) GetWorkdir() string {
	if x != nil {
		return x.Workdir
	}
	return ""
}

// CopyConfig defines a configuration for copying files/directories into the image.
type CopyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source directory to copy from.
	Src string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	// The destination directory to copy to.
	Dst string `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (x *CopyConfig) Reset() {
	*x = CopyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyConfig) ProtoMessage() {}

func (x *CopyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyConfig.ProtoReflect.Descriptor instead.
func (*CopyConfig) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{10}
}

func (x *CopyConfig) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *CopyConfig) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

// Env defines environment to set in the image.
type Env struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Environment variables to set in the image.
	EnvVariables map[string]string `protobuf:"bytes,1,rep,name=env_variables,json=envVariables,proto3" json:"env_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Env) Reset() {
	*x = Env{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Env) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Env) ProtoMessage() {}

func (x *Env) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Env.ProtoReflect.Descriptor instead.
func (*Env) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{11}
}

func (x *Env) GetEnvVariables() map[string]string {
	if x != nil {
		return x.EnvVariables
	}
	return nil
}

// Layer defines a layer in the image, which can be one of several types.
type Layer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Layer:
	//
	//	*Layer_AptPackages
	//	*Layer_PipPackages
	//	*Layer_Commands
	//	*Layer_Requirements
	//	*Layer_PythonWheels
	//	*Layer_Workdir
	//	*Layer_CopyConfig
	//	*Layer_UvProject
	//	*Layer_Env
	Layer isLayer_Layer `protobuf_oneof:"layer"`
}

func (x *Layer) Reset() {
	*x = Layer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer) ProtoMessage() {}

func (x *Layer) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer.ProtoReflect.Descriptor instead.
func (*Layer) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{12}
}

func (m *Layer) GetLayer() isLayer_Layer {
	if m != nil {
		return m.Layer
	}
	return nil
}

func (x *Layer) GetAptPackages() *AptPackages {
	if x, ok := x.GetLayer().(*Layer_AptPackages); ok {
		return x.AptPackages
	}
	return nil
}

func (x *Layer) GetPipPackages() *PipPackages {
	if x, ok := x.GetLayer().(*Layer_PipPackages); ok {
		return x.PipPackages
	}
	return nil
}

func (x *Layer) GetCommands() *Commands {
	if x, ok := x.GetLayer().(*Layer_Commands); ok {
		return x.Commands
	}
	return nil
}

func (x *Layer) GetRequirements() *Requirements {
	if x, ok := x.GetLayer().(*Layer_Requirements); ok {
		return x.Requirements
	}
	return nil
}

func (x *Layer) GetPythonWheels() *PythonWheels {
	if x, ok := x.GetLayer().(*Layer_PythonWheels); ok {
		return x.PythonWheels
	}
	return nil
}

func (x *Layer) GetWorkdir() *WorkDir {
	if x, ok := x.GetLayer().(*Layer_Workdir); ok {
		return x.Workdir
	}
	return nil
}

func (x *Layer) GetCopyConfig() *CopyConfig {
	if x, ok := x.GetLayer().(*Layer_CopyConfig); ok {
		return x.CopyConfig
	}
	return nil
}

func (x *Layer) GetUvProject() *UVProject {
	if x, ok := x.GetLayer().(*Layer_UvProject); ok {
		return x.UvProject
	}
	return nil
}

func (x *Layer) GetEnv() *Env {
	if x, ok := x.GetLayer().(*Layer_Env); ok {
		return x.Env
	}
	return nil
}

type isLayer_Layer interface {
	isLayer_Layer()
}

type Layer_AptPackages struct {
	// Apt packages to install.
	AptPackages *AptPackages `protobuf:"bytes,1,opt,name=apt_packages,json=aptPackages,proto3,oneof"`
}

type Layer_PipPackages struct {
	// Python packages to install.
	PipPackages *PipPackages `protobuf:"bytes,2,opt,name=pip_packages,json=pipPackages,proto3,oneof"`
}

type Layer_Commands struct {
	// Custom command to run.
	Commands *Commands `protobuf:"bytes,3,opt,name=commands,proto3,oneof"`
}

type Layer_Requirements struct {
	// Requirements file to use.
	Requirements *Requirements `protobuf:"bytes,4,opt,name=requirements,proto3,oneof"`
}

type Layer_PythonWheels struct {
	// Python wheel file to use.
	PythonWheels *PythonWheels `protobuf:"bytes,5,opt,name=python_wheels,json=pythonWheels,proto3,oneof"`
}

type Layer_Workdir struct {
	// Working directory to set.
	Workdir *WorkDir `protobuf:"bytes,6,opt,name=workdir,proto3,oneof"`
}

type Layer_CopyConfig struct {
	// Copy files/directories into the image.
	CopyConfig *CopyConfig `protobuf:"bytes,7,opt,name=copy_config,json=copyConfig,proto3,oneof"`
}

type Layer_UvProject struct {
	// UV project configuration.
	UvProject *UVProject `protobuf:"bytes,8,opt,name=uv_project,json=uvProject,proto3,oneof"`
}

type Layer_Env struct {
	// Environment variables to set.
	Env *Env `protobuf:"bytes,9,opt,name=env,proto3,oneof"`
}

func (*Layer_AptPackages) isLayer_Layer() {}

func (*Layer_PipPackages) isLayer_Layer() {}

func (*Layer_Commands) isLayer_Layer() {}

func (*Layer_Requirements) isLayer_Layer() {}

func (*Layer_PythonWheels) isLayer_Layer() {}

func (*Layer_Workdir) isLayer_Layer() {}

func (*Layer_CopyConfig) isLayer_Layer() {}

func (*Layer_UvProject) isLayer_Layer() {}

func (*Layer_Env) isLayer_Layer() {}

// Image definition defined in the sdk.
type ImageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the base image.
	BaseImage string `protobuf:"bytes,1,opt,name=base_image,json=baseImage,proto3" json:"base_image,omitempty"`
	// python version to use in the image.
	PythonVersion string `protobuf:"bytes,2,opt,name=python_version,json=pythonVersion,proto3" json:"python_version,omitempty"`
	// List of layers to apply to the image.
	Layers []*Layer `protobuf:"bytes,3,rep,name=layers,proto3" json:"layers,omitempty"`
	// List of platforms to build the image for.
	Platform []string `protobuf:"bytes,4,rep,name=platform,proto3" json:"platform,omitempty"`
}

func (x *ImageSpec) Reset() {
	*x = ImageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSpec) ProtoMessage() {}

func (x *ImageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_imagebuilder_definition_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSpec.ProtoReflect.Descriptor instead.
func (*ImageSpec) Descriptor() ([]byte, []int) {
	return file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP(), []int{13}
}

func (x *ImageSpec) GetBaseImage() string {
	if x != nil {
		return x.BaseImage
	}
	return ""
}

func (x *ImageSpec) GetPythonVersion() string {
	if x != nil {
		return x.PythonVersion
	}
	return ""
}

func (x *ImageSpec) GetLayers() []*Layer {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *ImageSpec) GetPlatform() []string {
	if x != nil {
		return x.Platform
	}
	return nil
}

var File_flyteidl2_imagebuilder_definition_proto protoreflect.FileDescriptor

var file_flyteidl2_imagebuilder_definition_proto_rawDesc = []byte{
	0x0a, 0x27, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a,
	0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x71, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x71, 0x69, 0x6e, 0x22, 0x66, 0x0a, 0x0b, 0x41, 0x70, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0a,
	0x50, 0x69, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x72, 0x6c,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x70, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72,
	0x67, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x0b, 0x50, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3c,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x50, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x3c, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x09, 0x55, 0x56, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x79, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x79, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x76, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x76, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x22, 0x23, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x22, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x03, 0x45, 0x6e, 0x76,
	0x12, 0x52, 0x0a, 0x0d, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x2e, 0x45, 0x6e, 0x76, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf6, 0x04, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x0c, 0x61, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x70, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x69, 0x70,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x4b, 0x0a, 0x0d, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e,
	0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x07,
	0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x72, 0x48, 0x00,
	0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x6f, 0x70,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x42, 0x0a, 0x0a, 0x75, 0x76, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x56,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x09, 0x75, 0x76, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x48, 0x00,
	0x52, 0x03, 0x65, 0x6e, 0x76, 0x42, 0x07, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xa4,
	0x01, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0xe4, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x42, 0x0f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0xa2, 0x02, 0x03, 0x46, 0x49, 0x58, 0xaa, 0x02, 0x16, 0x46, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0xca, 0x02, 0x16, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x5c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0xe2, 0x02, 0x22,
	0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x17, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x3a, 0x3a,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl2_imagebuilder_definition_proto_rawDescOnce sync.Once
	file_flyteidl2_imagebuilder_definition_proto_rawDescData = file_flyteidl2_imagebuilder_definition_proto_rawDesc
)

func file_flyteidl2_imagebuilder_definition_proto_rawDescGZIP() []byte {
	file_flyteidl2_imagebuilder_definition_proto_rawDescOnce.Do(func() {
		file_flyteidl2_imagebuilder_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl2_imagebuilder_definition_proto_rawDescData)
	})
	return file_flyteidl2_imagebuilder_definition_proto_rawDescData
}

var file_flyteidl2_imagebuilder_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_flyteidl2_imagebuilder_definition_proto_goTypes = []interface{}{
	(*ImageIdentifier)(nil), // 0: flyteidl2.imagebuilder.ImageIdentifier
	(*Image)(nil),           // 1: flyteidl2.imagebuilder.Image
	(*AptPackages)(nil),     // 2: flyteidl2.imagebuilder.AptPackages
	(*PipOptions)(nil),      // 3: flyteidl2.imagebuilder.PipOptions
	(*PipPackages)(nil),     // 4: flyteidl2.imagebuilder.PipPackages
	(*Requirements)(nil),    // 5: flyteidl2.imagebuilder.Requirements
	(*PythonWheels)(nil),    // 6: flyteidl2.imagebuilder.PythonWheels
	(*UVProject)(nil),       // 7: flyteidl2.imagebuilder.UVProject
	(*Commands)(nil),        // 8: flyteidl2.imagebuilder.Commands
	(*WorkDir)(nil),         // 9: flyteidl2.imagebuilder.WorkDir
	(*CopyConfig)(nil),      // 10: flyteidl2.imagebuilder.CopyConfig
	(*Env)(nil),             // 11: flyteidl2.imagebuilder.Env
	(*Layer)(nil),           // 12: flyteidl2.imagebuilder.Layer
	(*ImageSpec)(nil),       // 13: flyteidl2.imagebuilder.ImageSpec
	nil,                     // 14: flyteidl2.imagebuilder.Env.EnvVariablesEntry
	(*core.Secret)(nil),     // 15: flyteidl2.core.Secret
}
var file_flyteidl2_imagebuilder_definition_proto_depIdxs = []int32{
	0,  // 0: flyteidl2.imagebuilder.Image.id:type_name -> flyteidl2.imagebuilder.ImageIdentifier
	15, // 1: flyteidl2.imagebuilder.AptPackages.secret_mounts:type_name -> flyteidl2.core.Secret
	3,  // 2: flyteidl2.imagebuilder.PipPackages.options:type_name -> flyteidl2.imagebuilder.PipOptions
	15, // 3: flyteidl2.imagebuilder.PipPackages.secret_mounts:type_name -> flyteidl2.core.Secret
	3,  // 4: flyteidl2.imagebuilder.Requirements.options:type_name -> flyteidl2.imagebuilder.PipOptions
	15, // 5: flyteidl2.imagebuilder.Requirements.secret_mounts:type_name -> flyteidl2.core.Secret
	3,  // 6: flyteidl2.imagebuilder.PythonWheels.options:type_name -> flyteidl2.imagebuilder.PipOptions
	15, // 7: flyteidl2.imagebuilder.PythonWheels.secret_mounts:type_name -> flyteidl2.core.Secret
	3,  // 8: flyteidl2.imagebuilder.UVProject.options:type_name -> flyteidl2.imagebuilder.PipOptions
	15, // 9: flyteidl2.imagebuilder.UVProject.secret_mounts:type_name -> flyteidl2.core.Secret
	15, // 10: flyteidl2.imagebuilder.Commands.secret_mounts:type_name -> flyteidl2.core.Secret
	14, // 11: flyteidl2.imagebuilder.Env.env_variables:type_name -> flyteidl2.imagebuilder.Env.EnvVariablesEntry
	2,  // 12: flyteidl2.imagebuilder.Layer.apt_packages:type_name -> flyteidl2.imagebuilder.AptPackages
	4,  // 13: flyteidl2.imagebuilder.Layer.pip_packages:type_name -> flyteidl2.imagebuilder.PipPackages
	8,  // 14: flyteidl2.imagebuilder.Layer.commands:type_name -> flyteidl2.imagebuilder.Commands
	5,  // 15: flyteidl2.imagebuilder.Layer.requirements:type_name -> flyteidl2.imagebuilder.Requirements
	6,  // 16: flyteidl2.imagebuilder.Layer.python_wheels:type_name -> flyteidl2.imagebuilder.PythonWheels
	9,  // 17: flyteidl2.imagebuilder.Layer.workdir:type_name -> flyteidl2.imagebuilder.WorkDir
	10, // 18: flyteidl2.imagebuilder.Layer.copy_config:type_name -> flyteidl2.imagebuilder.CopyConfig
	7,  // 19: flyteidl2.imagebuilder.Layer.uv_project:type_name -> flyteidl2.imagebuilder.UVProject
	11, // 20: flyteidl2.imagebuilder.Layer.env:type_name -> flyteidl2.imagebuilder.Env
	12, // 21: flyteidl2.imagebuilder.ImageSpec.layers:type_name -> flyteidl2.imagebuilder.Layer
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_flyteidl2_imagebuilder_definition_proto_init() }
func file_flyteidl2_imagebuilder_definition_proto_init() {
	if File_flyteidl2_imagebuilder_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AptPackages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipPackages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Requirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonWheels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UVProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkDir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Env); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_imagebuilder_definition_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flyteidl2_imagebuilder_definition_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Layer_AptPackages)(nil),
		(*Layer_PipPackages)(nil),
		(*Layer_Commands)(nil),
		(*Layer_Requirements)(nil),
		(*Layer_PythonWheels)(nil),
		(*Layer_Workdir)(nil),
		(*Layer_CopyConfig)(nil),
		(*Layer_UvProject)(nil),
		(*Layer_Env)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl2_imagebuilder_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl2_imagebuilder_definition_proto_goTypes,
		DependencyIndexes: file_flyteidl2_imagebuilder_definition_proto_depIdxs,
		MessageInfos:      file_flyteidl2_imagebuilder_definition_proto_msgTypes,
	}.Build()
	File_flyteidl2_imagebuilder_definition_proto = out.File
	file_flyteidl2_imagebuilder_definition_proto_rawDesc = nil
	file_flyteidl2_imagebuilder_definition_proto_goTypes = nil
	file_flyteidl2_imagebuilder_definition_proto_depIdxs = nil
}
