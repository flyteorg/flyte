// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/common/identifier.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProjectIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProjectIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectIdentifierMultiError, or nil if none found.
func (m *ProjectIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Domain

	// no validation rules for Name

	if len(errors) > 0 {
		return ProjectIdentifierMultiError(errors)
	}

	return nil
}

// ProjectIdentifierMultiError is an error wrapping multiple validation errors
// returned by ProjectIdentifier.ValidateAll() if the designated constraints
// aren't met.
type ProjectIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectIdentifierMultiError) AllErrors() []error { return m }

// ProjectIdentifierValidationError is the validation error returned by
// ProjectIdentifier.Validate if the designated constraints aren't met.
type ProjectIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectIdentifierValidationError) ErrorName() string {
	return "ProjectIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectIdentifierValidationError{}

// Validate checks the field values on ClusterIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClusterIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterIdentifierMultiError, or nil if none found.
func (m *ClusterIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Name

	if len(errors) > 0 {
		return ClusterIdentifierMultiError(errors)
	}

	return nil
}

// ClusterIdentifierMultiError is an error wrapping multiple validation errors
// returned by ClusterIdentifier.ValidateAll() if the designated constraints
// aren't met.
type ClusterIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterIdentifierMultiError) AllErrors() []error { return m }

// ClusterIdentifierValidationError is the validation error returned by
// ClusterIdentifier.Validate if the designated constraints aren't met.
type ClusterIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterIdentifierValidationError) ErrorName() string {
	return "ClusterIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterIdentifierValidationError{}

// Validate checks the field values on ClusterPoolIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterPoolIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterPoolIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterPoolIdentifierMultiError, or nil if none found.
func (m *ClusterPoolIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterPoolIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Name

	if len(errors) > 0 {
		return ClusterPoolIdentifierMultiError(errors)
	}

	return nil
}

// ClusterPoolIdentifierMultiError is an error wrapping multiple validation
// errors returned by ClusterPoolIdentifier.ValidateAll() if the designated
// constraints aren't met.
type ClusterPoolIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterPoolIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterPoolIdentifierMultiError) AllErrors() []error { return m }

// ClusterPoolIdentifierValidationError is the validation error returned by
// ClusterPoolIdentifier.Validate if the designated constraints aren't met.
type ClusterPoolIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterPoolIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterPoolIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterPoolIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterPoolIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterPoolIdentifierValidationError) ErrorName() string {
	return "ClusterPoolIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterPoolIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterPoolIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterPoolIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterPoolIdentifierValidationError{}

// Validate checks the field values on ClusterConfigIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterConfigIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterConfigIdentifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterConfigIdentifierMultiError, or nil if none found.
func (m *ClusterConfigIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterConfigIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Id

	if len(errors) > 0 {
		return ClusterConfigIdentifierMultiError(errors)
	}

	return nil
}

// ClusterConfigIdentifierMultiError is an error wrapping multiple validation
// errors returned by ClusterConfigIdentifier.ValidateAll() if the designated
// constraints aren't met.
type ClusterConfigIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterConfigIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterConfigIdentifierMultiError) AllErrors() []error { return m }

// ClusterConfigIdentifierValidationError is the validation error returned by
// ClusterConfigIdentifier.Validate if the designated constraints aren't met.
type ClusterConfigIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterConfigIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterConfigIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterConfigIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterConfigIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterConfigIdentifierValidationError) ErrorName() string {
	return "ClusterConfigIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterConfigIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterConfigIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterConfigIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterConfigIdentifierValidationError{}

// Validate checks the field values on ClusterNodepoolIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterNodepoolIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterNodepoolIdentifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterNodepoolIdentifierMultiError, or nil if none found.
func (m *ClusterNodepoolIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterNodepoolIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for ClusterName

	// no validation rules for Name

	if len(errors) > 0 {
		return ClusterNodepoolIdentifierMultiError(errors)
	}

	return nil
}

// ClusterNodepoolIdentifierMultiError is an error wrapping multiple validation
// errors returned by ClusterNodepoolIdentifier.ValidateAll() if the
// designated constraints aren't met.
type ClusterNodepoolIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterNodepoolIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterNodepoolIdentifierMultiError) AllErrors() []error { return m }

// ClusterNodepoolIdentifierValidationError is the validation error returned by
// ClusterNodepoolIdentifier.Validate if the designated constraints aren't met.
type ClusterNodepoolIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterNodepoolIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterNodepoolIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterNodepoolIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterNodepoolIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterNodepoolIdentifierValidationError) ErrorName() string {
	return "ClusterNodepoolIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterNodepoolIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterNodepoolIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterNodepoolIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterNodepoolIdentifierValidationError{}

// Validate checks the field values on UserIdentifier with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserIdentifierMultiError,
// or nil if none found.
func (m *UserIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	if len(errors) > 0 {
		return UserIdentifierMultiError(errors)
	}

	return nil
}

// UserIdentifierMultiError is an error wrapping multiple validation errors
// returned by UserIdentifier.ValidateAll() if the designated constraints
// aren't met.
type UserIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdentifierMultiError) AllErrors() []error { return m }

// UserIdentifierValidationError is the validation error returned by
// UserIdentifier.Validate if the designated constraints aren't met.
type UserIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdentifierValidationError) ErrorName() string { return "UserIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e UserIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdentifierValidationError{}

// Validate checks the field values on ApplicationIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationIdentifierMultiError, or nil if none found.
func (m *ApplicationIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	if len(errors) > 0 {
		return ApplicationIdentifierMultiError(errors)
	}

	return nil
}

// ApplicationIdentifierMultiError is an error wrapping multiple validation
// errors returned by ApplicationIdentifier.ValidateAll() if the designated
// constraints aren't met.
type ApplicationIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationIdentifierMultiError) AllErrors() []error { return m }

// ApplicationIdentifierValidationError is the validation error returned by
// ApplicationIdentifier.Validate if the designated constraints aren't met.
type ApplicationIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationIdentifierValidationError) ErrorName() string {
	return "ApplicationIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationIdentifierValidationError{}

// Validate checks the field values on RoleIdentifier with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleIdentifierMultiError,
// or nil if none found.
func (m *RoleIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Name

	if len(errors) > 0 {
		return RoleIdentifierMultiError(errors)
	}

	return nil
}

// RoleIdentifierMultiError is an error wrapping multiple validation errors
// returned by RoleIdentifier.ValidateAll() if the designated constraints
// aren't met.
type RoleIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleIdentifierMultiError) AllErrors() []error { return m }

// RoleIdentifierValidationError is the validation error returned by
// RoleIdentifier.Validate if the designated constraints aren't met.
type RoleIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleIdentifierValidationError) ErrorName() string { return "RoleIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e RoleIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleIdentifierValidationError{}

// Validate checks the field values on OrgIdentifier with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrgIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrgIdentifierMultiError, or
// nil if none found.
func (m *OrgIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return OrgIdentifierMultiError(errors)
	}

	return nil
}

// OrgIdentifierMultiError is an error wrapping multiple validation errors
// returned by OrgIdentifier.ValidateAll() if the designated constraints
// aren't met.
type OrgIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgIdentifierMultiError) AllErrors() []error { return m }

// OrgIdentifierValidationError is the validation error returned by
// OrgIdentifier.Validate if the designated constraints aren't met.
type OrgIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgIdentifierValidationError) ErrorName() string { return "OrgIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e OrgIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgIdentifierValidationError{}

// Validate checks the field values on ManagedClusterIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManagedClusterIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManagedClusterIdentifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManagedClusterIdentifierMultiError, or nil if none found.
func (m *ManagedClusterIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ManagedClusterIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetOrg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ManagedClusterIdentifierValidationError{
					field:  "Org",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ManagedClusterIdentifierValidationError{
					field:  "Org",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManagedClusterIdentifierValidationError{
				field:  "Org",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ManagedClusterIdentifierMultiError(errors)
	}

	return nil
}

// ManagedClusterIdentifierMultiError is an error wrapping multiple validation
// errors returned by ManagedClusterIdentifier.ValidateAll() if the designated
// constraints aren't met.
type ManagedClusterIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManagedClusterIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManagedClusterIdentifierMultiError) AllErrors() []error { return m }

// ManagedClusterIdentifierValidationError is the validation error returned by
// ManagedClusterIdentifier.Validate if the designated constraints aren't met.
type ManagedClusterIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManagedClusterIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManagedClusterIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManagedClusterIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManagedClusterIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManagedClusterIdentifierValidationError) ErrorName() string {
	return "ManagedClusterIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e ManagedClusterIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManagedClusterIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManagedClusterIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManagedClusterIdentifierValidationError{}

// Validate checks the field values on PolicyIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PolicyIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyIdentifierMultiError, or nil if none found.
func (m *PolicyIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Name

	if len(errors) > 0 {
		return PolicyIdentifierMultiError(errors)
	}

	return nil
}

// PolicyIdentifierMultiError is an error wrapping multiple validation errors
// returned by PolicyIdentifier.ValidateAll() if the designated constraints
// aren't met.
type PolicyIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyIdentifierMultiError) AllErrors() []error { return m }

// PolicyIdentifierValidationError is the validation error returned by
// PolicyIdentifier.Validate if the designated constraints aren't met.
type PolicyIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyIdentifierValidationError) ErrorName() string { return "PolicyIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e PolicyIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyIdentifierValidationError{}

// Validate checks the field values on RunIdentifier with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunIdentifierMultiError, or
// nil if none found.
func (m *RunIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *RunIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Org

	// no validation rules for Project

	// no validation rules for Domain

	// no validation rules for Name

	if len(errors) > 0 {
		return RunIdentifierMultiError(errors)
	}

	return nil
}

// RunIdentifierMultiError is an error wrapping multiple validation errors
// returned by RunIdentifier.ValidateAll() if the designated constraints
// aren't met.
type RunIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunIdentifierMultiError) AllErrors() []error { return m }

// RunIdentifierValidationError is the validation error returned by
// RunIdentifier.Validate if the designated constraints aren't met.
type RunIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunIdentifierValidationError) ErrorName() string { return "RunIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e RunIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunIdentifierValidationError{}

// Validate checks the field values on ActionIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActionIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActionIdentifierMultiError, or nil if none found.
func (m *ActionIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActionIdentifierValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActionIdentifierValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionIdentifierValidationError{
				field:  "Run",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return ActionIdentifierMultiError(errors)
	}

	return nil
}

// ActionIdentifierMultiError is an error wrapping multiple validation errors
// returned by ActionIdentifier.ValidateAll() if the designated constraints
// aren't met.
type ActionIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionIdentifierMultiError) AllErrors() []error { return m }

// ActionIdentifierValidationError is the validation error returned by
// ActionIdentifier.Validate if the designated constraints aren't met.
type ActionIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionIdentifierValidationError) ErrorName() string { return "ActionIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e ActionIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionIdentifierValidationError{}

// Validate checks the field values on ActionAttemptIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActionAttemptIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActionAttemptIdentifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActionAttemptIdentifierMultiError, or nil if none found.
func (m *ActionAttemptIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ActionAttemptIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActionAttemptIdentifierValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActionAttemptIdentifierValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionAttemptIdentifierValidationError{
				field:  "ActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Attempt

	if len(errors) > 0 {
		return ActionAttemptIdentifierMultiError(errors)
	}

	return nil
}

// ActionAttemptIdentifierMultiError is an error wrapping multiple validation
// errors returned by ActionAttemptIdentifier.ValidateAll() if the designated
// constraints aren't met.
type ActionAttemptIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionAttemptIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionAttemptIdentifierMultiError) AllErrors() []error { return m }

// ActionAttemptIdentifierValidationError is the validation error returned by
// ActionAttemptIdentifier.Validate if the designated constraints aren't met.
type ActionAttemptIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionAttemptIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionAttemptIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionAttemptIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionAttemptIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionAttemptIdentifierValidationError) ErrorName() string {
	return "ActionAttemptIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e ActionAttemptIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionAttemptIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionAttemptIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionAttemptIdentifierValidationError{}

// Validate checks the field values on TriggerName with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerName) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerName with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TriggerNameMultiError, or
// nil if none found.
func (m *TriggerName) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerName) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Org

	// no validation rules for Project

	// no validation rules for Domain

	// no validation rules for Name

	if len(errors) > 0 {
		return TriggerNameMultiError(errors)
	}

	return nil
}

// TriggerNameMultiError is an error wrapping multiple validation errors
// returned by TriggerName.ValidateAll() if the designated constraints aren't met.
type TriggerNameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNameMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNameMultiError) AllErrors() []error { return m }

// TriggerNameValidationError is the validation error returned by
// TriggerName.Validate if the designated constraints aren't met.
type TriggerNameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNameValidationError) ErrorName() string { return "TriggerNameValidationError" }

// Error satisfies the builtin error interface
func (e TriggerNameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNameValidationError{}

// Validate checks the field values on TriggerIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TriggerIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerIdentifierMultiError, or nil if none found.
func (m *TriggerIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerIdentifierValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerIdentifierValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerIdentifierValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Revision

	if len(errors) > 0 {
		return TriggerIdentifierMultiError(errors)
	}

	return nil
}

// TriggerIdentifierMultiError is an error wrapping multiple validation errors
// returned by TriggerIdentifier.ValidateAll() if the designated constraints
// aren't met.
type TriggerIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerIdentifierMultiError) AllErrors() []error { return m }

// TriggerIdentifierValidationError is the validation error returned by
// TriggerIdentifier.Validate if the designated constraints aren't met.
type TriggerIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerIdentifierValidationError) ErrorName() string {
	return "TriggerIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerIdentifierValidationError{}
