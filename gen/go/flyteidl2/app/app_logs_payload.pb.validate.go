// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/app/app_logs_payload.proto

package app

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TailLogsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TailLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TailLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TailLogsRequestMultiError, or nil if none found.
func (m *TailLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TailLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Target.(type) {
	case *TailLogsRequest_AppId:
		if v == nil {
			err := TailLogsRequestValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAppId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailLogsRequestValidationError{
						field:  "AppId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailLogsRequestValidationError{
						field:  "AppId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAppId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailLogsRequestValidationError{
					field:  "AppId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TailLogsRequest_ReplicaId:
		if v == nil {
			err := TailLogsRequestValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReplicaId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailLogsRequestValidationError{
						field:  "ReplicaId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailLogsRequestValidationError{
						field:  "ReplicaId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReplicaId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailLogsRequestValidationError{
					field:  "ReplicaId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TailLogsRequestMultiError(errors)
	}

	return nil
}

// TailLogsRequestMultiError is an error wrapping multiple validation errors
// returned by TailLogsRequest.ValidateAll() if the designated constraints
// aren't met.
type TailLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailLogsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailLogsRequestMultiError) AllErrors() []error { return m }

// TailLogsRequestValidationError is the validation error returned by
// TailLogsRequest.Validate if the designated constraints aren't met.
type TailLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailLogsRequestValidationError) ErrorName() string { return "TailLogsRequestValidationError" }

// Error satisfies the builtin error interface
func (e TailLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailLogsRequestValidationError{}

// Validate checks the field values on ReplicaIdentifierList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplicaIdentifierList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplicaIdentifierList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplicaIdentifierListMultiError, or nil if none found.
func (m *ReplicaIdentifierList) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplicaIdentifierList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReplicas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReplicaIdentifierListValidationError{
						field:  fmt.Sprintf("Replicas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReplicaIdentifierListValidationError{
						field:  fmt.Sprintf("Replicas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReplicaIdentifierListValidationError{
					field:  fmt.Sprintf("Replicas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReplicaIdentifierListMultiError(errors)
	}

	return nil
}

// ReplicaIdentifierListMultiError is an error wrapping multiple validation
// errors returned by ReplicaIdentifierList.ValidateAll() if the designated
// constraints aren't met.
type ReplicaIdentifierListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplicaIdentifierListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplicaIdentifierListMultiError) AllErrors() []error { return m }

// ReplicaIdentifierListValidationError is the validation error returned by
// ReplicaIdentifierList.Validate if the designated constraints aren't met.
type ReplicaIdentifierListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplicaIdentifierListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplicaIdentifierListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplicaIdentifierListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplicaIdentifierListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplicaIdentifierListValidationError) ErrorName() string {
	return "ReplicaIdentifierListValidationError"
}

// Error satisfies the builtin error interface
func (e ReplicaIdentifierListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplicaIdentifierList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplicaIdentifierListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplicaIdentifierListValidationError{}

// Validate checks the field values on LogLines with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogLines) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogLines with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogLinesMultiError, or nil
// if none found.
func (m *LogLines) ValidateAll() error {
	return m.validate(true)
}

func (m *LogLines) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReplicaId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogLinesValidationError{
					field:  "ReplicaId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogLinesValidationError{
					field:  "ReplicaId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplicaId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogLinesValidationError{
				field:  "ReplicaId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStructuredLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogLinesValidationError{
						field:  fmt.Sprintf("StructuredLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogLinesValidationError{
						field:  fmt.Sprintf("StructuredLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogLinesValidationError{
					field:  fmt.Sprintf("StructuredLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LogLinesMultiError(errors)
	}

	return nil
}

// LogLinesMultiError is an error wrapping multiple validation errors returned
// by LogLines.ValidateAll() if the designated constraints aren't met.
type LogLinesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogLinesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogLinesMultiError) AllErrors() []error { return m }

// LogLinesValidationError is the validation error returned by
// LogLines.Validate if the designated constraints aren't met.
type LogLinesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogLinesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogLinesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogLinesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogLinesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogLinesValidationError) ErrorName() string { return "LogLinesValidationError" }

// Error satisfies the builtin error interface
func (e LogLinesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogLines.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogLinesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogLinesValidationError{}

// Validate checks the field values on LogLinesBatch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogLinesBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogLinesBatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogLinesBatchMultiError, or
// nil if none found.
func (m *LogLinesBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *LogLinesBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogLinesBatchValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogLinesBatchValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogLinesBatchValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LogLinesBatchMultiError(errors)
	}

	return nil
}

// LogLinesBatchMultiError is an error wrapping multiple validation errors
// returned by LogLinesBatch.ValidateAll() if the designated constraints
// aren't met.
type LogLinesBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogLinesBatchMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogLinesBatchMultiError) AllErrors() []error { return m }

// LogLinesBatchValidationError is the validation error returned by
// LogLinesBatch.Validate if the designated constraints aren't met.
type LogLinesBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogLinesBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogLinesBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogLinesBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogLinesBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogLinesBatchValidationError) ErrorName() string { return "LogLinesBatchValidationError" }

// Error satisfies the builtin error interface
func (e LogLinesBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogLinesBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogLinesBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogLinesBatchValidationError{}

// Validate checks the field values on TailLogsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TailLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TailLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TailLogsResponseMultiError, or nil if none found.
func (m *TailLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TailLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Resp.(type) {
	case *TailLogsResponse_Replicas:
		if v == nil {
			err := TailLogsResponseValidationError{
				field:  "Resp",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetReplicas()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailLogsResponseValidationError{
						field:  "Replicas",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailLogsResponseValidationError{
						field:  "Replicas",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReplicas()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailLogsResponseValidationError{
					field:  "Replicas",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TailLogsResponse_LogLines:
		if v == nil {
			err := TailLogsResponseValidationError{
				field:  "Resp",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLogLines()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailLogsResponseValidationError{
						field:  "LogLines",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailLogsResponseValidationError{
						field:  "LogLines",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLogLines()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailLogsResponseValidationError{
					field:  "LogLines",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TailLogsResponse_Batches:
		if v == nil {
			err := TailLogsResponseValidationError{
				field:  "Resp",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBatches()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailLogsResponseValidationError{
						field:  "Batches",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailLogsResponseValidationError{
						field:  "Batches",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBatches()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailLogsResponseValidationError{
					field:  "Batches",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TailLogsResponseMultiError(errors)
	}

	return nil
}

// TailLogsResponseMultiError is an error wrapping multiple validation errors
// returned by TailLogsResponse.ValidateAll() if the designated constraints
// aren't met.
type TailLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailLogsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailLogsResponseMultiError) AllErrors() []error { return m }

// TailLogsResponseValidationError is the validation error returned by
// TailLogsResponse.Validate if the designated constraints aren't met.
type TailLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailLogsResponseValidationError) ErrorName() string { return "TailLogsResponseValidationError" }

// Error satisfies the builtin error interface
func (e TailLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailLogsResponseValidationError{}
