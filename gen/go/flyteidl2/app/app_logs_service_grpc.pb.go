// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: flyteidl2/app/app_logs_service.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppLogsService_TailLogs_FullMethodName = "/flyteidl2.app.AppLogsService/TailLogs"
)

// AppLogsServiceClient is the client API for AppLogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppLogsServiceClient interface {
	TailLogs(ctx context.Context, in *TailLogsRequest, opts ...grpc.CallOption) (AppLogsService_TailLogsClient, error)
}

type appLogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppLogsServiceClient(cc grpc.ClientConnInterface) AppLogsServiceClient {
	return &appLogsServiceClient{cc}
}

func (c *appLogsServiceClient) TailLogs(ctx context.Context, in *TailLogsRequest, opts ...grpc.CallOption) (AppLogsService_TailLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppLogsService_ServiceDesc.Streams[0], AppLogsService_TailLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &appLogsServiceTailLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppLogsService_TailLogsClient interface {
	Recv() (*TailLogsResponse, error)
	grpc.ClientStream
}

type appLogsServiceTailLogsClient struct {
	grpc.ClientStream
}

func (x *appLogsServiceTailLogsClient) Recv() (*TailLogsResponse, error) {
	m := new(TailLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppLogsServiceServer is the server API for AppLogsService service.
// All implementations should embed UnimplementedAppLogsServiceServer
// for forward compatibility
type AppLogsServiceServer interface {
	TailLogs(*TailLogsRequest, AppLogsService_TailLogsServer) error
}

// UnimplementedAppLogsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppLogsServiceServer struct {
}

func (UnimplementedAppLogsServiceServer) TailLogs(*TailLogsRequest, AppLogsService_TailLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method TailLogs not implemented")
}

// UnsafeAppLogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppLogsServiceServer will
// result in compilation errors.
type UnsafeAppLogsServiceServer interface {
	mustEmbedUnimplementedAppLogsServiceServer()
}

func RegisterAppLogsServiceServer(s grpc.ServiceRegistrar, srv AppLogsServiceServer) {
	s.RegisterService(&AppLogsService_ServiceDesc, srv)
}

func _AppLogsService_TailLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppLogsServiceServer).TailLogs(m, &appLogsServiceTailLogsServer{stream})
}

type AppLogsService_TailLogsServer interface {
	Send(*TailLogsResponse) error
	grpc.ServerStream
}

type appLogsServiceTailLogsServer struct {
	grpc.ServerStream
}

func (x *appLogsServiceTailLogsServer) Send(m *TailLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AppLogsService_ServiceDesc is the grpc.ServiceDesc for AppLogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppLogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl2.app.AppLogsService",
	HandlerType: (*AppLogsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailLogs",
			Handler:       _AppLogsService_TailLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flyteidl2/app/app_logs_service.proto",
}
