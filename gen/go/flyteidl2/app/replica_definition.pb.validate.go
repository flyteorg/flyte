// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/app/replica_definition.proto

package app

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReplicaIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReplicaIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplicaIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplicaIdentifierMultiError, or nil if none found.
func (m *ReplicaIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplicaIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAppId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReplicaIdentifierValidationError{
					field:  "AppId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReplicaIdentifierValidationError{
					field:  "AppId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAppId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReplicaIdentifierValidationError{
				field:  "AppId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return ReplicaIdentifierMultiError(errors)
	}

	return nil
}

// ReplicaIdentifierMultiError is an error wrapping multiple validation errors
// returned by ReplicaIdentifier.ValidateAll() if the designated constraints
// aren't met.
type ReplicaIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplicaIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplicaIdentifierMultiError) AllErrors() []error { return m }

// ReplicaIdentifierValidationError is the validation error returned by
// ReplicaIdentifier.Validate if the designated constraints aren't met.
type ReplicaIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplicaIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplicaIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplicaIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplicaIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplicaIdentifierValidationError) ErrorName() string {
	return "ReplicaIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e ReplicaIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplicaIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplicaIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplicaIdentifierValidationError{}

// Validate checks the field values on ReplicaMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplicaMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplicaMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplicaMetaMultiError, or
// nil if none found.
func (m *ReplicaMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplicaMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReplicaMetaValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReplicaMetaValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReplicaMetaValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Revision

	if len(errors) > 0 {
		return ReplicaMetaMultiError(errors)
	}

	return nil
}

// ReplicaMetaMultiError is an error wrapping multiple validation errors
// returned by ReplicaMeta.ValidateAll() if the designated constraints aren't met.
type ReplicaMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplicaMetaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplicaMetaMultiError) AllErrors() []error { return m }

// ReplicaMetaValidationError is the validation error returned by
// ReplicaMeta.Validate if the designated constraints aren't met.
type ReplicaMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplicaMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplicaMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplicaMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplicaMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplicaMetaValidationError) ErrorName() string { return "ReplicaMetaValidationError" }

// Error satisfies the builtin error interface
func (e ReplicaMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplicaMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplicaMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplicaMetaValidationError{}

// Validate checks the field values on ReplicaList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplicaList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplicaList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplicaListMultiError, or
// nil if none found.
func (m *ReplicaList) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplicaList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReplicaListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReplicaListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReplicaListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReplicaListMultiError(errors)
	}

	return nil
}

// ReplicaListMultiError is an error wrapping multiple validation errors
// returned by ReplicaList.ValidateAll() if the designated constraints aren't met.
type ReplicaListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplicaListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplicaListMultiError) AllErrors() []error { return m }

// ReplicaListValidationError is the validation error returned by
// ReplicaList.Validate if the designated constraints aren't met.
type ReplicaListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplicaListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplicaListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplicaListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplicaListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplicaListValidationError) ErrorName() string { return "ReplicaListValidationError" }

// Error satisfies the builtin error interface
func (e ReplicaListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplicaList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplicaListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplicaListValidationError{}

// Validate checks the field values on Replica with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Replica) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Replica with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ReplicaMultiError, or nil if none found.
func (m *Replica) ValidateAll() error {
	return m.validate(true)
}

func (m *Replica) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReplicaValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReplicaValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReplicaValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReplicaValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReplicaValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReplicaValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReplicaMultiError(errors)
	}

	return nil
}

// ReplicaMultiError is an error wrapping multiple validation errors returned
// by Replica.ValidateAll() if the designated constraints aren't met.
type ReplicaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplicaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplicaMultiError) AllErrors() []error { return m }

// ReplicaValidationError is the validation error returned by Replica.Validate
// if the designated constraints aren't met.
type ReplicaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplicaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplicaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplicaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplicaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplicaValidationError) ErrorName() string { return "ReplicaValidationError" }

// Error satisfies the builtin error interface
func (e ReplicaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplica.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplicaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplicaValidationError{}

// Validate checks the field values on ReplicaStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplicaStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplicaStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplicaStatusMultiError, or
// nil if none found.
func (m *ReplicaStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplicaStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentStatus

	// no validation rules for Reason

	if len(errors) > 0 {
		return ReplicaStatusMultiError(errors)
	}

	return nil
}

// ReplicaStatusMultiError is an error wrapping multiple validation errors
// returned by ReplicaStatus.ValidateAll() if the designated constraints
// aren't met.
type ReplicaStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplicaStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplicaStatusMultiError) AllErrors() []error { return m }

// ReplicaStatusValidationError is the validation error returned by
// ReplicaStatus.Validate if the designated constraints aren't met.
type ReplicaStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplicaStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplicaStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplicaStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplicaStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplicaStatusValidationError) ErrorName() string { return "ReplicaStatusValidationError" }

// Error satisfies the builtin error interface
func (e ReplicaStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplicaStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplicaStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplicaStatusValidationError{}
