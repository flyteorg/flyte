// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flyteidl2/app/app_service.proto

package appconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	app "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/app"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AppServiceName is the fully-qualified name of the AppService service.
	AppServiceName = "flyteidl2.app.AppService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AppServiceCreateProcedure is the fully-qualified name of the AppService's Create RPC.
	AppServiceCreateProcedure = "/flyteidl2.app.AppService/Create"
	// AppServiceGetProcedure is the fully-qualified name of the AppService's Get RPC.
	AppServiceGetProcedure = "/flyteidl2.app.AppService/Get"
	// AppServiceUpdateProcedure is the fully-qualified name of the AppService's Update RPC.
	AppServiceUpdateProcedure = "/flyteidl2.app.AppService/Update"
	// AppServiceUpdateStatusProcedure is the fully-qualified name of the AppService's UpdateStatus RPC.
	AppServiceUpdateStatusProcedure = "/flyteidl2.app.AppService/UpdateStatus"
	// AppServiceDeleteProcedure is the fully-qualified name of the AppService's Delete RPC.
	AppServiceDeleteProcedure = "/flyteidl2.app.AppService/Delete"
	// AppServiceListProcedure is the fully-qualified name of the AppService's List RPC.
	AppServiceListProcedure = "/flyteidl2.app.AppService/List"
	// AppServiceWatchProcedure is the fully-qualified name of the AppService's Watch RPC.
	AppServiceWatchProcedure = "/flyteidl2.app.AppService/Watch"
	// AppServiceLeaseProcedure is the fully-qualified name of the AppService's Lease RPC.
	AppServiceLeaseProcedure = "/flyteidl2.app.AppService/Lease"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	appServiceServiceDescriptor            = app.File_flyteidl2_app_app_service_proto.Services().ByName("AppService")
	appServiceCreateMethodDescriptor       = appServiceServiceDescriptor.Methods().ByName("Create")
	appServiceGetMethodDescriptor          = appServiceServiceDescriptor.Methods().ByName("Get")
	appServiceUpdateMethodDescriptor       = appServiceServiceDescriptor.Methods().ByName("Update")
	appServiceUpdateStatusMethodDescriptor = appServiceServiceDescriptor.Methods().ByName("UpdateStatus")
	appServiceDeleteMethodDescriptor       = appServiceServiceDescriptor.Methods().ByName("Delete")
	appServiceListMethodDescriptor         = appServiceServiceDescriptor.Methods().ByName("List")
	appServiceWatchMethodDescriptor        = appServiceServiceDescriptor.Methods().ByName("Watch")
	appServiceLeaseMethodDescriptor        = appServiceServiceDescriptor.Methods().ByName("Lease")
)

// AppServiceClient is a client for the flyteidl2.app.AppService service.
type AppServiceClient interface {
	// Create creates a new app.
	Create(context.Context, *connect.Request[app.CreateRequest]) (*connect.Response[app.CreateResponse], error)
	// Get retrieves an app by its identifier.
	Get(context.Context, *connect.Request[app.GetRequest]) (*connect.Response[app.GetResponse], error)
	// Update updates an existing app.
	Update(context.Context, *connect.Request[app.UpdateRequest]) (*connect.Response[app.UpdateResponse], error)
	// UpdateStatus updates the status of an existing app.
	UpdateStatus(context.Context, *connect.Request[app.UpdateStatusRequest]) (*connect.Response[app.UpdateStatusResponse], error)
	// Delete deletes an app by its identifier.
	Delete(context.Context, *connect.Request[app.DeleteRequest]) (*connect.Response[app.DeleteResponse], error)
	// List lists all apps with optional filtering.
	List(context.Context, *connect.Request[app.ListRequest]) (*connect.Response[app.ListResponse], error)
	// Watch watches for app events.
	Watch(context.Context, *connect.Request[app.WatchRequest]) (*connect.ServerStreamForClient[app.WatchResponse], error)
	// Lease leases apps.
	Lease(context.Context, *connect.Request[app.LeaseRequest]) (*connect.ServerStreamForClient[app.LeaseResponse], error)
}

// NewAppServiceClient constructs a client for the flyteidl2.app.AppService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AppServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &appServiceClient{
		create: connect.NewClient[app.CreateRequest, app.CreateResponse](
			httpClient,
			baseURL+AppServiceCreateProcedure,
			connect.WithSchema(appServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[app.GetRequest, app.GetResponse](
			httpClient,
			baseURL+AppServiceGetProcedure,
			connect.WithSchema(appServiceGetMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[app.UpdateRequest, app.UpdateResponse](
			httpClient,
			baseURL+AppServiceUpdateProcedure,
			connect.WithSchema(appServiceUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateStatus: connect.NewClient[app.UpdateStatusRequest, app.UpdateStatusResponse](
			httpClient,
			baseURL+AppServiceUpdateStatusProcedure,
			connect.WithSchema(appServiceUpdateStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[app.DeleteRequest, app.DeleteResponse](
			httpClient,
			baseURL+AppServiceDeleteProcedure,
			connect.WithSchema(appServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[app.ListRequest, app.ListResponse](
			httpClient,
			baseURL+AppServiceListProcedure,
			connect.WithSchema(appServiceListMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		watch: connect.NewClient[app.WatchRequest, app.WatchResponse](
			httpClient,
			baseURL+AppServiceWatchProcedure,
			connect.WithSchema(appServiceWatchMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		lease: connect.NewClient[app.LeaseRequest, app.LeaseResponse](
			httpClient,
			baseURL+AppServiceLeaseProcedure,
			connect.WithSchema(appServiceLeaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// appServiceClient implements AppServiceClient.
type appServiceClient struct {
	create       *connect.Client[app.CreateRequest, app.CreateResponse]
	get          *connect.Client[app.GetRequest, app.GetResponse]
	update       *connect.Client[app.UpdateRequest, app.UpdateResponse]
	updateStatus *connect.Client[app.UpdateStatusRequest, app.UpdateStatusResponse]
	delete       *connect.Client[app.DeleteRequest, app.DeleteResponse]
	list         *connect.Client[app.ListRequest, app.ListResponse]
	watch        *connect.Client[app.WatchRequest, app.WatchResponse]
	lease        *connect.Client[app.LeaseRequest, app.LeaseResponse]
}

// Create calls flyteidl2.app.AppService.Create.
func (c *appServiceClient) Create(ctx context.Context, req *connect.Request[app.CreateRequest]) (*connect.Response[app.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls flyteidl2.app.AppService.Get.
func (c *appServiceClient) Get(ctx context.Context, req *connect.Request[app.GetRequest]) (*connect.Response[app.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Update calls flyteidl2.app.AppService.Update.
func (c *appServiceClient) Update(ctx context.Context, req *connect.Request[app.UpdateRequest]) (*connect.Response[app.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// UpdateStatus calls flyteidl2.app.AppService.UpdateStatus.
func (c *appServiceClient) UpdateStatus(ctx context.Context, req *connect.Request[app.UpdateStatusRequest]) (*connect.Response[app.UpdateStatusResponse], error) {
	return c.updateStatus.CallUnary(ctx, req)
}

// Delete calls flyteidl2.app.AppService.Delete.
func (c *appServiceClient) Delete(ctx context.Context, req *connect.Request[app.DeleteRequest]) (*connect.Response[app.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// List calls flyteidl2.app.AppService.List.
func (c *appServiceClient) List(ctx context.Context, req *connect.Request[app.ListRequest]) (*connect.Response[app.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Watch calls flyteidl2.app.AppService.Watch.
func (c *appServiceClient) Watch(ctx context.Context, req *connect.Request[app.WatchRequest]) (*connect.ServerStreamForClient[app.WatchResponse], error) {
	return c.watch.CallServerStream(ctx, req)
}

// Lease calls flyteidl2.app.AppService.Lease.
func (c *appServiceClient) Lease(ctx context.Context, req *connect.Request[app.LeaseRequest]) (*connect.ServerStreamForClient[app.LeaseResponse], error) {
	return c.lease.CallServerStream(ctx, req)
}

// AppServiceHandler is an implementation of the flyteidl2.app.AppService service.
type AppServiceHandler interface {
	// Create creates a new app.
	Create(context.Context, *connect.Request[app.CreateRequest]) (*connect.Response[app.CreateResponse], error)
	// Get retrieves an app by its identifier.
	Get(context.Context, *connect.Request[app.GetRequest]) (*connect.Response[app.GetResponse], error)
	// Update updates an existing app.
	Update(context.Context, *connect.Request[app.UpdateRequest]) (*connect.Response[app.UpdateResponse], error)
	// UpdateStatus updates the status of an existing app.
	UpdateStatus(context.Context, *connect.Request[app.UpdateStatusRequest]) (*connect.Response[app.UpdateStatusResponse], error)
	// Delete deletes an app by its identifier.
	Delete(context.Context, *connect.Request[app.DeleteRequest]) (*connect.Response[app.DeleteResponse], error)
	// List lists all apps with optional filtering.
	List(context.Context, *connect.Request[app.ListRequest]) (*connect.Response[app.ListResponse], error)
	// Watch watches for app events.
	Watch(context.Context, *connect.Request[app.WatchRequest], *connect.ServerStream[app.WatchResponse]) error
	// Lease leases apps.
	Lease(context.Context, *connect.Request[app.LeaseRequest], *connect.ServerStream[app.LeaseResponse]) error
}

// NewAppServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppServiceHandler(svc AppServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	appServiceCreateHandler := connect.NewUnaryHandler(
		AppServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(appServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceGetHandler := connect.NewUnaryHandler(
		AppServiceGetProcedure,
		svc.Get,
		connect.WithSchema(appServiceGetMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	appServiceUpdateHandler := connect.NewUnaryHandler(
		AppServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(appServiceUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceUpdateStatusHandler := connect.NewUnaryHandler(
		AppServiceUpdateStatusProcedure,
		svc.UpdateStatus,
		connect.WithSchema(appServiceUpdateStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceDeleteHandler := connect.NewUnaryHandler(
		AppServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(appServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	appServiceListHandler := connect.NewUnaryHandler(
		AppServiceListProcedure,
		svc.List,
		connect.WithSchema(appServiceListMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	appServiceWatchHandler := connect.NewServerStreamHandler(
		AppServiceWatchProcedure,
		svc.Watch,
		connect.WithSchema(appServiceWatchMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	appServiceLeaseHandler := connect.NewServerStreamHandler(
		AppServiceLeaseProcedure,
		svc.Lease,
		connect.WithSchema(appServiceLeaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl2.app.AppService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AppServiceCreateProcedure:
			appServiceCreateHandler.ServeHTTP(w, r)
		case AppServiceGetProcedure:
			appServiceGetHandler.ServeHTTP(w, r)
		case AppServiceUpdateProcedure:
			appServiceUpdateHandler.ServeHTTP(w, r)
		case AppServiceUpdateStatusProcedure:
			appServiceUpdateStatusHandler.ServeHTTP(w, r)
		case AppServiceDeleteProcedure:
			appServiceDeleteHandler.ServeHTTP(w, r)
		case AppServiceListProcedure:
			appServiceListHandler.ServeHTTP(w, r)
		case AppServiceWatchProcedure:
			appServiceWatchHandler.ServeHTTP(w, r)
		case AppServiceLeaseProcedure:
			appServiceLeaseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAppServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAppServiceHandler struct{}

func (UnimplementedAppServiceHandler) Create(context.Context, *connect.Request[app.CreateRequest]) (*connect.Response[app.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.app.AppService.Create is not implemented"))
}

func (UnimplementedAppServiceHandler) Get(context.Context, *connect.Request[app.GetRequest]) (*connect.Response[app.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.app.AppService.Get is not implemented"))
}

func (UnimplementedAppServiceHandler) Update(context.Context, *connect.Request[app.UpdateRequest]) (*connect.Response[app.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.app.AppService.Update is not implemented"))
}

func (UnimplementedAppServiceHandler) UpdateStatus(context.Context, *connect.Request[app.UpdateStatusRequest]) (*connect.Response[app.UpdateStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.app.AppService.UpdateStatus is not implemented"))
}

func (UnimplementedAppServiceHandler) Delete(context.Context, *connect.Request[app.DeleteRequest]) (*connect.Response[app.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.app.AppService.Delete is not implemented"))
}

func (UnimplementedAppServiceHandler) List(context.Context, *connect.Request[app.ListRequest]) (*connect.Response[app.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.app.AppService.List is not implemented"))
}

func (UnimplementedAppServiceHandler) Watch(context.Context, *connect.Request[app.WatchRequest], *connect.ServerStream[app.WatchResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.app.AppService.Watch is not implemented"))
}

func (UnimplementedAppServiceHandler) Lease(context.Context, *connect.Request[app.LeaseRequest], *connect.ServerStream[app.LeaseResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.app.AppService.Lease is not implemented"))
}
