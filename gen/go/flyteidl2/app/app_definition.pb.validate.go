// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/app/app_definition.proto

package app

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Identifier with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Identifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Identifier with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdentifierMultiError, or
// nil if none found.
func (m *Identifier) ValidateAll() error {
	return m.validate(true)
}

func (m *Identifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Org

	// no validation rules for Project

	// no validation rules for Domain

	// no validation rules for Name

	if len(errors) > 0 {
		return IdentifierMultiError(errors)
	}

	return nil
}

// IdentifierMultiError is an error wrapping multiple validation errors
// returned by Identifier.ValidateAll() if the designated constraints aren't met.
type IdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentifierMultiError) AllErrors() []error { return m }

// IdentifierValidationError is the validation error returned by
// Identifier.Validate if the designated constraints aren't met.
type IdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentifierValidationError) ErrorName() string { return "IdentifierValidationError" }

// Error satisfies the builtin error interface
func (e IdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentifierValidationError{}

// Validate checks the field values on Meta with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Meta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Meta with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MetaMultiError, or nil if none found.
func (m *Meta) ValidateAll() error {
	return m.validate(true)
}

func (m *Meta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetaValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetaValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetaValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Revision

	// no validation rules for Labels

	if len(errors) > 0 {
		return MetaMultiError(errors)
	}

	return nil
}

// MetaMultiError is an error wrapping multiple validation errors returned by
// Meta.ValidateAll() if the designated constraints aren't met.
type MetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetaMultiError) AllErrors() []error { return m }

// MetaValidationError is the validation error returned by Meta.Validate if the
// designated constraints aren't met.
type MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaValidationError) ErrorName() string { return "MetaValidationError" }

// Error satisfies the builtin error interface
func (e MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaValidationError{}

// Validate checks the field values on AppWrapper with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppWrapper with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppWrapperMultiError, or
// nil if none found.
func (m *AppWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *AppWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	switch v := m.Payload.(type) {
	case *AppWrapper_App:
		if v == nil {
			err := AppWrapperValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetApp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppWrapperValidationError{
						field:  "App",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppWrapperValidationError{
						field:  "App",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppWrapperValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AppWrapper_AppId:
		if v == nil {
			err := AppWrapperValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAppId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppWrapperValidationError{
						field:  "AppId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppWrapperValidationError{
						field:  "AppId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAppId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppWrapperValidationError{
					field:  "AppId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AppWrapperMultiError(errors)
	}

	return nil
}

// AppWrapperMultiError is an error wrapping multiple validation errors
// returned by AppWrapper.ValidateAll() if the designated constraints aren't met.
type AppWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppWrapperMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppWrapperMultiError) AllErrors() []error { return m }

// AppWrapperValidationError is the validation error returned by
// AppWrapper.Validate if the designated constraints aren't met.
type AppWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppWrapperValidationError) ErrorName() string { return "AppWrapperValidationError" }

// Error satisfies the builtin error interface
func (e AppWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppWrapperValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on App with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppMultiError, or nil if none found.
func (m *App) ValidateAll() error {
	return m.validate(true)
}

func (m *App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "Spec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AppMultiError(errors)
	}

	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.ValidateAll() if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on Condition with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Condition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Condition with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConditionMultiError, or nil
// if none found.
func (m *Condition) ValidateAll() error {
	return m.validate(true)
}

func (m *Condition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLastTransitionTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConditionValidationError{
					field:  "LastTransitionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConditionValidationError{
					field:  "LastTransitionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastTransitionTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConditionValidationError{
				field:  "LastTransitionTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeploymentStatus

	// no validation rules for Message

	// no validation rules for Revision

	if all {
		switch v := interface{}(m.GetActor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConditionValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConditionValidationError{
					field:  "Actor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConditionValidationError{
				field:  "Actor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConditionMultiError(errors)
	}

	return nil
}

// ConditionMultiError is an error wrapping multiple validation errors returned
// by Condition.ValidateAll() if the designated constraints aren't met.
type ConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionMultiError) AllErrors() []error { return m }

// ConditionValidationError is the validation error returned by
// Condition.Validate if the designated constraints aren't met.
type ConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionValidationError) ErrorName() string { return "ConditionValidationError" }

// Error satisfies the builtin error interface
func (e ConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionValidationError{}

// Validate checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatusMultiError, or nil if none found.
func (m *Status) ValidateAll() error {
	return m.validate(true)
}

func (m *Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssignedCluster

	// no validation rules for CurrentReplicas

	if all {
		switch v := interface{}(m.GetIngress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "Ingress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "Ingress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIngress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusValidationError{
				field:  "Ingress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "LastUpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "LastUpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusValidationError{
				field:  "LastUpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatusValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatusValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatusValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetLeaseExpiration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "LeaseExpiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "LeaseExpiration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLeaseExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusValidationError{
				field:  "LeaseExpiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetK8SMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "K8SMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "K8SMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetK8SMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusValidationError{
				field:  "K8SMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaterializedInputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "MaterializedInputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "MaterializedInputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaterializedInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusValidationError{
				field:  "MaterializedInputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatusMultiError(errors)
	}

	return nil
}

// StatusMultiError is an error wrapping multiple validation errors returned by
// Status.ValidateAll() if the designated constraints aren't met.
type StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusMultiError) AllErrors() []error { return m }

// StatusValidationError is the validation error returned by Status.Validate if
// the designated constraints aren't met.
type StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusValidationError) ErrorName() string { return "StatusValidationError" }

// Error satisfies the builtin error interface
func (e StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusValidationError{}

// Validate checks the field values on K8SMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *K8SMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on K8SMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in K8SMetadataMultiError, or
// nil if none found.
func (m *K8SMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *K8SMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	if len(errors) > 0 {
		return K8SMetadataMultiError(errors)
	}

	return nil
}

// K8SMetadataMultiError is an error wrapping multiple validation errors
// returned by K8SMetadata.ValidateAll() if the designated constraints aren't met.
type K8SMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m K8SMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m K8SMetadataMultiError) AllErrors() []error { return m }

// K8SMetadataValidationError is the validation error returned by
// K8SMetadata.Validate if the designated constraints aren't met.
type K8SMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K8SMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K8SMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K8SMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K8SMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K8SMetadataValidationError) ErrorName() string { return "K8SMetadataValidationError" }

// Error satisfies the builtin error interface
func (e K8SMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK8SMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K8SMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K8SMetadataValidationError{}

// Validate checks the field values on Ingress with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ingress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ingress with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IngressMultiError, or nil if none found.
func (m *Ingress) ValidateAll() error {
	return m.validate(true)
}

func (m *Ingress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicUrl

	// no validation rules for CnameUrl

	// no validation rules for VpcUrl

	if len(errors) > 0 {
		return IngressMultiError(errors)
	}

	return nil
}

// IngressMultiError is an error wrapping multiple validation errors returned
// by Ingress.ValidateAll() if the designated constraints aren't met.
type IngressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressMultiError) AllErrors() []error { return m }

// IngressValidationError is the validation error returned by Ingress.Validate
// if the designated constraints aren't met.
type IngressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressValidationError) ErrorName() string { return "IngressValidationError" }

// Error satisfies the builtin error interface
func (e IngressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressValidationError{}

// Validate checks the field values on Spec with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Spec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Spec with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SpecMultiError, or nil if none found.
func (m *Spec) ValidateAll() error {
	return m.validate(true)
}

func (m *Spec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAutoscaling()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Autoscaling",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Autoscaling",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAutoscaling()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "Autoscaling",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIngress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Ingress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Ingress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIngress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "Ingress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DesiredState

	// no validation rules for ClusterPool

	if all {
		switch v := interface{}(m.GetImages()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Images",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Images",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImages()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "Images",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecurityContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "SecurityContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "SecurityContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurityContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "SecurityContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExtendedResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "ExtendedResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "ExtendedResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtendedResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "ExtendedResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRuntimeMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "RuntimeMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "RuntimeMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRuntimeMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "RuntimeMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpecValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpecValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpecValidationError{
					field:  fmt.Sprintf("Links[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetTimeouts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Timeouts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpecValidationError{
					field:  "Timeouts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeouts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpecValidationError{
				field:  "Timeouts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.AppPayload.(type) {
	case *Spec_Container:
		if v == nil {
			err := SpecValidationError{
				field:  "AppPayload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpecValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpecValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpecValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Spec_Pod:
		if v == nil {
			err := SpecValidationError{
				field:  "AppPayload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPod()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpecValidationError{
						field:  "Pod",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpecValidationError{
						field:  "Pod",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpecValidationError{
					field:  "Pod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SpecMultiError(errors)
	}

	return nil
}

// SpecMultiError is an error wrapping multiple validation errors returned by
// Spec.ValidateAll() if the designated constraints aren't met.
type SpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecMultiError) AllErrors() []error { return m }

// SpecValidationError is the validation error returned by Spec.Validate if the
// designated constraints aren't met.
type SpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecValidationError) ErrorName() string { return "SpecValidationError" }

// Error satisfies the builtin error interface
func (e SpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecValidationError{}

// Validate checks the field values on Link with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Link) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Link with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LinkMultiError, or nil if none found.
func (m *Link) ValidateAll() error {
	return m.validate(true)
}

func (m *Link) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Title

	// no validation rules for IsRelative

	if len(errors) > 0 {
		return LinkMultiError(errors)
	}

	return nil
}

// LinkMultiError is an error wrapping multiple validation errors returned by
// Link.ValidateAll() if the designated constraints aren't met.
type LinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkMultiError) AllErrors() []error { return m }

// LinkValidationError is the validation error returned by Link.Validate if the
// designated constraints aren't met.
type LinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkValidationError) ErrorName() string { return "LinkValidationError" }

// Error satisfies the builtin error interface
func (e LinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkValidationError{}

// Validate checks the field values on Input with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Input) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Input with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InputMultiError, or nil if none found.
func (m *Input) ValidateAll() error {
	return m.validate(true)
}

func (m *Input) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	switch v := m.Value.(type) {
	case *Input_StringValue:
		if v == nil {
			err := InputValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	case *Input_ArtifactQuery:
		if v == nil {
			err := InputValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetArtifactQuery()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputValidationError{
						field:  "ArtifactQuery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputValidationError{
						field:  "ArtifactQuery",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArtifactQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputValidationError{
					field:  "ArtifactQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Input_ArtifactId:
		if v == nil {
			err := InputValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetArtifactId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputValidationError{
						field:  "ArtifactId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputValidationError{
						field:  "ArtifactId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArtifactId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputValidationError{
					field:  "ArtifactId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Input_AppId:
		if v == nil {
			err := InputValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAppId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputValidationError{
						field:  "AppId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputValidationError{
						field:  "AppId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAppId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputValidationError{
					field:  "AppId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InputMultiError(errors)
	}

	return nil
}

// InputMultiError is an error wrapping multiple validation errors returned by
// Input.ValidateAll() if the designated constraints aren't met.
type InputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputMultiError) AllErrors() []error { return m }

// InputValidationError is the validation error returned by Input.Validate if
// the designated constraints aren't met.
type InputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputValidationError) ErrorName() string { return "InputValidationError" }

// Error satisfies the builtin error interface
func (e InputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputValidationError{}

// Validate checks the field values on MaterializedInputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MaterializedInputs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaterializedInputs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaterializedInputsMultiError, or nil if none found.
func (m *MaterializedInputs) ValidateAll() error {
	return m.validate(true)
}

func (m *MaterializedInputs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MaterializedInputsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MaterializedInputsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MaterializedInputsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Revision

	if len(errors) > 0 {
		return MaterializedInputsMultiError(errors)
	}

	return nil
}

// MaterializedInputsMultiError is an error wrapping multiple validation errors
// returned by MaterializedInputs.ValidateAll() if the designated constraints
// aren't met.
type MaterializedInputsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaterializedInputsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaterializedInputsMultiError) AllErrors() []error { return m }

// MaterializedInputsValidationError is the validation error returned by
// MaterializedInputs.Validate if the designated constraints aren't met.
type MaterializedInputsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaterializedInputsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaterializedInputsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaterializedInputsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaterializedInputsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaterializedInputsValidationError) ErrorName() string {
	return "MaterializedInputsValidationError"
}

// Error satisfies the builtin error interface
func (e MaterializedInputsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaterializedInputs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaterializedInputsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaterializedInputsValidationError{}

// Validate checks the field values on MaterializedInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MaterializedInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaterializedInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaterializedInputMultiError, or nil if none found.
func (m *MaterializedInput) ValidateAll() error {
	return m.validate(true)
}

func (m *MaterializedInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	switch v := m.Value.(type) {
	case *MaterializedInput_ArtifactId:
		if v == nil {
			err := MaterializedInputValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetArtifactId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MaterializedInputValidationError{
						field:  "ArtifactId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MaterializedInputValidationError{
						field:  "ArtifactId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArtifactId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MaterializedInputValidationError{
					field:  "ArtifactId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return MaterializedInputMultiError(errors)
	}

	return nil
}

// MaterializedInputMultiError is an error wrapping multiple validation errors
// returned by MaterializedInput.ValidateAll() if the designated constraints
// aren't met.
type MaterializedInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaterializedInputMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaterializedInputMultiError) AllErrors() []error { return m }

// MaterializedInputValidationError is the validation error returned by
// MaterializedInput.Validate if the designated constraints aren't met.
type MaterializedInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaterializedInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaterializedInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaterializedInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaterializedInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaterializedInputValidationError) ErrorName() string {
	return "MaterializedInputValidationError"
}

// Error satisfies the builtin error interface
func (e MaterializedInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaterializedInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaterializedInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaterializedInputValidationError{}

// Validate checks the field values on InputList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InputList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InputList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InputListMultiError, or nil
// if none found.
func (m *InputList) ValidateAll() error {
	return m.validate(true)
}

func (m *InputList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InputListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InputListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InputListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InputListMultiError(errors)
	}

	return nil
}

// InputListMultiError is an error wrapping multiple validation errors returned
// by InputList.ValidateAll() if the designated constraints aren't met.
type InputListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputListMultiError) AllErrors() []error { return m }

// InputListValidationError is the validation error returned by
// InputList.Validate if the designated constraints aren't met.
type InputListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputListValidationError) ErrorName() string { return "InputListValidationError" }

// Error satisfies the builtin error interface
func (e InputListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputListValidationError{}

// Validate checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Profile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProfileMultiError, or nil if none found.
func (m *Profile) ValidateAll() error {
	return m.validate(true)
}

func (m *Profile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for ShortDescription

	// no validation rules for IconUrl

	if len(errors) > 0 {
		return ProfileMultiError(errors)
	}

	return nil
}

// ProfileMultiError is an error wrapping multiple validation errors returned
// by Profile.ValidateAll() if the designated constraints aren't met.
type ProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileMultiError) AllErrors() []error { return m }

// ProfileValidationError is the validation error returned by Profile.Validate
// if the designated constraints aren't met.
type ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileValidationError) ErrorName() string { return "ProfileValidationError" }

// Error satisfies the builtin error interface
func (e ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileValidationError{}

// Validate checks the field values on SecurityContext with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SecurityContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecurityContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecurityContextMultiError, or nil if none found.
func (m *SecurityContext) ValidateAll() error {
	return m.validate(true)
}

func (m *SecurityContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunAs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecurityContextValidationError{
					field:  "RunAs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecurityContextValidationError{
					field:  "RunAs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunAs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecurityContextValidationError{
				field:  "RunAs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecurityContextValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecurityContextValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecurityContextValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AllowAnonymous

	if len(errors) > 0 {
		return SecurityContextMultiError(errors)
	}

	return nil
}

// SecurityContextMultiError is an error wrapping multiple validation errors
// returned by SecurityContext.ValidateAll() if the designated constraints
// aren't met.
type SecurityContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecurityContextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecurityContextMultiError) AllErrors() []error { return m }

// SecurityContextValidationError is the validation error returned by
// SecurityContext.Validate if the designated constraints aren't met.
type SecurityContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityContextValidationError) ErrorName() string { return "SecurityContextValidationError" }

// Error satisfies the builtin error interface
func (e SecurityContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurityContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityContextValidationError{}

// Validate checks the field values on ImageSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageSpecMultiError, or nil
// if none found.
func (m *ImageSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tag

	// no validation rules for BuildJobUrl

	if len(errors) > 0 {
		return ImageSpecMultiError(errors)
	}

	return nil
}

// ImageSpecMultiError is an error wrapping multiple validation errors returned
// by ImageSpec.ValidateAll() if the designated constraints aren't met.
type ImageSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageSpecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageSpecMultiError) AllErrors() []error { return m }

// ImageSpecValidationError is the validation error returned by
// ImageSpec.Validate if the designated constraints aren't met.
type ImageSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageSpecValidationError) ErrorName() string { return "ImageSpecValidationError" }

// Error satisfies the builtin error interface
func (e ImageSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageSpecValidationError{}

// Validate checks the field values on ImageSpecSet with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageSpecSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageSpecSet with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageSpecSetMultiError, or
// nil if none found.
func (m *ImageSpecSet) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageSpecSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImageSpecSetValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImageSpecSetValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImageSpecSetValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImageSpecSetMultiError(errors)
	}

	return nil
}

// ImageSpecSetMultiError is an error wrapping multiple validation errors
// returned by ImageSpecSet.ValidateAll() if the designated constraints aren't met.
type ImageSpecSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageSpecSetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageSpecSetMultiError) AllErrors() []error { return m }

// ImageSpecSetValidationError is the validation error returned by
// ImageSpecSet.Validate if the designated constraints aren't met.
type ImageSpecSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageSpecSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageSpecSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageSpecSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageSpecSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageSpecSetValidationError) ErrorName() string { return "ImageSpecSetValidationError" }

// Error satisfies the builtin error interface
func (e ImageSpecSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageSpecSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageSpecSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageSpecSetValidationError{}

// Validate checks the field values on IngressConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IngressConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IngressConfigMultiError, or
// nil if none found.
func (m *IngressConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Private

	// no validation rules for Subdomain

	// no validation rules for Cname

	if len(errors) > 0 {
		return IngressConfigMultiError(errors)
	}

	return nil
}

// IngressConfigMultiError is an error wrapping multiple validation errors
// returned by IngressConfig.ValidateAll() if the designated constraints
// aren't met.
type IngressConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressConfigMultiError) AllErrors() []error { return m }

// IngressConfigValidationError is the validation error returned by
// IngressConfig.Validate if the designated constraints aren't met.
type IngressConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressConfigValidationError) ErrorName() string { return "IngressConfigValidationError" }

// Error satisfies the builtin error interface
func (e IngressConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressConfigValidationError{}

// Validate checks the field values on AutoscalingConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AutoscalingConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoscalingConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoscalingConfigMultiError, or nil if none found.
func (m *AutoscalingConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoscalingConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReplicas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoscalingConfigValidationError{
					field:  "Replicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoscalingConfigValidationError{
					field:  "Replicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplicas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoscalingConfigValidationError{
				field:  "Replicas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScaledownPeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoscalingConfigValidationError{
					field:  "ScaledownPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoscalingConfigValidationError{
					field:  "ScaledownPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaledownPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoscalingConfigValidationError{
				field:  "ScaledownPeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScalingMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoscalingConfigValidationError{
					field:  "ScalingMetric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoscalingConfigValidationError{
					field:  "ScalingMetric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScalingMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoscalingConfigValidationError{
				field:  "ScalingMetric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AutoscalingConfigMultiError(errors)
	}

	return nil
}

// AutoscalingConfigMultiError is an error wrapping multiple validation errors
// returned by AutoscalingConfig.ValidateAll() if the designated constraints
// aren't met.
type AutoscalingConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoscalingConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoscalingConfigMultiError) AllErrors() []error { return m }

// AutoscalingConfigValidationError is the validation error returned by
// AutoscalingConfig.Validate if the designated constraints aren't met.
type AutoscalingConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoscalingConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoscalingConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoscalingConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoscalingConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoscalingConfigValidationError) ErrorName() string {
	return "AutoscalingConfigValidationError"
}

// Error satisfies the builtin error interface
func (e AutoscalingConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoscalingConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoscalingConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoscalingConfigValidationError{}

// Validate checks the field values on ScalingMetric with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScalingMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScalingMetric with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScalingMetricMultiError, or
// nil if none found.
func (m *ScalingMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *ScalingMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Metric.(type) {
	case *ScalingMetric_RequestRate:
		if v == nil {
			err := ScalingMetricValidationError{
				field:  "Metric",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequestRate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScalingMetricValidationError{
						field:  "RequestRate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScalingMetricValidationError{
						field:  "RequestRate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestRate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalingMetricValidationError{
					field:  "RequestRate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ScalingMetric_Concurrency:
		if v == nil {
			err := ScalingMetricValidationError{
				field:  "Metric",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConcurrency()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScalingMetricValidationError{
						field:  "Concurrency",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScalingMetricValidationError{
						field:  "Concurrency",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConcurrency()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalingMetricValidationError{
					field:  "Concurrency",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ScalingMetricMultiError(errors)
	}

	return nil
}

// ScalingMetricMultiError is an error wrapping multiple validation errors
// returned by ScalingMetric.ValidateAll() if the designated constraints
// aren't met.
type ScalingMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScalingMetricMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScalingMetricMultiError) AllErrors() []error { return m }

// ScalingMetricValidationError is the validation error returned by
// ScalingMetric.Validate if the designated constraints aren't met.
type ScalingMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScalingMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScalingMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScalingMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScalingMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScalingMetricValidationError) ErrorName() string { return "ScalingMetricValidationError" }

// Error satisfies the builtin error interface
func (e ScalingMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScalingMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScalingMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScalingMetricValidationError{}

// Validate checks the field values on Concurrency with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Concurrency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Concurrency with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConcurrencyMultiError, or
// nil if none found.
func (m *Concurrency) ValidateAll() error {
	return m.validate(true)
}

func (m *Concurrency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetValue

	if len(errors) > 0 {
		return ConcurrencyMultiError(errors)
	}

	return nil
}

// ConcurrencyMultiError is an error wrapping multiple validation errors
// returned by Concurrency.ValidateAll() if the designated constraints aren't met.
type ConcurrencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConcurrencyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConcurrencyMultiError) AllErrors() []error { return m }

// ConcurrencyValidationError is the validation error returned by
// Concurrency.Validate if the designated constraints aren't met.
type ConcurrencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcurrencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcurrencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcurrencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcurrencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcurrencyValidationError) ErrorName() string { return "ConcurrencyValidationError" }

// Error satisfies the builtin error interface
func (e ConcurrencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcurrency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcurrencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcurrencyValidationError{}

// Validate checks the field values on RequestRate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RequestRate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestRate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RequestRateMultiError, or
// nil if none found.
func (m *RequestRate) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestRate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetValue

	if len(errors) > 0 {
		return RequestRateMultiError(errors)
	}

	return nil
}

// RequestRateMultiError is an error wrapping multiple validation errors
// returned by RequestRate.ValidateAll() if the designated constraints aren't met.
type RequestRateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestRateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestRateMultiError) AllErrors() []error { return m }

// RequestRateValidationError is the validation error returned by
// RequestRate.Validate if the designated constraints aren't met.
type RequestRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestRateValidationError) ErrorName() string { return "RequestRateValidationError" }

// Error satisfies the builtin error interface
func (e RequestRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestRateValidationError{}

// Validate checks the field values on Replicas with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Replicas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Replicas with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplicasMultiError, or nil
// if none found.
func (m *Replicas) ValidateAll() error {
	return m.validate(true)
}

func (m *Replicas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Min

	// no validation rules for Max

	if len(errors) > 0 {
		return ReplicasMultiError(errors)
	}

	return nil
}

// ReplicasMultiError is an error wrapping multiple validation errors returned
// by Replicas.ValidateAll() if the designated constraints aren't met.
type ReplicasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplicasMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplicasMultiError) AllErrors() []error { return m }

// ReplicasValidationError is the validation error returned by
// Replicas.Validate if the designated constraints aren't met.
type ReplicasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplicasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplicasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplicasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplicasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplicasValidationError) ErrorName() string { return "ReplicasValidationError" }

// Error satisfies the builtin error interface
func (e ReplicasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplicas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplicasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplicasValidationError{}

// Validate checks the field values on TimeoutConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeoutConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeoutConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeoutConfigMultiError, or
// nil if none found.
func (m *TimeoutConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeoutConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeoutConfigValidationError{
					field:  "RequestTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeoutConfigValidationError{
					field:  "RequestTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeoutConfigValidationError{
				field:  "RequestTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimeoutConfigMultiError(errors)
	}

	return nil
}

// TimeoutConfigMultiError is an error wrapping multiple validation errors
// returned by TimeoutConfig.ValidateAll() if the designated constraints
// aren't met.
type TimeoutConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeoutConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeoutConfigMultiError) AllErrors() []error { return m }

// TimeoutConfigValidationError is the validation error returned by
// TimeoutConfig.Validate if the designated constraints aren't met.
type TimeoutConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeoutConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeoutConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeoutConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeoutConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeoutConfigValidationError) ErrorName() string { return "TimeoutConfigValidationError" }

// Error satisfies the builtin error interface
func (e TimeoutConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeoutConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeoutConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeoutConfigValidationError{}
