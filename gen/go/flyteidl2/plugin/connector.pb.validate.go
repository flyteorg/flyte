// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/plugin/connector.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	core "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/core"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = core.TaskExecution_Phase(0)
)

// Validate checks the field values on TaskExecutionMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskExecutionMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskExecutionMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskExecutionMetadataMultiError, or nil if none found.
func (m *TaskExecutionMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskExecutionMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaskExecutionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskExecutionMetadataValidationError{
					field:  "TaskExecutionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskExecutionMetadataValidationError{
					field:  "TaskExecutionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskExecutionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskExecutionMetadataValidationError{
				field:  "TaskExecutionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Namespace

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for K8SServiceAccount

	// no validation rules for EnvironmentVariables

	// no validation rules for MaxAttempts

	// no validation rules for Interruptible

	// no validation rules for InterruptibleFailureThreshold

	if all {
		switch v := interface{}(m.GetIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskExecutionMetadataValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskExecutionMetadataValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskExecutionMetadataValidationError{
				field:  "Identity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskExecutionMetadataMultiError(errors)
	}

	return nil
}

// TaskExecutionMetadataMultiError is an error wrapping multiple validation
// errors returned by TaskExecutionMetadata.ValidateAll() if the designated
// constraints aren't met.
type TaskExecutionMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskExecutionMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskExecutionMetadataMultiError) AllErrors() []error { return m }

// TaskExecutionMetadataValidationError is the validation error returned by
// TaskExecutionMetadata.Validate if the designated constraints aren't met.
type TaskExecutionMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskExecutionMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskExecutionMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskExecutionMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskExecutionMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskExecutionMetadataValidationError) ErrorName() string {
	return "TaskExecutionMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e TaskExecutionMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskExecutionMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskExecutionMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskExecutionMetadataValidationError{}

// Validate checks the field values on CreateTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskRequestMultiError, or nil if none found.
func (m *CreateTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTaskRequestValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTaskRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OutputPrefix

	if all {
		switch v := interface{}(m.GetTaskExecutionMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "TaskExecutionMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "TaskExecutionMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskExecutionMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTaskRequestValidationError{
				field:  "TaskExecutionMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTaskRequestValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTaskRequestValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTaskRequestMultiError(errors)
	}

	return nil
}

// CreateTaskRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskRequestMultiError) AllErrors() []error { return m }

// CreateTaskRequestValidationError is the validation error returned by
// CreateTaskRequest.Validate if the designated constraints aren't met.
type CreateTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskRequestValidationError) ErrorName() string {
	return "CreateTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskRequestValidationError{}

// Validate checks the field values on CreateTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskResponseMultiError, or nil if none found.
func (m *CreateTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceMeta

	if len(errors) > 0 {
		return CreateTaskResponseMultiError(errors)
	}

	return nil
}

// CreateTaskResponseMultiError is an error wrapping multiple validation errors
// returned by CreateTaskResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskResponseMultiError) AllErrors() []error { return m }

// CreateTaskResponseValidationError is the validation error returned by
// CreateTaskResponse.Validate if the designated constraints aren't met.
type CreateTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskResponseValidationError) ErrorName() string {
	return "CreateTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskResponseValidationError{}

// Validate checks the field values on CreateRequestHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRequestHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequestHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRequestHeaderMultiError, or nil if none found.
func (m *CreateRequestHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequestHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestHeaderValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestHeaderValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestHeaderValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OutputPrefix

	if all {
		switch v := interface{}(m.GetTaskExecutionMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestHeaderValidationError{
					field:  "TaskExecutionMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestHeaderValidationError{
					field:  "TaskExecutionMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskExecutionMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestHeaderValidationError{
				field:  "TaskExecutionMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxDatasetSizeBytes

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestHeaderValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestHeaderValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestHeaderValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRequestHeaderMultiError(errors)
	}

	return nil
}

// CreateRequestHeaderMultiError is an error wrapping multiple validation
// errors returned by CreateRequestHeader.ValidateAll() if the designated
// constraints aren't met.
type CreateRequestHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestHeaderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestHeaderMultiError) AllErrors() []error { return m }

// CreateRequestHeaderValidationError is the validation error returned by
// CreateRequestHeader.Validate if the designated constraints aren't met.
type CreateRequestHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestHeaderValidationError) ErrorName() string {
	return "CreateRequestHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRequestHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequestHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestHeaderValidationError{}

// Validate checks the field values on ExecuteTaskSyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteTaskSyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteTaskSyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteTaskSyncRequestMultiError, or nil if none found.
func (m *ExecuteTaskSyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteTaskSyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Part.(type) {
	case *ExecuteTaskSyncRequest_Header:
		if v == nil {
			err := ExecuteTaskSyncRequestValidationError{
				field:  "Part",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeader()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExecuteTaskSyncRequestValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExecuteTaskSyncRequestValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExecuteTaskSyncRequestValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExecuteTaskSyncRequest_Inputs:
		if v == nil {
			err := ExecuteTaskSyncRequestValidationError{
				field:  "Part",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInputs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExecuteTaskSyncRequestValidationError{
						field:  "Inputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExecuteTaskSyncRequestValidationError{
						field:  "Inputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExecuteTaskSyncRequestValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ExecuteTaskSyncRequestMultiError(errors)
	}

	return nil
}

// ExecuteTaskSyncRequestMultiError is an error wrapping multiple validation
// errors returned by ExecuteTaskSyncRequest.ValidateAll() if the designated
// constraints aren't met.
type ExecuteTaskSyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteTaskSyncRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteTaskSyncRequestMultiError) AllErrors() []error { return m }

// ExecuteTaskSyncRequestValidationError is the validation error returned by
// ExecuteTaskSyncRequest.Validate if the designated constraints aren't met.
type ExecuteTaskSyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteTaskSyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteTaskSyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteTaskSyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteTaskSyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteTaskSyncRequestValidationError) ErrorName() string {
	return "ExecuteTaskSyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteTaskSyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteTaskSyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteTaskSyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteTaskSyncRequestValidationError{}

// Validate checks the field values on ExecuteTaskSyncResponseHeader with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteTaskSyncResponseHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteTaskSyncResponseHeader with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExecuteTaskSyncResponseHeaderMultiError, or nil if none found.
func (m *ExecuteTaskSyncResponseHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteTaskSyncResponseHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteTaskSyncResponseHeaderValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteTaskSyncResponseHeaderValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteTaskSyncResponseHeaderValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecuteTaskSyncResponseHeaderMultiError(errors)
	}

	return nil
}

// ExecuteTaskSyncResponseHeaderMultiError is an error wrapping multiple
// validation errors returned by ExecuteTaskSyncResponseHeader.ValidateAll()
// if the designated constraints aren't met.
type ExecuteTaskSyncResponseHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteTaskSyncResponseHeaderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteTaskSyncResponseHeaderMultiError) AllErrors() []error { return m }

// ExecuteTaskSyncResponseHeaderValidationError is the validation error
// returned by ExecuteTaskSyncResponseHeader.Validate if the designated
// constraints aren't met.
type ExecuteTaskSyncResponseHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteTaskSyncResponseHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteTaskSyncResponseHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteTaskSyncResponseHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteTaskSyncResponseHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteTaskSyncResponseHeaderValidationError) ErrorName() string {
	return "ExecuteTaskSyncResponseHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteTaskSyncResponseHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteTaskSyncResponseHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteTaskSyncResponseHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteTaskSyncResponseHeaderValidationError{}

// Validate checks the field values on ExecuteTaskSyncResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteTaskSyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteTaskSyncResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteTaskSyncResponseMultiError, or nil if none found.
func (m *ExecuteTaskSyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteTaskSyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Res.(type) {
	case *ExecuteTaskSyncResponse_Header:
		if v == nil {
			err := ExecuteTaskSyncResponseValidationError{
				field:  "Res",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeader()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExecuteTaskSyncResponseValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExecuteTaskSyncResponseValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExecuteTaskSyncResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExecuteTaskSyncResponse_Outputs:
		if v == nil {
			err := ExecuteTaskSyncResponseValidationError{
				field:  "Res",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOutputs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExecuteTaskSyncResponseValidationError{
						field:  "Outputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExecuteTaskSyncResponseValidationError{
						field:  "Outputs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExecuteTaskSyncResponseValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ExecuteTaskSyncResponseMultiError(errors)
	}

	return nil
}

// ExecuteTaskSyncResponseMultiError is an error wrapping multiple validation
// errors returned by ExecuteTaskSyncResponse.ValidateAll() if the designated
// constraints aren't met.
type ExecuteTaskSyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteTaskSyncResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteTaskSyncResponseMultiError) AllErrors() []error { return m }

// ExecuteTaskSyncResponseValidationError is the validation error returned by
// ExecuteTaskSyncResponse.Validate if the designated constraints aren't met.
type ExecuteTaskSyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteTaskSyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteTaskSyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteTaskSyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteTaskSyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteTaskSyncResponseValidationError) ErrorName() string {
	return "ExecuteTaskSyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteTaskSyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteTaskSyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteTaskSyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteTaskSyncResponseValidationError{}

// Validate checks the field values on GetTaskRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTaskRequestMultiError,
// or nil if none found.
func (m *GetTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceMeta

	if all {
		switch v := interface{}(m.GetTaskCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskRequestValidationError{
					field:  "TaskCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskRequestValidationError{
					field:  "TaskCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskRequestValidationError{
				field:  "TaskCategory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OutputPrefix

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskRequestValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskRequestValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskRequestValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTaskRequestMultiError(errors)
	}

	return nil
}

// GetTaskRequestMultiError is an error wrapping multiple validation errors
// returned by GetTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskRequestMultiError) AllErrors() []error { return m }

// GetTaskRequestValidationError is the validation error returned by
// GetTaskRequest.Validate if the designated constraints aren't met.
type GetTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskRequestValidationError) ErrorName() string { return "GetTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskRequestValidationError{}

// Validate checks the field values on GetTaskResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskResponseMultiError, or nil if none found.
func (m *GetTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTaskResponseMultiError(errors)
	}

	return nil
}

// GetTaskResponseMultiError is an error wrapping multiple validation errors
// returned by GetTaskResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskResponseMultiError) AllErrors() []error { return m }

// GetTaskResponseValidationError is the validation error returned by
// GetTaskResponse.Validate if the designated constraints aren't met.
type GetTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskResponseValidationError) ErrorName() string { return "GetTaskResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskResponseValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOutputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceValidationError{
				field:  "Outputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	for idx, item := range m.GetLogLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("LogLinks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceValidationError{
						field:  fmt.Sprintf("LogLinks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceValidationError{
					field:  fmt.Sprintf("LogLinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Phase

	if all {
		switch v := interface{}(m.GetCustomInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "CustomInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceValidationError{
					field:  "CustomInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceValidationError{
				field:  "CustomInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on DeleteTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTaskRequestMultiError, or nil if none found.
func (m *DeleteTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceMeta

	if all {
		switch v := interface{}(m.GetTaskCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteTaskRequestValidationError{
					field:  "TaskCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteTaskRequestValidationError{
					field:  "TaskCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTaskRequestValidationError{
				field:  "TaskCategory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConnection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteTaskRequestValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteTaskRequestValidationError{
					field:  "Connection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTaskRequestValidationError{
				field:  "Connection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteTaskRequestMultiError(errors)
	}

	return nil
}

// DeleteTaskRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTaskRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTaskRequestMultiError) AllErrors() []error { return m }

// DeleteTaskRequestValidationError is the validation error returned by
// DeleteTaskRequest.Validate if the designated constraints aren't met.
type DeleteTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskRequestValidationError) ErrorName() string {
	return "DeleteTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskRequestValidationError{}

// Validate checks the field values on DeleteTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTaskResponseMultiError, or nil if none found.
func (m *DeleteTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTaskResponseMultiError(errors)
	}

	return nil
}

// DeleteTaskResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteTaskResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTaskResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTaskResponseMultiError) AllErrors() []error { return m }

// DeleteTaskResponseValidationError is the validation error returned by
// DeleteTaskResponse.Validate if the designated constraints aren't met.
type DeleteTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskResponseValidationError) ErrorName() string {
	return "DeleteTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskResponseValidationError{}

// Validate checks the field values on Connector with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Connector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Connector with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectorMultiError, or nil
// if none found.
func (m *Connector) ValidateAll() error {
	return m.validate(true)
}

func (m *Connector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetSupportedTaskCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectorValidationError{
						field:  fmt.Sprintf("SupportedTaskCategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectorValidationError{
						field:  fmt.Sprintf("SupportedTaskCategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectorValidationError{
					field:  fmt.Sprintf("SupportedTaskCategories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConnectorMultiError(errors)
	}

	return nil
}

// ConnectorMultiError is an error wrapping multiple validation errors returned
// by Connector.ValidateAll() if the designated constraints aren't met.
type ConnectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectorMultiError) AllErrors() []error { return m }

// ConnectorValidationError is the validation error returned by
// Connector.Validate if the designated constraints aren't met.
type ConnectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectorValidationError) ErrorName() string { return "ConnectorValidationError" }

// Error satisfies the builtin error interface
func (e ConnectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectorValidationError{}

// Validate checks the field values on TaskCategory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskCategoryMultiError, or
// nil if none found.
func (m *TaskCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	if len(errors) > 0 {
		return TaskCategoryMultiError(errors)
	}

	return nil
}

// TaskCategoryMultiError is an error wrapping multiple validation errors
// returned by TaskCategory.ValidateAll() if the designated constraints aren't met.
type TaskCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskCategoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskCategoryMultiError) AllErrors() []error { return m }

// TaskCategoryValidationError is the validation error returned by
// TaskCategory.Validate if the designated constraints aren't met.
type TaskCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCategoryValidationError) ErrorName() string { return "TaskCategoryValidationError" }

// Error satisfies the builtin error interface
func (e TaskCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCategoryValidationError{}

// Validate checks the field values on GetConnectorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConnectorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConnectorRequestMultiError, or nil if none found.
func (m *GetConnectorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetConnectorRequestMultiError(errors)
	}

	return nil
}

// GetConnectorRequestMultiError is an error wrapping multiple validation
// errors returned by GetConnectorRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConnectorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectorRequestMultiError) AllErrors() []error { return m }

// GetConnectorRequestValidationError is the validation error returned by
// GetConnectorRequest.Validate if the designated constraints aren't met.
type GetConnectorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectorRequestValidationError) ErrorName() string {
	return "GetConnectorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectorRequestValidationError{}

// Validate checks the field values on GetConnectorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConnectorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConnectorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConnectorResponseMultiError, or nil if none found.
func (m *GetConnectorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConnectorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConnector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConnectorResponseValidationError{
					field:  "Connector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConnectorResponseValidationError{
					field:  "Connector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConnectorResponseValidationError{
				field:  "Connector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConnectorResponseMultiError(errors)
	}

	return nil
}

// GetConnectorResponseMultiError is an error wrapping multiple validation
// errors returned by GetConnectorResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConnectorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConnectorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConnectorResponseMultiError) AllErrors() []error { return m }

// GetConnectorResponseValidationError is the validation error returned by
// GetConnectorResponse.Validate if the designated constraints aren't met.
type GetConnectorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConnectorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConnectorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConnectorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConnectorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConnectorResponseValidationError) ErrorName() string {
	return "GetConnectorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConnectorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConnectorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConnectorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConnectorResponseValidationError{}

// Validate checks the field values on ListConnectorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConnectorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConnectorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConnectorsRequestMultiError, or nil if none found.
func (m *ListConnectorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConnectorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListConnectorsRequestMultiError(errors)
	}

	return nil
}

// ListConnectorsRequestMultiError is an error wrapping multiple validation
// errors returned by ListConnectorsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListConnectorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConnectorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConnectorsRequestMultiError) AllErrors() []error { return m }

// ListConnectorsRequestValidationError is the validation error returned by
// ListConnectorsRequest.Validate if the designated constraints aren't met.
type ListConnectorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConnectorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConnectorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConnectorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConnectorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConnectorsRequestValidationError) ErrorName() string {
	return "ListConnectorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConnectorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConnectorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConnectorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConnectorsRequestValidationError{}

// Validate checks the field values on ListConnectorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConnectorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConnectorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConnectorsResponseMultiError, or nil if none found.
func (m *ListConnectorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConnectorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConnectors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConnectorsResponseValidationError{
						field:  fmt.Sprintf("Connectors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConnectorsResponseValidationError{
						field:  fmt.Sprintf("Connectors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConnectorsResponseValidationError{
					field:  fmt.Sprintf("Connectors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListConnectorsResponseMultiError(errors)
	}

	return nil
}

// ListConnectorsResponseMultiError is an error wrapping multiple validation
// errors returned by ListConnectorsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListConnectorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConnectorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConnectorsResponseMultiError) AllErrors() []error { return m }

// ListConnectorsResponseValidationError is the validation error returned by
// ListConnectorsResponse.Validate if the designated constraints aren't met.
type ListConnectorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConnectorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConnectorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConnectorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConnectorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConnectorsResponseValidationError) ErrorName() string {
	return "ListConnectorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConnectorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConnectorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConnectorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConnectorsResponseValidationError{}

// Validate checks the field values on GetTaskMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaskMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskMetricsRequestMultiError, or nil if none found.
func (m *GetTaskMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceMeta

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskMetricsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskMetricsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskMetricsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskMetricsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskMetricsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskMetricsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStep()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskMetricsRequestValidationError{
					field:  "Step",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskMetricsRequestValidationError{
					field:  "Step",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStep()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskMetricsRequestValidationError{
				field:  "Step",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskMetricsRequestValidationError{
					field:  "TaskCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskMetricsRequestValidationError{
					field:  "TaskCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskMetricsRequestValidationError{
				field:  "TaskCategory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTaskMetricsRequestMultiError(errors)
	}

	return nil
}

// GetTaskMetricsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTaskMetricsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTaskMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskMetricsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskMetricsRequestMultiError) AllErrors() []error { return m }

// GetTaskMetricsRequestValidationError is the validation error returned by
// GetTaskMetricsRequest.Validate if the designated constraints aren't met.
type GetTaskMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskMetricsRequestValidationError) ErrorName() string {
	return "GetTaskMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskMetricsRequestValidationError{}

// Validate checks the field values on GetTaskMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaskMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskMetricsResponseMultiError, or nil if none found.
func (m *GetTaskMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTaskMetricsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTaskMetricsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTaskMetricsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTaskMetricsResponseMultiError(errors)
	}

	return nil
}

// GetTaskMetricsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTaskMetricsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTaskMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskMetricsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskMetricsResponseMultiError) AllErrors() []error { return m }

// GetTaskMetricsResponseValidationError is the validation error returned by
// GetTaskMetricsResponse.Validate if the designated constraints aren't met.
type GetTaskMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskMetricsResponseValidationError) ErrorName() string {
	return "GetTaskMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskMetricsResponseValidationError{}

// Validate checks the field values on GetTaskLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaskLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskLogsRequestMultiError, or nil if none found.
func (m *GetTaskLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceMeta

	// no validation rules for Lines

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetTaskCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskLogsRequestValidationError{
					field:  "TaskCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskLogsRequestValidationError{
					field:  "TaskCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskLogsRequestValidationError{
				field:  "TaskCategory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTaskLogsRequestMultiError(errors)
	}

	return nil
}

// GetTaskLogsRequestMultiError is an error wrapping multiple validation errors
// returned by GetTaskLogsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTaskLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskLogsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskLogsRequestMultiError) AllErrors() []error { return m }

// GetTaskLogsRequestValidationError is the validation error returned by
// GetTaskLogsRequest.Validate if the designated constraints aren't met.
type GetTaskLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskLogsRequestValidationError) ErrorName() string {
	return "GetTaskLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskLogsRequestValidationError{}

// Validate checks the field values on GetTaskLogsResponseHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaskLogsResponseHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskLogsResponseHeader with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskLogsResponseHeaderMultiError, or nil if none found.
func (m *GetTaskLogsResponseHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskLogsResponseHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return GetTaskLogsResponseHeaderMultiError(errors)
	}

	return nil
}

// GetTaskLogsResponseHeaderMultiError is an error wrapping multiple validation
// errors returned by GetTaskLogsResponseHeader.ValidateAll() if the
// designated constraints aren't met.
type GetTaskLogsResponseHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskLogsResponseHeaderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskLogsResponseHeaderMultiError) AllErrors() []error { return m }

// GetTaskLogsResponseHeaderValidationError is the validation error returned by
// GetTaskLogsResponseHeader.Validate if the designated constraints aren't met.
type GetTaskLogsResponseHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskLogsResponseHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskLogsResponseHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskLogsResponseHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskLogsResponseHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskLogsResponseHeaderValidationError) ErrorName() string {
	return "GetTaskLogsResponseHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskLogsResponseHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskLogsResponseHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskLogsResponseHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskLogsResponseHeaderValidationError{}

// Validate checks the field values on GetTaskLogsResponseBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaskLogsResponseBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskLogsResponseBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskLogsResponseBodyMultiError, or nil if none found.
func (m *GetTaskLogsResponseBody) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskLogsResponseBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTaskLogsResponseBodyMultiError(errors)
	}

	return nil
}

// GetTaskLogsResponseBodyMultiError is an error wrapping multiple validation
// errors returned by GetTaskLogsResponseBody.ValidateAll() if the designated
// constraints aren't met.
type GetTaskLogsResponseBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskLogsResponseBodyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskLogsResponseBodyMultiError) AllErrors() []error { return m }

// GetTaskLogsResponseBodyValidationError is the validation error returned by
// GetTaskLogsResponseBody.Validate if the designated constraints aren't met.
type GetTaskLogsResponseBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskLogsResponseBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskLogsResponseBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskLogsResponseBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskLogsResponseBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskLogsResponseBodyValidationError) ErrorName() string {
	return "GetTaskLogsResponseBodyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskLogsResponseBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskLogsResponseBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskLogsResponseBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskLogsResponseBodyValidationError{}

// Validate checks the field values on GetTaskLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaskLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskLogsResponseMultiError, or nil if none found.
func (m *GetTaskLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Part.(type) {
	case *GetTaskLogsResponse_Header:
		if v == nil {
			err := GetTaskLogsResponseValidationError{
				field:  "Part",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeader()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTaskLogsResponseValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTaskLogsResponseValidationError{
						field:  "Header",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTaskLogsResponseValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetTaskLogsResponse_Body:
		if v == nil {
			err := GetTaskLogsResponseValidationError{
				field:  "Part",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBody()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTaskLogsResponseValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTaskLogsResponseValidationError{
						field:  "Body",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTaskLogsResponseValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetTaskLogsResponseMultiError(errors)
	}

	return nil
}

// GetTaskLogsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTaskLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTaskLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskLogsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskLogsResponseMultiError) AllErrors() []error { return m }

// GetTaskLogsResponseValidationError is the validation error returned by
// GetTaskLogsResponse.Validate if the designated constraints aren't met.
type GetTaskLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskLogsResponseValidationError) ErrorName() string {
	return "GetTaskLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskLogsResponseValidationError{}
