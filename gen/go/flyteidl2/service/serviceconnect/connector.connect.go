// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flyteidl2/service/connector.proto

package serviceconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	plugins "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/plugins"
	service "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/service"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AsyncConnectorServiceName is the fully-qualified name of the AsyncConnectorService service.
	AsyncConnectorServiceName = "flyteidl2.service.AsyncConnectorService"
	// ConnectorMetadataServiceName is the fully-qualified name of the ConnectorMetadataService service.
	ConnectorMetadataServiceName = "flyteidl2.service.ConnectorMetadataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AsyncConnectorServiceCreateTaskProcedure is the fully-qualified name of the
	// AsyncConnectorService's CreateTask RPC.
	AsyncConnectorServiceCreateTaskProcedure = "/flyteidl2.service.AsyncConnectorService/CreateTask"
	// AsyncConnectorServiceGetTaskProcedure is the fully-qualified name of the AsyncConnectorService's
	// GetTask RPC.
	AsyncConnectorServiceGetTaskProcedure = "/flyteidl2.service.AsyncConnectorService/GetTask"
	// AsyncConnectorServiceDeleteTaskProcedure is the fully-qualified name of the
	// AsyncConnectorService's DeleteTask RPC.
	AsyncConnectorServiceDeleteTaskProcedure = "/flyteidl2.service.AsyncConnectorService/DeleteTask"
	// AsyncConnectorServiceGetTaskMetricsProcedure is the fully-qualified name of the
	// AsyncConnectorService's GetTaskMetrics RPC.
	AsyncConnectorServiceGetTaskMetricsProcedure = "/flyteidl2.service.AsyncConnectorService/GetTaskMetrics"
	// AsyncConnectorServiceGetTaskLogsProcedure is the fully-qualified name of the
	// AsyncConnectorService's GetTaskLogs RPC.
	AsyncConnectorServiceGetTaskLogsProcedure = "/flyteidl2.service.AsyncConnectorService/GetTaskLogs"
	// ConnectorMetadataServiceGetConnectorProcedure is the fully-qualified name of the
	// ConnectorMetadataService's GetConnector RPC.
	ConnectorMetadataServiceGetConnectorProcedure = "/flyteidl2.service.ConnectorMetadataService/GetConnector"
	// ConnectorMetadataServiceListConnectorsProcedure is the fully-qualified name of the
	// ConnectorMetadataService's ListConnectors RPC.
	ConnectorMetadataServiceListConnectorsProcedure = "/flyteidl2.service.ConnectorMetadataService/ListConnectors"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	asyncConnectorServiceServiceDescriptor                 = service.File_flyteidl2_service_connector_proto.Services().ByName("AsyncConnectorService")
	asyncConnectorServiceCreateTaskMethodDescriptor        = asyncConnectorServiceServiceDescriptor.Methods().ByName("CreateTask")
	asyncConnectorServiceGetTaskMethodDescriptor           = asyncConnectorServiceServiceDescriptor.Methods().ByName("GetTask")
	asyncConnectorServiceDeleteTaskMethodDescriptor        = asyncConnectorServiceServiceDescriptor.Methods().ByName("DeleteTask")
	asyncConnectorServiceGetTaskMetricsMethodDescriptor    = asyncConnectorServiceServiceDescriptor.Methods().ByName("GetTaskMetrics")
	asyncConnectorServiceGetTaskLogsMethodDescriptor       = asyncConnectorServiceServiceDescriptor.Methods().ByName("GetTaskLogs")
	connectorMetadataServiceServiceDescriptor              = service.File_flyteidl2_service_connector_proto.Services().ByName("ConnectorMetadataService")
	connectorMetadataServiceGetConnectorMethodDescriptor   = connectorMetadataServiceServiceDescriptor.Methods().ByName("GetConnector")
	connectorMetadataServiceListConnectorsMethodDescriptor = connectorMetadataServiceServiceDescriptor.Methods().ByName("ListConnectors")
)

// AsyncConnectorServiceClient is a client for the flyteidl2.service.AsyncConnectorService service.
type AsyncConnectorServiceClient interface {
	// CreateTask sends a task create request to the connector service.
	CreateTask(context.Context, *connect.Request[plugins.CreateTaskRequest]) (*connect.Response[plugins.CreateTaskResponse], error)
	// Get job status.
	GetTask(context.Context, *connect.Request[plugins.GetTaskRequest]) (*connect.Response[plugins.GetTaskResponse], error)
	// Delete the task resource.
	DeleteTask(context.Context, *connect.Request[plugins.DeleteTaskRequest]) (*connect.Response[plugins.DeleteTaskResponse], error)
	// GetTaskMetrics returns one or more task execution metrics, if available.
	//
	// Errors include
	//   - OutOfRange if metrics are not available for the specified task time range
	//   - various other errors
	GetTaskMetrics(context.Context, *connect.Request[plugins.GetTaskMetricsRequest]) (*connect.Response[plugins.GetTaskMetricsResponse], error)
	// GetTaskLogs returns task execution logs, if available.
	GetTaskLogs(context.Context, *connect.Request[plugins.GetTaskLogsRequest]) (*connect.ServerStreamForClient[plugins.GetTaskLogsResponse], error)
}

// NewAsyncConnectorServiceClient constructs a client for the
// flyteidl2.service.AsyncConnectorService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAsyncConnectorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AsyncConnectorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &asyncConnectorServiceClient{
		createTask: connect.NewClient[plugins.CreateTaskRequest, plugins.CreateTaskResponse](
			httpClient,
			baseURL+AsyncConnectorServiceCreateTaskProcedure,
			connect.WithSchema(asyncConnectorServiceCreateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[plugins.GetTaskRequest, plugins.GetTaskResponse](
			httpClient,
			baseURL+AsyncConnectorServiceGetTaskProcedure,
			connect.WithSchema(asyncConnectorServiceGetTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[plugins.DeleteTaskRequest, plugins.DeleteTaskResponse](
			httpClient,
			baseURL+AsyncConnectorServiceDeleteTaskProcedure,
			connect.WithSchema(asyncConnectorServiceDeleteTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTaskMetrics: connect.NewClient[plugins.GetTaskMetricsRequest, plugins.GetTaskMetricsResponse](
			httpClient,
			baseURL+AsyncConnectorServiceGetTaskMetricsProcedure,
			connect.WithSchema(asyncConnectorServiceGetTaskMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTaskLogs: connect.NewClient[plugins.GetTaskLogsRequest, plugins.GetTaskLogsResponse](
			httpClient,
			baseURL+AsyncConnectorServiceGetTaskLogsProcedure,
			connect.WithSchema(asyncConnectorServiceGetTaskLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// asyncConnectorServiceClient implements AsyncConnectorServiceClient.
type asyncConnectorServiceClient struct {
	createTask     *connect.Client[plugins.CreateTaskRequest, plugins.CreateTaskResponse]
	getTask        *connect.Client[plugins.GetTaskRequest, plugins.GetTaskResponse]
	deleteTask     *connect.Client[plugins.DeleteTaskRequest, plugins.DeleteTaskResponse]
	getTaskMetrics *connect.Client[plugins.GetTaskMetricsRequest, plugins.GetTaskMetricsResponse]
	getTaskLogs    *connect.Client[plugins.GetTaskLogsRequest, plugins.GetTaskLogsResponse]
}

// CreateTask calls flyteidl2.service.AsyncConnectorService.CreateTask.
func (c *asyncConnectorServiceClient) CreateTask(ctx context.Context, req *connect.Request[plugins.CreateTaskRequest]) (*connect.Response[plugins.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// GetTask calls flyteidl2.service.AsyncConnectorService.GetTask.
func (c *asyncConnectorServiceClient) GetTask(ctx context.Context, req *connect.Request[plugins.GetTaskRequest]) (*connect.Response[plugins.GetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// DeleteTask calls flyteidl2.service.AsyncConnectorService.DeleteTask.
func (c *asyncConnectorServiceClient) DeleteTask(ctx context.Context, req *connect.Request[plugins.DeleteTaskRequest]) (*connect.Response[plugins.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// GetTaskMetrics calls flyteidl2.service.AsyncConnectorService.GetTaskMetrics.
func (c *asyncConnectorServiceClient) GetTaskMetrics(ctx context.Context, req *connect.Request[plugins.GetTaskMetricsRequest]) (*connect.Response[plugins.GetTaskMetricsResponse], error) {
	return c.getTaskMetrics.CallUnary(ctx, req)
}

// GetTaskLogs calls flyteidl2.service.AsyncConnectorService.GetTaskLogs.
func (c *asyncConnectorServiceClient) GetTaskLogs(ctx context.Context, req *connect.Request[plugins.GetTaskLogsRequest]) (*connect.ServerStreamForClient[plugins.GetTaskLogsResponse], error) {
	return c.getTaskLogs.CallServerStream(ctx, req)
}

// AsyncConnectorServiceHandler is an implementation of the flyteidl2.service.AsyncConnectorService
// service.
type AsyncConnectorServiceHandler interface {
	// CreateTask sends a task create request to the connector service.
	CreateTask(context.Context, *connect.Request[plugins.CreateTaskRequest]) (*connect.Response[plugins.CreateTaskResponse], error)
	// Get job status.
	GetTask(context.Context, *connect.Request[plugins.GetTaskRequest]) (*connect.Response[plugins.GetTaskResponse], error)
	// Delete the task resource.
	DeleteTask(context.Context, *connect.Request[plugins.DeleteTaskRequest]) (*connect.Response[plugins.DeleteTaskResponse], error)
	// GetTaskMetrics returns one or more task execution metrics, if available.
	//
	// Errors include
	//   - OutOfRange if metrics are not available for the specified task time range
	//   - various other errors
	GetTaskMetrics(context.Context, *connect.Request[plugins.GetTaskMetricsRequest]) (*connect.Response[plugins.GetTaskMetricsResponse], error)
	// GetTaskLogs returns task execution logs, if available.
	GetTaskLogs(context.Context, *connect.Request[plugins.GetTaskLogsRequest], *connect.ServerStream[plugins.GetTaskLogsResponse]) error
}

// NewAsyncConnectorServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAsyncConnectorServiceHandler(svc AsyncConnectorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	asyncConnectorServiceCreateTaskHandler := connect.NewUnaryHandler(
		AsyncConnectorServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(asyncConnectorServiceCreateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	asyncConnectorServiceGetTaskHandler := connect.NewUnaryHandler(
		AsyncConnectorServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(asyncConnectorServiceGetTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	asyncConnectorServiceDeleteTaskHandler := connect.NewUnaryHandler(
		AsyncConnectorServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(asyncConnectorServiceDeleteTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	asyncConnectorServiceGetTaskMetricsHandler := connect.NewUnaryHandler(
		AsyncConnectorServiceGetTaskMetricsProcedure,
		svc.GetTaskMetrics,
		connect.WithSchema(asyncConnectorServiceGetTaskMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	asyncConnectorServiceGetTaskLogsHandler := connect.NewServerStreamHandler(
		AsyncConnectorServiceGetTaskLogsProcedure,
		svc.GetTaskLogs,
		connect.WithSchema(asyncConnectorServiceGetTaskLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl2.service.AsyncConnectorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AsyncConnectorServiceCreateTaskProcedure:
			asyncConnectorServiceCreateTaskHandler.ServeHTTP(w, r)
		case AsyncConnectorServiceGetTaskProcedure:
			asyncConnectorServiceGetTaskHandler.ServeHTTP(w, r)
		case AsyncConnectorServiceDeleteTaskProcedure:
			asyncConnectorServiceDeleteTaskHandler.ServeHTTP(w, r)
		case AsyncConnectorServiceGetTaskMetricsProcedure:
			asyncConnectorServiceGetTaskMetricsHandler.ServeHTTP(w, r)
		case AsyncConnectorServiceGetTaskLogsProcedure:
			asyncConnectorServiceGetTaskLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAsyncConnectorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAsyncConnectorServiceHandler struct{}

func (UnimplementedAsyncConnectorServiceHandler) CreateTask(context.Context, *connect.Request[plugins.CreateTaskRequest]) (*connect.Response[plugins.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.service.AsyncConnectorService.CreateTask is not implemented"))
}

func (UnimplementedAsyncConnectorServiceHandler) GetTask(context.Context, *connect.Request[plugins.GetTaskRequest]) (*connect.Response[plugins.GetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.service.AsyncConnectorService.GetTask is not implemented"))
}

func (UnimplementedAsyncConnectorServiceHandler) DeleteTask(context.Context, *connect.Request[plugins.DeleteTaskRequest]) (*connect.Response[plugins.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.service.AsyncConnectorService.DeleteTask is not implemented"))
}

func (UnimplementedAsyncConnectorServiceHandler) GetTaskMetrics(context.Context, *connect.Request[plugins.GetTaskMetricsRequest]) (*connect.Response[plugins.GetTaskMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.service.AsyncConnectorService.GetTaskMetrics is not implemented"))
}

func (UnimplementedAsyncConnectorServiceHandler) GetTaskLogs(context.Context, *connect.Request[plugins.GetTaskLogsRequest], *connect.ServerStream[plugins.GetTaskLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.service.AsyncConnectorService.GetTaskLogs is not implemented"))
}

// ConnectorMetadataServiceClient is a client for the flyteidl2.service.ConnectorMetadataService
// service.
type ConnectorMetadataServiceClient interface {
	// Fetch a :ref:`ref_flyteidl2.plugins.Connector` definition.
	GetConnector(context.Context, *connect.Request[plugins.GetConnectorRequest]) (*connect.Response[plugins.GetConnectorResponse], error)
	// Fetch a list of :ref:`ref_flyteidl2.plugins.Connector` definitions.
	ListConnectors(context.Context, *connect.Request[plugins.ListConnectorsRequest]) (*connect.Response[plugins.ListConnectorsResponse], error)
}

// NewConnectorMetadataServiceClient constructs a client for the
// flyteidl2.service.ConnectorMetadataService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectorMetadataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConnectorMetadataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &connectorMetadataServiceClient{
		getConnector: connect.NewClient[plugins.GetConnectorRequest, plugins.GetConnectorResponse](
			httpClient,
			baseURL+ConnectorMetadataServiceGetConnectorProcedure,
			connect.WithSchema(connectorMetadataServiceGetConnectorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listConnectors: connect.NewClient[plugins.ListConnectorsRequest, plugins.ListConnectorsResponse](
			httpClient,
			baseURL+ConnectorMetadataServiceListConnectorsProcedure,
			connect.WithSchema(connectorMetadataServiceListConnectorsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// connectorMetadataServiceClient implements ConnectorMetadataServiceClient.
type connectorMetadataServiceClient struct {
	getConnector   *connect.Client[plugins.GetConnectorRequest, plugins.GetConnectorResponse]
	listConnectors *connect.Client[plugins.ListConnectorsRequest, plugins.ListConnectorsResponse]
}

// GetConnector calls flyteidl2.service.ConnectorMetadataService.GetConnector.
func (c *connectorMetadataServiceClient) GetConnector(ctx context.Context, req *connect.Request[plugins.GetConnectorRequest]) (*connect.Response[plugins.GetConnectorResponse], error) {
	return c.getConnector.CallUnary(ctx, req)
}

// ListConnectors calls flyteidl2.service.ConnectorMetadataService.ListConnectors.
func (c *connectorMetadataServiceClient) ListConnectors(ctx context.Context, req *connect.Request[plugins.ListConnectorsRequest]) (*connect.Response[plugins.ListConnectorsResponse], error) {
	return c.listConnectors.CallUnary(ctx, req)
}

// ConnectorMetadataServiceHandler is an implementation of the
// flyteidl2.service.ConnectorMetadataService service.
type ConnectorMetadataServiceHandler interface {
	// Fetch a :ref:`ref_flyteidl2.plugins.Connector` definition.
	GetConnector(context.Context, *connect.Request[plugins.GetConnectorRequest]) (*connect.Response[plugins.GetConnectorResponse], error)
	// Fetch a list of :ref:`ref_flyteidl2.plugins.Connector` definitions.
	ListConnectors(context.Context, *connect.Request[plugins.ListConnectorsRequest]) (*connect.Response[plugins.ListConnectorsResponse], error)
}

// NewConnectorMetadataServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectorMetadataServiceHandler(svc ConnectorMetadataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	connectorMetadataServiceGetConnectorHandler := connect.NewUnaryHandler(
		ConnectorMetadataServiceGetConnectorProcedure,
		svc.GetConnector,
		connect.WithSchema(connectorMetadataServiceGetConnectorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	connectorMetadataServiceListConnectorsHandler := connect.NewUnaryHandler(
		ConnectorMetadataServiceListConnectorsProcedure,
		svc.ListConnectors,
		connect.WithSchema(connectorMetadataServiceListConnectorsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl2.service.ConnectorMetadataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConnectorMetadataServiceGetConnectorProcedure:
			connectorMetadataServiceGetConnectorHandler.ServeHTTP(w, r)
		case ConnectorMetadataServiceListConnectorsProcedure:
			connectorMetadataServiceListConnectorsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConnectorMetadataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectorMetadataServiceHandler struct{}

func (UnimplementedConnectorMetadataServiceHandler) GetConnector(context.Context, *connect.Request[plugins.GetConnectorRequest]) (*connect.Response[plugins.GetConnectorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.service.ConnectorMetadataService.GetConnector is not implemented"))
}

func (UnimplementedConnectorMetadataServiceHandler) ListConnectors(context.Context, *connect.Request[plugins.ListConnectorsRequest]) (*connect.Response[plugins.ListConnectorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.service.ConnectorMetadataService.ListConnectors is not implemented"))
}
