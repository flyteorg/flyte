// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: flyteidl2/service/connector.proto

package service

import (
	context "context"
	plugins "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/plugins"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AsyncConnectorService_CreateTask_FullMethodName     = "/flyteidl2.service.AsyncConnectorService/CreateTask"
	AsyncConnectorService_GetTask_FullMethodName        = "/flyteidl2.service.AsyncConnectorService/GetTask"
	AsyncConnectorService_DeleteTask_FullMethodName     = "/flyteidl2.service.AsyncConnectorService/DeleteTask"
	AsyncConnectorService_GetTaskMetrics_FullMethodName = "/flyteidl2.service.AsyncConnectorService/GetTaskMetrics"
	AsyncConnectorService_GetTaskLogs_FullMethodName    = "/flyteidl2.service.AsyncConnectorService/GetTaskLogs"
)

// AsyncConnectorServiceClient is the client API for AsyncConnectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsyncConnectorServiceClient interface {
	// CreateTask sends a task create request to the connector service.
	CreateTask(ctx context.Context, in *plugins.CreateTaskRequest, opts ...grpc.CallOption) (*plugins.CreateTaskResponse, error)
	// Get job status.
	GetTask(ctx context.Context, in *plugins.GetTaskRequest, opts ...grpc.CallOption) (*plugins.GetTaskResponse, error)
	// Delete the task resource.
	DeleteTask(ctx context.Context, in *plugins.DeleteTaskRequest, opts ...grpc.CallOption) (*plugins.DeleteTaskResponse, error)
	// GetTaskMetrics returns one or more task execution metrics, if available.
	//
	// Errors include
	//   - OutOfRange if metrics are not available for the specified task time range
	//   - various other errors
	GetTaskMetrics(ctx context.Context, in *plugins.GetTaskMetricsRequest, opts ...grpc.CallOption) (*plugins.GetTaskMetricsResponse, error)
	// GetTaskLogs returns task execution logs, if available.
	GetTaskLogs(ctx context.Context, in *plugins.GetTaskLogsRequest, opts ...grpc.CallOption) (AsyncConnectorService_GetTaskLogsClient, error)
}

type asyncConnectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAsyncConnectorServiceClient(cc grpc.ClientConnInterface) AsyncConnectorServiceClient {
	return &asyncConnectorServiceClient{cc}
}

func (c *asyncConnectorServiceClient) CreateTask(ctx context.Context, in *plugins.CreateTaskRequest, opts ...grpc.CallOption) (*plugins.CreateTaskResponse, error) {
	out := new(plugins.CreateTaskResponse)
	err := c.cc.Invoke(ctx, AsyncConnectorService_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncConnectorServiceClient) GetTask(ctx context.Context, in *plugins.GetTaskRequest, opts ...grpc.CallOption) (*plugins.GetTaskResponse, error) {
	out := new(plugins.GetTaskResponse)
	err := c.cc.Invoke(ctx, AsyncConnectorService_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncConnectorServiceClient) DeleteTask(ctx context.Context, in *plugins.DeleteTaskRequest, opts ...grpc.CallOption) (*plugins.DeleteTaskResponse, error) {
	out := new(plugins.DeleteTaskResponse)
	err := c.cc.Invoke(ctx, AsyncConnectorService_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncConnectorServiceClient) GetTaskMetrics(ctx context.Context, in *plugins.GetTaskMetricsRequest, opts ...grpc.CallOption) (*plugins.GetTaskMetricsResponse, error) {
	out := new(plugins.GetTaskMetricsResponse)
	err := c.cc.Invoke(ctx, AsyncConnectorService_GetTaskMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncConnectorServiceClient) GetTaskLogs(ctx context.Context, in *plugins.GetTaskLogsRequest, opts ...grpc.CallOption) (AsyncConnectorService_GetTaskLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AsyncConnectorService_ServiceDesc.Streams[0], AsyncConnectorService_GetTaskLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &asyncConnectorServiceGetTaskLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AsyncConnectorService_GetTaskLogsClient interface {
	Recv() (*plugins.GetTaskLogsResponse, error)
	grpc.ClientStream
}

type asyncConnectorServiceGetTaskLogsClient struct {
	grpc.ClientStream
}

func (x *asyncConnectorServiceGetTaskLogsClient) Recv() (*plugins.GetTaskLogsResponse, error) {
	m := new(plugins.GetTaskLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AsyncConnectorServiceServer is the server API for AsyncConnectorService service.
// All implementations should embed UnimplementedAsyncConnectorServiceServer
// for forward compatibility
type AsyncConnectorServiceServer interface {
	// CreateTask sends a task create request to the connector service.
	CreateTask(context.Context, *plugins.CreateTaskRequest) (*plugins.CreateTaskResponse, error)
	// Get job status.
	GetTask(context.Context, *plugins.GetTaskRequest) (*plugins.GetTaskResponse, error)
	// Delete the task resource.
	DeleteTask(context.Context, *plugins.DeleteTaskRequest) (*plugins.DeleteTaskResponse, error)
	// GetTaskMetrics returns one or more task execution metrics, if available.
	//
	// Errors include
	//   - OutOfRange if metrics are not available for the specified task time range
	//   - various other errors
	GetTaskMetrics(context.Context, *plugins.GetTaskMetricsRequest) (*plugins.GetTaskMetricsResponse, error)
	// GetTaskLogs returns task execution logs, if available.
	GetTaskLogs(*plugins.GetTaskLogsRequest, AsyncConnectorService_GetTaskLogsServer) error
}

// UnimplementedAsyncConnectorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAsyncConnectorServiceServer struct {
}

func (UnimplementedAsyncConnectorServiceServer) CreateTask(context.Context, *plugins.CreateTaskRequest) (*plugins.CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedAsyncConnectorServiceServer) GetTask(context.Context, *plugins.GetTaskRequest) (*plugins.GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedAsyncConnectorServiceServer) DeleteTask(context.Context, *plugins.DeleteTaskRequest) (*plugins.DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedAsyncConnectorServiceServer) GetTaskMetrics(context.Context, *plugins.GetTaskMetricsRequest) (*plugins.GetTaskMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskMetrics not implemented")
}
func (UnimplementedAsyncConnectorServiceServer) GetTaskLogs(*plugins.GetTaskLogsRequest, AsyncConnectorService_GetTaskLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskLogs not implemented")
}

// UnsafeAsyncConnectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsyncConnectorServiceServer will
// result in compilation errors.
type UnsafeAsyncConnectorServiceServer interface {
	mustEmbedUnimplementedAsyncConnectorServiceServer()
}

func RegisterAsyncConnectorServiceServer(s grpc.ServiceRegistrar, srv AsyncConnectorServiceServer) {
	s.RegisterService(&AsyncConnectorService_ServiceDesc, srv)
}

func _AsyncConnectorService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugins.CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncConnectorServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncConnectorService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncConnectorServiceServer).CreateTask(ctx, req.(*plugins.CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncConnectorService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugins.GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncConnectorServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncConnectorService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncConnectorServiceServer).GetTask(ctx, req.(*plugins.GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncConnectorService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugins.DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncConnectorServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncConnectorService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncConnectorServiceServer).DeleteTask(ctx, req.(*plugins.DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncConnectorService_GetTaskMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugins.GetTaskMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncConnectorServiceServer).GetTaskMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncConnectorService_GetTaskMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncConnectorServiceServer).GetTaskMetrics(ctx, req.(*plugins.GetTaskMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncConnectorService_GetTaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(plugins.GetTaskLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AsyncConnectorServiceServer).GetTaskLogs(m, &asyncConnectorServiceGetTaskLogsServer{stream})
}

type AsyncConnectorService_GetTaskLogsServer interface {
	Send(*plugins.GetTaskLogsResponse) error
	grpc.ServerStream
}

type asyncConnectorServiceGetTaskLogsServer struct {
	grpc.ServerStream
}

func (x *asyncConnectorServiceGetTaskLogsServer) Send(m *plugins.GetTaskLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AsyncConnectorService_ServiceDesc is the grpc.ServiceDesc for AsyncConnectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsyncConnectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl2.service.AsyncConnectorService",
	HandlerType: (*AsyncConnectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _AsyncConnectorService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _AsyncConnectorService_GetTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _AsyncConnectorService_DeleteTask_Handler,
		},
		{
			MethodName: "GetTaskMetrics",
			Handler:    _AsyncConnectorService_GetTaskMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTaskLogs",
			Handler:       _AsyncConnectorService_GetTaskLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flyteidl2/service/connector.proto",
}

const (
	ConnectorMetadataService_GetConnector_FullMethodName   = "/flyteidl2.service.ConnectorMetadataService/GetConnector"
	ConnectorMetadataService_ListConnectors_FullMethodName = "/flyteidl2.service.ConnectorMetadataService/ListConnectors"
)

// ConnectorMetadataServiceClient is the client API for ConnectorMetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorMetadataServiceClient interface {
	// Fetch a :ref:`ref_flyteidl2.plugins.Connector` definition.
	GetConnector(ctx context.Context, in *plugins.GetConnectorRequest, opts ...grpc.CallOption) (*plugins.GetConnectorResponse, error)
	// Fetch a list of :ref:`ref_flyteidl2.plugins.Connector` definitions.
	ListConnectors(ctx context.Context, in *plugins.ListConnectorsRequest, opts ...grpc.CallOption) (*plugins.ListConnectorsResponse, error)
}

type connectorMetadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorMetadataServiceClient(cc grpc.ClientConnInterface) ConnectorMetadataServiceClient {
	return &connectorMetadataServiceClient{cc}
}

func (c *connectorMetadataServiceClient) GetConnector(ctx context.Context, in *plugins.GetConnectorRequest, opts ...grpc.CallOption) (*plugins.GetConnectorResponse, error) {
	out := new(plugins.GetConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorMetadataService_GetConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorMetadataServiceClient) ListConnectors(ctx context.Context, in *plugins.ListConnectorsRequest, opts ...grpc.CallOption) (*plugins.ListConnectorsResponse, error) {
	out := new(plugins.ListConnectorsResponse)
	err := c.cc.Invoke(ctx, ConnectorMetadataService_ListConnectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorMetadataServiceServer is the server API for ConnectorMetadataService service.
// All implementations should embed UnimplementedConnectorMetadataServiceServer
// for forward compatibility
type ConnectorMetadataServiceServer interface {
	// Fetch a :ref:`ref_flyteidl2.plugins.Connector` definition.
	GetConnector(context.Context, *plugins.GetConnectorRequest) (*plugins.GetConnectorResponse, error)
	// Fetch a list of :ref:`ref_flyteidl2.plugins.Connector` definitions.
	ListConnectors(context.Context, *plugins.ListConnectorsRequest) (*plugins.ListConnectorsResponse, error)
}

// UnimplementedConnectorMetadataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorMetadataServiceServer struct {
}

func (UnimplementedConnectorMetadataServiceServer) GetConnector(context.Context, *plugins.GetConnectorRequest) (*plugins.GetConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnector not implemented")
}
func (UnimplementedConnectorMetadataServiceServer) ListConnectors(context.Context, *plugins.ListConnectorsRequest) (*plugins.ListConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectors not implemented")
}

// UnsafeConnectorMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorMetadataServiceServer will
// result in compilation errors.
type UnsafeConnectorMetadataServiceServer interface {
	mustEmbedUnimplementedConnectorMetadataServiceServer()
}

func RegisterConnectorMetadataServiceServer(s grpc.ServiceRegistrar, srv ConnectorMetadataServiceServer) {
	s.RegisterService(&ConnectorMetadataService_ServiceDesc, srv)
}

func _ConnectorMetadataService_GetConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugins.GetConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorMetadataServiceServer).GetConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorMetadataService_GetConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorMetadataServiceServer).GetConnector(ctx, req.(*plugins.GetConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorMetadataService_ListConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugins.ListConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorMetadataServiceServer).ListConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorMetadataService_ListConnectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorMetadataServiceServer).ListConnectors(ctx, req.(*plugins.ListConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorMetadataService_ServiceDesc is the grpc.ServiceDesc for ConnectorMetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorMetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl2.service.ConnectorMetadataService",
	HandlerType: (*ConnectorMetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnector",
			Handler:    _ConnectorMetadataService_GetConnector_Handler,
		},
		{
			MethodName: "ListConnectors",
			Handler:    _ConnectorMetadataService_ListConnectors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flyteidl2/service/connector.proto",
}
