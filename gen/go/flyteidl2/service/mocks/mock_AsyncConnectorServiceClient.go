// Code generated by mockery. DO NOT EDIT.

package service

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	plugins "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/plugins"

	service "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/service"
)

// AsyncConnectorServiceClient is an autogenerated mock type for the AsyncConnectorServiceClient type
type AsyncConnectorServiceClient struct {
	mock.Mock
}

type AsyncConnectorServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AsyncConnectorServiceClient) EXPECT() *AsyncConnectorServiceClient_Expecter {
	return &AsyncConnectorServiceClient_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: ctx, in, opts
func (_m *AsyncConnectorServiceClient) CreateTask(ctx context.Context, in *plugins.CreateTaskRequest, opts ...grpc.CallOption) (*plugins.CreateTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *plugins.CreateTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.CreateTaskRequest, ...grpc.CallOption) (*plugins.CreateTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.CreateTaskRequest, ...grpc.CallOption) *plugins.CreateTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.CreateTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.CreateTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncConnectorServiceClient_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type AsyncConnectorServiceClient_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *plugins.CreateTaskRequest
//   - opts ...grpc.CallOption
func (_e *AsyncConnectorServiceClient_Expecter) CreateTask(ctx interface{}, in interface{}, opts ...interface{}) *AsyncConnectorServiceClient_CreateTask_Call {
	return &AsyncConnectorServiceClient_CreateTask_Call{Call: _e.mock.On("CreateTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AsyncConnectorServiceClient_CreateTask_Call) Run(run func(ctx context.Context, in *plugins.CreateTaskRequest, opts ...grpc.CallOption)) *AsyncConnectorServiceClient_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*plugins.CreateTaskRequest), variadicArgs...)
	})
	return _c
}

func (_c *AsyncConnectorServiceClient_CreateTask_Call) Return(_a0 *plugins.CreateTaskResponse, _a1 error) *AsyncConnectorServiceClient_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncConnectorServiceClient_CreateTask_Call) RunAndReturn(run func(context.Context, *plugins.CreateTaskRequest, ...grpc.CallOption) (*plugins.CreateTaskResponse, error)) *AsyncConnectorServiceClient_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: ctx, in, opts
func (_m *AsyncConnectorServiceClient) DeleteTask(ctx context.Context, in *plugins.DeleteTaskRequest, opts ...grpc.CallOption) (*plugins.DeleteTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *plugins.DeleteTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.DeleteTaskRequest, ...grpc.CallOption) (*plugins.DeleteTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.DeleteTaskRequest, ...grpc.CallOption) *plugins.DeleteTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.DeleteTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.DeleteTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncConnectorServiceClient_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type AsyncConnectorServiceClient_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *plugins.DeleteTaskRequest
//   - opts ...grpc.CallOption
func (_e *AsyncConnectorServiceClient_Expecter) DeleteTask(ctx interface{}, in interface{}, opts ...interface{}) *AsyncConnectorServiceClient_DeleteTask_Call {
	return &AsyncConnectorServiceClient_DeleteTask_Call{Call: _e.mock.On("DeleteTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AsyncConnectorServiceClient_DeleteTask_Call) Run(run func(ctx context.Context, in *plugins.DeleteTaskRequest, opts ...grpc.CallOption)) *AsyncConnectorServiceClient_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*plugins.DeleteTaskRequest), variadicArgs...)
	})
	return _c
}

func (_c *AsyncConnectorServiceClient_DeleteTask_Call) Return(_a0 *plugins.DeleteTaskResponse, _a1 error) *AsyncConnectorServiceClient_DeleteTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncConnectorServiceClient_DeleteTask_Call) RunAndReturn(run func(context.Context, *plugins.DeleteTaskRequest, ...grpc.CallOption) (*plugins.DeleteTaskResponse, error)) *AsyncConnectorServiceClient_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: ctx, in, opts
func (_m *AsyncConnectorServiceClient) GetTask(ctx context.Context, in *plugins.GetTaskRequest, opts ...grpc.CallOption) (*plugins.GetTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *plugins.GetTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.GetTaskRequest, ...grpc.CallOption) (*plugins.GetTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.GetTaskRequest, ...grpc.CallOption) *plugins.GetTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.GetTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.GetTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncConnectorServiceClient_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type AsyncConnectorServiceClient_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *plugins.GetTaskRequest
//   - opts ...grpc.CallOption
func (_e *AsyncConnectorServiceClient_Expecter) GetTask(ctx interface{}, in interface{}, opts ...interface{}) *AsyncConnectorServiceClient_GetTask_Call {
	return &AsyncConnectorServiceClient_GetTask_Call{Call: _e.mock.On("GetTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AsyncConnectorServiceClient_GetTask_Call) Run(run func(ctx context.Context, in *plugins.GetTaskRequest, opts ...grpc.CallOption)) *AsyncConnectorServiceClient_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*plugins.GetTaskRequest), variadicArgs...)
	})
	return _c
}

func (_c *AsyncConnectorServiceClient_GetTask_Call) Return(_a0 *plugins.GetTaskResponse, _a1 error) *AsyncConnectorServiceClient_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncConnectorServiceClient_GetTask_Call) RunAndReturn(run func(context.Context, *plugins.GetTaskRequest, ...grpc.CallOption) (*plugins.GetTaskResponse, error)) *AsyncConnectorServiceClient_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskLogs provides a mock function with given fields: ctx, in, opts
func (_m *AsyncConnectorServiceClient) GetTaskLogs(ctx context.Context, in *plugins.GetTaskLogsRequest, opts ...grpc.CallOption) (service.AsyncConnectorService_GetTaskLogsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskLogs")
	}

	var r0 service.AsyncConnectorService_GetTaskLogsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.GetTaskLogsRequest, ...grpc.CallOption) (service.AsyncConnectorService_GetTaskLogsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.GetTaskLogsRequest, ...grpc.CallOption) service.AsyncConnectorService_GetTaskLogsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.AsyncConnectorService_GetTaskLogsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.GetTaskLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncConnectorServiceClient_GetTaskLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskLogs'
type AsyncConnectorServiceClient_GetTaskLogs_Call struct {
	*mock.Call
}

// GetTaskLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *plugins.GetTaskLogsRequest
//   - opts ...grpc.CallOption
func (_e *AsyncConnectorServiceClient_Expecter) GetTaskLogs(ctx interface{}, in interface{}, opts ...interface{}) *AsyncConnectorServiceClient_GetTaskLogs_Call {
	return &AsyncConnectorServiceClient_GetTaskLogs_Call{Call: _e.mock.On("GetTaskLogs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AsyncConnectorServiceClient_GetTaskLogs_Call) Run(run func(ctx context.Context, in *plugins.GetTaskLogsRequest, opts ...grpc.CallOption)) *AsyncConnectorServiceClient_GetTaskLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*plugins.GetTaskLogsRequest), variadicArgs...)
	})
	return _c
}

func (_c *AsyncConnectorServiceClient_GetTaskLogs_Call) Return(_a0 service.AsyncConnectorService_GetTaskLogsClient, _a1 error) *AsyncConnectorServiceClient_GetTaskLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncConnectorServiceClient_GetTaskLogs_Call) RunAndReturn(run func(context.Context, *plugins.GetTaskLogsRequest, ...grpc.CallOption) (service.AsyncConnectorService_GetTaskLogsClient, error)) *AsyncConnectorServiceClient_GetTaskLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskMetrics provides a mock function with given fields: ctx, in, opts
func (_m *AsyncConnectorServiceClient) GetTaskMetrics(ctx context.Context, in *plugins.GetTaskMetricsRequest, opts ...grpc.CallOption) (*plugins.GetTaskMetricsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskMetrics")
	}

	var r0 *plugins.GetTaskMetricsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.GetTaskMetricsRequest, ...grpc.CallOption) (*plugins.GetTaskMetricsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.GetTaskMetricsRequest, ...grpc.CallOption) *plugins.GetTaskMetricsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.GetTaskMetricsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.GetTaskMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncConnectorServiceClient_GetTaskMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskMetrics'
type AsyncConnectorServiceClient_GetTaskMetrics_Call struct {
	*mock.Call
}

// GetTaskMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - in *plugins.GetTaskMetricsRequest
//   - opts ...grpc.CallOption
func (_e *AsyncConnectorServiceClient_Expecter) GetTaskMetrics(ctx interface{}, in interface{}, opts ...interface{}) *AsyncConnectorServiceClient_GetTaskMetrics_Call {
	return &AsyncConnectorServiceClient_GetTaskMetrics_Call{Call: _e.mock.On("GetTaskMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AsyncConnectorServiceClient_GetTaskMetrics_Call) Run(run func(ctx context.Context, in *plugins.GetTaskMetricsRequest, opts ...grpc.CallOption)) *AsyncConnectorServiceClient_GetTaskMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*plugins.GetTaskMetricsRequest), variadicArgs...)
	})
	return _c
}

func (_c *AsyncConnectorServiceClient_GetTaskMetrics_Call) Return(_a0 *plugins.GetTaskMetricsResponse, _a1 error) *AsyncConnectorServiceClient_GetTaskMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncConnectorServiceClient_GetTaskMetrics_Call) RunAndReturn(run func(context.Context, *plugins.GetTaskMetricsRequest, ...grpc.CallOption) (*plugins.GetTaskMetricsResponse, error)) *AsyncConnectorServiceClient_GetTaskMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewAsyncConnectorServiceClient creates a new instance of AsyncConnectorServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsyncConnectorServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsyncConnectorServiceClient {
	mock := &AsyncConnectorServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
