// Code generated by mockery. DO NOT EDIT.

package service

import (
	context "context"

	plugins "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/plugins"
	mock "github.com/stretchr/testify/mock"
)

// ConnectorMetadataServiceServer is an autogenerated mock type for the ConnectorMetadataServiceServer type
type ConnectorMetadataServiceServer struct {
	mock.Mock
}

type ConnectorMetadataServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectorMetadataServiceServer) EXPECT() *ConnectorMetadataServiceServer_Expecter {
	return &ConnectorMetadataServiceServer_Expecter{mock: &_m.Mock}
}

// GetConnector provides a mock function with given fields: _a0, _a1
func (_m *ConnectorMetadataServiceServer) GetConnector(_a0 context.Context, _a1 *plugins.GetConnectorRequest) (*plugins.GetConnectorResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetConnector")
	}

	var r0 *plugins.GetConnectorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.GetConnectorRequest) (*plugins.GetConnectorResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.GetConnectorRequest) *plugins.GetConnectorResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.GetConnectorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.GetConnectorRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectorMetadataServiceServer_GetConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnector'
type ConnectorMetadataServiceServer_GetConnector_Call struct {
	*mock.Call
}

// GetConnector is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *plugins.GetConnectorRequest
func (_e *ConnectorMetadataServiceServer_Expecter) GetConnector(_a0 interface{}, _a1 interface{}) *ConnectorMetadataServiceServer_GetConnector_Call {
	return &ConnectorMetadataServiceServer_GetConnector_Call{Call: _e.mock.On("GetConnector", _a0, _a1)}
}

func (_c *ConnectorMetadataServiceServer_GetConnector_Call) Run(run func(_a0 context.Context, _a1 *plugins.GetConnectorRequest)) *ConnectorMetadataServiceServer_GetConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*plugins.GetConnectorRequest))
	})
	return _c
}

func (_c *ConnectorMetadataServiceServer_GetConnector_Call) Return(_a0 *plugins.GetConnectorResponse, _a1 error) *ConnectorMetadataServiceServer_GetConnector_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConnectorMetadataServiceServer_GetConnector_Call) RunAndReturn(run func(context.Context, *plugins.GetConnectorRequest) (*plugins.GetConnectorResponse, error)) *ConnectorMetadataServiceServer_GetConnector_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectors provides a mock function with given fields: _a0, _a1
func (_m *ConnectorMetadataServiceServer) ListConnectors(_a0 context.Context, _a1 *plugins.ListConnectorsRequest) (*plugins.ListConnectorsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectors")
	}

	var r0 *plugins.ListConnectorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.ListConnectorsRequest) (*plugins.ListConnectorsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *plugins.ListConnectorsRequest) *plugins.ListConnectorsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.ListConnectorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *plugins.ListConnectorsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectorMetadataServiceServer_ListConnectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectors'
type ConnectorMetadataServiceServer_ListConnectors_Call struct {
	*mock.Call
}

// ListConnectors is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *plugins.ListConnectorsRequest
func (_e *ConnectorMetadataServiceServer_Expecter) ListConnectors(_a0 interface{}, _a1 interface{}) *ConnectorMetadataServiceServer_ListConnectors_Call {
	return &ConnectorMetadataServiceServer_ListConnectors_Call{Call: _e.mock.On("ListConnectors", _a0, _a1)}
}

func (_c *ConnectorMetadataServiceServer_ListConnectors_Call) Run(run func(_a0 context.Context, _a1 *plugins.ListConnectorsRequest)) *ConnectorMetadataServiceServer_ListConnectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*plugins.ListConnectorsRequest))
	})
	return _c
}

func (_c *ConnectorMetadataServiceServer_ListConnectors_Call) Return(_a0 *plugins.ListConnectorsResponse, _a1 error) *ConnectorMetadataServiceServer_ListConnectors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConnectorMetadataServiceServer_ListConnectors_Call) RunAndReturn(run func(context.Context, *plugins.ListConnectorsRequest) (*plugins.ListConnectorsResponse, error)) *ConnectorMetadataServiceServer_ListConnectors_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectorMetadataServiceServer creates a new instance of ConnectorMetadataServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectorMetadataServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectorMetadataServiceServer {
	mock := &ConnectorMetadataServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
