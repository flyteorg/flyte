// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: flyteidl2/trigger/trigger_service.proto

package trigger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TriggerService_SaveTrigger_FullMethodName               = "/flyteidl2.trigger.TriggerService/SaveTrigger"
	TriggerService_GetTriggerDetails_FullMethodName         = "/flyteidl2.trigger.TriggerService/GetTriggerDetails"
	TriggerService_GetTriggerRevisionDetails_FullMethodName = "/flyteidl2.trigger.TriggerService/GetTriggerRevisionDetails"
	TriggerService_ListTriggers_FullMethodName              = "/flyteidl2.trigger.TriggerService/ListTriggers"
	TriggerService_GetTriggerRevisionHistory_FullMethodName = "/flyteidl2.trigger.TriggerService/GetTriggerRevisionHistory"
	TriggerService_UpdateTriggers_FullMethodName            = "/flyteidl2.trigger.TriggerService/UpdateTriggers"
	TriggerService_DeleteTriggers_FullMethodName            = "/flyteidl2.trigger.TriggerService/DeleteTriggers"
)

// TriggerServiceClient is the client API for TriggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerServiceClient interface {
	// Create if trigger didn't exist previously.
	// Update if it already exists.
	// Re-create(or undelete) if it was soft-deleted.
	// Client must fetch the latest trigger in order to obtain the latest `trigger.id.revision`.
	// If trigger is not found, client can set `trigger.id.revision` to 1, it is ignored and set automatically by backend.
	// If trigger is found, client should set `trigger.id.revision` to the <latest>.
	// Backend validates that version is the latest and creates a new revision of the trigger.
	// Otherwise, operation is rejected(optimistic locking) and client must re-fetch trigger again.
	SaveTrigger(ctx context.Context, in *SaveTriggerRequest, opts ...grpc.CallOption) (*SaveTriggerResponse, error)
	// Get detailed info about the latest trigger revision
	GetTriggerDetails(ctx context.Context, in *GetTriggerDetailsRequest, opts ...grpc.CallOption) (*GetTriggerDetailsResponse, error)
	// Get detailed info about a specific trigger revision
	GetTriggerRevisionDetails(ctx context.Context, in *GetTriggerRevisionDetailsRequest, opts ...grpc.CallOption) (*GetTriggerRevisionDetailsResponse, error)
	// List basic info about triggers based on various filtering and sorting rules.
	ListTriggers(ctx context.Context, in *ListTriggersRequest, opts ...grpc.CallOption) (*ListTriggersResponse, error)
	// GetTriggerRevisionHistory returns all revisions for a given trigger
	GetTriggerRevisionHistory(ctx context.Context, in *GetTriggerRevisionHistoryRequest, opts ...grpc.CallOption) (*GetTriggerRevisionHistoryResponse, error)
	// Update some trigger spec fields for multiple triggers at once
	UpdateTriggers(ctx context.Context, in *UpdateTriggersRequest, opts ...grpc.CallOption) (*UpdateTriggersResponse, error)
	// Soft-delete multiple triggers at once.
	DeleteTriggers(ctx context.Context, in *DeleteTriggersRequest, opts ...grpc.CallOption) (*DeleteTriggersResponse, error)
}

type triggerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerServiceClient(cc grpc.ClientConnInterface) TriggerServiceClient {
	return &triggerServiceClient{cc}
}

func (c *triggerServiceClient) SaveTrigger(ctx context.Context, in *SaveTriggerRequest, opts ...grpc.CallOption) (*SaveTriggerResponse, error) {
	out := new(SaveTriggerResponse)
	err := c.cc.Invoke(ctx, TriggerService_SaveTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) GetTriggerDetails(ctx context.Context, in *GetTriggerDetailsRequest, opts ...grpc.CallOption) (*GetTriggerDetailsResponse, error) {
	out := new(GetTriggerDetailsResponse)
	err := c.cc.Invoke(ctx, TriggerService_GetTriggerDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) GetTriggerRevisionDetails(ctx context.Context, in *GetTriggerRevisionDetailsRequest, opts ...grpc.CallOption) (*GetTriggerRevisionDetailsResponse, error) {
	out := new(GetTriggerRevisionDetailsResponse)
	err := c.cc.Invoke(ctx, TriggerService_GetTriggerRevisionDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) ListTriggers(ctx context.Context, in *ListTriggersRequest, opts ...grpc.CallOption) (*ListTriggersResponse, error) {
	out := new(ListTriggersResponse)
	err := c.cc.Invoke(ctx, TriggerService_ListTriggers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) GetTriggerRevisionHistory(ctx context.Context, in *GetTriggerRevisionHistoryRequest, opts ...grpc.CallOption) (*GetTriggerRevisionHistoryResponse, error) {
	out := new(GetTriggerRevisionHistoryResponse)
	err := c.cc.Invoke(ctx, TriggerService_GetTriggerRevisionHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) UpdateTriggers(ctx context.Context, in *UpdateTriggersRequest, opts ...grpc.CallOption) (*UpdateTriggersResponse, error) {
	out := new(UpdateTriggersResponse)
	err := c.cc.Invoke(ctx, TriggerService_UpdateTriggers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) DeleteTriggers(ctx context.Context, in *DeleteTriggersRequest, opts ...grpc.CallOption) (*DeleteTriggersResponse, error) {
	out := new(DeleteTriggersResponse)
	err := c.cc.Invoke(ctx, TriggerService_DeleteTriggers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerServiceServer is the server API for TriggerService service.
// All implementations should embed UnimplementedTriggerServiceServer
// for forward compatibility
type TriggerServiceServer interface {
	// Create if trigger didn't exist previously.
	// Update if it already exists.
	// Re-create(or undelete) if it was soft-deleted.
	// Client must fetch the latest trigger in order to obtain the latest `trigger.id.revision`.
	// If trigger is not found, client can set `trigger.id.revision` to 1, it is ignored and set automatically by backend.
	// If trigger is found, client should set `trigger.id.revision` to the <latest>.
	// Backend validates that version is the latest and creates a new revision of the trigger.
	// Otherwise, operation is rejected(optimistic locking) and client must re-fetch trigger again.
	SaveTrigger(context.Context, *SaveTriggerRequest) (*SaveTriggerResponse, error)
	// Get detailed info about the latest trigger revision
	GetTriggerDetails(context.Context, *GetTriggerDetailsRequest) (*GetTriggerDetailsResponse, error)
	// Get detailed info about a specific trigger revision
	GetTriggerRevisionDetails(context.Context, *GetTriggerRevisionDetailsRequest) (*GetTriggerRevisionDetailsResponse, error)
	// List basic info about triggers based on various filtering and sorting rules.
	ListTriggers(context.Context, *ListTriggersRequest) (*ListTriggersResponse, error)
	// GetTriggerRevisionHistory returns all revisions for a given trigger
	GetTriggerRevisionHistory(context.Context, *GetTriggerRevisionHistoryRequest) (*GetTriggerRevisionHistoryResponse, error)
	// Update some trigger spec fields for multiple triggers at once
	UpdateTriggers(context.Context, *UpdateTriggersRequest) (*UpdateTriggersResponse, error)
	// Soft-delete multiple triggers at once.
	DeleteTriggers(context.Context, *DeleteTriggersRequest) (*DeleteTriggersResponse, error)
}

// UnimplementedTriggerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTriggerServiceServer struct {
}

func (UnimplementedTriggerServiceServer) SaveTrigger(context.Context, *SaveTriggerRequest) (*SaveTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTrigger not implemented")
}
func (UnimplementedTriggerServiceServer) GetTriggerDetails(context.Context, *GetTriggerDetailsRequest) (*GetTriggerDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTriggerDetails not implemented")
}
func (UnimplementedTriggerServiceServer) GetTriggerRevisionDetails(context.Context, *GetTriggerRevisionDetailsRequest) (*GetTriggerRevisionDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTriggerRevisionDetails not implemented")
}
func (UnimplementedTriggerServiceServer) ListTriggers(context.Context, *ListTriggersRequest) (*ListTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTriggers not implemented")
}
func (UnimplementedTriggerServiceServer) GetTriggerRevisionHistory(context.Context, *GetTriggerRevisionHistoryRequest) (*GetTriggerRevisionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTriggerRevisionHistory not implemented")
}
func (UnimplementedTriggerServiceServer) UpdateTriggers(context.Context, *UpdateTriggersRequest) (*UpdateTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTriggers not implemented")
}
func (UnimplementedTriggerServiceServer) DeleteTriggers(context.Context, *DeleteTriggersRequest) (*DeleteTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTriggers not implemented")
}

// UnsafeTriggerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerServiceServer will
// result in compilation errors.
type UnsafeTriggerServiceServer interface {
	mustEmbedUnimplementedTriggerServiceServer()
}

func RegisterTriggerServiceServer(s grpc.ServiceRegistrar, srv TriggerServiceServer) {
	s.RegisterService(&TriggerService_ServiceDesc, srv)
}

func _TriggerService_SaveTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).SaveTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_SaveTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).SaveTrigger(ctx, req.(*SaveTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_GetTriggerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTriggerDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).GetTriggerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_GetTriggerDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).GetTriggerDetails(ctx, req.(*GetTriggerDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_GetTriggerRevisionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTriggerRevisionDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).GetTriggerRevisionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_GetTriggerRevisionDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).GetTriggerRevisionDetails(ctx, req.(*GetTriggerRevisionDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_ListTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).ListTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_ListTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).ListTriggers(ctx, req.(*ListTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_GetTriggerRevisionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTriggerRevisionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).GetTriggerRevisionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_GetTriggerRevisionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).GetTriggerRevisionHistory(ctx, req.(*GetTriggerRevisionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_UpdateTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).UpdateTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_UpdateTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).UpdateTriggers(ctx, req.(*UpdateTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_DeleteTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).DeleteTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerService_DeleteTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).DeleteTriggers(ctx, req.(*DeleteTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerService_ServiceDesc is the grpc.ServiceDesc for TriggerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl2.trigger.TriggerService",
	HandlerType: (*TriggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTrigger",
			Handler:    _TriggerService_SaveTrigger_Handler,
		},
		{
			MethodName: "GetTriggerDetails",
			Handler:    _TriggerService_GetTriggerDetails_Handler,
		},
		{
			MethodName: "GetTriggerRevisionDetails",
			Handler:    _TriggerService_GetTriggerRevisionDetails_Handler,
		},
		{
			MethodName: "ListTriggers",
			Handler:    _TriggerService_ListTriggers_Handler,
		},
		{
			MethodName: "GetTriggerRevisionHistory",
			Handler:    _TriggerService_GetTriggerRevisionHistory_Handler,
		},
		{
			MethodName: "UpdateTriggers",
			Handler:    _TriggerService_UpdateTriggers_Handler,
		},
		{
			MethodName: "DeleteTriggers",
			Handler:    _TriggerService_DeleteTriggers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flyteidl2/trigger/trigger_service.proto",
}
