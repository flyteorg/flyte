// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl2/trigger/trigger_service.proto

package trigger

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	common "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/common"
	task "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/task"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for saving a trigger.
type DeployTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *common.TriggerIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Spec *TriggerSpec              `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Optional automation spec.
	AutomationSpec *task.TriggerAutomationSpec `protobuf:"bytes,3,opt,name=automation_spec,json=automationSpec,proto3" json:"automation_spec,omitempty"`
}

func (x *DeployTriggerRequest) Reset() {
	*x = DeployTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployTriggerRequest) ProtoMessage() {}

func (x *DeployTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployTriggerRequest.ProtoReflect.Descriptor instead.
func (*DeployTriggerRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{0}
}

func (x *DeployTriggerRequest) GetId() *common.TriggerIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeployTriggerRequest) GetSpec() *TriggerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *DeployTriggerRequest) GetAutomationSpec() *task.TriggerAutomationSpec {
	if x != nil {
		return x.AutomationSpec
	}
	return nil
}

// Response message for saving a trigger.
type DeployTriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger *TriggerDetails `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *DeployTriggerResponse) Reset() {
	*x = DeployTriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployTriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployTriggerResponse) ProtoMessage() {}

func (x *DeployTriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployTriggerResponse.ProtoReflect.Descriptor instead.
func (*DeployTriggerResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{1}
}

func (x *DeployTriggerResponse) GetTrigger() *TriggerDetails {
	if x != nil {
		return x.Trigger
	}
	return nil
}

// Request message for saving a trigger.
type GetTriggerDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *common.TriggerName `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTriggerDetailsRequest) Reset() {
	*x = GetTriggerDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTriggerDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerDetailsRequest) ProtoMessage() {}

func (x *GetTriggerDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriggerDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetTriggerDetailsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetTriggerDetailsRequest) GetName() *common.TriggerName {
	if x != nil {
		return x.Name
	}
	return nil
}

// Response message for saving a trigger.
type GetTriggerDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger *TriggerDetails `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *GetTriggerDetailsResponse) Reset() {
	*x = GetTriggerDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTriggerDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerDetailsResponse) ProtoMessage() {}

func (x *GetTriggerDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriggerDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetTriggerDetailsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetTriggerDetailsResponse) GetTrigger() *TriggerDetails {
	if x != nil {
		return x.Trigger
	}
	return nil
}

// Request message for saving a trigger.
type GetTriggerRevisionDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *common.TriggerIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTriggerRevisionDetailsRequest) Reset() {
	*x = GetTriggerRevisionDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTriggerRevisionDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerRevisionDetailsRequest) ProtoMessage() {}

func (x *GetTriggerRevisionDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriggerRevisionDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetTriggerRevisionDetailsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetTriggerRevisionDetailsRequest) GetId() *common.TriggerIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

// Response message for saving a trigger.
type GetTriggerRevisionDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger *TriggerDetails `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (x *GetTriggerRevisionDetailsResponse) Reset() {
	*x = GetTriggerRevisionDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTriggerRevisionDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerRevisionDetailsResponse) ProtoMessage() {}

func (x *GetTriggerRevisionDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriggerRevisionDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetTriggerRevisionDetailsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetTriggerRevisionDetailsResponse) GetTrigger() *TriggerDetails {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type ListTriggersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common list request parameters.
	Request *common.ListRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Types that are assignable to ScopeBy:
	//
	//	*ListTriggersRequest_Org
	//	*ListTriggersRequest_ProjectId
	//	*ListTriggersRequest_TaskId
	ScopeBy isListTriggersRequest_ScopeBy `protobuf_oneof:"scope_by"`
}

func (x *ListTriggersRequest) Reset() {
	*x = ListTriggersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTriggersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTriggersRequest) ProtoMessage() {}

func (x *ListTriggersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTriggersRequest.ProtoReflect.Descriptor instead.
func (*ListTriggersRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListTriggersRequest) GetRequest() *common.ListRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (m *ListTriggersRequest) GetScopeBy() isListTriggersRequest_ScopeBy {
	if m != nil {
		return m.ScopeBy
	}
	return nil
}

func (x *ListTriggersRequest) GetOrg() string {
	if x, ok := x.GetScopeBy().(*ListTriggersRequest_Org); ok {
		return x.Org
	}
	return ""
}

func (x *ListTriggersRequest) GetProjectId() *common.ProjectIdentifier {
	if x, ok := x.GetScopeBy().(*ListTriggersRequest_ProjectId); ok {
		return x.ProjectId
	}
	return nil
}

func (x *ListTriggersRequest) GetTaskId() *task.TaskIdentifier {
	if x, ok := x.GetScopeBy().(*ListTriggersRequest_TaskId); ok {
		return x.TaskId
	}
	return nil
}

type isListTriggersRequest_ScopeBy interface {
	isListTriggersRequest_ScopeBy()
}

type ListTriggersRequest_Org struct {
	// Organization name for filtering.
	Org string `protobuf:"bytes,2,opt,name=org,proto3,oneof"`
}

type ListTriggersRequest_ProjectId struct {
	// Project identifier for filtering.
	ProjectId *common.ProjectIdentifier `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3,oneof"`
}

type ListTriggersRequest_TaskId struct {
	// List all triggers attached to a given task.
	TaskId *task.TaskIdentifier `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3,oneof"`
}

func (*ListTriggersRequest_Org) isListTriggersRequest_ScopeBy() {}

func (*ListTriggersRequest_ProjectId) isListTriggersRequest_ScopeBy() {}

func (*ListTriggersRequest_TaskId) isListTriggersRequest_ScopeBy() {}

// Response message for listing triggers.
type ListTriggersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of triggers matching the filter criteria.
	Triggers []*Trigger `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers,omitempty"`
	// Token for fetching the next page of results, if any.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListTriggersResponse) Reset() {
	*x = ListTriggersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTriggersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTriggersResponse) ProtoMessage() {}

func (x *ListTriggersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTriggersResponse.ProtoReflect.Descriptor instead.
func (*ListTriggersResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListTriggersResponse) GetTriggers() []*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *ListTriggersResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetTriggerRevisionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *common.ListRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Name    *common.TriggerName `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTriggerRevisionHistoryRequest) Reset() {
	*x = GetTriggerRevisionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTriggerRevisionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerRevisionHistoryRequest) ProtoMessage() {}

func (x *GetTriggerRevisionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriggerRevisionHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetTriggerRevisionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetTriggerRevisionHistoryRequest) GetRequest() *common.ListRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *GetTriggerRevisionHistoryRequest) GetName() *common.TriggerName {
	if x != nil {
		return x.Name
	}
	return nil
}

type GetTriggerRevisionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of triggers matching the filter criteria.
	Triggers []*TriggerRevision `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers,omitempty"`
	// Token for fetching the next page of results, if any.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetTriggerRevisionHistoryResponse) Reset() {
	*x = GetTriggerRevisionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTriggerRevisionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerRevisionHistoryResponse) ProtoMessage() {}

func (x *GetTriggerRevisionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriggerRevisionHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetTriggerRevisionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetTriggerRevisionHistoryResponse) GetTriggers() []*TriggerRevision {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *GetTriggerRevisionHistoryResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Request message for updating some trigger spec fields for multiple triggers
type UpdateTriggersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names  []*common.TriggerName `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Active bool                  `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *UpdateTriggersRequest) Reset() {
	*x = UpdateTriggersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTriggersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTriggersRequest) ProtoMessage() {}

func (x *UpdateTriggersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTriggersRequest.ProtoReflect.Descriptor instead.
func (*UpdateTriggersRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateTriggersRequest) GetNames() []*common.TriggerName {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *UpdateTriggersRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

// Response message for updating some trigger spec fields for multiple triggers
type UpdateTriggersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTriggersResponse) Reset() {
	*x = UpdateTriggersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTriggersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTriggersResponse) ProtoMessage() {}

func (x *UpdateTriggersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTriggersResponse.ProtoReflect.Descriptor instead.
func (*UpdateTriggersResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{11}
}

// Request message for activating or deactivating multiple triggers
type DeleteTriggersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []*common.TriggerName `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *DeleteTriggersRequest) Reset() {
	*x = DeleteTriggersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTriggersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTriggersRequest) ProtoMessage() {}

func (x *DeleteTriggersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTriggersRequest.ProtoReflect.Descriptor instead.
func (*DeleteTriggersRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteTriggersRequest) GetNames() []*common.TriggerName {
	if x != nil {
		return x.Names
	}
	return nil
}

// Response message for activating or deactivating multiple triggers.
type DeleteTriggersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTriggersResponse) Reset() {
	*x = DeleteTriggersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTriggersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTriggersResponse) ProtoMessage() {}

func (x *DeleteTriggersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTriggersResponse.ProtoReflect.Descriptor instead.
func (*DeleteTriggersResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP(), []int{13}
}

var File_flyteidl2_trigger_trigger_service_proto protoreflect.FileDescriptor

var file_flyteidl2_trigger_trigger_service_proto_rawDesc = []byte{
	0x0a, 0x27, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x22, 0x5c, 0x0a, 0x15, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x60, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x22, 0x5f, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x68, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x82, 0x02, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x03, 0x6f, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xd8,
	0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x44, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x42, 0x11,
	0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x62, 0x79, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08,
	0x01, 0x22, 0x64, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x96, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x79, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6e, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x18, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xbf, 0x06, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x33, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x12, 0x64, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x33, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x67, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x12, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xca, 0x01, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x42, 0x13, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0xa2, 0x02, 0x03, 0x46, 0x54, 0x58, 0xaa, 0x02, 0x11, 0x46, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0xca, 0x02, 0x11,
	0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0xe2, 0x02, 0x1d, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x12, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x3a, 0x3a, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl2_trigger_trigger_service_proto_rawDescOnce sync.Once
	file_flyteidl2_trigger_trigger_service_proto_rawDescData = file_flyteidl2_trigger_trigger_service_proto_rawDesc
)

func file_flyteidl2_trigger_trigger_service_proto_rawDescGZIP() []byte {
	file_flyteidl2_trigger_trigger_service_proto_rawDescOnce.Do(func() {
		file_flyteidl2_trigger_trigger_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl2_trigger_trigger_service_proto_rawDescData)
	})
	return file_flyteidl2_trigger_trigger_service_proto_rawDescData
}

var file_flyteidl2_trigger_trigger_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_flyteidl2_trigger_trigger_service_proto_goTypes = []interface{}{
	(*DeployTriggerRequest)(nil),              // 0: flyteidl2.trigger.DeployTriggerRequest
	(*DeployTriggerResponse)(nil),             // 1: flyteidl2.trigger.DeployTriggerResponse
	(*GetTriggerDetailsRequest)(nil),          // 2: flyteidl2.trigger.GetTriggerDetailsRequest
	(*GetTriggerDetailsResponse)(nil),         // 3: flyteidl2.trigger.GetTriggerDetailsResponse
	(*GetTriggerRevisionDetailsRequest)(nil),  // 4: flyteidl2.trigger.GetTriggerRevisionDetailsRequest
	(*GetTriggerRevisionDetailsResponse)(nil), // 5: flyteidl2.trigger.GetTriggerRevisionDetailsResponse
	(*ListTriggersRequest)(nil),               // 6: flyteidl2.trigger.ListTriggersRequest
	(*ListTriggersResponse)(nil),              // 7: flyteidl2.trigger.ListTriggersResponse
	(*GetTriggerRevisionHistoryRequest)(nil),  // 8: flyteidl2.trigger.GetTriggerRevisionHistoryRequest
	(*GetTriggerRevisionHistoryResponse)(nil), // 9: flyteidl2.trigger.GetTriggerRevisionHistoryResponse
	(*UpdateTriggersRequest)(nil),             // 10: flyteidl2.trigger.UpdateTriggersRequest
	(*UpdateTriggersResponse)(nil),            // 11: flyteidl2.trigger.UpdateTriggersResponse
	(*DeleteTriggersRequest)(nil),             // 12: flyteidl2.trigger.DeleteTriggersRequest
	(*DeleteTriggersResponse)(nil),            // 13: flyteidl2.trigger.DeleteTriggersResponse
	(*common.TriggerIdentifier)(nil),          // 14: flyteidl2.common.TriggerIdentifier
	(*TriggerSpec)(nil),                       // 15: flyteidl2.trigger.TriggerSpec
	(*task.TriggerAutomationSpec)(nil),        // 16: flyteidl2.task.TriggerAutomationSpec
	(*TriggerDetails)(nil),                    // 17: flyteidl2.trigger.TriggerDetails
	(*common.TriggerName)(nil),                // 18: flyteidl2.common.TriggerName
	(*common.ListRequest)(nil),                // 19: flyteidl2.common.ListRequest
	(*common.ProjectIdentifier)(nil),          // 20: flyteidl2.common.ProjectIdentifier
	(*task.TaskIdentifier)(nil),               // 21: flyteidl2.task.TaskIdentifier
	(*Trigger)(nil),                           // 22: flyteidl2.trigger.Trigger
	(*TriggerRevision)(nil),                   // 23: flyteidl2.trigger.TriggerRevision
}
var file_flyteidl2_trigger_trigger_service_proto_depIdxs = []int32{
	14, // 0: flyteidl2.trigger.DeployTriggerRequest.id:type_name -> flyteidl2.common.TriggerIdentifier
	15, // 1: flyteidl2.trigger.DeployTriggerRequest.spec:type_name -> flyteidl2.trigger.TriggerSpec
	16, // 2: flyteidl2.trigger.DeployTriggerRequest.automation_spec:type_name -> flyteidl2.task.TriggerAutomationSpec
	17, // 3: flyteidl2.trigger.DeployTriggerResponse.trigger:type_name -> flyteidl2.trigger.TriggerDetails
	18, // 4: flyteidl2.trigger.GetTriggerDetailsRequest.name:type_name -> flyteidl2.common.TriggerName
	17, // 5: flyteidl2.trigger.GetTriggerDetailsResponse.trigger:type_name -> flyteidl2.trigger.TriggerDetails
	14, // 6: flyteidl2.trigger.GetTriggerRevisionDetailsRequest.id:type_name -> flyteidl2.common.TriggerIdentifier
	17, // 7: flyteidl2.trigger.GetTriggerRevisionDetailsResponse.trigger:type_name -> flyteidl2.trigger.TriggerDetails
	19, // 8: flyteidl2.trigger.ListTriggersRequest.request:type_name -> flyteidl2.common.ListRequest
	20, // 9: flyteidl2.trigger.ListTriggersRequest.project_id:type_name -> flyteidl2.common.ProjectIdentifier
	21, // 10: flyteidl2.trigger.ListTriggersRequest.task_id:type_name -> flyteidl2.task.TaskIdentifier
	22, // 11: flyteidl2.trigger.ListTriggersResponse.triggers:type_name -> flyteidl2.trigger.Trigger
	19, // 12: flyteidl2.trigger.GetTriggerRevisionHistoryRequest.request:type_name -> flyteidl2.common.ListRequest
	18, // 13: flyteidl2.trigger.GetTriggerRevisionHistoryRequest.name:type_name -> flyteidl2.common.TriggerName
	23, // 14: flyteidl2.trigger.GetTriggerRevisionHistoryResponse.triggers:type_name -> flyteidl2.trigger.TriggerRevision
	18, // 15: flyteidl2.trigger.UpdateTriggersRequest.names:type_name -> flyteidl2.common.TriggerName
	18, // 16: flyteidl2.trigger.DeleteTriggersRequest.names:type_name -> flyteidl2.common.TriggerName
	0,  // 17: flyteidl2.trigger.TriggerService.DeployTrigger:input_type -> flyteidl2.trigger.DeployTriggerRequest
	2,  // 18: flyteidl2.trigger.TriggerService.GetTriggerDetails:input_type -> flyteidl2.trigger.GetTriggerDetailsRequest
	4,  // 19: flyteidl2.trigger.TriggerService.GetTriggerRevisionDetails:input_type -> flyteidl2.trigger.GetTriggerRevisionDetailsRequest
	6,  // 20: flyteidl2.trigger.TriggerService.ListTriggers:input_type -> flyteidl2.trigger.ListTriggersRequest
	8,  // 21: flyteidl2.trigger.TriggerService.GetTriggerRevisionHistory:input_type -> flyteidl2.trigger.GetTriggerRevisionHistoryRequest
	10, // 22: flyteidl2.trigger.TriggerService.UpdateTriggers:input_type -> flyteidl2.trigger.UpdateTriggersRequest
	12, // 23: flyteidl2.trigger.TriggerService.DeleteTriggers:input_type -> flyteidl2.trigger.DeleteTriggersRequest
	1,  // 24: flyteidl2.trigger.TriggerService.DeployTrigger:output_type -> flyteidl2.trigger.DeployTriggerResponse
	3,  // 25: flyteidl2.trigger.TriggerService.GetTriggerDetails:output_type -> flyteidl2.trigger.GetTriggerDetailsResponse
	5,  // 26: flyteidl2.trigger.TriggerService.GetTriggerRevisionDetails:output_type -> flyteidl2.trigger.GetTriggerRevisionDetailsResponse
	7,  // 27: flyteidl2.trigger.TriggerService.ListTriggers:output_type -> flyteidl2.trigger.ListTriggersResponse
	9,  // 28: flyteidl2.trigger.TriggerService.GetTriggerRevisionHistory:output_type -> flyteidl2.trigger.GetTriggerRevisionHistoryResponse
	11, // 29: flyteidl2.trigger.TriggerService.UpdateTriggers:output_type -> flyteidl2.trigger.UpdateTriggersResponse
	13, // 30: flyteidl2.trigger.TriggerService.DeleteTriggers:output_type -> flyteidl2.trigger.DeleteTriggersResponse
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_flyteidl2_trigger_trigger_service_proto_init() }
func file_flyteidl2_trigger_trigger_service_proto_init() {
	if File_flyteidl2_trigger_trigger_service_proto != nil {
		return
	}
	file_flyteidl2_trigger_trigger_definition_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployTriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTriggerDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTriggerDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTriggerRevisionDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTriggerRevisionDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTriggersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTriggersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTriggerRevisionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTriggerRevisionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTriggersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTriggersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTriggersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTriggersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flyteidl2_trigger_trigger_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ListTriggersRequest_Org)(nil),
		(*ListTriggersRequest_ProjectId)(nil),
		(*ListTriggersRequest_TaskId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl2_trigger_trigger_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flyteidl2_trigger_trigger_service_proto_goTypes,
		DependencyIndexes: file_flyteidl2_trigger_trigger_service_proto_depIdxs,
		MessageInfos:      file_flyteidl2_trigger_trigger_service_proto_msgTypes,
	}.Build()
	File_flyteidl2_trigger_trigger_service_proto = out.File
	file_flyteidl2_trigger_trigger_service_proto_rawDesc = nil
	file_flyteidl2_trigger_trigger_service_proto_goTypes = nil
	file_flyteidl2_trigger_trigger_service_proto_depIdxs = nil
}
