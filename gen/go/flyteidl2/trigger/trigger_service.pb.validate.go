// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/trigger/trigger_service.proto

package trigger

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SaveTriggerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveTriggerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveTriggerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveTriggerRequestMultiError, or nil if none found.
func (m *SaveTriggerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveTriggerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrigger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveTriggerRequestValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveTriggerRequestValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrigger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveTriggerRequestValidationError{
				field:  "Trigger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveTriggerRequestMultiError(errors)
	}

	return nil
}

// SaveTriggerRequestMultiError is an error wrapping multiple validation errors
// returned by SaveTriggerRequest.ValidateAll() if the designated constraints
// aren't met.
type SaveTriggerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveTriggerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveTriggerRequestMultiError) AllErrors() []error { return m }

// SaveTriggerRequestValidationError is the validation error returned by
// SaveTriggerRequest.Validate if the designated constraints aren't met.
type SaveTriggerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveTriggerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveTriggerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveTriggerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveTriggerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveTriggerRequestValidationError) ErrorName() string {
	return "SaveTriggerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveTriggerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveTriggerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveTriggerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveTriggerRequestValidationError{}

// Validate checks the field values on SaveTriggerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveTriggerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveTriggerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveTriggerResponseMultiError, or nil if none found.
func (m *SaveTriggerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveTriggerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrigger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveTriggerResponseValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveTriggerResponseValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrigger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveTriggerResponseValidationError{
				field:  "Trigger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveTriggerResponseMultiError(errors)
	}

	return nil
}

// SaveTriggerResponseMultiError is an error wrapping multiple validation
// errors returned by SaveTriggerResponse.ValidateAll() if the designated
// constraints aren't met.
type SaveTriggerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveTriggerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveTriggerResponseMultiError) AllErrors() []error { return m }

// SaveTriggerResponseValidationError is the validation error returned by
// SaveTriggerResponse.Validate if the designated constraints aren't met.
type SaveTriggerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveTriggerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveTriggerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveTriggerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveTriggerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveTriggerResponseValidationError) ErrorName() string {
	return "SaveTriggerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveTriggerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveTriggerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveTriggerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveTriggerResponseValidationError{}

// Validate checks the field values on GetTriggerDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTriggerDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTriggerDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTriggerDetailsRequestMultiError, or nil if none found.
func (m *GetTriggerDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTriggerDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTriggerDetailsRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTriggerDetailsRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTriggerDetailsRequestValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTriggerDetailsRequestMultiError(errors)
	}

	return nil
}

// GetTriggerDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTriggerDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTriggerDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTriggerDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTriggerDetailsRequestMultiError) AllErrors() []error { return m }

// GetTriggerDetailsRequestValidationError is the validation error returned by
// GetTriggerDetailsRequest.Validate if the designated constraints aren't met.
type GetTriggerDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTriggerDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTriggerDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTriggerDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTriggerDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTriggerDetailsRequestValidationError) ErrorName() string {
	return "GetTriggerDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTriggerDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTriggerDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTriggerDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTriggerDetailsRequestValidationError{}

// Validate checks the field values on GetTriggerDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTriggerDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTriggerDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTriggerDetailsResponseMultiError, or nil if none found.
func (m *GetTriggerDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTriggerDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrigger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTriggerDetailsResponseValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTriggerDetailsResponseValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrigger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTriggerDetailsResponseValidationError{
				field:  "Trigger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTriggerDetailsResponseMultiError(errors)
	}

	return nil
}

// GetTriggerDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTriggerDetailsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetTriggerDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTriggerDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTriggerDetailsResponseMultiError) AllErrors() []error { return m }

// GetTriggerDetailsResponseValidationError is the validation error returned by
// GetTriggerDetailsResponse.Validate if the designated constraints aren't met.
type GetTriggerDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTriggerDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTriggerDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTriggerDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTriggerDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTriggerDetailsResponseValidationError) ErrorName() string {
	return "GetTriggerDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTriggerDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTriggerDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTriggerDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTriggerDetailsResponseValidationError{}

// Validate checks the field values on GetTriggerRevisionDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTriggerRevisionDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTriggerRevisionDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTriggerRevisionDetailsRequestMultiError, or nil if none found.
func (m *GetTriggerRevisionDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTriggerRevisionDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTriggerRevisionDetailsRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTriggerRevisionDetailsRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTriggerRevisionDetailsRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTriggerRevisionDetailsRequestMultiError(errors)
	}

	return nil
}

// GetTriggerRevisionDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetTriggerRevisionDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTriggerRevisionDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTriggerRevisionDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTriggerRevisionDetailsRequestMultiError) AllErrors() []error { return m }

// GetTriggerRevisionDetailsRequestValidationError is the validation error
// returned by GetTriggerRevisionDetailsRequest.Validate if the designated
// constraints aren't met.
type GetTriggerRevisionDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTriggerRevisionDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTriggerRevisionDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTriggerRevisionDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTriggerRevisionDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTriggerRevisionDetailsRequestValidationError) ErrorName() string {
	return "GetTriggerRevisionDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTriggerRevisionDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTriggerRevisionDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTriggerRevisionDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTriggerRevisionDetailsRequestValidationError{}

// Validate checks the field values on GetTriggerRevisionDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTriggerRevisionDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTriggerRevisionDetailsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTriggerRevisionDetailsResponseMultiError, or nil if none found.
func (m *GetTriggerRevisionDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTriggerRevisionDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrigger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTriggerRevisionDetailsResponseValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTriggerRevisionDetailsResponseValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrigger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTriggerRevisionDetailsResponseValidationError{
				field:  "Trigger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTriggerRevisionDetailsResponseMultiError(errors)
	}

	return nil
}

// GetTriggerRevisionDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTriggerRevisionDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTriggerRevisionDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTriggerRevisionDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTriggerRevisionDetailsResponseMultiError) AllErrors() []error { return m }

// GetTriggerRevisionDetailsResponseValidationError is the validation error
// returned by GetTriggerRevisionDetailsResponse.Validate if the designated
// constraints aren't met.
type GetTriggerRevisionDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTriggerRevisionDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTriggerRevisionDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTriggerRevisionDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTriggerRevisionDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTriggerRevisionDetailsResponseValidationError) ErrorName() string {
	return "GetTriggerRevisionDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTriggerRevisionDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTriggerRevisionDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTriggerRevisionDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTriggerRevisionDetailsResponseValidationError{}

// Validate checks the field values on ListTriggersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTriggersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTriggersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTriggersRequestMultiError, or nil if none found.
func (m *ListTriggersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTriggersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTriggersRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTriggersRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTriggersRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.ScopeBy.(type) {
	case *ListTriggersRequest_Org:
		if v == nil {
			err := ListTriggersRequestValidationError{
				field:  "ScopeBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Org
	case *ListTriggersRequest_ProjectId:
		if v == nil {
			err := ListTriggersRequestValidationError{
				field:  "ScopeBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProjectId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTriggersRequestValidationError{
						field:  "ProjectId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTriggersRequestValidationError{
						field:  "ProjectId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProjectId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTriggersRequestValidationError{
					field:  "ProjectId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListTriggersRequestMultiError(errors)
	}

	return nil
}

// ListTriggersRequestMultiError is an error wrapping multiple validation
// errors returned by ListTriggersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTriggersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTriggersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTriggersRequestMultiError) AllErrors() []error { return m }

// ListTriggersRequestValidationError is the validation error returned by
// ListTriggersRequest.Validate if the designated constraints aren't met.
type ListTriggersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTriggersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTriggersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTriggersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTriggersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTriggersRequestValidationError) ErrorName() string {
	return "ListTriggersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTriggersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTriggersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTriggersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTriggersRequestValidationError{}

// Validate checks the field values on ListTriggersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTriggersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTriggersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTriggersResponseMultiError, or nil if none found.
func (m *ListTriggersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTriggersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTriggers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTriggersResponseValidationError{
						field:  fmt.Sprintf("Triggers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTriggersResponseValidationError{
						field:  fmt.Sprintf("Triggers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTriggersResponseValidationError{
					field:  fmt.Sprintf("Triggers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Token

	if len(errors) > 0 {
		return ListTriggersResponseMultiError(errors)
	}

	return nil
}

// ListTriggersResponseMultiError is an error wrapping multiple validation
// errors returned by ListTriggersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTriggersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTriggersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTriggersResponseMultiError) AllErrors() []error { return m }

// ListTriggersResponseValidationError is the validation error returned by
// ListTriggersResponse.Validate if the designated constraints aren't met.
type ListTriggersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTriggersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTriggersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTriggersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTriggersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTriggersResponseValidationError) ErrorName() string {
	return "ListTriggersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTriggersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTriggersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTriggersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTriggersResponseValidationError{}

// Validate checks the field values on GetTriggerRevisionHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTriggerRevisionHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTriggerRevisionHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTriggerRevisionHistoryRequestMultiError, or nil if none found.
func (m *GetTriggerRevisionHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTriggerRevisionHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTriggerRevisionHistoryRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTriggerRevisionHistoryRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTriggerRevisionHistoryRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTriggerRevisionHistoryRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTriggerRevisionHistoryRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTriggerRevisionHistoryRequestValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTriggerRevisionHistoryRequestMultiError(errors)
	}

	return nil
}

// GetTriggerRevisionHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetTriggerRevisionHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTriggerRevisionHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTriggerRevisionHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTriggerRevisionHistoryRequestMultiError) AllErrors() []error { return m }

// GetTriggerRevisionHistoryRequestValidationError is the validation error
// returned by GetTriggerRevisionHistoryRequest.Validate if the designated
// constraints aren't met.
type GetTriggerRevisionHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTriggerRevisionHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTriggerRevisionHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTriggerRevisionHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTriggerRevisionHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTriggerRevisionHistoryRequestValidationError) ErrorName() string {
	return "GetTriggerRevisionHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTriggerRevisionHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTriggerRevisionHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTriggerRevisionHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTriggerRevisionHistoryRequestValidationError{}

// Validate checks the field values on GetTriggerRevisionHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTriggerRevisionHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTriggerRevisionHistoryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTriggerRevisionHistoryResponseMultiError, or nil if none found.
func (m *GetTriggerRevisionHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTriggerRevisionHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTriggers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTriggerRevisionHistoryResponseValidationError{
						field:  fmt.Sprintf("Triggers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTriggerRevisionHistoryResponseValidationError{
						field:  fmt.Sprintf("Triggers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTriggerRevisionHistoryResponseValidationError{
					field:  fmt.Sprintf("Triggers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Token

	if len(errors) > 0 {
		return GetTriggerRevisionHistoryResponseMultiError(errors)
	}

	return nil
}

// GetTriggerRevisionHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTriggerRevisionHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTriggerRevisionHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTriggerRevisionHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTriggerRevisionHistoryResponseMultiError) AllErrors() []error { return m }

// GetTriggerRevisionHistoryResponseValidationError is the validation error
// returned by GetTriggerRevisionHistoryResponse.Validate if the designated
// constraints aren't met.
type GetTriggerRevisionHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTriggerRevisionHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTriggerRevisionHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTriggerRevisionHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTriggerRevisionHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTriggerRevisionHistoryResponseValidationError) ErrorName() string {
	return "GetTriggerRevisionHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTriggerRevisionHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTriggerRevisionHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTriggerRevisionHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTriggerRevisionHistoryResponseValidationError{}

// Validate checks the field values on UpdateTriggersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTriggersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTriggersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTriggersRequestMultiError, or nil if none found.
func (m *UpdateTriggersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTriggersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNames() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTriggersRequestValidationError{
						field:  fmt.Sprintf("Names[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTriggersRequestValidationError{
						field:  fmt.Sprintf("Names[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTriggersRequestValidationError{
					field:  fmt.Sprintf("Names[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Active

	if len(errors) > 0 {
		return UpdateTriggersRequestMultiError(errors)
	}

	return nil
}

// UpdateTriggersRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTriggersRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTriggersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTriggersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTriggersRequestMultiError) AllErrors() []error { return m }

// UpdateTriggersRequestValidationError is the validation error returned by
// UpdateTriggersRequest.Validate if the designated constraints aren't met.
type UpdateTriggersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTriggersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTriggersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTriggersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTriggersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTriggersRequestValidationError) ErrorName() string {
	return "UpdateTriggersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTriggersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTriggersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTriggersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTriggersRequestValidationError{}

// Validate checks the field values on UpdateTriggersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTriggersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTriggersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTriggersResponseMultiError, or nil if none found.
func (m *UpdateTriggersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTriggersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTriggersResponseMultiError(errors)
	}

	return nil
}

// UpdateTriggersResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTriggersResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTriggersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTriggersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTriggersResponseMultiError) AllErrors() []error { return m }

// UpdateTriggersResponseValidationError is the validation error returned by
// UpdateTriggersResponse.Validate if the designated constraints aren't met.
type UpdateTriggersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTriggersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTriggersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTriggersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTriggersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTriggersResponseValidationError) ErrorName() string {
	return "UpdateTriggersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTriggersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTriggersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTriggersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTriggersResponseValidationError{}

// Validate checks the field values on DeleteTriggersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTriggersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTriggersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTriggersRequestMultiError, or nil if none found.
func (m *DeleteTriggersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTriggersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNames() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteTriggersRequestValidationError{
						field:  fmt.Sprintf("Names[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteTriggersRequestValidationError{
						field:  fmt.Sprintf("Names[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteTriggersRequestValidationError{
					field:  fmt.Sprintf("Names[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteTriggersRequestMultiError(errors)
	}

	return nil
}

// DeleteTriggersRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTriggersRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTriggersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTriggersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTriggersRequestMultiError) AllErrors() []error { return m }

// DeleteTriggersRequestValidationError is the validation error returned by
// DeleteTriggersRequest.Validate if the designated constraints aren't met.
type DeleteTriggersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTriggersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTriggersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTriggersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTriggersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTriggersRequestValidationError) ErrorName() string {
	return "DeleteTriggersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTriggersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTriggersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTriggersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTriggersRequestValidationError{}

// Validate checks the field values on DeleteTriggersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTriggersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTriggersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTriggersResponseMultiError, or nil if none found.
func (m *DeleteTriggersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTriggersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTriggersResponseMultiError(errors)
	}

	return nil
}

// DeleteTriggersResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTriggersResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTriggersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTriggersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTriggersResponseMultiError) AllErrors() []error { return m }

// DeleteTriggersResponseValidationError is the validation error returned by
// DeleteTriggersResponse.Validate if the designated constraints aren't met.
type DeleteTriggersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTriggersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTriggersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTriggersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTriggersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTriggersResponseValidationError) ErrorName() string {
	return "DeleteTriggersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTriggersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTriggersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTriggersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTriggersResponseValidationError{}
