// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl2/trigger/trigger_definition.proto

package trigger

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	common "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/common"
	task "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/task"
	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a frequency at which to run a schedule.
type FixedRateUnit int32

const (
	FixedRateUnit_FIXED_RATE_UNIT_UNSPECIFIED FixedRateUnit = 0
	FixedRateUnit_FIXED_RATE_UNIT_MINUTE      FixedRateUnit = 1
	FixedRateUnit_FIXED_RATE_UNIT_HOUR        FixedRateUnit = 2
	FixedRateUnit_FIXED_RATE_UNIT_DAY         FixedRateUnit = 3
)

// Enum value maps for FixedRateUnit.
var (
	FixedRateUnit_name = map[int32]string{
		0: "FIXED_RATE_UNIT_UNSPECIFIED",
		1: "FIXED_RATE_UNIT_MINUTE",
		2: "FIXED_RATE_UNIT_HOUR",
		3: "FIXED_RATE_UNIT_DAY",
	}
	FixedRateUnit_value = map[string]int32{
		"FIXED_RATE_UNIT_UNSPECIFIED": 0,
		"FIXED_RATE_UNIT_MINUTE":      1,
		"FIXED_RATE_UNIT_HOUR":        2,
		"FIXED_RATE_UNIT_DAY":         3,
	}
)

func (x FixedRateUnit) Enum() *FixedRateUnit {
	p := new(FixedRateUnit)
	*p = x
	return p
}

func (x FixedRateUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FixedRateUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl2_trigger_trigger_definition_proto_enumTypes[0].Descriptor()
}

func (FixedRateUnit) Type() protoreflect.EnumType {
	return &file_flyteidl2_trigger_trigger_definition_proto_enumTypes[0]
}

func (x FixedRateUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FixedRateUnit.Descriptor instead.
func (FixedRateUnit) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{0}
}

// Stores human- and machine-friendly explanation of what changed in the revision
type TriggerRevisionAction int32

const (
	TriggerRevisionAction_TRIGGER_REVISION_ACTION_UNSPECIFIED TriggerRevisionAction = 0
	TriggerRevisionAction_TRIGGER_REVISION_ACTION_DEPLOY      TriggerRevisionAction = 1
	TriggerRevisionAction_TRIGGER_REVISION_ACTION_ACTIVATE    TriggerRevisionAction = 2
	TriggerRevisionAction_TRIGGER_REVISION_ACTION_DEACTIVATE  TriggerRevisionAction = 3
	TriggerRevisionAction_TRIGGER_REVISION_ACTION_DELETE      TriggerRevisionAction = 4
)

// Enum value maps for TriggerRevisionAction.
var (
	TriggerRevisionAction_name = map[int32]string{
		0: "TRIGGER_REVISION_ACTION_UNSPECIFIED",
		1: "TRIGGER_REVISION_ACTION_DEPLOY",
		2: "TRIGGER_REVISION_ACTION_ACTIVATE",
		3: "TRIGGER_REVISION_ACTION_DEACTIVATE",
		4: "TRIGGER_REVISION_ACTION_DELETE",
	}
	TriggerRevisionAction_value = map[string]int32{
		"TRIGGER_REVISION_ACTION_UNSPECIFIED": 0,
		"TRIGGER_REVISION_ACTION_DEPLOY":      1,
		"TRIGGER_REVISION_ACTION_ACTIVATE":    2,
		"TRIGGER_REVISION_ACTION_DEACTIVATE":  3,
		"TRIGGER_REVISION_ACTION_DELETE":      4,
	}
)

func (x TriggerRevisionAction) Enum() *TriggerRevisionAction {
	p := new(TriggerRevisionAction)
	*p = x
	return p
}

func (x TriggerRevisionAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerRevisionAction) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl2_trigger_trigger_definition_proto_enumTypes[1].Descriptor()
}

func (TriggerRevisionAction) Type() protoreflect.EnumType {
	return &file_flyteidl2_trigger_trigger_definition_proto_enumTypes[1]
}

func (x TriggerRevisionAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerRevisionAction.Descriptor instead.
func (TriggerRevisionAction) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{1}
}

// Specifies type of the automation attached to trigger if any.
type TriggerAutomationSpec_Type int32

const (
	TriggerAutomationSpec_TYPE_UNSPECIFIED TriggerAutomationSpec_Type = 0
	TriggerAutomationSpec_TYPE_NONE        TriggerAutomationSpec_Type = 1
	TriggerAutomationSpec_TYPE_SCHEDULE    TriggerAutomationSpec_Type = 2
)

// Enum value maps for TriggerAutomationSpec_Type.
var (
	TriggerAutomationSpec_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_NONE",
		2: "TYPE_SCHEDULE",
	}
	TriggerAutomationSpec_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_NONE":        1,
		"TYPE_SCHEDULE":    2,
	}
)

func (x TriggerAutomationSpec_Type) Enum() *TriggerAutomationSpec_Type {
	p := new(TriggerAutomationSpec_Type)
	*p = x
	return p
}

func (x TriggerAutomationSpec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerAutomationSpec_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl2_trigger_trigger_definition_proto_enumTypes[2].Descriptor()
}

func (TriggerAutomationSpec_Type) Type() protoreflect.EnumType {
	return &file_flyteidl2_trigger_trigger_definition_proto_enumTypes[2]
}

func (x TriggerAutomationSpec_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerAutomationSpec_Type.Descriptor instead.
func (TriggerAutomationSpec_Type) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{5, 0}
}

type TriggerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identity that last deployed the trigger
	DeployedBy *common.EnrichedIdentity `protobuf:"bytes,1,opt,name=deployed_by,json=deployedBy,proto3" json:"deployed_by,omitempty"`
	// Identity that last activated or deactivated the trigger
	UpdatedBy *common.EnrichedIdentity `protobuf:"bytes,2,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *TriggerMetadata) Reset() {
	*x = TriggerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerMetadata) ProtoMessage() {}

func (x *TriggerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerMetadata.ProtoReflect.Descriptor instead.
func (*TriggerMetadata) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{0}
}

func (x *TriggerMetadata) GetDeployedBy() *common.EnrichedIdentity {
	if x != nil {
		return x.DeployedBy
	}
	return nil
}

func (x *TriggerMetadata) GetUpdatedBy() *common.EnrichedIdentity {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

// Option for schedules run at a certain frequency e.g. every 2 minutes.
type FixedRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32        `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  FixedRateUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=flyteidl2.trigger.FixedRateUnit" json:"unit,omitempty"`
	// Optional, timestamp after which rate should be calculated. Can be only in future.
	// E.g. We create a rate schedule "every 5 minutes" with start_time="12:00" inactive.
	// Activate it at "12:04".
	// Trigger should fire at "12:05" as it adds 5 minutes to start_time="12:00".
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *FixedRate) Reset() {
	*x = FixedRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedRate) ProtoMessage() {}

func (x *FixedRate) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedRate.ProtoReflect.Descriptor instead.
func (*FixedRate) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{1}
}

func (x *FixedRate) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *FixedRate) GetUnit() FixedRateUnit {
	if x != nil {
		return x.Unit
	}
	return FixedRateUnit_FIXED_RATE_UNIT_UNSPECIFIED
}

func (x *FixedRate) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Defines complete set of information required to trigger an execution on a schedule.
type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expression:
	//
	//	*Schedule_Rate
	//	*Schedule_CronExpression
	Expression isSchedule_Expression `protobuf_oneof:"expression"`
	// Name of the input variable that the kickoff time will be supplied to when the workflow is kicked off.
	KickoffTimeInputArg string `protobuf:"bytes,3,opt,name=kickoff_time_input_arg,json=kickoffTimeInputArg,proto3" json:"kickoff_time_input_arg,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{2}
}

func (m *Schedule) GetExpression() isSchedule_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (x *Schedule) GetRate() *FixedRate {
	if x, ok := x.GetExpression().(*Schedule_Rate); ok {
		return x.Rate
	}
	return nil
}

func (x *Schedule) GetCronExpression() string {
	if x, ok := x.GetExpression().(*Schedule_CronExpression); ok {
		return x.CronExpression
	}
	return ""
}

func (x *Schedule) GetKickoffTimeInputArg() string {
	if x != nil {
		return x.KickoffTimeInputArg
	}
	return ""
}

type isSchedule_Expression interface {
	isSchedule_Expression()
}

type Schedule_Rate struct {
	// Uses AWS syntax: Minutes Hours Day-of-month Month Day-of-week Year
	// e.g. for a schedule that runs every 15 minutes: 0/15 * * * ? *
	Rate *FixedRate `protobuf:"bytes,1,opt,name=rate,proto3,oneof"`
}

type Schedule_CronExpression struct {
	CronExpression string `protobuf:"bytes,2,opt,name=cron_expression,json=cronExpression,proto3,oneof"`
}

func (*Schedule_Rate) isSchedule_Expression() {}

func (*Schedule_CronExpression) isSchedule_Expression() {}

type TriggerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies which task to trigger.
	TaskId *task.TaskIdentifier `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Inputs for triggered task.
	Inputs *workflow.Inputs `protobuf:"bytes,2,opt,name=inputs,proto3" json:"inputs,omitempty"`
	// The run spec for triggered task.
	RunSpec *workflow.RunSpec `protobuf:"bytes,3,opt,name=run_spec,json=runSpec,proto3" json:"run_spec,omitempty"`
	// Whether trigger is active
	Active bool `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	// Task version together with trigger name will give us the unique task id
	TaskVersion string `protobuf:"bytes,5,opt,name=task_version,json=taskVersion,proto3" json:"task_version,omitempty"`
}

func (x *TriggerSpec) Reset() {
	*x = TriggerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerSpec) ProtoMessage() {}

func (x *TriggerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerSpec.ProtoReflect.Descriptor instead.
func (*TriggerSpec) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{3}
}

func (x *TriggerSpec) GetTaskId() *task.TaskIdentifier {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TriggerSpec) GetInputs() *workflow.Inputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TriggerSpec) GetRunSpec() *workflow.RunSpec {
	if x != nil {
		return x.RunSpec
	}
	return nil
}

func (x *TriggerSpec) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *TriggerSpec) GetTaskVersion() string {
	if x != nil {
		return x.TaskVersion
	}
	return ""
}

type TriggerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first time trigger was deployed.
	DeployedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=deployed_at,json=deployedAt,proto3" json:"deployed_at,omitempty"`
	// The last time the trigger was updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The last time the trigger fired.
	TriggeredAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=triggered_at,json=triggeredAt,proto3" json:"triggered_at,omitempty"`
	// The time trigger was deleted.
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *TriggerStatus) Reset() {
	*x = TriggerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerStatus) ProtoMessage() {}

func (x *TriggerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerStatus.ProtoReflect.Descriptor instead.
func (*TriggerStatus) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{4}
}

func (x *TriggerStatus) GetDeployedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeployedAt
	}
	return nil
}

func (x *TriggerStatus) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TriggerStatus) GetTriggeredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TriggeredAt
	}
	return nil
}

func (x *TriggerStatus) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type TriggerAutomationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Explicitly defines trigger automation type.
	Type TriggerAutomationSpec_Type `protobuf:"varint,1,opt,name=type,proto3,enum=flyteidl2.trigger.TriggerAutomationSpec_Type" json:"type,omitempty"`
	// Types that are assignable to Automation:
	//
	//	*TriggerAutomationSpec_Schedule
	Automation isTriggerAutomationSpec_Automation `protobuf_oneof:"automation"`
}

func (x *TriggerAutomationSpec) Reset() {
	*x = TriggerAutomationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAutomationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAutomationSpec) ProtoMessage() {}

func (x *TriggerAutomationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAutomationSpec.ProtoReflect.Descriptor instead.
func (*TriggerAutomationSpec) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{5}
}

func (x *TriggerAutomationSpec) GetType() TriggerAutomationSpec_Type {
	if x != nil {
		return x.Type
	}
	return TriggerAutomationSpec_TYPE_UNSPECIFIED
}

func (m *TriggerAutomationSpec) GetAutomation() isTriggerAutomationSpec_Automation {
	if m != nil {
		return m.Automation
	}
	return nil
}

func (x *TriggerAutomationSpec) GetSchedule() *Schedule {
	if x, ok := x.GetAutomation().(*TriggerAutomationSpec_Schedule); ok {
		return x.Schedule
	}
	return nil
}

type isTriggerAutomationSpec_Automation interface {
	isTriggerAutomationSpec_Automation()
}

type TriggerAutomationSpec_Schedule struct {
	Schedule *Schedule `protobuf:"bytes,2,opt,name=schedule,proto3,oneof"`
}

func (*TriggerAutomationSpec_Schedule) isTriggerAutomationSpec_Automation() {}

// Light-weight information about trigger for a list view
type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *common.TriggerIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta           *TriggerMetadata          `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	Status         *TriggerStatus            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Active         bool                      `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	AutomationSpec *TriggerAutomationSpec    `protobuf:"bytes,6,opt,name=automation_spec,json=automationSpec,proto3" json:"automation_spec,omitempty"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{6}
}

func (x *Trigger) GetId() *common.TriggerIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Trigger) GetMeta() *TriggerMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Trigger) GetStatus() *TriggerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Trigger) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Trigger) GetAutomationSpec() *TriggerAutomationSpec {
	if x != nil {
		return x.AutomationSpec
	}
	return nil
}

// Light-weight information about a single trigger revision
type TriggerRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *common.TriggerIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta   *TriggerMetadata          `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	Status *TriggerStatus            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Action TriggerRevisionAction     `protobuf:"varint,4,opt,name=action,proto3,enum=flyteidl2.trigger.TriggerRevisionAction" json:"action,omitempty"`
}

func (x *TriggerRevision) Reset() {
	*x = TriggerRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRevision) ProtoMessage() {}

func (x *TriggerRevision) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRevision.ProtoReflect.Descriptor instead.
func (*TriggerRevision) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{7}
}

func (x *TriggerRevision) GetId() *common.TriggerIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TriggerRevision) GetMeta() *TriggerMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TriggerRevision) GetStatus() *TriggerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TriggerRevision) GetAction() TriggerRevisionAction {
	if x != nil {
		return x.Action
	}
	return TriggerRevisionAction_TRIGGER_REVISION_ACTION_UNSPECIFIED
}

// Full details about a trigger stored in DB
type TriggerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *common.TriggerIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta   *TriggerMetadata          `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	Spec   *TriggerSpec              `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	Status *TriggerStatus            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// Optional automation spec.
	AutomationSpec *TriggerAutomationSpec `protobuf:"bytes,5,opt,name=automation_spec,json=automationSpec,proto3" json:"automation_spec,omitempty"`
}

func (x *TriggerDetails) Reset() {
	*x = TriggerDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerDetails) ProtoMessage() {}

func (x *TriggerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_trigger_trigger_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerDetails.ProtoReflect.Descriptor instead.
func (*TriggerDetails) Descriptor() ([]byte, []int) {
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP(), []int{8}
}

func (x *TriggerDetails) GetId() *common.TriggerIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TriggerDetails) GetMeta() *TriggerMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *TriggerDetails) GetSpec() *TriggerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *TriggerDetails) GetStatus() *TriggerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TriggerDetails) GetAutomationSpec() *TriggerAutomationSpec {
	if x != nil {
		return x.AutomationSpec
	}
	return nil
}

var File_flyteidl2_trigger_trigger_definition_proto protoreflect.FileDescriptor

var file_flyteidl2_trigger_trigger_definition_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75, 0x6e, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x72,
	0x69, 0x63, 0x68, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x49, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x92, 0x01, 0x0a,
	0x09, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xac, 0x01, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x72, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x16, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6b,
	0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41,
	0x72, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x80, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x3f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x3f, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a,
	0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22,
	0x3e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x42,
	0x0c, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x02,
	0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0xfa, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xce,
	0x02, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x0f,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x0e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2a,
	0x7f, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x58, 0x45, 0x44,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x03,
	0x2a, 0xd6, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a,
	0x22, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x42, 0xcd, 0x01, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x42, 0x16, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0xa2, 0x02, 0x03, 0x46, 0x54, 0x58, 0xaa, 0x02, 0x11, 0x46,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0xca, 0x02, 0x11, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0xe2, 0x02, 0x1d, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x5c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x3a, 0x3a, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_flyteidl2_trigger_trigger_definition_proto_rawDescOnce sync.Once
	file_flyteidl2_trigger_trigger_definition_proto_rawDescData = file_flyteidl2_trigger_trigger_definition_proto_rawDesc
)

func file_flyteidl2_trigger_trigger_definition_proto_rawDescGZIP() []byte {
	file_flyteidl2_trigger_trigger_definition_proto_rawDescOnce.Do(func() {
		file_flyteidl2_trigger_trigger_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl2_trigger_trigger_definition_proto_rawDescData)
	})
	return file_flyteidl2_trigger_trigger_definition_proto_rawDescData
}

var file_flyteidl2_trigger_trigger_definition_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_flyteidl2_trigger_trigger_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_flyteidl2_trigger_trigger_definition_proto_goTypes = []interface{}{
	(FixedRateUnit)(0),               // 0: flyteidl2.trigger.FixedRateUnit
	(TriggerRevisionAction)(0),       // 1: flyteidl2.trigger.TriggerRevisionAction
	(TriggerAutomationSpec_Type)(0),  // 2: flyteidl2.trigger.TriggerAutomationSpec.Type
	(*TriggerMetadata)(nil),          // 3: flyteidl2.trigger.TriggerMetadata
	(*FixedRate)(nil),                // 4: flyteidl2.trigger.FixedRate
	(*Schedule)(nil),                 // 5: flyteidl2.trigger.Schedule
	(*TriggerSpec)(nil),              // 6: flyteidl2.trigger.TriggerSpec
	(*TriggerStatus)(nil),            // 7: flyteidl2.trigger.TriggerStatus
	(*TriggerAutomationSpec)(nil),    // 8: flyteidl2.trigger.TriggerAutomationSpec
	(*Trigger)(nil),                  // 9: flyteidl2.trigger.Trigger
	(*TriggerRevision)(nil),          // 10: flyteidl2.trigger.TriggerRevision
	(*TriggerDetails)(nil),           // 11: flyteidl2.trigger.TriggerDetails
	(*common.EnrichedIdentity)(nil),  // 12: flyteidl2.common.EnrichedIdentity
	(*timestamppb.Timestamp)(nil),    // 13: google.protobuf.Timestamp
	(*task.TaskIdentifier)(nil),      // 14: flyteidl2.task.TaskIdentifier
	(*workflow.Inputs)(nil),          // 15: flyteidl2.workflow.Inputs
	(*workflow.RunSpec)(nil),         // 16: flyteidl2.workflow.RunSpec
	(*common.TriggerIdentifier)(nil), // 17: flyteidl2.common.TriggerIdentifier
}
var file_flyteidl2_trigger_trigger_definition_proto_depIdxs = []int32{
	12, // 0: flyteidl2.trigger.TriggerMetadata.deployed_by:type_name -> flyteidl2.common.EnrichedIdentity
	12, // 1: flyteidl2.trigger.TriggerMetadata.updated_by:type_name -> flyteidl2.common.EnrichedIdentity
	0,  // 2: flyteidl2.trigger.FixedRate.unit:type_name -> flyteidl2.trigger.FixedRateUnit
	13, // 3: flyteidl2.trigger.FixedRate.start_time:type_name -> google.protobuf.Timestamp
	4,  // 4: flyteidl2.trigger.Schedule.rate:type_name -> flyteidl2.trigger.FixedRate
	14, // 5: flyteidl2.trigger.TriggerSpec.task_id:type_name -> flyteidl2.task.TaskIdentifier
	15, // 6: flyteidl2.trigger.TriggerSpec.inputs:type_name -> flyteidl2.workflow.Inputs
	16, // 7: flyteidl2.trigger.TriggerSpec.run_spec:type_name -> flyteidl2.workflow.RunSpec
	13, // 8: flyteidl2.trigger.TriggerStatus.deployed_at:type_name -> google.protobuf.Timestamp
	13, // 9: flyteidl2.trigger.TriggerStatus.updated_at:type_name -> google.protobuf.Timestamp
	13, // 10: flyteidl2.trigger.TriggerStatus.triggered_at:type_name -> google.protobuf.Timestamp
	13, // 11: flyteidl2.trigger.TriggerStatus.deleted_at:type_name -> google.protobuf.Timestamp
	2,  // 12: flyteidl2.trigger.TriggerAutomationSpec.type:type_name -> flyteidl2.trigger.TriggerAutomationSpec.Type
	5,  // 13: flyteidl2.trigger.TriggerAutomationSpec.schedule:type_name -> flyteidl2.trigger.Schedule
	17, // 14: flyteidl2.trigger.Trigger.id:type_name -> flyteidl2.common.TriggerIdentifier
	3,  // 15: flyteidl2.trigger.Trigger.meta:type_name -> flyteidl2.trigger.TriggerMetadata
	7,  // 16: flyteidl2.trigger.Trigger.status:type_name -> flyteidl2.trigger.TriggerStatus
	8,  // 17: flyteidl2.trigger.Trigger.automation_spec:type_name -> flyteidl2.trigger.TriggerAutomationSpec
	17, // 18: flyteidl2.trigger.TriggerRevision.id:type_name -> flyteidl2.common.TriggerIdentifier
	3,  // 19: flyteidl2.trigger.TriggerRevision.meta:type_name -> flyteidl2.trigger.TriggerMetadata
	7,  // 20: flyteidl2.trigger.TriggerRevision.status:type_name -> flyteidl2.trigger.TriggerStatus
	1,  // 21: flyteidl2.trigger.TriggerRevision.action:type_name -> flyteidl2.trigger.TriggerRevisionAction
	17, // 22: flyteidl2.trigger.TriggerDetails.id:type_name -> flyteidl2.common.TriggerIdentifier
	3,  // 23: flyteidl2.trigger.TriggerDetails.meta:type_name -> flyteidl2.trigger.TriggerMetadata
	6,  // 24: flyteidl2.trigger.TriggerDetails.spec:type_name -> flyteidl2.trigger.TriggerSpec
	7,  // 25: flyteidl2.trigger.TriggerDetails.status:type_name -> flyteidl2.trigger.TriggerStatus
	8,  // 26: flyteidl2.trigger.TriggerDetails.automation_spec:type_name -> flyteidl2.trigger.TriggerAutomationSpec
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_flyteidl2_trigger_trigger_definition_proto_init() }
func file_flyteidl2_trigger_trigger_definition_proto_init() {
	if File_flyteidl2_trigger_trigger_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyteidl2_trigger_trigger_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAutomationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_trigger_trigger_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flyteidl2_trigger_trigger_definition_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Schedule_Rate)(nil),
		(*Schedule_CronExpression)(nil),
	}
	file_flyteidl2_trigger_trigger_definition_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*TriggerAutomationSpec_Schedule)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl2_trigger_trigger_definition_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl2_trigger_trigger_definition_proto_goTypes,
		DependencyIndexes: file_flyteidl2_trigger_trigger_definition_proto_depIdxs,
		EnumInfos:         file_flyteidl2_trigger_trigger_definition_proto_enumTypes,
		MessageInfos:      file_flyteidl2_trigger_trigger_definition_proto_msgTypes,
	}.Build()
	File_flyteidl2_trigger_trigger_definition_proto = out.File
	file_flyteidl2_trigger_trigger_definition_proto_rawDesc = nil
	file_flyteidl2_trigger_trigger_definition_proto_goTypes = nil
	file_flyteidl2_trigger_trigger_definition_proto_depIdxs = nil
}
