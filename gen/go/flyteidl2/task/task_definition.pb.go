// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl2/task/task_definition.proto

package task

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	common "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/common"
	core "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Name of a task. It may have multiple versions deployed.
type TaskName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org this task belongs to.
	Org string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	// Project this task belongs to.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Domain this task belongs to.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Unique name of the task. Should not be interpreted/parsed. Use `short_name` and `environment_name` for user facing names.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TaskName) Reset() {
	*x = TaskName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_task_task_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskName) ProtoMessage() {}

func (x *TaskName) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_task_task_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskName.ProtoReflect.Descriptor instead.
func (*TaskName) Descriptor() ([]byte, []int) {
	return file_flyteidl2_task_task_definition_proto_rawDescGZIP(), []int{0}
}

func (x *TaskName) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *TaskName) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TaskName) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TaskName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// TaskIdentifier is the unique identifier for a task.
type TaskIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Org this task belongs to.
	Org string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	// Project this task belongs to.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Domain this task belongs to.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Unique name of the task. Should not be interpreted/parsed. Use `short_name` and `environment_name` for user facing names.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the task.
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *TaskIdentifier) Reset() {
	*x = TaskIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_task_task_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdentifier) ProtoMessage() {}

func (x *TaskIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_task_task_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdentifier.ProtoReflect.Descriptor instead.
func (*TaskIdentifier) Descriptor() ([]byte, []int) {
	return file_flyteidl2_task_task_definition_proto_rawDescGZIP(), []int{1}
}

func (x *TaskIdentifier) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *TaskIdentifier) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TaskIdentifier) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TaskIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskIdentifier) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type TaskTriggersSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Summary:
	//
	//	*TaskTriggersSummary_AutomationSpec
	//	*TaskTriggersSummary_Stats
	Summary isTaskTriggersSummary_Summary `protobuf_oneof:"summary"`
}

func (x *TaskTriggersSummary) Reset() {
	*x = TaskTriggersSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_task_task_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTriggersSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTriggersSummary) ProtoMessage() {}

func (x *TaskTriggersSummary) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_task_task_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTriggersSummary.ProtoReflect.Descriptor instead.
func (*TaskTriggersSummary) Descriptor() ([]byte, []int) {
	return file_flyteidl2_task_task_definition_proto_rawDescGZIP(), []int{2}
}

func (m *TaskTriggersSummary) GetSummary() isTaskTriggersSummary_Summary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (x *TaskTriggersSummary) GetAutomationSpec() *TriggerAutomationSpec {
	if x, ok := x.GetSummary().(*TaskTriggersSummary_AutomationSpec); ok {
		return x.AutomationSpec
	}
	return nil
}

func (x *TaskTriggersSummary) GetStats() *TaskTriggersSummary_TriggerStats {
	if x, ok := x.GetSummary().(*TaskTriggersSummary_Stats); ok {
		return x.Stats
	}
	return nil
}

type isTaskTriggersSummary_Summary interface {
	isTaskTriggersSummary_Summary()
}

type TaskTriggersSummary_AutomationSpec struct {
	AutomationSpec *TriggerAutomationSpec `protobuf:"bytes,1,opt,name=automation_spec,json=automationSpec,proto3,oneof"`
}

type TaskTriggersSummary_Stats struct {
	Stats *TaskTriggersSummary_TriggerStats `protobuf:"bytes,2,opt,name=stats,proto3,oneof"`
}

func (*TaskTriggersSummary_AutomationSpec) isTaskTriggersSummary_Summary() {}

func (*TaskTriggersSummary_Stats) isTaskTriggersSummary_Summary() {}

// TaskMetadata is static, lightweight metadata about a task.
type TaskMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identity that deployed the task.
	DeployedBy *common.EnrichedIdentity `protobuf:"bytes,1,opt,name=deployed_by,json=deployedBy,proto3" json:"deployed_by,omitempty"`
	// The short name for this task
	ShortName string `protobuf:"bytes,2,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	// The time the task was deployed
	DeployedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deployed_at,json=deployedAt,proto3" json:"deployed_at,omitempty"`
	// The environment name for this task, if present.
	EnvironmentName string `protobuf:"bytes,4,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	// Brief overview of attached triggers if any.
	TriggersSummary *TaskTriggersSummary `protobuf:"bytes,5,opt,name=triggers_summary,json=triggersSummary,proto3" json:"triggers_summary,omitempty"`
	// The function name for this task
	FunctionName string `protobuf:"bytes,6,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
}

func (x *TaskMetadata) Reset() {
	*x = TaskMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_task_task_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMetadata) ProtoMessage() {}

func (x *TaskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_task_task_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMetadata.ProtoReflect.Descriptor instead.
func (*TaskMetadata) Descriptor() ([]byte, []int) {
	return file_flyteidl2_task_task_definition_proto_rawDescGZIP(), []int{3}
}

func (x *TaskMetadata) GetDeployedBy() *common.EnrichedIdentity {
	if x != nil {
		return x.DeployedBy
	}
	return nil
}

func (x *TaskMetadata) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *TaskMetadata) GetDeployedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeployedAt
	}
	return nil
}

func (x *TaskMetadata) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *TaskMetadata) GetTriggersSummary() *TaskTriggersSummary {
	if x != nil {
		return x.TriggersSummary
	}
	return nil
}

func (x *TaskMetadata) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

// Lightweight representation of a task.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id for this task.
	TaskId *TaskIdentifier `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Metadata for this task.
	Metadata *TaskMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_task_task_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_task_task_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_flyteidl2_task_task_definition_proto_rawDescGZIP(), []int{4}
}

func (x *Task) GetTaskId() *TaskIdentifier {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *Task) GetMetadata() *TaskMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Specification for a task.
type TaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The template for this task.
	TaskTemplate *core.TaskTemplate `protobuf:"bytes,1,opt,name=task_template,json=taskTemplate,proto3" json:"task_template,omitempty"`
	// Ordered default inputs.
	// These can be overridden when an run is created.
	// Client should not send required=true flag in underlying flyteidl2.core.Parameter.
	DefaultInputs []*NamedParameter `protobuf:"bytes,2,rep,name=default_inputs,json=defaultInputs,proto3" json:"default_inputs,omitempty"`
	// User facing display name for this task. Not required to be unique.
	// This is passed in via the SDK when the task is created and is either a user defined override or the name of the task.
	ShortName string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	// Optional environment for this task. Note, some tasks may not be run in the context of an environment.
	Environment *Environment `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *TaskSpec) Reset() {
	*x = TaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_task_task_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSpec) ProtoMessage() {}

func (x *TaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_task_task_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSpec.ProtoReflect.Descriptor instead.
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return file_flyteidl2_task_task_definition_proto_rawDescGZIP(), []int{5}
}

func (x *TaskSpec) GetTaskTemplate() *core.TaskTemplate {
	if x != nil {
		return x.TaskTemplate
	}
	return nil
}

func (x *TaskSpec) GetDefaultInputs() []*NamedParameter {
	if x != nil {
		return x.DefaultInputs
	}
	return nil
}

func (x *TaskSpec) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *TaskSpec) GetEnvironment() *Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

// Specification for a trace action.
type TraceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A strongly typed interface for the trace.
	Interface *core.TypedInterface `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *TraceSpec) Reset() {
	*x = TraceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_task_task_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceSpec) ProtoMessage() {}

func (x *TraceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_task_task_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceSpec.ProtoReflect.Descriptor instead.
func (*TraceSpec) Descriptor() ([]byte, []int) {
	return file_flyteidl2_task_task_definition_proto_rawDescGZIP(), []int{6}
}

func (x *TraceSpec) GetInterface() *core.TypedInterface {
	if x != nil {
		return x.Interface
	}
	return nil
}

// Detailed information about a task.
type TaskDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id for this task.
	TaskId *TaskIdentifier `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Metadata for this task.
	Metadata *TaskMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Specification for this task.
	Spec *TaskSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *TaskDetails) Reset() {
	*x = TaskDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_task_task_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetails) ProtoMessage() {}

func (x *TaskDetails) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_task_task_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetails.ProtoReflect.Descriptor instead.
func (*TaskDetails) Descriptor() ([]byte, []int) {
	return file_flyteidl2_task_task_definition_proto_rawDescGZIP(), []int{7}
}

func (x *TaskDetails) GetTaskId() *TaskIdentifier {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskDetails) GetMetadata() *TaskMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaskDetails) GetSpec() *TaskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Contains details about a single trigger attached to a task. Should only be used in DeployTask endpoint.
type TaskTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Spec *TaskTriggerSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Optional automation spec.
	AutomationSpec *TriggerAutomationSpec `protobuf:"bytes,3,opt,name=automation_spec,json=automationSpec,proto3" json:"automation_spec,omitempty"`
}

func (x *TaskTrigger) Reset() {
	*x = TaskTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_task_task_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTrigger) ProtoMessage() {}

func (x *TaskTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_task_task_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTrigger.ProtoReflect.Descriptor instead.
func (*TaskTrigger) Descriptor() ([]byte, []int) {
	return file_flyteidl2_task_task_definition_proto_rawDescGZIP(), []int{8}
}

func (x *TaskTrigger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskTrigger) GetSpec() *TaskTriggerSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *TaskTrigger) GetAutomationSpec() *TriggerAutomationSpec {
	if x != nil {
		return x.AutomationSpec
	}
	return nil
}

// TaskTriggerSpec this is a copy of TriggerSpec without mandatory 'task_version' field.
// This is supposed to be used only in DeployTask endpoint where 'task_version' is already provided in task_id.
type TaskTriggerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether trigger is active
	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	// Inputs for triggered task.
	Inputs *Inputs `protobuf:"bytes,2,opt,name=inputs,proto3" json:"inputs,omitempty"`
	// The run spec for triggered task.
	RunSpec *RunSpec `protobuf:"bytes,3,opt,name=run_spec,json=runSpec,proto3" json:"run_spec,omitempty"`
}

func (x *TaskTriggerSpec) Reset() {
	*x = TaskTriggerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_task_task_definition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTriggerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTriggerSpec) ProtoMessage() {}

func (x *TaskTriggerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_task_task_definition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTriggerSpec.ProtoReflect.Descriptor instead.
func (*TaskTriggerSpec) Descriptor() ([]byte, []int) {
	return file_flyteidl2_task_task_definition_proto_rawDescGZIP(), []int{9}
}

func (x *TaskTriggerSpec) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *TaskTriggerSpec) GetInputs() *Inputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TaskTriggerSpec) GetRunSpec() *RunSpec {
	if x != nil {
		return x.RunSpec
	}
	return nil
}

type TaskTriggersSummary_TriggerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Active uint32 `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *TaskTriggersSummary_TriggerStats) Reset() {
	*x = TaskTriggersSummary_TriggerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_task_task_definition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTriggersSummary_TriggerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTriggersSummary_TriggerStats) ProtoMessage() {}

func (x *TaskTriggersSummary_TriggerStats) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_task_task_definition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTriggersSummary_TriggerStats.ProtoReflect.Descriptor instead.
func (*TaskTriggersSummary_TriggerStats) Descriptor() ([]byte, []int) {
	return file_flyteidl2_task_task_definition_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TaskTriggersSummary_TriggerStats) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TaskTriggersSummary_TriggerStats) GetActive() uint32 {
	if x != nil {
		return x.Active
	}
	return 0
}

var File_flyteidl2_task_task_definition_proto protoreflect.FileDescriptor

var file_flyteidl2_task_task_definition_proto_rawDesc = []byte{
	0x0a, 0x24, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x2f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x6f, 0x72,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x3f, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x23, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x3f, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x3f, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba,
	0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xba, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x3f, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12,
	0x23, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x3f, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x3f, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x3f, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x01, 0x0a,
	0x13, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x1a, 0x3c, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xdf, 0x02, 0x0a, 0x0c, 0x54, 0x61,
	0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0b, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x49, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x45, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x18, 0x3f, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x22, 0xba, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x4e,
	0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x22, 0x8d,
	0x01, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x75,
	0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x75,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x42, 0xb8,
	0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x42, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0xa2, 0x02, 0x03, 0x46, 0x54, 0x58, 0xaa, 0x02, 0x0e, 0x46, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0xca, 0x02, 0x0e, 0x46, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x54, 0x61, 0x73, 0x6b, 0xe2, 0x02, 0x1a, 0x46, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x54, 0x61, 0x73, 0x6b, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x3a, 0x3a, 0x54, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_flyteidl2_task_task_definition_proto_rawDescOnce sync.Once
	file_flyteidl2_task_task_definition_proto_rawDescData = file_flyteidl2_task_task_definition_proto_rawDesc
)

func file_flyteidl2_task_task_definition_proto_rawDescGZIP() []byte {
	file_flyteidl2_task_task_definition_proto_rawDescOnce.Do(func() {
		file_flyteidl2_task_task_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl2_task_task_definition_proto_rawDescData)
	})
	return file_flyteidl2_task_task_definition_proto_rawDescData
}

var file_flyteidl2_task_task_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_flyteidl2_task_task_definition_proto_goTypes = []interface{}{
	(*TaskName)(nil),                         // 0: flyteidl2.task.TaskName
	(*TaskIdentifier)(nil),                   // 1: flyteidl2.task.TaskIdentifier
	(*TaskTriggersSummary)(nil),              // 2: flyteidl2.task.TaskTriggersSummary
	(*TaskMetadata)(nil),                     // 3: flyteidl2.task.TaskMetadata
	(*Task)(nil),                             // 4: flyteidl2.task.Task
	(*TaskSpec)(nil),                         // 5: flyteidl2.task.TaskSpec
	(*TraceSpec)(nil),                        // 6: flyteidl2.task.TraceSpec
	(*TaskDetails)(nil),                      // 7: flyteidl2.task.TaskDetails
	(*TaskTrigger)(nil),                      // 8: flyteidl2.task.TaskTrigger
	(*TaskTriggerSpec)(nil),                  // 9: flyteidl2.task.TaskTriggerSpec
	(*TaskTriggersSummary_TriggerStats)(nil), // 10: flyteidl2.task.TaskTriggersSummary.TriggerStats
	(*TriggerAutomationSpec)(nil),            // 11: flyteidl2.task.TriggerAutomationSpec
	(*common.EnrichedIdentity)(nil),          // 12: flyteidl2.common.EnrichedIdentity
	(*timestamppb.Timestamp)(nil),            // 13: google.protobuf.Timestamp
	(*core.TaskTemplate)(nil),                // 14: flyteidl2.core.TaskTemplate
	(*NamedParameter)(nil),                   // 15: flyteidl2.task.NamedParameter
	(*Environment)(nil),                      // 16: flyteidl2.task.Environment
	(*core.TypedInterface)(nil),              // 17: flyteidl2.core.TypedInterface
	(*Inputs)(nil),                           // 18: flyteidl2.task.Inputs
	(*RunSpec)(nil),                          // 19: flyteidl2.task.RunSpec
}
var file_flyteidl2_task_task_definition_proto_depIdxs = []int32{
	11, // 0: flyteidl2.task.TaskTriggersSummary.automation_spec:type_name -> flyteidl2.task.TriggerAutomationSpec
	10, // 1: flyteidl2.task.TaskTriggersSummary.stats:type_name -> flyteidl2.task.TaskTriggersSummary.TriggerStats
	12, // 2: flyteidl2.task.TaskMetadata.deployed_by:type_name -> flyteidl2.common.EnrichedIdentity
	13, // 3: flyteidl2.task.TaskMetadata.deployed_at:type_name -> google.protobuf.Timestamp
	2,  // 4: flyteidl2.task.TaskMetadata.triggers_summary:type_name -> flyteidl2.task.TaskTriggersSummary
	1,  // 5: flyteidl2.task.Task.task_id:type_name -> flyteidl2.task.TaskIdentifier
	3,  // 6: flyteidl2.task.Task.metadata:type_name -> flyteidl2.task.TaskMetadata
	14, // 7: flyteidl2.task.TaskSpec.task_template:type_name -> flyteidl2.core.TaskTemplate
	15, // 8: flyteidl2.task.TaskSpec.default_inputs:type_name -> flyteidl2.task.NamedParameter
	16, // 9: flyteidl2.task.TaskSpec.environment:type_name -> flyteidl2.task.Environment
	17, // 10: flyteidl2.task.TraceSpec.interface:type_name -> flyteidl2.core.TypedInterface
	1,  // 11: flyteidl2.task.TaskDetails.task_id:type_name -> flyteidl2.task.TaskIdentifier
	3,  // 12: flyteidl2.task.TaskDetails.metadata:type_name -> flyteidl2.task.TaskMetadata
	5,  // 13: flyteidl2.task.TaskDetails.spec:type_name -> flyteidl2.task.TaskSpec
	9,  // 14: flyteidl2.task.TaskTrigger.spec:type_name -> flyteidl2.task.TaskTriggerSpec
	11, // 15: flyteidl2.task.TaskTrigger.automation_spec:type_name -> flyteidl2.task.TriggerAutomationSpec
	18, // 16: flyteidl2.task.TaskTriggerSpec.inputs:type_name -> flyteidl2.task.Inputs
	19, // 17: flyteidl2.task.TaskTriggerSpec.run_spec:type_name -> flyteidl2.task.RunSpec
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_flyteidl2_task_task_definition_proto_init() }
func file_flyteidl2_task_task_definition_proto_init() {
	if File_flyteidl2_task_task_definition_proto != nil {
		return
	}
	file_flyteidl2_task_common_proto_init()
	file_flyteidl2_task_environment_proto_init()
	file_flyteidl2_task_run_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flyteidl2_task_task_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_task_task_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_task_task_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTriggersSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_task_task_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_task_task_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_task_task_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_task_task_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_task_task_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_task_task_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_task_task_definition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTriggerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_task_task_definition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTriggersSummary_TriggerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flyteidl2_task_task_definition_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TaskTriggersSummary_AutomationSpec)(nil),
		(*TaskTriggersSummary_Stats)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl2_task_task_definition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl2_task_task_definition_proto_goTypes,
		DependencyIndexes: file_flyteidl2_task_task_definition_proto_depIdxs,
		MessageInfos:      file_flyteidl2_task_task_definition_proto_msgTypes,
	}.Build()
	File_flyteidl2_task_task_definition_proto = out.File
	file_flyteidl2_task_task_definition_proto_rawDesc = nil
	file_flyteidl2_task_task_definition_proto_goTypes = nil
	file_flyteidl2_task_task_definition_proto_depIdxs = nil
}
