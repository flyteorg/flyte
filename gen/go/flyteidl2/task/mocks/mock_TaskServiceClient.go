// Code generated by mockery. DO NOT EDIT.

package task

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	task "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/task"
)

// TaskServiceClient is an autogenerated mock type for the TaskServiceClient type
type TaskServiceClient struct {
	mock.Mock
}

type TaskServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskServiceClient) EXPECT() *TaskServiceClient_Expecter {
	return &TaskServiceClient_Expecter{mock: &_m.Mock}
}

// DeployTask provides a mock function with given fields: ctx, in, opts
func (_m *TaskServiceClient) DeployTask(ctx context.Context, in *task.DeployTaskRequest, opts ...grpc.CallOption) (*task.DeployTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeployTask")
	}

	var r0 *task.DeployTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.DeployTaskRequest, ...grpc.CallOption) (*task.DeployTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.DeployTaskRequest, ...grpc.CallOption) *task.DeployTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.DeployTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.DeployTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskServiceClient_DeployTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeployTask'
type TaskServiceClient_DeployTask_Call struct {
	*mock.Call
}

// DeployTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *task.DeployTaskRequest
//   - opts ...grpc.CallOption
func (_e *TaskServiceClient_Expecter) DeployTask(ctx interface{}, in interface{}, opts ...interface{}) *TaskServiceClient_DeployTask_Call {
	return &TaskServiceClient_DeployTask_Call{Call: _e.mock.On("DeployTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TaskServiceClient_DeployTask_Call) Run(run func(ctx context.Context, in *task.DeployTaskRequest, opts ...grpc.CallOption)) *TaskServiceClient_DeployTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*task.DeployTaskRequest), variadicArgs...)
	})
	return _c
}

func (_c *TaskServiceClient_DeployTask_Call) Return(_a0 *task.DeployTaskResponse, _a1 error) *TaskServiceClient_DeployTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskServiceClient_DeployTask_Call) RunAndReturn(run func(context.Context, *task.DeployTaskRequest, ...grpc.CallOption) (*task.DeployTaskResponse, error)) *TaskServiceClient_DeployTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskDetails provides a mock function with given fields: ctx, in, opts
func (_m *TaskServiceClient) GetTaskDetails(ctx context.Context, in *task.GetTaskDetailsRequest, opts ...grpc.CallOption) (*task.GetTaskDetailsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskDetails")
	}

	var r0 *task.GetTaskDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.GetTaskDetailsRequest, ...grpc.CallOption) (*task.GetTaskDetailsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.GetTaskDetailsRequest, ...grpc.CallOption) *task.GetTaskDetailsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.GetTaskDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.GetTaskDetailsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskServiceClient_GetTaskDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskDetails'
type TaskServiceClient_GetTaskDetails_Call struct {
	*mock.Call
}

// GetTaskDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - in *task.GetTaskDetailsRequest
//   - opts ...grpc.CallOption
func (_e *TaskServiceClient_Expecter) GetTaskDetails(ctx interface{}, in interface{}, opts ...interface{}) *TaskServiceClient_GetTaskDetails_Call {
	return &TaskServiceClient_GetTaskDetails_Call{Call: _e.mock.On("GetTaskDetails",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TaskServiceClient_GetTaskDetails_Call) Run(run func(ctx context.Context, in *task.GetTaskDetailsRequest, opts ...grpc.CallOption)) *TaskServiceClient_GetTaskDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*task.GetTaskDetailsRequest), variadicArgs...)
	})
	return _c
}

func (_c *TaskServiceClient_GetTaskDetails_Call) Return(_a0 *task.GetTaskDetailsResponse, _a1 error) *TaskServiceClient_GetTaskDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskServiceClient_GetTaskDetails_Call) RunAndReturn(run func(context.Context, *task.GetTaskDetailsRequest, ...grpc.CallOption) (*task.GetTaskDetailsResponse, error)) *TaskServiceClient_GetTaskDetails_Call {
	_c.Call.Return(run)
	return _c
}

// ListTasks provides a mock function with given fields: ctx, in, opts
func (_m *TaskServiceClient) ListTasks(ctx context.Context, in *task.ListTasksRequest, opts ...grpc.CallOption) (*task.ListTasksResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *task.ListTasksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.ListTasksRequest, ...grpc.CallOption) (*task.ListTasksResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.ListTasksRequest, ...grpc.CallOption) *task.ListTasksResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.ListTasksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.ListTasksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskServiceClient_ListTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTasks'
type TaskServiceClient_ListTasks_Call struct {
	*mock.Call
}

// ListTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - in *task.ListTasksRequest
//   - opts ...grpc.CallOption
func (_e *TaskServiceClient_Expecter) ListTasks(ctx interface{}, in interface{}, opts ...interface{}) *TaskServiceClient_ListTasks_Call {
	return &TaskServiceClient_ListTasks_Call{Call: _e.mock.On("ListTasks",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TaskServiceClient_ListTasks_Call) Run(run func(ctx context.Context, in *task.ListTasksRequest, opts ...grpc.CallOption)) *TaskServiceClient_ListTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*task.ListTasksRequest), variadicArgs...)
	})
	return _c
}

func (_c *TaskServiceClient_ListTasks_Call) Return(_a0 *task.ListTasksResponse, _a1 error) *TaskServiceClient_ListTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskServiceClient_ListTasks_Call) RunAndReturn(run func(context.Context, *task.ListTasksRequest, ...grpc.CallOption) (*task.ListTasksResponse, error)) *TaskServiceClient_ListTasks_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersions provides a mock function with given fields: ctx, in, opts
func (_m *TaskServiceClient) ListVersions(ctx context.Context, in *task.ListVersionsRequest, opts ...grpc.CallOption) (*task.ListVersionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVersions")
	}

	var r0 *task.ListVersionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.ListVersionsRequest, ...grpc.CallOption) (*task.ListVersionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.ListVersionsRequest, ...grpc.CallOption) *task.ListVersionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.ListVersionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.ListVersionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskServiceClient_ListVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersions'
type TaskServiceClient_ListVersions_Call struct {
	*mock.Call
}

// ListVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *task.ListVersionsRequest
//   - opts ...grpc.CallOption
func (_e *TaskServiceClient_Expecter) ListVersions(ctx interface{}, in interface{}, opts ...interface{}) *TaskServiceClient_ListVersions_Call {
	return &TaskServiceClient_ListVersions_Call{Call: _e.mock.On("ListVersions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TaskServiceClient_ListVersions_Call) Run(run func(ctx context.Context, in *task.ListVersionsRequest, opts ...grpc.CallOption)) *TaskServiceClient_ListVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*task.ListVersionsRequest), variadicArgs...)
	})
	return _c
}

func (_c *TaskServiceClient_ListVersions_Call) Return(_a0 *task.ListVersionsResponse, _a1 error) *TaskServiceClient_ListVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskServiceClient_ListVersions_Call) RunAndReturn(run func(context.Context, *task.ListVersionsRequest, ...grpc.CallOption) (*task.ListVersionsResponse, error)) *TaskServiceClient_ListVersions_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskServiceClient creates a new instance of TaskServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskServiceClient {
	mock := &TaskServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
