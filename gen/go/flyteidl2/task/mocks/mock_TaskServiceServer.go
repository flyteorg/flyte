// Code generated by mockery. DO NOT EDIT.

package task

import (
	context "context"

	task "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/task"
	mock "github.com/stretchr/testify/mock"
)

// TaskServiceServer is an autogenerated mock type for the TaskServiceServer type
type TaskServiceServer struct {
	mock.Mock
}

type TaskServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskServiceServer) EXPECT() *TaskServiceServer_Expecter {
	return &TaskServiceServer_Expecter{mock: &_m.Mock}
}

// DeployTask provides a mock function with given fields: _a0, _a1
func (_m *TaskServiceServer) DeployTask(_a0 context.Context, _a1 *task.DeployTaskRequest) (*task.DeployTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeployTask")
	}

	var r0 *task.DeployTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.DeployTaskRequest) (*task.DeployTaskResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.DeployTaskRequest) *task.DeployTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.DeployTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.DeployTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskServiceServer_DeployTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeployTask'
type TaskServiceServer_DeployTask_Call struct {
	*mock.Call
}

// DeployTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *task.DeployTaskRequest
func (_e *TaskServiceServer_Expecter) DeployTask(_a0 interface{}, _a1 interface{}) *TaskServiceServer_DeployTask_Call {
	return &TaskServiceServer_DeployTask_Call{Call: _e.mock.On("DeployTask", _a0, _a1)}
}

func (_c *TaskServiceServer_DeployTask_Call) Run(run func(_a0 context.Context, _a1 *task.DeployTaskRequest)) *TaskServiceServer_DeployTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*task.DeployTaskRequest))
	})
	return _c
}

func (_c *TaskServiceServer_DeployTask_Call) Return(_a0 *task.DeployTaskResponse, _a1 error) *TaskServiceServer_DeployTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskServiceServer_DeployTask_Call) RunAndReturn(run func(context.Context, *task.DeployTaskRequest) (*task.DeployTaskResponse, error)) *TaskServiceServer_DeployTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskDetails provides a mock function with given fields: _a0, _a1
func (_m *TaskServiceServer) GetTaskDetails(_a0 context.Context, _a1 *task.GetTaskDetailsRequest) (*task.GetTaskDetailsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskDetails")
	}

	var r0 *task.GetTaskDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.GetTaskDetailsRequest) (*task.GetTaskDetailsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.GetTaskDetailsRequest) *task.GetTaskDetailsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.GetTaskDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.GetTaskDetailsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskServiceServer_GetTaskDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskDetails'
type TaskServiceServer_GetTaskDetails_Call struct {
	*mock.Call
}

// GetTaskDetails is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *task.GetTaskDetailsRequest
func (_e *TaskServiceServer_Expecter) GetTaskDetails(_a0 interface{}, _a1 interface{}) *TaskServiceServer_GetTaskDetails_Call {
	return &TaskServiceServer_GetTaskDetails_Call{Call: _e.mock.On("GetTaskDetails", _a0, _a1)}
}

func (_c *TaskServiceServer_GetTaskDetails_Call) Run(run func(_a0 context.Context, _a1 *task.GetTaskDetailsRequest)) *TaskServiceServer_GetTaskDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*task.GetTaskDetailsRequest))
	})
	return _c
}

func (_c *TaskServiceServer_GetTaskDetails_Call) Return(_a0 *task.GetTaskDetailsResponse, _a1 error) *TaskServiceServer_GetTaskDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskServiceServer_GetTaskDetails_Call) RunAndReturn(run func(context.Context, *task.GetTaskDetailsRequest) (*task.GetTaskDetailsResponse, error)) *TaskServiceServer_GetTaskDetails_Call {
	_c.Call.Return(run)
	return _c
}

// ListTasks provides a mock function with given fields: _a0, _a1
func (_m *TaskServiceServer) ListTasks(_a0 context.Context, _a1 *task.ListTasksRequest) (*task.ListTasksResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *task.ListTasksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.ListTasksRequest) (*task.ListTasksResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.ListTasksRequest) *task.ListTasksResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.ListTasksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.ListTasksRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskServiceServer_ListTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTasks'
type TaskServiceServer_ListTasks_Call struct {
	*mock.Call
}

// ListTasks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *task.ListTasksRequest
func (_e *TaskServiceServer_Expecter) ListTasks(_a0 interface{}, _a1 interface{}) *TaskServiceServer_ListTasks_Call {
	return &TaskServiceServer_ListTasks_Call{Call: _e.mock.On("ListTasks", _a0, _a1)}
}

func (_c *TaskServiceServer_ListTasks_Call) Run(run func(_a0 context.Context, _a1 *task.ListTasksRequest)) *TaskServiceServer_ListTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*task.ListTasksRequest))
	})
	return _c
}

func (_c *TaskServiceServer_ListTasks_Call) Return(_a0 *task.ListTasksResponse, _a1 error) *TaskServiceServer_ListTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskServiceServer_ListTasks_Call) RunAndReturn(run func(context.Context, *task.ListTasksRequest) (*task.ListTasksResponse, error)) *TaskServiceServer_ListTasks_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersions provides a mock function with given fields: _a0, _a1
func (_m *TaskServiceServer) ListVersions(_a0 context.Context, _a1 *task.ListVersionsRequest) (*task.ListVersionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListVersions")
	}

	var r0 *task.ListVersionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.ListVersionsRequest) (*task.ListVersionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *task.ListVersionsRequest) *task.ListVersionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*task.ListVersionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *task.ListVersionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskServiceServer_ListVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersions'
type TaskServiceServer_ListVersions_Call struct {
	*mock.Call
}

// ListVersions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *task.ListVersionsRequest
func (_e *TaskServiceServer_Expecter) ListVersions(_a0 interface{}, _a1 interface{}) *TaskServiceServer_ListVersions_Call {
	return &TaskServiceServer_ListVersions_Call{Call: _e.mock.On("ListVersions", _a0, _a1)}
}

func (_c *TaskServiceServer_ListVersions_Call) Run(run func(_a0 context.Context, _a1 *task.ListVersionsRequest)) *TaskServiceServer_ListVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*task.ListVersionsRequest))
	})
	return _c
}

func (_c *TaskServiceServer_ListVersions_Call) Return(_a0 *task.ListVersionsResponse, _a1 error) *TaskServiceServer_ListVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskServiceServer_ListVersions_Call) RunAndReturn(run func(context.Context, *task.ListVersionsRequest) (*task.ListVersionsResponse, error)) *TaskServiceServer_ListVersions_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskServiceServer creates a new instance of TaskServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskServiceServer {
	mock := &TaskServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
