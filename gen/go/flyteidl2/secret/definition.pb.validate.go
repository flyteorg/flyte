// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/secret/definition.proto

package secret

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SecretSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SecretSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SecretSpecMultiError, or
// nil if none found.
func (m *SecretSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	switch v := m.Value.(type) {
	case *SecretSpec_StringValue:
		if v == nil {
			err := SecretSpecValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	case *SecretSpec_BinaryValue:
		if v == nil {
			err := SecretSpecValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BinaryValue
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SecretSpecMultiError(errors)
	}

	return nil
}

// SecretSpecMultiError is an error wrapping multiple validation errors
// returned by SecretSpec.ValidateAll() if the designated constraints aren't met.
type SecretSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretSpecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretSpecMultiError) AllErrors() []error { return m }

// SecretSpecValidationError is the validation error returned by
// SecretSpec.Validate if the designated constraints aren't met.
type SecretSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretSpecValidationError) ErrorName() string { return "SecretSpecValidationError" }

// Error satisfies the builtin error interface
func (e SecretSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretSpecValidationError{}

// Validate checks the field values on SecretIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SecretIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SecretIdentifierMultiError, or nil if none found.
func (m *SecretIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Organization

	// no validation rules for Domain

	// no validation rules for Project

	if len(errors) > 0 {
		return SecretIdentifierMultiError(errors)
	}

	return nil
}

// SecretIdentifierMultiError is an error wrapping multiple validation errors
// returned by SecretIdentifier.ValidateAll() if the designated constraints
// aren't met.
type SecretIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretIdentifierMultiError) AllErrors() []error { return m }

// SecretIdentifierValidationError is the validation error returned by
// SecretIdentifier.Validate if the designated constraints aren't met.
type SecretIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretIdentifierValidationError) ErrorName() string { return "SecretIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e SecretIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretIdentifierValidationError{}

// Validate checks the field values on SecretMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SecretMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SecretMetadataMultiError,
// or nil if none found.
func (m *SecretMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretMetadataValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretMetadataValidationError{
					field:  "CreatedTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretMetadataValidationError{
				field:  "CreatedTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecretStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretMetadataValidationError{
					field:  "SecretStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretMetadataValidationError{
					field:  "SecretStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecretStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretMetadataValidationError{
				field:  "SecretStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return SecretMetadataMultiError(errors)
	}

	return nil
}

// SecretMetadataMultiError is an error wrapping multiple validation errors
// returned by SecretMetadata.ValidateAll() if the designated constraints
// aren't met.
type SecretMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretMetadataMultiError) AllErrors() []error { return m }

// SecretMetadataValidationError is the validation error returned by
// SecretMetadata.Validate if the designated constraints aren't met.
type SecretMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretMetadataValidationError) ErrorName() string { return "SecretMetadataValidationError" }

// Error satisfies the builtin error interface
func (e SecretMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretMetadataValidationError{}

// Validate checks the field values on SecretStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SecretStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SecretStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SecretStatusMultiError, or
// nil if none found.
func (m *SecretStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *SecretStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OverallStatus

	for idx, item := range m.GetClusterStatus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SecretStatusValidationError{
						field:  fmt.Sprintf("ClusterStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SecretStatusValidationError{
						field:  fmt.Sprintf("ClusterStatus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretStatusValidationError{
					field:  fmt.Sprintf("ClusterStatus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SecretStatusMultiError(errors)
	}

	return nil
}

// SecretStatusMultiError is an error wrapping multiple validation errors
// returned by SecretStatus.ValidateAll() if the designated constraints aren't met.
type SecretStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretStatusMultiError) AllErrors() []error { return m }

// SecretStatusValidationError is the validation error returned by
// SecretStatus.Validate if the designated constraints aren't met.
type SecretStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretStatusValidationError) ErrorName() string { return "SecretStatusValidationError" }

// Error satisfies the builtin error interface
func (e SecretStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretStatusValidationError{}

// Validate checks the field values on ClusterSecretStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterSecretStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterSecretStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterSecretStatusMultiError, or nil if none found.
func (m *ClusterSecretStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterSecretStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterSecretStatusValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterSecretStatusValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterSecretStatusValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PresenceStatus

	if len(errors) > 0 {
		return ClusterSecretStatusMultiError(errors)
	}

	return nil
}

// ClusterSecretStatusMultiError is an error wrapping multiple validation
// errors returned by ClusterSecretStatus.ValidateAll() if the designated
// constraints aren't met.
type ClusterSecretStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterSecretStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterSecretStatusMultiError) AllErrors() []error { return m }

// ClusterSecretStatusValidationError is the validation error returned by
// ClusterSecretStatus.Validate if the designated constraints aren't met.
type ClusterSecretStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterSecretStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterSecretStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterSecretStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterSecretStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterSecretStatusValidationError) ErrorName() string {
	return "ClusterSecretStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterSecretStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterSecretStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterSecretStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterSecretStatusValidationError{}

// Validate checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Secret) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SecretMultiError, or nil if none found.
func (m *Secret) ValidateAll() error {
	return m.validate(true)
}

func (m *Secret) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecretMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "SecretMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "SecretMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecretMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretValidationError{
				field:  "SecretMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SecretMultiError(errors)
	}

	return nil
}

// SecretMultiError is an error wrapping multiple validation errors returned by
// Secret.ValidateAll() if the designated constraints aren't met.
type SecretMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretMultiError) AllErrors() []error { return m }

// SecretValidationError is the validation error returned by Secret.Validate if
// the designated constraints aren't met.
type SecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretValidationError) ErrorName() string { return "SecretValidationError" }

// Error satisfies the builtin error interface
func (e SecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretValidationError{}
