// Code generated by mockery. DO NOT EDIT.

package secret

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	secret "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/secret"
)

// SecretServiceClient is an autogenerated mock type for the SecretServiceClient type
type SecretServiceClient struct {
	mock.Mock
}

type SecretServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SecretServiceClient) EXPECT() *SecretServiceClient_Expecter {
	return &SecretServiceClient_Expecter{mock: &_m.Mock}
}

// CreateSecret provides a mock function with given fields: ctx, in, opts
func (_m *SecretServiceClient) CreateSecret(ctx context.Context, in *secret.CreateSecretRequest, opts ...grpc.CallOption) (*secret.CreateSecretResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecret")
	}

	var r0 *secret.CreateSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secret.CreateSecretRequest, ...grpc.CallOption) (*secret.CreateSecretResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secret.CreateSecretRequest, ...grpc.CallOption) *secret.CreateSecretResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.CreateSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secret.CreateSecretRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretServiceClient_CreateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecret'
type SecretServiceClient_CreateSecret_Call struct {
	*mock.Call
}

// CreateSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - in *secret.CreateSecretRequest
//   - opts ...grpc.CallOption
func (_e *SecretServiceClient_Expecter) CreateSecret(ctx interface{}, in interface{}, opts ...interface{}) *SecretServiceClient_CreateSecret_Call {
	return &SecretServiceClient_CreateSecret_Call{Call: _e.mock.On("CreateSecret",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecretServiceClient_CreateSecret_Call) Run(run func(ctx context.Context, in *secret.CreateSecretRequest, opts ...grpc.CallOption)) *SecretServiceClient_CreateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*secret.CreateSecretRequest), variadicArgs...)
	})
	return _c
}

func (_c *SecretServiceClient_CreateSecret_Call) Return(_a0 *secret.CreateSecretResponse, _a1 error) *SecretServiceClient_CreateSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretServiceClient_CreateSecret_Call) RunAndReturn(run func(context.Context, *secret.CreateSecretRequest, ...grpc.CallOption) (*secret.CreateSecretResponse, error)) *SecretServiceClient_CreateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecret provides a mock function with given fields: ctx, in, opts
func (_m *SecretServiceClient) DeleteSecret(ctx context.Context, in *secret.DeleteSecretRequest, opts ...grpc.CallOption) (*secret.DeleteSecretResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecret")
	}

	var r0 *secret.DeleteSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secret.DeleteSecretRequest, ...grpc.CallOption) (*secret.DeleteSecretResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secret.DeleteSecretRequest, ...grpc.CallOption) *secret.DeleteSecretResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.DeleteSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secret.DeleteSecretRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretServiceClient_DeleteSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecret'
type SecretServiceClient_DeleteSecret_Call struct {
	*mock.Call
}

// DeleteSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - in *secret.DeleteSecretRequest
//   - opts ...grpc.CallOption
func (_e *SecretServiceClient_Expecter) DeleteSecret(ctx interface{}, in interface{}, opts ...interface{}) *SecretServiceClient_DeleteSecret_Call {
	return &SecretServiceClient_DeleteSecret_Call{Call: _e.mock.On("DeleteSecret",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecretServiceClient_DeleteSecret_Call) Run(run func(ctx context.Context, in *secret.DeleteSecretRequest, opts ...grpc.CallOption)) *SecretServiceClient_DeleteSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*secret.DeleteSecretRequest), variadicArgs...)
	})
	return _c
}

func (_c *SecretServiceClient_DeleteSecret_Call) Return(_a0 *secret.DeleteSecretResponse, _a1 error) *SecretServiceClient_DeleteSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretServiceClient_DeleteSecret_Call) RunAndReturn(run func(context.Context, *secret.DeleteSecretRequest, ...grpc.CallOption) (*secret.DeleteSecretResponse, error)) *SecretServiceClient_DeleteSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecret provides a mock function with given fields: ctx, in, opts
func (_m *SecretServiceClient) GetSecret(ctx context.Context, in *secret.GetSecretRequest, opts ...grpc.CallOption) (*secret.GetSecretResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 *secret.GetSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secret.GetSecretRequest, ...grpc.CallOption) (*secret.GetSecretResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secret.GetSecretRequest, ...grpc.CallOption) *secret.GetSecretResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.GetSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secret.GetSecretRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretServiceClient_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type SecretServiceClient_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - in *secret.GetSecretRequest
//   - opts ...grpc.CallOption
func (_e *SecretServiceClient_Expecter) GetSecret(ctx interface{}, in interface{}, opts ...interface{}) *SecretServiceClient_GetSecret_Call {
	return &SecretServiceClient_GetSecret_Call{Call: _e.mock.On("GetSecret",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecretServiceClient_GetSecret_Call) Run(run func(ctx context.Context, in *secret.GetSecretRequest, opts ...grpc.CallOption)) *SecretServiceClient_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*secret.GetSecretRequest), variadicArgs...)
	})
	return _c
}

func (_c *SecretServiceClient_GetSecret_Call) Return(_a0 *secret.GetSecretResponse, _a1 error) *SecretServiceClient_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretServiceClient_GetSecret_Call) RunAndReturn(run func(context.Context, *secret.GetSecretRequest, ...grpc.CallOption) (*secret.GetSecretResponse, error)) *SecretServiceClient_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecrets provides a mock function with given fields: ctx, in, opts
func (_m *SecretServiceClient) ListSecrets(ctx context.Context, in *secret.ListSecretsRequest, opts ...grpc.CallOption) (*secret.ListSecretsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecrets")
	}

	var r0 *secret.ListSecretsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secret.ListSecretsRequest, ...grpc.CallOption) (*secret.ListSecretsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secret.ListSecretsRequest, ...grpc.CallOption) *secret.ListSecretsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.ListSecretsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secret.ListSecretsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretServiceClient_ListSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecrets'
type SecretServiceClient_ListSecrets_Call struct {
	*mock.Call
}

// ListSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - in *secret.ListSecretsRequest
//   - opts ...grpc.CallOption
func (_e *SecretServiceClient_Expecter) ListSecrets(ctx interface{}, in interface{}, opts ...interface{}) *SecretServiceClient_ListSecrets_Call {
	return &SecretServiceClient_ListSecrets_Call{Call: _e.mock.On("ListSecrets",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecretServiceClient_ListSecrets_Call) Run(run func(ctx context.Context, in *secret.ListSecretsRequest, opts ...grpc.CallOption)) *SecretServiceClient_ListSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*secret.ListSecretsRequest), variadicArgs...)
	})
	return _c
}

func (_c *SecretServiceClient_ListSecrets_Call) Return(_a0 *secret.ListSecretsResponse, _a1 error) *SecretServiceClient_ListSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretServiceClient_ListSecrets_Call) RunAndReturn(run func(context.Context, *secret.ListSecretsRequest, ...grpc.CallOption) (*secret.ListSecretsResponse, error)) *SecretServiceClient_ListSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSecret provides a mock function with given fields: ctx, in, opts
func (_m *SecretServiceClient) UpdateSecret(ctx context.Context, in *secret.UpdateSecretRequest, opts ...grpc.CallOption) (*secret.UpdateSecretResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecret")
	}

	var r0 *secret.UpdateSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secret.UpdateSecretRequest, ...grpc.CallOption) (*secret.UpdateSecretResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secret.UpdateSecretRequest, ...grpc.CallOption) *secret.UpdateSecretResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.UpdateSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secret.UpdateSecretRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretServiceClient_UpdateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSecret'
type SecretServiceClient_UpdateSecret_Call struct {
	*mock.Call
}

// UpdateSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - in *secret.UpdateSecretRequest
//   - opts ...grpc.CallOption
func (_e *SecretServiceClient_Expecter) UpdateSecret(ctx interface{}, in interface{}, opts ...interface{}) *SecretServiceClient_UpdateSecret_Call {
	return &SecretServiceClient_UpdateSecret_Call{Call: _e.mock.On("UpdateSecret",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SecretServiceClient_UpdateSecret_Call) Run(run func(ctx context.Context, in *secret.UpdateSecretRequest, opts ...grpc.CallOption)) *SecretServiceClient_UpdateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*secret.UpdateSecretRequest), variadicArgs...)
	})
	return _c
}

func (_c *SecretServiceClient_UpdateSecret_Call) Return(_a0 *secret.UpdateSecretResponse, _a1 error) *SecretServiceClient_UpdateSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretServiceClient_UpdateSecret_Call) RunAndReturn(run func(context.Context, *secret.UpdateSecretRequest, ...grpc.CallOption) (*secret.UpdateSecretResponse, error)) *SecretServiceClient_UpdateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecretServiceClient creates a new instance of SecretServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretServiceClient {
	mock := &SecretServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
