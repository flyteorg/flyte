// Code generated by mockery. DO NOT EDIT.

package secret

import (
	context "context"

	secret "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/secret"
	mock "github.com/stretchr/testify/mock"
)

// SecretServiceServer is an autogenerated mock type for the SecretServiceServer type
type SecretServiceServer struct {
	mock.Mock
}

type SecretServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *SecretServiceServer) EXPECT() *SecretServiceServer_Expecter {
	return &SecretServiceServer_Expecter{mock: &_m.Mock}
}

// CreateSecret provides a mock function with given fields: _a0, _a1
func (_m *SecretServiceServer) CreateSecret(_a0 context.Context, _a1 *secret.CreateSecretRequest) (*secret.CreateSecretResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecret")
	}

	var r0 *secret.CreateSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secret.CreateSecretRequest) (*secret.CreateSecretResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secret.CreateSecretRequest) *secret.CreateSecretResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.CreateSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secret.CreateSecretRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretServiceServer_CreateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecret'
type SecretServiceServer_CreateSecret_Call struct {
	*mock.Call
}

// CreateSecret is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *secret.CreateSecretRequest
func (_e *SecretServiceServer_Expecter) CreateSecret(_a0 interface{}, _a1 interface{}) *SecretServiceServer_CreateSecret_Call {
	return &SecretServiceServer_CreateSecret_Call{Call: _e.mock.On("CreateSecret", _a0, _a1)}
}

func (_c *SecretServiceServer_CreateSecret_Call) Run(run func(_a0 context.Context, _a1 *secret.CreateSecretRequest)) *SecretServiceServer_CreateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*secret.CreateSecretRequest))
	})
	return _c
}

func (_c *SecretServiceServer_CreateSecret_Call) Return(_a0 *secret.CreateSecretResponse, _a1 error) *SecretServiceServer_CreateSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretServiceServer_CreateSecret_Call) RunAndReturn(run func(context.Context, *secret.CreateSecretRequest) (*secret.CreateSecretResponse, error)) *SecretServiceServer_CreateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecret provides a mock function with given fields: _a0, _a1
func (_m *SecretServiceServer) DeleteSecret(_a0 context.Context, _a1 *secret.DeleteSecretRequest) (*secret.DeleteSecretResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecret")
	}

	var r0 *secret.DeleteSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secret.DeleteSecretRequest) (*secret.DeleteSecretResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secret.DeleteSecretRequest) *secret.DeleteSecretResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.DeleteSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secret.DeleteSecretRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretServiceServer_DeleteSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecret'
type SecretServiceServer_DeleteSecret_Call struct {
	*mock.Call
}

// DeleteSecret is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *secret.DeleteSecretRequest
func (_e *SecretServiceServer_Expecter) DeleteSecret(_a0 interface{}, _a1 interface{}) *SecretServiceServer_DeleteSecret_Call {
	return &SecretServiceServer_DeleteSecret_Call{Call: _e.mock.On("DeleteSecret", _a0, _a1)}
}

func (_c *SecretServiceServer_DeleteSecret_Call) Run(run func(_a0 context.Context, _a1 *secret.DeleteSecretRequest)) *SecretServiceServer_DeleteSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*secret.DeleteSecretRequest))
	})
	return _c
}

func (_c *SecretServiceServer_DeleteSecret_Call) Return(_a0 *secret.DeleteSecretResponse, _a1 error) *SecretServiceServer_DeleteSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretServiceServer_DeleteSecret_Call) RunAndReturn(run func(context.Context, *secret.DeleteSecretRequest) (*secret.DeleteSecretResponse, error)) *SecretServiceServer_DeleteSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecret provides a mock function with given fields: _a0, _a1
func (_m *SecretServiceServer) GetSecret(_a0 context.Context, _a1 *secret.GetSecretRequest) (*secret.GetSecretResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSecret")
	}

	var r0 *secret.GetSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secret.GetSecretRequest) (*secret.GetSecretResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secret.GetSecretRequest) *secret.GetSecretResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.GetSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secret.GetSecretRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretServiceServer_GetSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecret'
type SecretServiceServer_GetSecret_Call struct {
	*mock.Call
}

// GetSecret is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *secret.GetSecretRequest
func (_e *SecretServiceServer_Expecter) GetSecret(_a0 interface{}, _a1 interface{}) *SecretServiceServer_GetSecret_Call {
	return &SecretServiceServer_GetSecret_Call{Call: _e.mock.On("GetSecret", _a0, _a1)}
}

func (_c *SecretServiceServer_GetSecret_Call) Run(run func(_a0 context.Context, _a1 *secret.GetSecretRequest)) *SecretServiceServer_GetSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*secret.GetSecretRequest))
	})
	return _c
}

func (_c *SecretServiceServer_GetSecret_Call) Return(_a0 *secret.GetSecretResponse, _a1 error) *SecretServiceServer_GetSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretServiceServer_GetSecret_Call) RunAndReturn(run func(context.Context, *secret.GetSecretRequest) (*secret.GetSecretResponse, error)) *SecretServiceServer_GetSecret_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecrets provides a mock function with given fields: _a0, _a1
func (_m *SecretServiceServer) ListSecrets(_a0 context.Context, _a1 *secret.ListSecretsRequest) (*secret.ListSecretsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListSecrets")
	}

	var r0 *secret.ListSecretsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secret.ListSecretsRequest) (*secret.ListSecretsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secret.ListSecretsRequest) *secret.ListSecretsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.ListSecretsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secret.ListSecretsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretServiceServer_ListSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecrets'
type SecretServiceServer_ListSecrets_Call struct {
	*mock.Call
}

// ListSecrets is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *secret.ListSecretsRequest
func (_e *SecretServiceServer_Expecter) ListSecrets(_a0 interface{}, _a1 interface{}) *SecretServiceServer_ListSecrets_Call {
	return &SecretServiceServer_ListSecrets_Call{Call: _e.mock.On("ListSecrets", _a0, _a1)}
}

func (_c *SecretServiceServer_ListSecrets_Call) Run(run func(_a0 context.Context, _a1 *secret.ListSecretsRequest)) *SecretServiceServer_ListSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*secret.ListSecretsRequest))
	})
	return _c
}

func (_c *SecretServiceServer_ListSecrets_Call) Return(_a0 *secret.ListSecretsResponse, _a1 error) *SecretServiceServer_ListSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretServiceServer_ListSecrets_Call) RunAndReturn(run func(context.Context, *secret.ListSecretsRequest) (*secret.ListSecretsResponse, error)) *SecretServiceServer_ListSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSecret provides a mock function with given fields: _a0, _a1
func (_m *SecretServiceServer) UpdateSecret(_a0 context.Context, _a1 *secret.UpdateSecretRequest) (*secret.UpdateSecretResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecret")
	}

	var r0 *secret.UpdateSecretResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secret.UpdateSecretRequest) (*secret.UpdateSecretResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secret.UpdateSecretRequest) *secret.UpdateSecretResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.UpdateSecretResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secret.UpdateSecretRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecretServiceServer_UpdateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSecret'
type SecretServiceServer_UpdateSecret_Call struct {
	*mock.Call
}

// UpdateSecret is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *secret.UpdateSecretRequest
func (_e *SecretServiceServer_Expecter) UpdateSecret(_a0 interface{}, _a1 interface{}) *SecretServiceServer_UpdateSecret_Call {
	return &SecretServiceServer_UpdateSecret_Call{Call: _e.mock.On("UpdateSecret", _a0, _a1)}
}

func (_c *SecretServiceServer_UpdateSecret_Call) Run(run func(_a0 context.Context, _a1 *secret.UpdateSecretRequest)) *SecretServiceServer_UpdateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*secret.UpdateSecretRequest))
	})
	return _c
}

func (_c *SecretServiceServer_UpdateSecret_Call) Return(_a0 *secret.UpdateSecretResponse, _a1 error) *SecretServiceServer_UpdateSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecretServiceServer_UpdateSecret_Call) RunAndReturn(run func(context.Context, *secret.UpdateSecretRequest) (*secret.UpdateSecretResponse, error)) *SecretServiceServer_UpdateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecretServiceServer creates a new instance of SecretServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretServiceServer {
	mock := &SecretServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
