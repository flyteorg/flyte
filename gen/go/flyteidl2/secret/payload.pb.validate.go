// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/secret/payload.proto

package secret

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSecretRequestMultiError, or nil if none found.
func (m *CreateSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSecretRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSecretRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSecretRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecretSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSecretRequestValidationError{
					field:  "SecretSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSecretRequestValidationError{
					field:  "SecretSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecretSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSecretRequestValidationError{
				field:  "SecretSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSecretRequestMultiError(errors)
	}

	return nil
}

// CreateSecretRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSecretRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSecretRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSecretRequestMultiError) AllErrors() []error { return m }

// CreateSecretRequestValidationError is the validation error returned by
// CreateSecretRequest.Validate if the designated constraints aren't met.
type CreateSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSecretRequestValidationError) ErrorName() string {
	return "CreateSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSecretRequestValidationError{}

// Validate checks the field values on CreateSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSecretResponseMultiError, or nil if none found.
func (m *CreateSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSecretResponseMultiError(errors)
	}

	return nil
}

// CreateSecretResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSecretResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSecretResponseMultiError) AllErrors() []error { return m }

// CreateSecretResponseValidationError is the validation error returned by
// CreateSecretResponse.Validate if the designated constraints aren't met.
type CreateSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSecretResponseValidationError) ErrorName() string {
	return "CreateSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSecretResponseValidationError{}

// Validate checks the field values on UpdateSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSecretRequestMultiError, or nil if none found.
func (m *UpdateSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSecretRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSecretRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSecretRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecretSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSecretRequestValidationError{
					field:  "SecretSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSecretRequestValidationError{
					field:  "SecretSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecretSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSecretRequestValidationError{
				field:  "SecretSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSecretRequestMultiError(errors)
	}

	return nil
}

// UpdateSecretRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSecretRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSecretRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSecretRequestMultiError) AllErrors() []error { return m }

// UpdateSecretRequestValidationError is the validation error returned by
// UpdateSecretRequest.Validate if the designated constraints aren't met.
type UpdateSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSecretRequestValidationError) ErrorName() string {
	return "UpdateSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSecretRequestValidationError{}

// Validate checks the field values on UpdateSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSecretResponseMultiError, or nil if none found.
func (m *UpdateSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSecretResponseMultiError(errors)
	}

	return nil
}

// UpdateSecretResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSecretResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSecretResponseMultiError) AllErrors() []error { return m }

// UpdateSecretResponseValidationError is the validation error returned by
// UpdateSecretResponse.Validate if the designated constraints aren't met.
type UpdateSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSecretResponseValidationError) ErrorName() string {
	return "UpdateSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSecretResponseValidationError{}

// Validate checks the field values on GetSecretRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSecretRequestMultiError, or nil if none found.
func (m *GetSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSecretRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSecretRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSecretRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSecretRequestMultiError(errors)
	}

	return nil
}

// GetSecretRequestMultiError is an error wrapping multiple validation errors
// returned by GetSecretRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSecretRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSecretRequestMultiError) AllErrors() []error { return m }

// GetSecretRequestValidationError is the validation error returned by
// GetSecretRequest.Validate if the designated constraints aren't met.
type GetSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecretRequestValidationError) ErrorName() string { return "GetSecretRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecretRequestValidationError{}

// Validate checks the field values on GetSecretResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSecretResponseMultiError, or nil if none found.
func (m *GetSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSecretResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSecretResponseMultiError(errors)
	}

	return nil
}

// GetSecretResponseMultiError is an error wrapping multiple validation errors
// returned by GetSecretResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSecretResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSecretResponseMultiError) AllErrors() []error { return m }

// GetSecretResponseValidationError is the validation error returned by
// GetSecretResponse.Validate if the designated constraints aren't met.
type GetSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecretResponseValidationError) ErrorName() string {
	return "GetSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecretResponseValidationError{}

// Validate checks the field values on DeleteSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSecretRequestMultiError, or nil if none found.
func (m *DeleteSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteSecretRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteSecretRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteSecretRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteSecretRequestMultiError(errors)
	}

	return nil
}

// DeleteSecretRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSecretRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSecretRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSecretRequestMultiError) AllErrors() []error { return m }

// DeleteSecretRequestValidationError is the validation error returned by
// DeleteSecretRequest.Validate if the designated constraints aren't met.
type DeleteSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSecretRequestValidationError) ErrorName() string {
	return "DeleteSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSecretRequestValidationError{}

// Validate checks the field values on DeleteSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSecretResponseMultiError, or nil if none found.
func (m *DeleteSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSecretResponseMultiError(errors)
	}

	return nil
}

// DeleteSecretResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSecretResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSecretResponseMultiError) AllErrors() []error { return m }

// DeleteSecretResponseValidationError is the validation error returned by
// DeleteSecretResponse.Validate if the designated constraints aren't met.
type DeleteSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSecretResponseValidationError) ErrorName() string {
	return "DeleteSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSecretResponseValidationError{}

// Validate checks the field values on ListSecretsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSecretsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecretsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecretsRequestMultiError, or nil if none found.
func (m *ListSecretsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecretsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Domain

	// no validation rules for Project

	// no validation rules for Limit

	// no validation rules for Token

	// no validation rules for PerClusterTokens

	if len(errors) > 0 {
		return ListSecretsRequestMultiError(errors)
	}

	return nil
}

// ListSecretsRequestMultiError is an error wrapping multiple validation errors
// returned by ListSecretsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSecretsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecretsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecretsRequestMultiError) AllErrors() []error { return m }

// ListSecretsRequestValidationError is the validation error returned by
// ListSecretsRequest.Validate if the designated constraints aren't met.
type ListSecretsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretsRequestValidationError) ErrorName() string {
	return "ListSecretsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretsRequestValidationError{}

// Validate checks the field values on ListSecretsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSecretsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecretsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecretsResponseMultiError, or nil if none found.
func (m *ListSecretsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecretsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSecretsResponseValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Token

	// no validation rules for PerClusterTokens

	if len(errors) > 0 {
		return ListSecretsResponseMultiError(errors)
	}

	return nil
}

// ListSecretsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSecretsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSecretsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecretsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecretsResponseMultiError) AllErrors() []error { return m }

// ListSecretsResponseValidationError is the validation error returned by
// ListSecretsResponse.Validate if the designated constraints aren't met.
type ListSecretsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretsResponseValidationError) ErrorName() string {
	return "ListSecretsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretsResponseValidationError{}
