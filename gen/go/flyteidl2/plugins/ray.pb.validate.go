// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/plugins/ray.proto

package plugins

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RayJob with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RayJob) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RayJob with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RayJobMultiError, or nil if none found.
func (m *RayJob) ValidateAll() error {
	return m.validate(true)
}

func (m *RayJob) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRayCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RayJobValidationError{
					field:  "RayCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RayJobValidationError{
					field:  "RayCluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRayCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RayJobValidationError{
				field:  "RayCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RuntimeEnv

	// no validation rules for ShutdownAfterJobFinishes

	// no validation rules for TtlSecondsAfterFinished

	// no validation rules for RuntimeEnvYaml

	if len(errors) > 0 {
		return RayJobMultiError(errors)
	}

	return nil
}

// RayJobMultiError is an error wrapping multiple validation errors returned by
// RayJob.ValidateAll() if the designated constraints aren't met.
type RayJobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RayJobMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RayJobMultiError) AllErrors() []error { return m }

// RayJobValidationError is the validation error returned by RayJob.Validate if
// the designated constraints aren't met.
type RayJobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RayJobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RayJobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RayJobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RayJobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RayJobValidationError) ErrorName() string { return "RayJobValidationError" }

// Error satisfies the builtin error interface
func (e RayJobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRayJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RayJobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RayJobValidationError{}

// Validate checks the field values on RayCluster with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RayCluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RayCluster with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RayClusterMultiError, or
// nil if none found.
func (m *RayCluster) ValidateAll() error {
	return m.validate(true)
}

func (m *RayCluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHeadGroupSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RayClusterValidationError{
					field:  "HeadGroupSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RayClusterValidationError{
					field:  "HeadGroupSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeadGroupSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RayClusterValidationError{
				field:  "HeadGroupSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWorkerGroupSpec() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RayClusterValidationError{
						field:  fmt.Sprintf("WorkerGroupSpec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RayClusterValidationError{
						field:  fmt.Sprintf("WorkerGroupSpec[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RayClusterValidationError{
					field:  fmt.Sprintf("WorkerGroupSpec[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for EnableAutoscaling

	if len(errors) > 0 {
		return RayClusterMultiError(errors)
	}

	return nil
}

// RayClusterMultiError is an error wrapping multiple validation errors
// returned by RayCluster.ValidateAll() if the designated constraints aren't met.
type RayClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RayClusterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RayClusterMultiError) AllErrors() []error { return m }

// RayClusterValidationError is the validation error returned by
// RayCluster.Validate if the designated constraints aren't met.
type RayClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RayClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RayClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RayClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RayClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RayClusterValidationError) ErrorName() string { return "RayClusterValidationError" }

// Error satisfies the builtin error interface
func (e RayClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRayCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RayClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RayClusterValidationError{}

// Validate checks the field values on HeadGroupSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HeadGroupSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeadGroupSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeadGroupSpecMultiError, or
// nil if none found.
func (m *HeadGroupSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *HeadGroupSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RayStartParams

	if all {
		switch v := interface{}(m.GetK8SPod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HeadGroupSpecValidationError{
					field:  "K8SPod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HeadGroupSpecValidationError{
					field:  "K8SPod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetK8SPod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HeadGroupSpecValidationError{
				field:  "K8SPod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HeadGroupSpecMultiError(errors)
	}

	return nil
}

// HeadGroupSpecMultiError is an error wrapping multiple validation errors
// returned by HeadGroupSpec.ValidateAll() if the designated constraints
// aren't met.
type HeadGroupSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeadGroupSpecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeadGroupSpecMultiError) AllErrors() []error { return m }

// HeadGroupSpecValidationError is the validation error returned by
// HeadGroupSpec.Validate if the designated constraints aren't met.
type HeadGroupSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeadGroupSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeadGroupSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeadGroupSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeadGroupSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeadGroupSpecValidationError) ErrorName() string { return "HeadGroupSpecValidationError" }

// Error satisfies the builtin error interface
func (e HeadGroupSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeadGroupSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeadGroupSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeadGroupSpecValidationError{}

// Validate checks the field values on WorkerGroupSpec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkerGroupSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkerGroupSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkerGroupSpecMultiError, or nil if none found.
func (m *WorkerGroupSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkerGroupSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupName

	// no validation rules for Replicas

	// no validation rules for MinReplicas

	// no validation rules for MaxReplicas

	// no validation rules for RayStartParams

	if all {
		switch v := interface{}(m.GetK8SPod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkerGroupSpecValidationError{
					field:  "K8SPod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkerGroupSpecValidationError{
					field:  "K8SPod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetK8SPod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkerGroupSpecValidationError{
				field:  "K8SPod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkerGroupSpecMultiError(errors)
	}

	return nil
}

// WorkerGroupSpecMultiError is an error wrapping multiple validation errors
// returned by WorkerGroupSpec.ValidateAll() if the designated constraints
// aren't met.
type WorkerGroupSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkerGroupSpecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkerGroupSpecMultiError) AllErrors() []error { return m }

// WorkerGroupSpecValidationError is the validation error returned by
// WorkerGroupSpec.Validate if the designated constraints aren't met.
type WorkerGroupSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkerGroupSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkerGroupSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkerGroupSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkerGroupSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkerGroupSpecValidationError) ErrorName() string { return "WorkerGroupSpecValidationError" }

// Error satisfies the builtin error interface
func (e WorkerGroupSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkerGroupSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkerGroupSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkerGroupSpecValidationError{}
