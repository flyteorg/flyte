// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl2/plugins/pytorch.proto

package plugins

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Custom proto for torch elastic config for distributed training using
// https://github.com/kubeflow/trainer/blob/e31d11faa9f6ce5111b60c01079d39295589e0ef/pkg/apis/kubeflow.org/v1/pytorch_types.go#L98
type ElasticConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RdzvBackend  string `protobuf:"bytes,1,opt,name=rdzv_backend,json=rdzvBackend,proto3" json:"rdzv_backend,omitempty"`
	MinReplicas  int32  `protobuf:"varint,2,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,omitempty"`
	MaxReplicas  int32  `protobuf:"varint,3,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,omitempty"`
	NprocPerNode int32  `protobuf:"varint,4,opt,name=nproc_per_node,json=nprocPerNode,proto3" json:"nproc_per_node,omitempty"`
	MaxRestarts  int32  `protobuf:"varint,5,opt,name=max_restarts,json=maxRestarts,proto3" json:"max_restarts,omitempty"`
}

func (x *ElasticConfig) Reset() {
	*x = ElasticConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_plugins_pytorch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticConfig) ProtoMessage() {}

func (x *ElasticConfig) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_plugins_pytorch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticConfig.ProtoReflect.Descriptor instead.
func (*ElasticConfig) Descriptor() ([]byte, []int) {
	return file_flyteidl2_plugins_pytorch_proto_rawDescGZIP(), []int{0}
}

func (x *ElasticConfig) GetRdzvBackend() string {
	if x != nil {
		return x.RdzvBackend
	}
	return ""
}

func (x *ElasticConfig) GetMinReplicas() int32 {
	if x != nil {
		return x.MinReplicas
	}
	return 0
}

func (x *ElasticConfig) GetMaxReplicas() int32 {
	if x != nil {
		return x.MaxReplicas
	}
	return 0
}

func (x *ElasticConfig) GetNprocPerNode() int32 {
	if x != nil {
		return x.NprocPerNode
	}
	return 0
}

func (x *ElasticConfig) GetMaxRestarts() int32 {
	if x != nil {
		return x.MaxRestarts
	}
	return 0
}

// Custom proto for plugin that enables distributed training using https://github.com/kubeflow/trainer
type DistributedPyTorchTrainingTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of worker replicas spawned in the cluster for this job
	Workers int32 `protobuf:"varint,1,opt,name=workers,proto3" json:"workers,omitempty"`
	// config for an elastic pytorch job
	ElasticConfig *ElasticConfig `protobuf:"bytes,2,opt,name=elastic_config,json=elasticConfig,proto3" json:"elastic_config,omitempty"`
}

func (x *DistributedPyTorchTrainingTask) Reset() {
	*x = DistributedPyTorchTrainingTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_plugins_pytorch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributedPyTorchTrainingTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributedPyTorchTrainingTask) ProtoMessage() {}

func (x *DistributedPyTorchTrainingTask) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_plugins_pytorch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributedPyTorchTrainingTask.ProtoReflect.Descriptor instead.
func (*DistributedPyTorchTrainingTask) Descriptor() ([]byte, []int) {
	return file_flyteidl2_plugins_pytorch_proto_rawDescGZIP(), []int{1}
}

func (x *DistributedPyTorchTrainingTask) GetWorkers() int32 {
	if x != nil {
		return x.Workers
	}
	return 0
}

func (x *DistributedPyTorchTrainingTask) GetElasticConfig() *ElasticConfig {
	if x != nil {
		return x.ElasticConfig
	}
	return nil
}

var File_flyteidl2_plugins_pytorch_proto protoreflect.FileDescriptor

var file_flyteidl2_plugins_pytorch_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2f, 0x70, 0x79, 0x74, 0x6f, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x0d, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x64, 0x7a, 0x76, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x64,
	0x7a, 0x76, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x50, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x50, 0x79, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0d, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0xc3,
	0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x42, 0x0c, 0x50, 0x79, 0x74, 0x6f, 0x72, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0xa2, 0x02, 0x03, 0x46, 0x50, 0x58, 0xaa, 0x02, 0x11, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0xca, 0x02, 0x11, 0x46, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0xe2,
	0x02, 0x1d, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x12, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x3a, 0x3a, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl2_plugins_pytorch_proto_rawDescOnce sync.Once
	file_flyteidl2_plugins_pytorch_proto_rawDescData = file_flyteidl2_plugins_pytorch_proto_rawDesc
)

func file_flyteidl2_plugins_pytorch_proto_rawDescGZIP() []byte {
	file_flyteidl2_plugins_pytorch_proto_rawDescOnce.Do(func() {
		file_flyteidl2_plugins_pytorch_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl2_plugins_pytorch_proto_rawDescData)
	})
	return file_flyteidl2_plugins_pytorch_proto_rawDescData
}

var file_flyteidl2_plugins_pytorch_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_flyteidl2_plugins_pytorch_proto_goTypes = []interface{}{
	(*ElasticConfig)(nil),                  // 0: flyteidl2.plugins.ElasticConfig
	(*DistributedPyTorchTrainingTask)(nil), // 1: flyteidl2.plugins.DistributedPyTorchTrainingTask
}
var file_flyteidl2_plugins_pytorch_proto_depIdxs = []int32{
	0, // 0: flyteidl2.plugins.DistributedPyTorchTrainingTask.elastic_config:type_name -> flyteidl2.plugins.ElasticConfig
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_flyteidl2_plugins_pytorch_proto_init() }
func file_flyteidl2_plugins_pytorch_proto_init() {
	if File_flyteidl2_plugins_pytorch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyteidl2_plugins_pytorch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_plugins_pytorch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributedPyTorchTrainingTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl2_plugins_pytorch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl2_plugins_pytorch_proto_goTypes,
		DependencyIndexes: file_flyteidl2_plugins_pytorch_proto_depIdxs,
		MessageInfos:      file_flyteidl2_plugins_pytorch_proto_msgTypes,
	}.Build()
	File_flyteidl2_plugins_pytorch_proto = out.File
	file_flyteidl2_plugins_pytorch_proto_rawDesc = nil
	file_flyteidl2_plugins_pytorch_proto_goTypes = nil
	file_flyteidl2_plugins_pytorch_proto_depIdxs = nil
}
