// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl2/plugins/dask.proto

package plugins

import (
	core "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Custom Proto for Dask Plugin.
type DaskJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spec for the scheduler pod.
	Scheduler *DaskScheduler `protobuf:"bytes,1,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	// Spec of the default worker group.
	Workers *DaskWorkerGroup `protobuf:"bytes,2,opt,name=workers,proto3" json:"workers,omitempty"`
}

func (x *DaskJob) Reset() {
	*x = DaskJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_plugins_dask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaskJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaskJob) ProtoMessage() {}

func (x *DaskJob) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_plugins_dask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaskJob.ProtoReflect.Descriptor instead.
func (*DaskJob) Descriptor() ([]byte, []int) {
	return file_flyteidl2_plugins_dask_proto_rawDescGZIP(), []int{0}
}

func (x *DaskJob) GetScheduler() *DaskScheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (x *DaskJob) GetWorkers() *DaskWorkerGroup {
	if x != nil {
		return x.Workers
	}
	return nil
}

// Specification for the scheduler pod.
type DaskScheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional image to use. If unset, will use the default image.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Resources assigned to the scheduler pod.
	Resources *core.Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *DaskScheduler) Reset() {
	*x = DaskScheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_plugins_dask_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaskScheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaskScheduler) ProtoMessage() {}

func (x *DaskScheduler) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_plugins_dask_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaskScheduler.ProtoReflect.Descriptor instead.
func (*DaskScheduler) Descriptor() ([]byte, []int) {
	return file_flyteidl2_plugins_dask_proto_rawDescGZIP(), []int{1}
}

func (x *DaskScheduler) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DaskScheduler) GetResources() *core.Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type DaskWorkerGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of workers in the group.
	NumberOfWorkers uint32 `protobuf:"varint,1,opt,name=number_of_workers,json=numberOfWorkers,proto3" json:"number_of_workers,omitempty"`
	// Optional image to use for the pods of the worker group. If unset, will use the default image.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// Resources assigned to the all pods of the worker group.
	// As per https://kubernetes.dask.org/en/latest/kubecluster.html?highlight=limit#best-practices
	// it is advised to only set limits. If requests are not explicitly set, the plugin will make
	// sure to set requests==limits.
	// The plugin sets ` --memory-limit` as well as `--nthreads` for the workers according to the limit.
	Resources *core.Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *DaskWorkerGroup) Reset() {
	*x = DaskWorkerGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_plugins_dask_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaskWorkerGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaskWorkerGroup) ProtoMessage() {}

func (x *DaskWorkerGroup) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_plugins_dask_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaskWorkerGroup.ProtoReflect.Descriptor instead.
func (*DaskWorkerGroup) Descriptor() ([]byte, []int) {
	return file_flyteidl2_plugins_dask_proto_rawDescGZIP(), []int{2}
}

func (x *DaskWorkerGroup) GetNumberOfWorkers() uint32 {
	if x != nil {
		return x.NumberOfWorkers
	}
	return 0
}

func (x *DaskWorkerGroup) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DaskWorkerGroup) GetResources() *core.Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

var File_flyteidl2_plugins_dask_proto protoreflect.FileDescriptor

var file_flyteidl2_plugins_dask_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x1a, 0x1a, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01,
	0x0a, 0x07, 0x44, 0x61, 0x73, 0x6b, 0x4a, 0x6f, 0x62, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x2e, 0x44, 0x61, 0x73, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x44,
	0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x0d, 0x44, 0x61, 0x73, 0x6b, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x44, 0x61, 0x73, 0x6b,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0xc0, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x42, 0x09, 0x44, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x46, 0x50, 0x58, 0xaa, 0x02, 0x11, 0x46,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0xca, 0x02, 0x11, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0xe2, 0x02, 0x1d, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x5c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x3a, 0x3a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_flyteidl2_plugins_dask_proto_rawDescOnce sync.Once
	file_flyteidl2_plugins_dask_proto_rawDescData = file_flyteidl2_plugins_dask_proto_rawDesc
)

func file_flyteidl2_plugins_dask_proto_rawDescGZIP() []byte {
	file_flyteidl2_plugins_dask_proto_rawDescOnce.Do(func() {
		file_flyteidl2_plugins_dask_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl2_plugins_dask_proto_rawDescData)
	})
	return file_flyteidl2_plugins_dask_proto_rawDescData
}

var file_flyteidl2_plugins_dask_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_flyteidl2_plugins_dask_proto_goTypes = []interface{}{
	(*DaskJob)(nil),         // 0: flyteidl2.plugins.DaskJob
	(*DaskScheduler)(nil),   // 1: flyteidl2.plugins.DaskScheduler
	(*DaskWorkerGroup)(nil), // 2: flyteidl2.plugins.DaskWorkerGroup
	(*core.Resources)(nil),  // 3: flyteidl2.core.Resources
}
var file_flyteidl2_plugins_dask_proto_depIdxs = []int32{
	1, // 0: flyteidl2.plugins.DaskJob.scheduler:type_name -> flyteidl2.plugins.DaskScheduler
	2, // 1: flyteidl2.plugins.DaskJob.workers:type_name -> flyteidl2.plugins.DaskWorkerGroup
	3, // 2: flyteidl2.plugins.DaskScheduler.resources:type_name -> flyteidl2.core.Resources
	3, // 3: flyteidl2.plugins.DaskWorkerGroup.resources:type_name -> flyteidl2.core.Resources
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_flyteidl2_plugins_dask_proto_init() }
func file_flyteidl2_plugins_dask_proto_init() {
	if File_flyteidl2_plugins_dask_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyteidl2_plugins_dask_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaskJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_plugins_dask_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaskScheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_plugins_dask_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaskWorkerGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl2_plugins_dask_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl2_plugins_dask_proto_goTypes,
		DependencyIndexes: file_flyteidl2_plugins_dask_proto_depIdxs,
		MessageInfos:      file_flyteidl2_plugins_dask_proto_msgTypes,
	}.Build()
	File_flyteidl2_plugins_dask_proto = out.File
	file_flyteidl2_plugins_dask_proto_rawDesc = nil
	file_flyteidl2_plugins_dask_proto_goTypes = nil
	file_flyteidl2_plugins_dask_proto_depIdxs = nil
}
