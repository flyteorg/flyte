// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/core/tasks.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Resources with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resources with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourcesMultiError, or nil
// if none found.
func (m *Resources) ValidateAll() error {
	return m.validate(true)
}

func (m *Resources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourcesValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourcesValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourcesValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLimits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourcesValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourcesValidationError{
						field:  fmt.Sprintf("Limits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourcesValidationError{
					field:  fmt.Sprintf("Limits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourcesMultiError(errors)
	}

	return nil
}

// ResourcesMultiError is an error wrapping multiple validation errors returned
// by Resources.ValidateAll() if the designated constraints aren't met.
type ResourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourcesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourcesMultiError) AllErrors() []error { return m }

// ResourcesValidationError is the validation error returned by
// Resources.Validate if the designated constraints aren't met.
type ResourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesValidationError) ErrorName() string { return "ResourcesValidationError" }

// Error satisfies the builtin error interface
func (e ResourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesValidationError{}

// Validate checks the field values on GPUAccelerator with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GPUAccelerator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GPUAccelerator with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GPUAcceleratorMultiError,
// or nil if none found.
func (m *GPUAccelerator) ValidateAll() error {
	return m.validate(true)
}

func (m *GPUAccelerator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Device

	// no validation rules for DeviceClass

	switch v := m.PartitionSizeValue.(type) {
	case *GPUAccelerator_Unpartitioned:
		if v == nil {
			err := GPUAcceleratorValidationError{
				field:  "PartitionSizeValue",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Unpartitioned
	case *GPUAccelerator_PartitionSize:
		if v == nil {
			err := GPUAcceleratorValidationError{
				field:  "PartitionSizeValue",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PartitionSize
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GPUAcceleratorMultiError(errors)
	}

	return nil
}

// GPUAcceleratorMultiError is an error wrapping multiple validation errors
// returned by GPUAccelerator.ValidateAll() if the designated constraints
// aren't met.
type GPUAcceleratorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GPUAcceleratorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GPUAcceleratorMultiError) AllErrors() []error { return m }

// GPUAcceleratorValidationError is the validation error returned by
// GPUAccelerator.Validate if the designated constraints aren't met.
type GPUAcceleratorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GPUAcceleratorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GPUAcceleratorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GPUAcceleratorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GPUAcceleratorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GPUAcceleratorValidationError) ErrorName() string { return "GPUAcceleratorValidationError" }

// Error satisfies the builtin error interface
func (e GPUAcceleratorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGPUAccelerator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GPUAcceleratorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GPUAcceleratorValidationError{}

// Validate checks the field values on SharedMemory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedMemory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedMemory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SharedMemoryMultiError, or
// nil if none found.
func (m *SharedMemory) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedMemory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MountPath

	// no validation rules for MountName

	// no validation rules for SizeLimit

	if len(errors) > 0 {
		return SharedMemoryMultiError(errors)
	}

	return nil
}

// SharedMemoryMultiError is an error wrapping multiple validation errors
// returned by SharedMemory.ValidateAll() if the designated constraints aren't met.
type SharedMemoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedMemoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedMemoryMultiError) AllErrors() []error { return m }

// SharedMemoryValidationError is the validation error returned by
// SharedMemory.Validate if the designated constraints aren't met.
type SharedMemoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedMemoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedMemoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedMemoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedMemoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedMemoryValidationError) ErrorName() string { return "SharedMemoryValidationError" }

// Error satisfies the builtin error interface
func (e SharedMemoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedMemory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedMemoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedMemoryValidationError{}

// Validate checks the field values on ExtendedResources with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExtendedResources) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtendedResources with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtendedResourcesMultiError, or nil if none found.
func (m *ExtendedResources) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtendedResources) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGpuAccelerator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtendedResourcesValidationError{
					field:  "GpuAccelerator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtendedResourcesValidationError{
					field:  "GpuAccelerator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGpuAccelerator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtendedResourcesValidationError{
				field:  "GpuAccelerator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtendedResourcesValidationError{
					field:  "SharedMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtendedResourcesValidationError{
					field:  "SharedMemory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtendedResourcesValidationError{
				field:  "SharedMemory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExtendedResourcesMultiError(errors)
	}

	return nil
}

// ExtendedResourcesMultiError is an error wrapping multiple validation errors
// returned by ExtendedResources.ValidateAll() if the designated constraints
// aren't met.
type ExtendedResourcesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtendedResourcesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtendedResourcesMultiError) AllErrors() []error { return m }

// ExtendedResourcesValidationError is the validation error returned by
// ExtendedResources.Validate if the designated constraints aren't met.
type ExtendedResourcesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtendedResourcesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtendedResourcesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtendedResourcesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtendedResourcesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtendedResourcesValidationError) ErrorName() string {
	return "ExtendedResourcesValidationError"
}

// Error satisfies the builtin error interface
func (e ExtendedResourcesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtendedResources.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtendedResourcesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtendedResourcesValidationError{}

// Validate checks the field values on RuntimeMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RuntimeMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RuntimeMetadataMultiError, or nil if none found.
func (m *RuntimeMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Version

	// no validation rules for Flavor

	if len(errors) > 0 {
		return RuntimeMetadataMultiError(errors)
	}

	return nil
}

// RuntimeMetadataMultiError is an error wrapping multiple validation errors
// returned by RuntimeMetadata.ValidateAll() if the designated constraints
// aren't met.
type RuntimeMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeMetadataMultiError) AllErrors() []error { return m }

// RuntimeMetadataValidationError is the validation error returned by
// RuntimeMetadata.Validate if the designated constraints aren't met.
type RuntimeMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeMetadataValidationError) ErrorName() string { return "RuntimeMetadataValidationError" }

// Error satisfies the builtin error interface
func (e RuntimeMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeMetadataValidationError{}

// Validate checks the field values on TaskMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskMetadataMultiError, or
// nil if none found.
func (m *TaskMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Discoverable

	if all {
		switch v := interface{}(m.GetRuntime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "Runtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "Runtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRuntime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskMetadataValidationError{
				field:  "Runtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskMetadataValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRetries()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "Retries",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "Retries",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetries()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskMetadataValidationError{
				field:  "Retries",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DiscoveryVersion

	// no validation rules for DeprecatedErrorMessage

	// no validation rules for CacheSerializable

	// no validation rules for Tags

	// no validation rules for PodTemplateName

	// no validation rules for IsEager

	if all {
		switch v := interface{}(m.GetGeneratesDeck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "GeneratesDeck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "GeneratesDeck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGeneratesDeck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskMetadataValidationError{
				field:  "GeneratesDeck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskMetadataValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskMetadataValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Debuggable

	switch v := m.InterruptibleValue.(type) {
	case *TaskMetadata_Interruptible:
		if v == nil {
			err := TaskMetadataValidationError{
				field:  "InterruptibleValue",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Interruptible
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TaskMetadataMultiError(errors)
	}

	return nil
}

// TaskMetadataMultiError is an error wrapping multiple validation errors
// returned by TaskMetadata.ValidateAll() if the designated constraints aren't met.
type TaskMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMetadataMultiError) AllErrors() []error { return m }

// TaskMetadataValidationError is the validation error returned by
// TaskMetadata.Validate if the designated constraints aren't met.
type TaskMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskMetadataValidationError) ErrorName() string { return "TaskMetadataValidationError" }

// Error satisfies the builtin error interface
func (e TaskMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskMetadataValidationError{}

// Validate checks the field values on TaskTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskTemplateMultiError, or
// nil if none found.
func (m *TaskTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskTemplateValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskTemplateValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInterface()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "Interface",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "Interface",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterface()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskTemplateValidationError{
				field:  "Interface",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "Custom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskTemplateValidationError{
				field:  "Custom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TaskTypeVersion

	if all {
		switch v := interface{}(m.GetSecurityContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "SecurityContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "SecurityContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurityContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskTemplateValidationError{
				field:  "SecurityContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExtendedResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "ExtendedResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskTemplateValidationError{
					field:  "ExtendedResources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtendedResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskTemplateValidationError{
				field:  "ExtendedResources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Config

	switch v := m.Target.(type) {
	case *TaskTemplate_Container:
		if v == nil {
			err := TaskTemplateValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskTemplateValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskTemplateValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskTemplateValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TaskTemplate_K8SPod:
		if v == nil {
			err := TaskTemplateValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetK8SPod()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskTemplateValidationError{
						field:  "K8SPod",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskTemplateValidationError{
						field:  "K8SPod",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetK8SPod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskTemplateValidationError{
					field:  "K8SPod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TaskTemplate_Sql:
		if v == nil {
			err := TaskTemplateValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSql()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskTemplateValidationError{
						field:  "Sql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskTemplateValidationError{
						field:  "Sql",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSql()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskTemplateValidationError{
					field:  "Sql",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TaskTemplateMultiError(errors)
	}

	return nil
}

// TaskTemplateMultiError is an error wrapping multiple validation errors
// returned by TaskTemplate.ValidateAll() if the designated constraints aren't met.
type TaskTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskTemplateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskTemplateMultiError) AllErrors() []error { return m }

// TaskTemplateValidationError is the validation error returned by
// TaskTemplate.Validate if the designated constraints aren't met.
type TaskTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskTemplateValidationError) ErrorName() string { return "TaskTemplateValidationError" }

// Error satisfies the builtin error interface
func (e TaskTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskTemplateValidationError{}

// Validate checks the field values on ContainerPort with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContainerPort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerPort with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerPortMultiError, or
// nil if none found.
func (m *ContainerPort) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerPort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerPort

	// no validation rules for Name

	if len(errors) > 0 {
		return ContainerPortMultiError(errors)
	}

	return nil
}

// ContainerPortMultiError is an error wrapping multiple validation errors
// returned by ContainerPort.ValidateAll() if the designated constraints
// aren't met.
type ContainerPortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerPortMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerPortMultiError) AllErrors() []error { return m }

// ContainerPortValidationError is the validation error returned by
// ContainerPort.Validate if the designated constraints aren't met.
type ContainerPortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerPortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerPortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerPortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerPortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerPortValidationError) ErrorName() string { return "ContainerPortValidationError" }

// Error satisfies the builtin error interface
func (e ContainerPortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerPort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerPortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerPortValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Container with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerMultiError, or nil
// if none found.
func (m *Container) ValidateAll() error {
	return m.validate(true)
}

func (m *Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEnv() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContainerValidationError{
						field:  fmt.Sprintf("Env[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContainerValidationError{
						field:  fmt.Sprintf("Env[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerValidationError{
					field:  fmt.Sprintf("Env[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConfig() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContainerValidationError{
						field:  fmt.Sprintf("Config[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContainerValidationError{
						field:  fmt.Sprintf("Config[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerValidationError{
					field:  fmt.Sprintf("Config[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContainerValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContainerValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDataConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerValidationError{
					field:  "DataConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerValidationError{
					field:  "DataConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerValidationError{
				field:  "DataConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Architecture

	if len(errors) > 0 {
		return ContainerMultiError(errors)
	}

	return nil
}

// ContainerMultiError is an error wrapping multiple validation errors returned
// by Container.ValidateAll() if the designated constraints aren't met.
type ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerMultiError) AllErrors() []error { return m }

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

// Validate checks the field values on IOStrategy with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IOStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IOStrategy with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IOStrategyMultiError, or
// nil if none found.
func (m *IOStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *IOStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownloadMode

	// no validation rules for UploadMode

	if len(errors) > 0 {
		return IOStrategyMultiError(errors)
	}

	return nil
}

// IOStrategyMultiError is an error wrapping multiple validation errors
// returned by IOStrategy.ValidateAll() if the designated constraints aren't met.
type IOStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IOStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IOStrategyMultiError) AllErrors() []error { return m }

// IOStrategyValidationError is the validation error returned by
// IOStrategy.Validate if the designated constraints aren't met.
type IOStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IOStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IOStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IOStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IOStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IOStrategyValidationError) ErrorName() string { return "IOStrategyValidationError" }

// Error satisfies the builtin error interface
func (e IOStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIOStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IOStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IOStrategyValidationError{}

// Validate checks the field values on DataLoadingConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DataLoadingConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataLoadingConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataLoadingConfigMultiError, or nil if none found.
func (m *DataLoadingConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *DataLoadingConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for InputPath

	// no validation rules for OutputPath

	// no validation rules for Format

	if all {
		switch v := interface{}(m.GetIoStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataLoadingConfigValidationError{
					field:  "IoStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataLoadingConfigValidationError{
					field:  "IoStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIoStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataLoadingConfigValidationError{
				field:  "IoStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DataLoadingConfigMultiError(errors)
	}

	return nil
}

// DataLoadingConfigMultiError is an error wrapping multiple validation errors
// returned by DataLoadingConfig.ValidateAll() if the designated constraints
// aren't met.
type DataLoadingConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataLoadingConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataLoadingConfigMultiError) AllErrors() []error { return m }

// DataLoadingConfigValidationError is the validation error returned by
// DataLoadingConfig.Validate if the designated constraints aren't met.
type DataLoadingConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataLoadingConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataLoadingConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataLoadingConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataLoadingConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataLoadingConfigValidationError) ErrorName() string {
	return "DataLoadingConfigValidationError"
}

// Error satisfies the builtin error interface
func (e DataLoadingConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataLoadingConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataLoadingConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataLoadingConfigValidationError{}

// Validate checks the field values on K8SPod with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *K8SPod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on K8SPod with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in K8SPodMultiError, or nil if none found.
func (m *K8SPod) ValidateAll() error {
	return m.validate(true)
}

func (m *K8SPod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, K8SPodValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, K8SPodValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return K8SPodValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPodSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, K8SPodValidationError{
					field:  "PodSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, K8SPodValidationError{
					field:  "PodSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPodSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return K8SPodValidationError{
				field:  "PodSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDataConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, K8SPodValidationError{
					field:  "DataConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, K8SPodValidationError{
					field:  "DataConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return K8SPodValidationError{
				field:  "DataConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PrimaryContainerName

	if len(errors) > 0 {
		return K8SPodMultiError(errors)
	}

	return nil
}

// K8SPodMultiError is an error wrapping multiple validation errors returned by
// K8SPod.ValidateAll() if the designated constraints aren't met.
type K8SPodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m K8SPodMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m K8SPodMultiError) AllErrors() []error { return m }

// K8SPodValidationError is the validation error returned by K8SPod.Validate if
// the designated constraints aren't met.
type K8SPodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K8SPodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K8SPodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K8SPodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K8SPodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K8SPodValidationError) ErrorName() string { return "K8SPodValidationError" }

// Error satisfies the builtin error interface
func (e K8SPodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK8SPod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K8SPodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K8SPodValidationError{}

// Validate checks the field values on K8SObjectMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *K8SObjectMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on K8SObjectMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// K8SObjectMetadataMultiError, or nil if none found.
func (m *K8SObjectMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *K8SObjectMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Labels

	// no validation rules for Annotations

	if len(errors) > 0 {
		return K8SObjectMetadataMultiError(errors)
	}

	return nil
}

// K8SObjectMetadataMultiError is an error wrapping multiple validation errors
// returned by K8SObjectMetadata.ValidateAll() if the designated constraints
// aren't met.
type K8SObjectMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m K8SObjectMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m K8SObjectMetadataMultiError) AllErrors() []error { return m }

// K8SObjectMetadataValidationError is the validation error returned by
// K8SObjectMetadata.Validate if the designated constraints aren't met.
type K8SObjectMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K8SObjectMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K8SObjectMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K8SObjectMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K8SObjectMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K8SObjectMetadataValidationError) ErrorName() string {
	return "K8SObjectMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e K8SObjectMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK8SObjectMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K8SObjectMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K8SObjectMetadataValidationError{}

// Validate checks the field values on Sql with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sql) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sql with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SqlMultiError, or nil if none found.
func (m *Sql) ValidateAll() error {
	return m.validate(true)
}

func (m *Sql) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Statement

	// no validation rules for Dialect

	if len(errors) > 0 {
		return SqlMultiError(errors)
	}

	return nil
}

// SqlMultiError is an error wrapping multiple validation errors returned by
// Sql.ValidateAll() if the designated constraints aren't met.
type SqlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SqlMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SqlMultiError) AllErrors() []error { return m }

// SqlValidationError is the validation error returned by Sql.Validate if the
// designated constraints aren't met.
type SqlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SqlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SqlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SqlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SqlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SqlValidationError) ErrorName() string { return "SqlValidationError" }

// Error satisfies the builtin error interface
func (e SqlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSql.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SqlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SqlValidationError{}

// Validate checks the field values on Resources_ResourceEntry with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Resources_ResourceEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resources_ResourceEntry with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Resources_ResourceEntryMultiError, or nil if none found.
func (m *Resources_ResourceEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *Resources_ResourceEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return Resources_ResourceEntryMultiError(errors)
	}

	return nil
}

// Resources_ResourceEntryMultiError is an error wrapping multiple validation
// errors returned by Resources_ResourceEntry.ValidateAll() if the designated
// constraints aren't met.
type Resources_ResourceEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Resources_ResourceEntryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Resources_ResourceEntryMultiError) AllErrors() []error { return m }

// Resources_ResourceEntryValidationError is the validation error returned by
// Resources_ResourceEntry.Validate if the designated constraints aren't met.
type Resources_ResourceEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Resources_ResourceEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Resources_ResourceEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Resources_ResourceEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Resources_ResourceEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Resources_ResourceEntryValidationError) ErrorName() string {
	return "Resources_ResourceEntryValidationError"
}

// Error satisfies the builtin error interface
func (e Resources_ResourceEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResources_ResourceEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Resources_ResourceEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Resources_ResourceEntryValidationError{}
