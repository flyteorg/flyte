// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/core/catalog.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CatalogArtifactTag with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CatalogArtifactTag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CatalogArtifactTag with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CatalogArtifactTagMultiError, or nil if none found.
func (m *CatalogArtifactTag) ValidateAll() error {
	return m.validate(true)
}

func (m *CatalogArtifactTag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ArtifactId

	// no validation rules for Name

	if len(errors) > 0 {
		return CatalogArtifactTagMultiError(errors)
	}

	return nil
}

// CatalogArtifactTagMultiError is an error wrapping multiple validation errors
// returned by CatalogArtifactTag.ValidateAll() if the designated constraints
// aren't met.
type CatalogArtifactTagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CatalogArtifactTagMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CatalogArtifactTagMultiError) AllErrors() []error { return m }

// CatalogArtifactTagValidationError is the validation error returned by
// CatalogArtifactTag.Validate if the designated constraints aren't met.
type CatalogArtifactTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CatalogArtifactTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CatalogArtifactTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CatalogArtifactTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CatalogArtifactTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CatalogArtifactTagValidationError) ErrorName() string {
	return "CatalogArtifactTagValidationError"
}

// Error satisfies the builtin error interface
func (e CatalogArtifactTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCatalogArtifactTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CatalogArtifactTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CatalogArtifactTagValidationError{}

// Validate checks the field values on CatalogMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CatalogMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CatalogMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CatalogMetadataMultiError, or nil if none found.
func (m *CatalogMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *CatalogMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDatasetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CatalogMetadataValidationError{
					field:  "DatasetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CatalogMetadataValidationError{
					field:  "DatasetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDatasetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CatalogMetadataValidationError{
				field:  "DatasetId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetArtifactTag()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CatalogMetadataValidationError{
					field:  "ArtifactTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CatalogMetadataValidationError{
					field:  "ArtifactTag",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArtifactTag()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CatalogMetadataValidationError{
				field:  "ArtifactTag",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.SourceExecution.(type) {
	case *CatalogMetadata_SourceTaskExecution:
		if v == nil {
			err := CatalogMetadataValidationError{
				field:  "SourceExecution",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSourceTaskExecution()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CatalogMetadataValidationError{
						field:  "SourceTaskExecution",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CatalogMetadataValidationError{
						field:  "SourceTaskExecution",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSourceTaskExecution()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CatalogMetadataValidationError{
					field:  "SourceTaskExecution",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CatalogMetadataMultiError(errors)
	}

	return nil
}

// CatalogMetadataMultiError is an error wrapping multiple validation errors
// returned by CatalogMetadata.ValidateAll() if the designated constraints
// aren't met.
type CatalogMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CatalogMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CatalogMetadataMultiError) AllErrors() []error { return m }

// CatalogMetadataValidationError is the validation error returned by
// CatalogMetadata.Validate if the designated constraints aren't met.
type CatalogMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CatalogMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CatalogMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CatalogMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CatalogMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CatalogMetadataValidationError) ErrorName() string { return "CatalogMetadataValidationError" }

// Error satisfies the builtin error interface
func (e CatalogMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCatalogMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CatalogMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CatalogMetadataValidationError{}

// Validate checks the field values on CatalogReservation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CatalogReservation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CatalogReservation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CatalogReservationMultiError, or nil if none found.
func (m *CatalogReservation) ValidateAll() error {
	return m.validate(true)
}

func (m *CatalogReservation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CatalogReservationMultiError(errors)
	}

	return nil
}

// CatalogReservationMultiError is an error wrapping multiple validation errors
// returned by CatalogReservation.ValidateAll() if the designated constraints
// aren't met.
type CatalogReservationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CatalogReservationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CatalogReservationMultiError) AllErrors() []error { return m }

// CatalogReservationValidationError is the validation error returned by
// CatalogReservation.Validate if the designated constraints aren't met.
type CatalogReservationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CatalogReservationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CatalogReservationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CatalogReservationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CatalogReservationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CatalogReservationValidationError) ErrorName() string {
	return "CatalogReservationValidationError"
}

// Error satisfies the builtin error interface
func (e CatalogReservationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCatalogReservation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CatalogReservationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CatalogReservationValidationError{}
