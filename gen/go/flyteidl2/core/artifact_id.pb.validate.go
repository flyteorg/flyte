// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/core/artifact_id.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ArtifactKey with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ArtifactKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArtifactKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArtifactKeyMultiError, or
// nil if none found.
func (m *ArtifactKey) ValidateAll() error {
	return m.validate(true)
}

func (m *ArtifactKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	// no validation rules for Domain

	// no validation rules for Name

	// no validation rules for Org

	if len(errors) > 0 {
		return ArtifactKeyMultiError(errors)
	}

	return nil
}

// ArtifactKeyMultiError is an error wrapping multiple validation errors
// returned by ArtifactKey.ValidateAll() if the designated constraints aren't met.
type ArtifactKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactKeyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactKeyMultiError) AllErrors() []error { return m }

// ArtifactKeyValidationError is the validation error returned by
// ArtifactKey.Validate if the designated constraints aren't met.
type ArtifactKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactKeyValidationError) ErrorName() string { return "ArtifactKeyValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactKeyValidationError{}

// Validate checks the field values on ArtifactBindingData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArtifactBindingData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArtifactBindingData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArtifactBindingDataMultiError, or nil if none found.
func (m *ArtifactBindingData) ValidateAll() error {
	return m.validate(true)
}

func (m *ArtifactBindingData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeTransform()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArtifactBindingDataValidationError{
					field:  "TimeTransform",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArtifactBindingDataValidationError{
					field:  "TimeTransform",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeTransform()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactBindingDataValidationError{
				field:  "TimeTransform",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.PartitionData.(type) {
	case *ArtifactBindingData_PartitionKey:
		if v == nil {
			err := ArtifactBindingDataValidationError{
				field:  "PartitionData",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PartitionKey
	case *ArtifactBindingData_BindToTimePartition:
		if v == nil {
			err := ArtifactBindingDataValidationError{
				field:  "PartitionData",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BindToTimePartition
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ArtifactBindingDataMultiError(errors)
	}

	return nil
}

// ArtifactBindingDataMultiError is an error wrapping multiple validation
// errors returned by ArtifactBindingData.ValidateAll() if the designated
// constraints aren't met.
type ArtifactBindingDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactBindingDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactBindingDataMultiError) AllErrors() []error { return m }

// ArtifactBindingDataValidationError is the validation error returned by
// ArtifactBindingData.Validate if the designated constraints aren't met.
type ArtifactBindingDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactBindingDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactBindingDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactBindingDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactBindingDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactBindingDataValidationError) ErrorName() string {
	return "ArtifactBindingDataValidationError"
}

// Error satisfies the builtin error interface
func (e ArtifactBindingDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactBindingData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactBindingDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactBindingDataValidationError{}

// Validate checks the field values on TimeTransform with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeTransform) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeTransform with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeTransformMultiError, or
// nil if none found.
func (m *TimeTransform) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeTransform) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Transform

	// no validation rules for Op

	if len(errors) > 0 {
		return TimeTransformMultiError(errors)
	}

	return nil
}

// TimeTransformMultiError is an error wrapping multiple validation errors
// returned by TimeTransform.ValidateAll() if the designated constraints
// aren't met.
type TimeTransformMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeTransformMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeTransformMultiError) AllErrors() []error { return m }

// TimeTransformValidationError is the validation error returned by
// TimeTransform.Validate if the designated constraints aren't met.
type TimeTransformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeTransformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeTransformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeTransformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeTransformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeTransformValidationError) ErrorName() string { return "TimeTransformValidationError" }

// Error satisfies the builtin error interface
func (e TimeTransformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeTransform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeTransformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeTransformValidationError{}

// Validate checks the field values on InputBindingData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InputBindingData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InputBindingData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InputBindingDataMultiError, or nil if none found.
func (m *InputBindingData) ValidateAll() error {
	return m.validate(true)
}

func (m *InputBindingData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Var

	if len(errors) > 0 {
		return InputBindingDataMultiError(errors)
	}

	return nil
}

// InputBindingDataMultiError is an error wrapping multiple validation errors
// returned by InputBindingData.ValidateAll() if the designated constraints
// aren't met.
type InputBindingDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputBindingDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputBindingDataMultiError) AllErrors() []error { return m }

// InputBindingDataValidationError is the validation error returned by
// InputBindingData.Validate if the designated constraints aren't met.
type InputBindingDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputBindingDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputBindingDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputBindingDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputBindingDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputBindingDataValidationError) ErrorName() string { return "InputBindingDataValidationError" }

// Error satisfies the builtin error interface
func (e InputBindingDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputBindingData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputBindingDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputBindingDataValidationError{}

// Validate checks the field values on RuntimeBinding with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RuntimeBinding) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RuntimeBinding with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RuntimeBindingMultiError,
// or nil if none found.
func (m *RuntimeBinding) ValidateAll() error {
	return m.validate(true)
}

func (m *RuntimeBinding) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RuntimeBindingMultiError(errors)
	}

	return nil
}

// RuntimeBindingMultiError is an error wrapping multiple validation errors
// returned by RuntimeBinding.ValidateAll() if the designated constraints
// aren't met.
type RuntimeBindingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeBindingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeBindingMultiError) AllErrors() []error { return m }

// RuntimeBindingValidationError is the validation error returned by
// RuntimeBinding.Validate if the designated constraints aren't met.
type RuntimeBindingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeBindingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeBindingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeBindingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeBindingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeBindingValidationError) ErrorName() string { return "RuntimeBindingValidationError" }

// Error satisfies the builtin error interface
func (e RuntimeBindingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntimeBinding.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeBindingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeBindingValidationError{}

// Validate checks the field values on LabelValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LabelValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LabelValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LabelValueMultiError, or
// nil if none found.
func (m *LabelValue) ValidateAll() error {
	return m.validate(true)
}

func (m *LabelValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Value.(type) {
	case *LabelValue_StaticValue:
		if v == nil {
			err := LabelValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StaticValue
	case *LabelValue_TimeValue:
		if v == nil {
			err := LabelValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTimeValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelValueValidationError{
						field:  "TimeValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelValueValidationError{
						field:  "TimeValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimeValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelValueValidationError{
					field:  "TimeValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LabelValue_TriggeredBinding:
		if v == nil {
			err := LabelValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTriggeredBinding()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelValueValidationError{
						field:  "TriggeredBinding",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelValueValidationError{
						field:  "TriggeredBinding",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTriggeredBinding()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelValueValidationError{
					field:  "TriggeredBinding",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LabelValue_InputBinding:
		if v == nil {
			err := LabelValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInputBinding()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelValueValidationError{
						field:  "InputBinding",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelValueValidationError{
						field:  "InputBinding",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInputBinding()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelValueValidationError{
					field:  "InputBinding",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LabelValue_RuntimeBinding:
		if v == nil {
			err := LabelValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRuntimeBinding()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelValueValidationError{
						field:  "RuntimeBinding",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelValueValidationError{
						field:  "RuntimeBinding",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRuntimeBinding()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelValueValidationError{
					field:  "RuntimeBinding",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LabelValueMultiError(errors)
	}

	return nil
}

// LabelValueMultiError is an error wrapping multiple validation errors
// returned by LabelValue.ValidateAll() if the designated constraints aren't met.
type LabelValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelValueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelValueMultiError) AllErrors() []error { return m }

// LabelValueValidationError is the validation error returned by
// LabelValue.Validate if the designated constraints aren't met.
type LabelValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelValueValidationError) ErrorName() string { return "LabelValueValidationError" }

// Error satisfies the builtin error interface
func (e LabelValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelValueValidationError{}

// Validate checks the field values on Partitions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Partitions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Partitions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartitionsMultiError, or
// nil if none found.
func (m *Partitions) ValidateAll() error {
	return m.validate(true)
}

func (m *Partitions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetValue()))
		i := 0
		for key := range m.GetValue() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetValue()[key]
			_ = val

			// no validation rules for Value[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PartitionsValidationError{
							field:  fmt.Sprintf("Value[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PartitionsValidationError{
							field:  fmt.Sprintf("Value[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PartitionsValidationError{
						field:  fmt.Sprintf("Value[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PartitionsMultiError(errors)
	}

	return nil
}

// PartitionsMultiError is an error wrapping multiple validation errors
// returned by Partitions.ValidateAll() if the designated constraints aren't met.
type PartitionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionsMultiError) AllErrors() []error { return m }

// PartitionsValidationError is the validation error returned by
// Partitions.Validate if the designated constraints aren't met.
type PartitionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionsValidationError) ErrorName() string { return "PartitionsValidationError" }

// Error satisfies the builtin error interface
func (e PartitionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartitions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionsValidationError{}

// Validate checks the field values on TimePartition with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimePartition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimePartition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimePartitionMultiError, or
// nil if none found.
func (m *TimePartition) ValidateAll() error {
	return m.validate(true)
}

func (m *TimePartition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimePartitionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimePartitionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimePartitionValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Granularity

	if len(errors) > 0 {
		return TimePartitionMultiError(errors)
	}

	return nil
}

// TimePartitionMultiError is an error wrapping multiple validation errors
// returned by TimePartition.ValidateAll() if the designated constraints
// aren't met.
type TimePartitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimePartitionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimePartitionMultiError) AllErrors() []error { return m }

// TimePartitionValidationError is the validation error returned by
// TimePartition.Validate if the designated constraints aren't met.
type TimePartitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimePartitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimePartitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimePartitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimePartitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimePartitionValidationError) ErrorName() string { return "TimePartitionValidationError" }

// Error satisfies the builtin error interface
func (e TimePartitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimePartition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimePartitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimePartitionValidationError{}

// Validate checks the field values on ArtifactID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ArtifactID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArtifactID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArtifactIDMultiError, or
// nil if none found.
func (m *ArtifactID) ValidateAll() error {
	return m.validate(true)
}

func (m *ArtifactID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArtifactKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArtifactIDValidationError{
					field:  "ArtifactKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArtifactIDValidationError{
					field:  "ArtifactKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArtifactKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactIDValidationError{
				field:  "ArtifactKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetPartitions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArtifactIDValidationError{
					field:  "Partitions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArtifactIDValidationError{
					field:  "Partitions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartitions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactIDValidationError{
				field:  "Partitions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimePartition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArtifactIDValidationError{
					field:  "TimePartition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArtifactIDValidationError{
					field:  "TimePartition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimePartition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactIDValidationError{
				field:  "TimePartition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ArtifactIDMultiError(errors)
	}

	return nil
}

// ArtifactIDMultiError is an error wrapping multiple validation errors
// returned by ArtifactID.ValidateAll() if the designated constraints aren't met.
type ArtifactIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactIDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactIDMultiError) AllErrors() []error { return m }

// ArtifactIDValidationError is the validation error returned by
// ArtifactID.Validate if the designated constraints aren't met.
type ArtifactIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactIDValidationError) ErrorName() string { return "ArtifactIDValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactIDValidationError{}

// Validate checks the field values on ArtifactTag with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ArtifactTag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArtifactTag with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArtifactTagMultiError, or
// nil if none found.
func (m *ArtifactTag) ValidateAll() error {
	return m.validate(true)
}

func (m *ArtifactTag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetArtifactKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArtifactTagValidationError{
					field:  "ArtifactKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArtifactTagValidationError{
					field:  "ArtifactKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArtifactKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactTagValidationError{
				field:  "ArtifactKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ArtifactTagValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ArtifactTagValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactTagValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ArtifactTagMultiError(errors)
	}

	return nil
}

// ArtifactTagMultiError is an error wrapping multiple validation errors
// returned by ArtifactTag.ValidateAll() if the designated constraints aren't met.
type ArtifactTagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactTagMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactTagMultiError) AllErrors() []error { return m }

// ArtifactTagValidationError is the validation error returned by
// ArtifactTag.Validate if the designated constraints aren't met.
type ArtifactTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactTagValidationError) ErrorName() string { return "ArtifactTagValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactTagValidationError{}

// Validate checks the field values on ArtifactQuery with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ArtifactQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArtifactQuery with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ArtifactQueryMultiError, or
// nil if none found.
func (m *ArtifactQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *ArtifactQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Identifier.(type) {
	case *ArtifactQuery_ArtifactId:
		if v == nil {
			err := ArtifactQueryValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetArtifactId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArtifactQueryValidationError{
						field:  "ArtifactId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArtifactQueryValidationError{
						field:  "ArtifactId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArtifactId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactQueryValidationError{
					field:  "ArtifactId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ArtifactQuery_ArtifactTag:
		if v == nil {
			err := ArtifactQueryValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetArtifactTag()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArtifactQueryValidationError{
						field:  "ArtifactTag",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArtifactQueryValidationError{
						field:  "ArtifactTag",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArtifactTag()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactQueryValidationError{
					field:  "ArtifactTag",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ArtifactQuery_Uri:
		if v == nil {
			err := ArtifactQueryValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Uri
	case *ArtifactQuery_Binding:
		if v == nil {
			err := ArtifactQueryValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBinding()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ArtifactQueryValidationError{
						field:  "Binding",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ArtifactQueryValidationError{
						field:  "Binding",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBinding()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ArtifactQueryValidationError{
					field:  "Binding",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ArtifactQueryMultiError(errors)
	}

	return nil
}

// ArtifactQueryMultiError is an error wrapping multiple validation errors
// returned by ArtifactQuery.ValidateAll() if the designated constraints
// aren't met.
type ArtifactQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArtifactQueryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArtifactQueryMultiError) AllErrors() []error { return m }

// ArtifactQueryValidationError is the validation error returned by
// ArtifactQuery.Validate if the designated constraints aren't met.
type ArtifactQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactQueryValidationError) ErrorName() string { return "ArtifactQueryValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifactQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactQueryValidationError{}
