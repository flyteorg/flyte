// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/core/execution.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WorkflowExecution with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkflowExecution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowExecution with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowExecutionMultiError, or nil if none found.
func (m *WorkflowExecution) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowExecution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WorkflowExecutionMultiError(errors)
	}

	return nil
}

// WorkflowExecutionMultiError is an error wrapping multiple validation errors
// returned by WorkflowExecution.ValidateAll() if the designated constraints
// aren't met.
type WorkflowExecutionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowExecutionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowExecutionMultiError) AllErrors() []error { return m }

// WorkflowExecutionValidationError is the validation error returned by
// WorkflowExecution.Validate if the designated constraints aren't met.
type WorkflowExecutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowExecutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowExecutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowExecutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowExecutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowExecutionValidationError) ErrorName() string {
	return "WorkflowExecutionValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowExecutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowExecution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowExecutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowExecutionValidationError{}

// Validate checks the field values on NodeExecution with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeExecution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeExecution with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeExecutionMultiError, or
// nil if none found.
func (m *NodeExecution) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeExecution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NodeExecutionMultiError(errors)
	}

	return nil
}

// NodeExecutionMultiError is an error wrapping multiple validation errors
// returned by NodeExecution.ValidateAll() if the designated constraints
// aren't met.
type NodeExecutionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeExecutionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeExecutionMultiError) AllErrors() []error { return m }

// NodeExecutionValidationError is the validation error returned by
// NodeExecution.Validate if the designated constraints aren't met.
type NodeExecutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeExecutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeExecutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeExecutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeExecutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeExecutionValidationError) ErrorName() string { return "NodeExecutionValidationError" }

// Error satisfies the builtin error interface
func (e NodeExecutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeExecution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeExecutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeExecutionValidationError{}

// Validate checks the field values on TaskExecution with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskExecution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskExecution with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskExecutionMultiError, or
// nil if none found.
func (m *TaskExecution) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskExecution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TaskExecutionMultiError(errors)
	}

	return nil
}

// TaskExecutionMultiError is an error wrapping multiple validation errors
// returned by TaskExecution.ValidateAll() if the designated constraints
// aren't met.
type TaskExecutionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskExecutionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskExecutionMultiError) AllErrors() []error { return m }

// TaskExecutionValidationError is the validation error returned by
// TaskExecution.Validate if the designated constraints aren't met.
type TaskExecutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskExecutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskExecutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskExecutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskExecutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskExecutionValidationError) ErrorName() string { return "TaskExecutionValidationError" }

// Error satisfies the builtin error interface
func (e TaskExecutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskExecution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskExecutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskExecutionValidationError{}

// Validate checks the field values on ExecutionError with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExecutionError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecutionError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExecutionErrorMultiError,
// or nil if none found.
func (m *ExecutionError) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecutionError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for ErrorUri

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecutionErrorValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecutionErrorValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecutionErrorValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Worker

	if len(errors) > 0 {
		return ExecutionErrorMultiError(errors)
	}

	return nil
}

// ExecutionErrorMultiError is an error wrapping multiple validation errors
// returned by ExecutionError.ValidateAll() if the designated constraints
// aren't met.
type ExecutionErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecutionErrorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecutionErrorMultiError) AllErrors() []error { return m }

// ExecutionErrorValidationError is the validation error returned by
// ExecutionError.Validate if the designated constraints aren't met.
type ExecutionErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecutionErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecutionErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecutionErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecutionErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecutionErrorValidationError) ErrorName() string { return "ExecutionErrorValidationError" }

// Error satisfies the builtin error interface
func (e ExecutionErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecutionError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecutionErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecutionErrorValidationError{}

// Validate checks the field values on TaskLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskLog with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskLogMultiError, or nil if none found.
func (m *TaskLog) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uri

	// no validation rules for Name

	// no validation rules for MessageFormat

	if all {
		switch v := interface{}(m.GetTtl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskLogValidationError{
					field:  "Ttl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskLogValidationError{
					field:  "Ttl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTtl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskLogValidationError{
				field:  "Ttl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ShowWhilePending

	// no validation rules for HideOnceFinished

	// no validation rules for LinkType

	// no validation rules for Ready

	if len(errors) > 0 {
		return TaskLogMultiError(errors)
	}

	return nil
}

// TaskLogMultiError is an error wrapping multiple validation errors returned
// by TaskLog.ValidateAll() if the designated constraints aren't met.
type TaskLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskLogMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskLogMultiError) AllErrors() []error { return m }

// TaskLogValidationError is the validation error returned by TaskLog.Validate
// if the designated constraints aren't met.
type TaskLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskLogValidationError) ErrorName() string { return "TaskLogValidationError" }

// Error satisfies the builtin error interface
func (e TaskLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskLogValidationError{}

// Validate checks the field values on LogContext with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogContext with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogContextMultiError, or
// nil if none found.
func (m *LogContext) ValidateAll() error {
	return m.validate(true)
}

func (m *LogContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogContextValidationError{
						field:  fmt.Sprintf("Pods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogContextValidationError{
						field:  fmt.Sprintf("Pods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogContextValidationError{
					field:  fmt.Sprintf("Pods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PrimaryPodName

	if len(errors) > 0 {
		return LogContextMultiError(errors)
	}

	return nil
}

// LogContextMultiError is an error wrapping multiple validation errors
// returned by LogContext.ValidateAll() if the designated constraints aren't met.
type LogContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogContextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogContextMultiError) AllErrors() []error { return m }

// LogContextValidationError is the validation error returned by
// LogContext.Validate if the designated constraints aren't met.
type LogContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogContextValidationError) ErrorName() string { return "LogContextValidationError" }

// Error satisfies the builtin error interface
func (e LogContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogContextValidationError{}

// Validate checks the field values on PodLogContext with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodLogContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodLogContext with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PodLogContextMultiError, or
// nil if none found.
func (m *PodLogContext) ValidateAll() error {
	return m.validate(true)
}

func (m *PodLogContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for PodName

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodLogContextValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodLogContextValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodLogContextValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PrimaryContainerName

	for idx, item := range m.GetInitContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodLogContextValidationError{
						field:  fmt.Sprintf("InitContainers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodLogContextValidationError{
						field:  fmt.Sprintf("InitContainers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodLogContextValidationError{
					field:  fmt.Sprintf("InitContainers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PodLogContextMultiError(errors)
	}

	return nil
}

// PodLogContextMultiError is an error wrapping multiple validation errors
// returned by PodLogContext.ValidateAll() if the designated constraints
// aren't met.
type PodLogContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodLogContextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodLogContextMultiError) AllErrors() []error { return m }

// PodLogContextValidationError is the validation error returned by
// PodLogContext.Validate if the designated constraints aren't met.
type PodLogContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodLogContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodLogContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodLogContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodLogContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodLogContextValidationError) ErrorName() string { return "PodLogContextValidationError" }

// Error satisfies the builtin error interface
func (e PodLogContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodLogContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodLogContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodLogContextValidationError{}

// Validate checks the field values on ContainerContext with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContainerContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerContext with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerContextMultiError, or nil if none found.
func (m *ContainerContext) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerName

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerContextValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerContextValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerContextValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContainerContextMultiError(errors)
	}

	return nil
}

// ContainerContextMultiError is an error wrapping multiple validation errors
// returned by ContainerContext.ValidateAll() if the designated constraints
// aren't met.
type ContainerContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerContextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerContextMultiError) AllErrors() []error { return m }

// ContainerContextValidationError is the validation error returned by
// ContainerContext.Validate if the designated constraints aren't met.
type ContainerContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerContextValidationError) ErrorName() string { return "ContainerContextValidationError" }

// Error satisfies the builtin error interface
func (e ContainerContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerContextValidationError{}

// Validate checks the field values on QualityOfServiceSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QualityOfServiceSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QualityOfServiceSpec with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QualityOfServiceSpecMultiError, or nil if none found.
func (m *QualityOfServiceSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *QualityOfServiceSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQueueingBudget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QualityOfServiceSpecValidationError{
					field:  "QueueingBudget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QualityOfServiceSpecValidationError{
					field:  "QueueingBudget",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueueingBudget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QualityOfServiceSpecValidationError{
				field:  "QueueingBudget",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QualityOfServiceSpecMultiError(errors)
	}

	return nil
}

// QualityOfServiceSpecMultiError is an error wrapping multiple validation
// errors returned by QualityOfServiceSpec.ValidateAll() if the designated
// constraints aren't met.
type QualityOfServiceSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualityOfServiceSpecMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualityOfServiceSpecMultiError) AllErrors() []error { return m }

// QualityOfServiceSpecValidationError is the validation error returned by
// QualityOfServiceSpec.Validate if the designated constraints aren't met.
type QualityOfServiceSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualityOfServiceSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualityOfServiceSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualityOfServiceSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualityOfServiceSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualityOfServiceSpecValidationError) ErrorName() string {
	return "QualityOfServiceSpecValidationError"
}

// Error satisfies the builtin error interface
func (e QualityOfServiceSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualityOfServiceSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualityOfServiceSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualityOfServiceSpecValidationError{}

// Validate checks the field values on QualityOfService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QualityOfService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QualityOfService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QualityOfServiceMultiError, or nil if none found.
func (m *QualityOfService) ValidateAll() error {
	return m.validate(true)
}

func (m *QualityOfService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Designation.(type) {
	case *QualityOfService_Tier_:
		if v == nil {
			err := QualityOfServiceValidationError{
				field:  "Designation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Tier
	case *QualityOfService_Spec:
		if v == nil {
			err := QualityOfServiceValidationError{
				field:  "Designation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSpec()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualityOfServiceValidationError{
						field:  "Spec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualityOfServiceValidationError{
						field:  "Spec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSpec()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualityOfServiceValidationError{
					field:  "Spec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return QualityOfServiceMultiError(errors)
	}

	return nil
}

// QualityOfServiceMultiError is an error wrapping multiple validation errors
// returned by QualityOfService.ValidateAll() if the designated constraints
// aren't met.
type QualityOfServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualityOfServiceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualityOfServiceMultiError) AllErrors() []error { return m }

// QualityOfServiceValidationError is the validation error returned by
// QualityOfService.Validate if the designated constraints aren't met.
type QualityOfServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualityOfServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualityOfServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualityOfServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualityOfServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualityOfServiceValidationError) ErrorName() string { return "QualityOfServiceValidationError" }

// Error satisfies the builtin error interface
func (e QualityOfServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualityOfService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualityOfServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualityOfServiceValidationError{}

// Validate checks the field values on ContainerContext_ProcessContext with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerContext_ProcessContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerContext_ProcessContext with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContainerContext_ProcessContextMultiError, or nil if none found.
func (m *ContainerContext_ProcessContext) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerContext_ProcessContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContainerStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerContext_ProcessContextValidationError{
					field:  "ContainerStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerContext_ProcessContextValidationError{
					field:  "ContainerStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainerStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerContext_ProcessContextValidationError{
				field:  "ContainerStartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContainerEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerContext_ProcessContextValidationError{
					field:  "ContainerEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerContext_ProcessContextValidationError{
					field:  "ContainerEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainerEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerContext_ProcessContextValidationError{
				field:  "ContainerEndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContainerContext_ProcessContextMultiError(errors)
	}

	return nil
}

// ContainerContext_ProcessContextMultiError is an error wrapping multiple
// validation errors returned by ContainerContext_ProcessContext.ValidateAll()
// if the designated constraints aren't met.
type ContainerContext_ProcessContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerContext_ProcessContextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerContext_ProcessContextMultiError) AllErrors() []error { return m }

// ContainerContext_ProcessContextValidationError is the validation error
// returned by ContainerContext_ProcessContext.Validate if the designated
// constraints aren't met.
type ContainerContext_ProcessContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerContext_ProcessContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerContext_ProcessContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerContext_ProcessContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerContext_ProcessContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerContext_ProcessContextValidationError) ErrorName() string {
	return "ContainerContext_ProcessContextValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerContext_ProcessContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerContext_ProcessContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerContext_ProcessContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerContext_ProcessContextValidationError{}
