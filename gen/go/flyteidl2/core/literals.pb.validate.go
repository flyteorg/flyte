// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/core/literals.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Primitive with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Primitive) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Primitive with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrimitiveMultiError, or nil
// if none found.
func (m *Primitive) ValidateAll() error {
	return m.validate(true)
}

func (m *Primitive) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Value.(type) {
	case *Primitive_Integer:
		if v == nil {
			err := PrimitiveValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Integer
	case *Primitive_FloatValue:
		if v == nil {
			err := PrimitiveValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for FloatValue
	case *Primitive_StringValue:
		if v == nil {
			err := PrimitiveValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	case *Primitive_Boolean:
		if v == nil {
			err := PrimitiveValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Boolean
	case *Primitive_Datetime:
		if v == nil {
			err := PrimitiveValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDatetime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrimitiveValidationError{
						field:  "Datetime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrimitiveValidationError{
						field:  "Datetime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDatetime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrimitiveValidationError{
					field:  "Datetime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Primitive_Duration:
		if v == nil {
			err := PrimitiveValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDuration()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrimitiveValidationError{
						field:  "Duration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrimitiveValidationError{
						field:  "Duration",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrimitiveValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PrimitiveMultiError(errors)
	}

	return nil
}

// PrimitiveMultiError is an error wrapping multiple validation errors returned
// by Primitive.ValidateAll() if the designated constraints aren't met.
type PrimitiveMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrimitiveMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrimitiveMultiError) AllErrors() []error { return m }

// PrimitiveValidationError is the validation error returned by
// Primitive.Validate if the designated constraints aren't met.
type PrimitiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrimitiveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrimitiveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrimitiveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrimitiveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrimitiveValidationError) ErrorName() string { return "PrimitiveValidationError" }

// Error satisfies the builtin error interface
func (e PrimitiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrimitive.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrimitiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrimitiveValidationError{}

// Validate checks the field values on Void with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Void) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Void with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VoidMultiError, or nil if none found.
func (m *Void) ValidateAll() error {
	return m.validate(true)
}

func (m *Void) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VoidMultiError(errors)
	}

	return nil
}

// VoidMultiError is an error wrapping multiple validation errors returned by
// Void.ValidateAll() if the designated constraints aren't met.
type VoidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoidMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoidMultiError) AllErrors() []error { return m }

// VoidValidationError is the validation error returned by Void.Validate if the
// designated constraints aren't met.
type VoidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoidValidationError) ErrorName() string { return "VoidValidationError" }

// Error satisfies the builtin error interface
func (e VoidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoidValidationError{}

// Validate checks the field values on Blob with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Blob) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blob with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BlobMultiError, or nil if none found.
func (m *Blob) ValidateAll() error {
	return m.validate(true)
}

func (m *Blob) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlobValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlobValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlobValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Uri

	if len(errors) > 0 {
		return BlobMultiError(errors)
	}

	return nil
}

// BlobMultiError is an error wrapping multiple validation errors returned by
// Blob.ValidateAll() if the designated constraints aren't met.
type BlobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlobMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlobMultiError) AllErrors() []error { return m }

// BlobValidationError is the validation error returned by Blob.Validate if the
// designated constraints aren't met.
type BlobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobValidationError) ErrorName() string { return "BlobValidationError" }

// Error satisfies the builtin error interface
func (e BlobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobValidationError{}

// Validate checks the field values on BlobMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BlobMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlobMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BlobMetadataMultiError, or
// nil if none found.
func (m *BlobMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *BlobMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlobMetadataValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlobMetadataValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlobMetadataValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BlobMetadataMultiError(errors)
	}

	return nil
}

// BlobMetadataMultiError is an error wrapping multiple validation errors
// returned by BlobMetadata.ValidateAll() if the designated constraints aren't met.
type BlobMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlobMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlobMetadataMultiError) AllErrors() []error { return m }

// BlobMetadataValidationError is the validation error returned by
// BlobMetadata.Validate if the designated constraints aren't met.
type BlobMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobMetadataValidationError) ErrorName() string { return "BlobMetadataValidationError" }

// Error satisfies the builtin error interface
func (e BlobMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlobMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobMetadataValidationError{}

// Validate checks the field values on Binary with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Binary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Binary with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BinaryMultiError, or nil if none found.
func (m *Binary) ValidateAll() error {
	return m.validate(true)
}

func (m *Binary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Tag

	if len(errors) > 0 {
		return BinaryMultiError(errors)
	}

	return nil
}

// BinaryMultiError is an error wrapping multiple validation errors returned by
// Binary.ValidateAll() if the designated constraints aren't met.
type BinaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BinaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BinaryMultiError) AllErrors() []error { return m }

// BinaryValidationError is the validation error returned by Binary.Validate if
// the designated constraints aren't met.
type BinaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BinaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BinaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BinaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BinaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BinaryValidationError) ErrorName() string { return "BinaryValidationError" }

// Error satisfies the builtin error interface
func (e BinaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBinary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BinaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BinaryValidationError{}

// Validate checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Schema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SchemaMultiError, or nil if none found.
func (m *Schema) ValidateAll() error {
	return m.validate(true)
}

func (m *Schema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uri

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SchemaValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SchemaMultiError(errors)
	}

	return nil
}

// SchemaMultiError is an error wrapping multiple validation errors returned by
// Schema.ValidateAll() if the designated constraints aren't met.
type SchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaMultiError) AllErrors() []error { return m }

// SchemaValidationError is the validation error returned by Schema.Validate if
// the designated constraints aren't met.
type SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaValidationError) ErrorName() string { return "SchemaValidationError" }

// Error satisfies the builtin error interface
func (e SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaValidationError{}

// Validate checks the field values on Union with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Union) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Union with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UnionMultiError, or nil if none found.
func (m *Union) ValidateAll() error {
	return m.validate(true)
}

func (m *Union) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnionValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnionValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnionValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnionValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnionValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnionMultiError(errors)
	}

	return nil
}

// UnionMultiError is an error wrapping multiple validation errors returned by
// Union.ValidateAll() if the designated constraints aren't met.
type UnionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnionMultiError) AllErrors() []error { return m }

// UnionValidationError is the validation error returned by Union.Validate if
// the designated constraints aren't met.
type UnionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnionValidationError) ErrorName() string { return "UnionValidationError" }

// Error satisfies the builtin error interface
func (e UnionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnionValidationError{}

// Validate checks the field values on StructuredDatasetMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StructuredDatasetMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StructuredDatasetMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StructuredDatasetMetadataMultiError, or nil if none found.
func (m *StructuredDatasetMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *StructuredDatasetMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStructuredDatasetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StructuredDatasetMetadataValidationError{
					field:  "StructuredDatasetType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StructuredDatasetMetadataValidationError{
					field:  "StructuredDatasetType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStructuredDatasetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StructuredDatasetMetadataValidationError{
				field:  "StructuredDatasetType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StructuredDatasetMetadataMultiError(errors)
	}

	return nil
}

// StructuredDatasetMetadataMultiError is an error wrapping multiple validation
// errors returned by StructuredDatasetMetadata.ValidateAll() if the
// designated constraints aren't met.
type StructuredDatasetMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StructuredDatasetMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StructuredDatasetMetadataMultiError) AllErrors() []error { return m }

// StructuredDatasetMetadataValidationError is the validation error returned by
// StructuredDatasetMetadata.Validate if the designated constraints aren't met.
type StructuredDatasetMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StructuredDatasetMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StructuredDatasetMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StructuredDatasetMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StructuredDatasetMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StructuredDatasetMetadataValidationError) ErrorName() string {
	return "StructuredDatasetMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e StructuredDatasetMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStructuredDatasetMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StructuredDatasetMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StructuredDatasetMetadataValidationError{}

// Validate checks the field values on StructuredDataset with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StructuredDataset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StructuredDataset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StructuredDatasetMultiError, or nil if none found.
func (m *StructuredDataset) ValidateAll() error {
	return m.validate(true)
}

func (m *StructuredDataset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uri

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StructuredDatasetValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StructuredDatasetValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StructuredDatasetValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StructuredDatasetMultiError(errors)
	}

	return nil
}

// StructuredDatasetMultiError is an error wrapping multiple validation errors
// returned by StructuredDataset.ValidateAll() if the designated constraints
// aren't met.
type StructuredDatasetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StructuredDatasetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StructuredDatasetMultiError) AllErrors() []error { return m }

// StructuredDatasetValidationError is the validation error returned by
// StructuredDataset.Validate if the designated constraints aren't met.
type StructuredDatasetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StructuredDatasetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StructuredDatasetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StructuredDatasetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StructuredDatasetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StructuredDatasetValidationError) ErrorName() string {
	return "StructuredDatasetValidationError"
}

// Error satisfies the builtin error interface
func (e StructuredDatasetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStructuredDataset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StructuredDatasetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StructuredDatasetValidationError{}

// Validate checks the field values on Scalar with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Scalar) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Scalar with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ScalarMultiError, or nil if none found.
func (m *Scalar) ValidateAll() error {
	return m.validate(true)
}

func (m *Scalar) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Value.(type) {
	case *Scalar_Primitive:
		if v == nil {
			err := ScalarValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPrimitive()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Primitive",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Primitive",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrimitive()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Primitive",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Blob:
		if v == nil {
			err := ScalarValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBlob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Blob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBlob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Blob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Binary:
		if v == nil {
			err := ScalarValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBinary()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Binary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Binary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBinary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Binary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Schema:
		if v == nil {
			err := ScalarValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSchema()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Schema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Schema",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_NoneType:
		if v == nil {
			err := ScalarValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNoneType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "NoneType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "NoneType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNoneType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "NoneType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Error:
		if v == nil {
			err := ScalarValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Generic:
		if v == nil {
			err := ScalarValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetGeneric()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Generic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Generic",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGeneric()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Generic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_StructuredDataset:
		if v == nil {
			err := ScalarValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStructuredDataset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "StructuredDataset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "StructuredDataset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStructuredDataset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "StructuredDataset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Union:
		if v == nil {
			err := ScalarValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUnion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Union",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScalarValidationError{
						field:  "Union",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Union",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ScalarMultiError(errors)
	}

	return nil
}

// ScalarMultiError is an error wrapping multiple validation errors returned by
// Scalar.ValidateAll() if the designated constraints aren't met.
type ScalarMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScalarMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScalarMultiError) AllErrors() []error { return m }

// ScalarValidationError is the validation error returned by Scalar.Validate if
// the designated constraints aren't met.
type ScalarValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScalarValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScalarValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScalarValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScalarValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScalarValidationError) ErrorName() string { return "ScalarValidationError" }

// Error satisfies the builtin error interface
func (e ScalarValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScalar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScalarValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScalarValidationError{}

// Validate checks the field values on Literal with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Literal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Literal with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LiteralMultiError, or nil if none found.
func (m *Literal) ValidateAll() error {
	return m.validate(true)
}

func (m *Literal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	// no validation rules for Metadata

	switch v := m.Value.(type) {
	case *Literal_Scalar:
		if v == nil {
			err := LiteralValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetScalar()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralValidationError{
						field:  "Scalar",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralValidationError{
						field:  "Scalar",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScalar()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralValidationError{
					field:  "Scalar",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Literal_Collection:
		if v == nil {
			err := LiteralValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCollection()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralValidationError{
						field:  "Collection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralValidationError{
						field:  "Collection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Literal_Map:
		if v == nil {
			err := LiteralValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMap()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralValidationError{
						field:  "Map",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralValidationError{
						field:  "Map",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMap()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralValidationError{
					field:  "Map",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Literal_OffloadedMetadata:
		if v == nil {
			err := LiteralValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOffloadedMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralValidationError{
						field:  "OffloadedMetadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralValidationError{
						field:  "OffloadedMetadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOffloadedMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralValidationError{
					field:  "OffloadedMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LiteralMultiError(errors)
	}

	return nil
}

// LiteralMultiError is an error wrapping multiple validation errors returned
// by Literal.ValidateAll() if the designated constraints aren't met.
type LiteralMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiteralMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiteralMultiError) AllErrors() []error { return m }

// LiteralValidationError is the validation error returned by Literal.Validate
// if the designated constraints aren't met.
type LiteralValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiteralValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiteralValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiteralValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiteralValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiteralValidationError) ErrorName() string { return "LiteralValidationError" }

// Error satisfies the builtin error interface
func (e LiteralValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiteral.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiteralValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiteralValidationError{}

// Validate checks the field values on LiteralOffloadedMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LiteralOffloadedMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiteralOffloadedMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LiteralOffloadedMetadataMultiError, or nil if none found.
func (m *LiteralOffloadedMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *LiteralOffloadedMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uri

	// no validation rules for SizeBytes

	if all {
		switch v := interface{}(m.GetInferredType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiteralOffloadedMetadataValidationError{
					field:  "InferredType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiteralOffloadedMetadataValidationError{
					field:  "InferredType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInferredType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiteralOffloadedMetadataValidationError{
				field:  "InferredType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LiteralOffloadedMetadataMultiError(errors)
	}

	return nil
}

// LiteralOffloadedMetadataMultiError is an error wrapping multiple validation
// errors returned by LiteralOffloadedMetadata.ValidateAll() if the designated
// constraints aren't met.
type LiteralOffloadedMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiteralOffloadedMetadataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiteralOffloadedMetadataMultiError) AllErrors() []error { return m }

// LiteralOffloadedMetadataValidationError is the validation error returned by
// LiteralOffloadedMetadata.Validate if the designated constraints aren't met.
type LiteralOffloadedMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiteralOffloadedMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiteralOffloadedMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiteralOffloadedMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiteralOffloadedMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiteralOffloadedMetadataValidationError) ErrorName() string {
	return "LiteralOffloadedMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e LiteralOffloadedMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiteralOffloadedMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiteralOffloadedMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiteralOffloadedMetadataValidationError{}

// Validate checks the field values on LiteralCollection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LiteralCollection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiteralCollection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LiteralCollectionMultiError, or nil if none found.
func (m *LiteralCollection) ValidateAll() error {
	return m.validate(true)
}

func (m *LiteralCollection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLiterals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralCollectionValidationError{
						field:  fmt.Sprintf("Literals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralCollectionValidationError{
						field:  fmt.Sprintf("Literals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralCollectionValidationError{
					field:  fmt.Sprintf("Literals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LiteralCollectionMultiError(errors)
	}

	return nil
}

// LiteralCollectionMultiError is an error wrapping multiple validation errors
// returned by LiteralCollection.ValidateAll() if the designated constraints
// aren't met.
type LiteralCollectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiteralCollectionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiteralCollectionMultiError) AllErrors() []error { return m }

// LiteralCollectionValidationError is the validation error returned by
// LiteralCollection.Validate if the designated constraints aren't met.
type LiteralCollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiteralCollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiteralCollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiteralCollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiteralCollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiteralCollectionValidationError) ErrorName() string {
	return "LiteralCollectionValidationError"
}

// Error satisfies the builtin error interface
func (e LiteralCollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiteralCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiteralCollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiteralCollectionValidationError{}

// Validate checks the field values on LiteralMap with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LiteralMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiteralMap with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LiteralMapMultiError, or
// nil if none found.
func (m *LiteralMap) ValidateAll() error {
	return m.validate(true)
}

func (m *LiteralMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetLiterals()))
		i := 0
		for key := range m.GetLiterals() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLiterals()[key]
			_ = val

			// no validation rules for Literals[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, LiteralMapValidationError{
							field:  fmt.Sprintf("Literals[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, LiteralMapValidationError{
							field:  fmt.Sprintf("Literals[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return LiteralMapValidationError{
						field:  fmt.Sprintf("Literals[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return LiteralMapMultiError(errors)
	}

	return nil
}

// LiteralMapMultiError is an error wrapping multiple validation errors
// returned by LiteralMap.ValidateAll() if the designated constraints aren't met.
type LiteralMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiteralMapMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiteralMapMultiError) AllErrors() []error { return m }

// LiteralMapValidationError is the validation error returned by
// LiteralMap.Validate if the designated constraints aren't met.
type LiteralMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiteralMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiteralMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiteralMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiteralMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiteralMapValidationError) ErrorName() string { return "LiteralMapValidationError" }

// Error satisfies the builtin error interface
func (e LiteralMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiteralMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiteralMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiteralMapValidationError{}

// Validate checks the field values on BindingDataCollection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BindingDataCollection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindingDataCollection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindingDataCollectionMultiError, or nil if none found.
func (m *BindingDataCollection) ValidateAll() error {
	return m.validate(true)
}

func (m *BindingDataCollection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBindings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BindingDataCollectionValidationError{
						field:  fmt.Sprintf("Bindings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BindingDataCollectionValidationError{
						field:  fmt.Sprintf("Bindings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataCollectionValidationError{
					field:  fmt.Sprintf("Bindings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BindingDataCollectionMultiError(errors)
	}

	return nil
}

// BindingDataCollectionMultiError is an error wrapping multiple validation
// errors returned by BindingDataCollection.ValidateAll() if the designated
// constraints aren't met.
type BindingDataCollectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindingDataCollectionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindingDataCollectionMultiError) AllErrors() []error { return m }

// BindingDataCollectionValidationError is the validation error returned by
// BindingDataCollection.Validate if the designated constraints aren't met.
type BindingDataCollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindingDataCollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindingDataCollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindingDataCollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindingDataCollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindingDataCollectionValidationError) ErrorName() string {
	return "BindingDataCollectionValidationError"
}

// Error satisfies the builtin error interface
func (e BindingDataCollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindingDataCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindingDataCollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindingDataCollectionValidationError{}

// Validate checks the field values on BindingDataMap with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BindingDataMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindingDataMap with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BindingDataMapMultiError,
// or nil if none found.
func (m *BindingDataMap) ValidateAll() error {
	return m.validate(true)
}

func (m *BindingDataMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetBindings()))
		i := 0
		for key := range m.GetBindings() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBindings()[key]
			_ = val

			// no validation rules for Bindings[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, BindingDataMapValidationError{
							field:  fmt.Sprintf("Bindings[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, BindingDataMapValidationError{
							field:  fmt.Sprintf("Bindings[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return BindingDataMapValidationError{
						field:  fmt.Sprintf("Bindings[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return BindingDataMapMultiError(errors)
	}

	return nil
}

// BindingDataMapMultiError is an error wrapping multiple validation errors
// returned by BindingDataMap.ValidateAll() if the designated constraints
// aren't met.
type BindingDataMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindingDataMapMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindingDataMapMultiError) AllErrors() []error { return m }

// BindingDataMapValidationError is the validation error returned by
// BindingDataMap.Validate if the designated constraints aren't met.
type BindingDataMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindingDataMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindingDataMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindingDataMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindingDataMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindingDataMapValidationError) ErrorName() string { return "BindingDataMapValidationError" }

// Error satisfies the builtin error interface
func (e BindingDataMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindingDataMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindingDataMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindingDataMapValidationError{}

// Validate checks the field values on UnionInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnionInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnionInfoMultiError, or nil
// if none found.
func (m *UnionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UnionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTargetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnionInfoValidationError{
					field:  "TargetType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnionInfoValidationError{
					field:  "TargetType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnionInfoValidationError{
				field:  "TargetType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnionInfoMultiError(errors)
	}

	return nil
}

// UnionInfoMultiError is an error wrapping multiple validation errors returned
// by UnionInfo.ValidateAll() if the designated constraints aren't met.
type UnionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnionInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnionInfoMultiError) AllErrors() []error { return m }

// UnionInfoValidationError is the validation error returned by
// UnionInfo.Validate if the designated constraints aren't met.
type UnionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnionInfoValidationError) ErrorName() string { return "UnionInfoValidationError" }

// Error satisfies the builtin error interface
func (e UnionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnionInfoValidationError{}

// Validate checks the field values on BindingData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BindingData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindingData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BindingDataMultiError, or
// nil if none found.
func (m *BindingData) ValidateAll() error {
	return m.validate(true)
}

func (m *BindingData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUnion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BindingDataValidationError{
					field:  "Union",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BindingDataValidationError{
					field:  "Union",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BindingDataValidationError{
				field:  "Union",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Value.(type) {
	case *BindingData_Scalar:
		if v == nil {
			err := BindingDataValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetScalar()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BindingDataValidationError{
						field:  "Scalar",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BindingDataValidationError{
						field:  "Scalar",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetScalar()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataValidationError{
					field:  "Scalar",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BindingData_Collection:
		if v == nil {
			err := BindingDataValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCollection()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BindingDataValidationError{
						field:  "Collection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BindingDataValidationError{
						field:  "Collection",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BindingData_Promise:
		if v == nil {
			err := BindingDataValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPromise()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BindingDataValidationError{
						field:  "Promise",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BindingDataValidationError{
						field:  "Promise",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPromise()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataValidationError{
					field:  "Promise",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BindingData_Map:
		if v == nil {
			err := BindingDataValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMap()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BindingDataValidationError{
						field:  "Map",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BindingDataValidationError{
						field:  "Map",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMap()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataValidationError{
					field:  "Map",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BindingData_OffloadedMetadata:
		if v == nil {
			err := BindingDataValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOffloadedMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BindingDataValidationError{
						field:  "OffloadedMetadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BindingDataValidationError{
						field:  "OffloadedMetadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOffloadedMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataValidationError{
					field:  "OffloadedMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return BindingDataMultiError(errors)
	}

	return nil
}

// BindingDataMultiError is an error wrapping multiple validation errors
// returned by BindingData.ValidateAll() if the designated constraints aren't met.
type BindingDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindingDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindingDataMultiError) AllErrors() []error { return m }

// BindingDataValidationError is the validation error returned by
// BindingData.Validate if the designated constraints aren't met.
type BindingDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindingDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindingDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindingDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindingDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindingDataValidationError) ErrorName() string { return "BindingDataValidationError" }

// Error satisfies the builtin error interface
func (e BindingDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindingData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindingDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindingDataValidationError{}

// Validate checks the field values on Binding with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Binding) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Binding with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BindingMultiError, or nil if none found.
func (m *Binding) ValidateAll() error {
	return m.validate(true)
}

func (m *Binding) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Var

	if all {
		switch v := interface{}(m.GetBinding()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BindingValidationError{
					field:  "Binding",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BindingValidationError{
					field:  "Binding",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBinding()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BindingValidationError{
				field:  "Binding",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BindingMultiError(errors)
	}

	return nil
}

// BindingMultiError is an error wrapping multiple validation errors returned
// by Binding.ValidateAll() if the designated constraints aren't met.
type BindingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindingMultiError) AllErrors() []error { return m }

// BindingValidationError is the validation error returned by Binding.Validate
// if the designated constraints aren't met.
type BindingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindingValidationError) ErrorName() string { return "BindingValidationError" }

// Error satisfies the builtin error interface
func (e BindingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBinding.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindingValidationError{}

// Validate checks the field values on KeyValuePair with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KeyValuePair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyValuePair with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KeyValuePairMultiError, or
// nil if none found.
func (m *KeyValuePair) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyValuePair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return KeyValuePairMultiError(errors)
	}

	return nil
}

// KeyValuePairMultiError is an error wrapping multiple validation errors
// returned by KeyValuePair.ValidateAll() if the designated constraints aren't met.
type KeyValuePairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyValuePairMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyValuePairMultiError) AllErrors() []error { return m }

// KeyValuePairValidationError is the validation error returned by
// KeyValuePair.Validate if the designated constraints aren't met.
type KeyValuePairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyValuePairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyValuePairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyValuePairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyValuePairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyValuePairValidationError) ErrorName() string { return "KeyValuePairValidationError" }

// Error satisfies the builtin error interface
func (e KeyValuePairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyValuePair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyValuePairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyValuePairValidationError{}

// Validate checks the field values on RetryStrategy with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RetryStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetryStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RetryStrategyMultiError, or
// nil if none found.
func (m *RetryStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *RetryStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Retries

	if len(errors) > 0 {
		return RetryStrategyMultiError(errors)
	}

	return nil
}

// RetryStrategyMultiError is an error wrapping multiple validation errors
// returned by RetryStrategy.ValidateAll() if the designated constraints
// aren't met.
type RetryStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetryStrategyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetryStrategyMultiError) AllErrors() []error { return m }

// RetryStrategyValidationError is the validation error returned by
// RetryStrategy.Validate if the designated constraints aren't met.
type RetryStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryStrategyValidationError) ErrorName() string { return "RetryStrategyValidationError" }

// Error satisfies the builtin error interface
func (e RetryStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryStrategyValidationError{}
