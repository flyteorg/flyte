// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/logs/dataplane/payload.proto

package dataplane

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PodResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodResource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PodResourceMultiError, or
// nil if none found.
func (m *PodResource) ValidateAll() error {
	return m.validate(true)
}

func (m *PodResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for Container

	if len(errors) > 0 {
		return PodResourceMultiError(errors)
	}

	return nil
}

// PodResourceMultiError is an error wrapping multiple validation errors
// returned by PodResource.ValidateAll() if the designated constraints aren't met.
type PodResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodResourceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodResourceMultiError) AllErrors() []error { return m }

// PodResourceValidationError is the validation error returned by
// PodResource.Validate if the designated constraints aren't met.
type PodResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodResourceValidationError) ErrorName() string { return "PodResourceValidationError" }

// Error satisfies the builtin error interface
func (e PodResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodResourceValidationError{}

// Validate checks the field values on LoggingContext with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoggingContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoggingContext with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoggingContextMultiError,
// or nil if none found.
func (m *LoggingContext) ValidateAll() error {
	return m.validate(true)
}

func (m *LoggingContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for KubernetesNamespace

	// no validation rules for KubernetesPodName

	// no validation rules for KubernetesContainerName

	if all {
		switch v := interface{}(m.GetExecutionAttemptStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggingContextValidationError{
					field:  "ExecutionAttemptStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggingContextValidationError{
					field:  "ExecutionAttemptStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecutionAttemptStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggingContextValidationError{
				field:  "ExecutionAttemptStartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExecutionAttemptEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggingContextValidationError{
					field:  "ExecutionAttemptEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggingContextValidationError{
					field:  "ExecutionAttemptEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExecutionAttemptEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggingContextValidationError{
				field:  "ExecutionAttemptEndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for KubernetesPodLabels

	if len(errors) > 0 {
		return LoggingContextMultiError(errors)
	}

	return nil
}

// LoggingContextMultiError is an error wrapping multiple validation errors
// returned by LoggingContext.ValidateAll() if the designated constraints
// aren't met.
type LoggingContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoggingContextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoggingContextMultiError) AllErrors() []error { return m }

// LoggingContextValidationError is the validation error returned by
// LoggingContext.Validate if the designated constraints aren't met.
type LoggingContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggingContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggingContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggingContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggingContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggingContextValidationError) ErrorName() string { return "LoggingContextValidationError" }

// Error satisfies the builtin error interface
func (e LoggingContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoggingContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggingContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggingContextValidationError{}

// Validate checks the field values on ContainerIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerIdentifierMultiError, or nil if none found.
func (m *ContainerIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for KubernetesNamespace

	// no validation rules for KubernetesPodName

	// no validation rules for KubernetesContainerName

	if len(errors) > 0 {
		return ContainerIdentifierMultiError(errors)
	}

	return nil
}

// ContainerIdentifierMultiError is an error wrapping multiple validation
// errors returned by ContainerIdentifier.ValidateAll() if the designated
// constraints aren't met.
type ContainerIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerIdentifierMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerIdentifierMultiError) AllErrors() []error { return m }

// ContainerIdentifierValidationError is the validation error returned by
// ContainerIdentifier.Validate if the designated constraints aren't met.
type ContainerIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerIdentifierValidationError) ErrorName() string {
	return "ContainerIdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerIdentifierValidationError{}

// Validate checks the field values on ContainerSelector with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContainerSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerSelector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerSelectorMultiError, or nil if none found.
func (m *ContainerSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterName

	// no validation rules for KubernetesNamespace

	// no validation rules for KubernetesPodNamePrefix

	// no validation rules for KubernetesContainerName

	// no validation rules for KubernetesPodLabelSelector

	if len(errors) > 0 {
		return ContainerSelectorMultiError(errors)
	}

	return nil
}

// ContainerSelectorMultiError is an error wrapping multiple validation errors
// returned by ContainerSelector.ValidateAll() if the designated constraints
// aren't met.
type ContainerSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerSelectorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerSelectorMultiError) AllErrors() []error { return m }

// ContainerSelectorValidationError is the validation error returned by
// ContainerSelector.Validate if the designated constraints aren't met.
type ContainerSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerSelectorValidationError) ErrorName() string {
	return "ContainerSelectorValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerSelectorValidationError{}

// Validate checks the field values on LiveLogsOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LiveLogsOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiveLogsOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LiveLogsOptionsMultiError, or nil if none found.
func (m *LiveLogsOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *LiveLogsOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogPodStatus

	// no validation rules for LogTimestamps

	if len(errors) > 0 {
		return LiveLogsOptionsMultiError(errors)
	}

	return nil
}

// LiveLogsOptionsMultiError is an error wrapping multiple validation errors
// returned by LiveLogsOptions.ValidateAll() if the designated constraints
// aren't met.
type LiveLogsOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiveLogsOptionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiveLogsOptionsMultiError) AllErrors() []error { return m }

// LiveLogsOptionsValidationError is the validation error returned by
// LiveLogsOptions.Validate if the designated constraints aren't met.
type LiveLogsOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiveLogsOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiveLogsOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiveLogsOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiveLogsOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiveLogsOptionsValidationError) ErrorName() string { return "LiveLogsOptionsValidationError" }

// Error satisfies the builtin error interface
func (e LiveLogsOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiveLogsOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiveLogsOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiveLogsOptionsValidationError{}

// Validate checks the field values on LogLine with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogLine) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogLine with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogLineMultiError, or nil if none found.
func (m *LogLine) ValidateAll() error {
	return m.validate(true)
}

func (m *LogLine) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogLineValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogLineValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogLineValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	// no validation rules for Originator

	if len(errors) > 0 {
		return LogLineMultiError(errors)
	}

	return nil
}

// LogLineMultiError is an error wrapping multiple validation errors returned
// by LogLine.ValidateAll() if the designated constraints aren't met.
type LogLineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogLineMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogLineMultiError) AllErrors() []error { return m }

// LogLineValidationError is the validation error returned by LogLine.Validate
// if the designated constraints aren't met.
type LogLineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogLineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogLineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogLineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogLineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogLineValidationError) ErrorName() string { return "LogLineValidationError" }

// Error satisfies the builtin error interface
func (e LogLineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogLine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogLineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogLineValidationError{}

// Validate checks the field values on LogLines with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogLines) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogLines with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogLinesMultiError, or nil
// if none found.
func (m *LogLines) ValidateAll() error {
	return m.validate(true)
}

func (m *LogLines) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerIndex

	if all {
		switch v := interface{}(m.GetContainer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogLinesValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogLinesValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogLinesValidationError{
				field:  "Container",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStructuredLines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogLinesValidationError{
						field:  fmt.Sprintf("StructuredLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogLinesValidationError{
						field:  fmt.Sprintf("StructuredLines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogLinesValidationError{
					field:  fmt.Sprintf("StructuredLines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LogLinesMultiError(errors)
	}

	return nil
}

// LogLinesMultiError is an error wrapping multiple validation errors returned
// by LogLines.ValidateAll() if the designated constraints aren't met.
type LogLinesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogLinesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogLinesMultiError) AllErrors() []error { return m }

// LogLinesValidationError is the validation error returned by
// LogLines.Validate if the designated constraints aren't met.
type LogLinesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogLinesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogLinesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogLinesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogLinesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogLinesValidationError) ErrorName() string { return "LogLinesValidationError" }

// Error satisfies the builtin error interface
func (e LogLinesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogLines.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogLinesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogLinesValidationError{}

// Validate checks the field values on LogContainersList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LogContainersList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogContainersList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogContainersListMultiError, or nil if none found.
func (m *LogContainersList) ValidateAll() error {
	return m.validate(true)
}

func (m *LogContainersList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogContainersListValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogContainersListValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogContainersListValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LogContainersListMultiError(errors)
	}

	return nil
}

// LogContainersListMultiError is an error wrapping multiple validation errors
// returned by LogContainersList.ValidateAll() if the designated constraints
// aren't met.
type LogContainersListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogContainersListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogContainersListMultiError) AllErrors() []error { return m }

// LogContainersListValidationError is the validation error returned by
// LogContainersList.Validate if the designated constraints aren't met.
type LogContainersListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogContainersListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogContainersListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogContainersListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogContainersListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogContainersListValidationError) ErrorName() string {
	return "LogContainersListValidationError"
}

// Error satisfies the builtin error interface
func (e LogContainersListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogContainersList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogContainersListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogContainersListValidationError{}

// Validate checks the field values on LogLinesBatch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogLinesBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogLinesBatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogLinesBatchMultiError, or
// nil if none found.
func (m *LogLinesBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *LogLinesBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogLinesBatchValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogLinesBatchValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogLinesBatchValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LogLinesBatchMultiError(errors)
	}

	return nil
}

// LogLinesBatchMultiError is an error wrapping multiple validation errors
// returned by LogLinesBatch.ValidateAll() if the designated constraints
// aren't met.
type LogLinesBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogLinesBatchMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogLinesBatchMultiError) AllErrors() []error { return m }

// LogLinesBatchValidationError is the validation error returned by
// LogLinesBatch.Validate if the designated constraints aren't met.
type LogLinesBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogLinesBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogLinesBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogLinesBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogLinesBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogLinesBatchValidationError) ErrorName() string { return "LogLinesBatchValidationError" }

// Error satisfies the builtin error interface
func (e LogLinesBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogLinesBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogLinesBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogLinesBatchValidationError{}
