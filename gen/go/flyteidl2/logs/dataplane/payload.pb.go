// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl2/logs/dataplane/payload.proto

package dataplane

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogLineOriginator int32

const (
	// The originator of the log line is unknown.
	LogLineOriginator_UNKNOWN LogLineOriginator = 0
	// The originator of the log line is the user application.
	LogLineOriginator_USER LogLineOriginator = 1
	// The originator of the log line is the system.
	LogLineOriginator_SYSTEM LogLineOriginator = 2
)

// Enum value maps for LogLineOriginator.
var (
	LogLineOriginator_name = map[int32]string{
		0: "UNKNOWN",
		1: "USER",
		2: "SYSTEM",
	}
	LogLineOriginator_value = map[string]int32{
		"UNKNOWN": 0,
		"USER":    1,
		"SYSTEM":  2,
	}
)

func (x LogLineOriginator) Enum() *LogLineOriginator {
	p := new(LogLineOriginator)
	*p = x
	return p
}

func (x LogLineOriginator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLineOriginator) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl2_logs_dataplane_payload_proto_enumTypes[0].Descriptor()
}

func (LogLineOriginator) Type() protoreflect.EnumType {
	return &file_flyteidl2_logs_dataplane_payload_proto_enumTypes[0]
}

func (x LogLineOriginator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLineOriginator.Descriptor instead.
func (LogLineOriginator) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP(), []int{0}
}

type LogsSource int32

const (
	// Return live logs and fall back to persisted if not available.
	LogsSource_LIVE_OR_PERSISTED LogsSource = 0
	// Return live logs only or error if pod is no longer around.
	LogsSource_LIVE_ONLY LogsSource = 1
	// Return persisted logs only.
	LogsSource_PERSISTED_ONLY LogsSource = 2
)

// Enum value maps for LogsSource.
var (
	LogsSource_name = map[int32]string{
		0: "LIVE_OR_PERSISTED",
		1: "LIVE_ONLY",
		2: "PERSISTED_ONLY",
	}
	LogsSource_value = map[string]int32{
		"LIVE_OR_PERSISTED": 0,
		"LIVE_ONLY":         1,
		"PERSISTED_ONLY":    2,
	}
)

func (x LogsSource) Enum() *LogsSource {
	p := new(LogsSource)
	*p = x
	return p
}

func (x LogsSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogsSource) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl2_logs_dataplane_payload_proto_enumTypes[1].Descriptor()
}

func (LogsSource) Type() protoreflect.EnumType {
	return &file_flyteidl2_logs_dataplane_payload_proto_enumTypes[1]
}

func (x LogsSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogsSource.Descriptor instead.
func (LogsSource) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP(), []int{1}
}

type PodResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace of the pod.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The pod name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The container name. If not provided, attempt to find the primary container, else assume the first container.
	// +optional
	Container string `protobuf:"bytes,3,opt,name=container,proto3" json:"container,omitempty"`
}

func (x *PodResource) Reset() {
	*x = PodResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodResource) ProtoMessage() {}

func (x *PodResource) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodResource.ProtoReflect.Descriptor instead.
func (*PodResource) Descriptor() ([]byte, []int) {
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP(), []int{0}
}

func (x *PodResource) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PodResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodResource) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

// Parameters of environment in which logs were collected. Should contain everything
// necessary to identify location of task execution logs in cloud providers.
type LoggingContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName               string                 `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	KubernetesNamespace       string                 `protobuf:"bytes,4,opt,name=kubernetes_namespace,json=kubernetesNamespace,proto3" json:"kubernetes_namespace,omitempty"`
	KubernetesPodName         string                 `protobuf:"bytes,5,opt,name=kubernetes_pod_name,json=kubernetesPodName,proto3" json:"kubernetes_pod_name,omitempty"`
	KubernetesContainerName   string                 `protobuf:"bytes,6,opt,name=kubernetes_container_name,json=kubernetesContainerName,proto3" json:"kubernetes_container_name,omitempty"`
	ExecutionAttemptStartTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=execution_attempt_start_time,json=executionAttemptStartTime,proto3" json:"execution_attempt_start_time,omitempty"`
	ExecutionAttemptEndTime   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=execution_attempt_end_time,json=executionAttemptEndTime,proto3" json:"execution_attempt_end_time,omitempty"`
	KubernetesPodLabels       map[string]string      `protobuf:"bytes,9,rep,name=kubernetes_pod_labels,json=kubernetesPodLabels,proto3" json:"kubernetes_pod_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LoggingContext) Reset() {
	*x = LoggingContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingContext) ProtoMessage() {}

func (x *LoggingContext) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingContext.ProtoReflect.Descriptor instead.
func (*LoggingContext) Descriptor() ([]byte, []int) {
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP(), []int{1}
}

func (x *LoggingContext) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *LoggingContext) GetKubernetesNamespace() string {
	if x != nil {
		return x.KubernetesNamespace
	}
	return ""
}

func (x *LoggingContext) GetKubernetesPodName() string {
	if x != nil {
		return x.KubernetesPodName
	}
	return ""
}

func (x *LoggingContext) GetKubernetesContainerName() string {
	if x != nil {
		return x.KubernetesContainerName
	}
	return ""
}

func (x *LoggingContext) GetExecutionAttemptStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionAttemptStartTime
	}
	return nil
}

func (x *LoggingContext) GetExecutionAttemptEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionAttemptEndTime
	}
	return nil
}

func (x *LoggingContext) GetKubernetesPodLabels() map[string]string {
	if x != nil {
		return x.KubernetesPodLabels
	}
	return nil
}

// Parameters of environment in which logs were collected. Should contain everything
// necessary to identify location of task execution logs in cloud providers.
type ContainerIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the cluster.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// The namespace in Kubernetes.
	KubernetesNamespace string `protobuf:"bytes,2,opt,name=kubernetes_namespace,json=kubernetesNamespace,proto3" json:"kubernetes_namespace,omitempty"`
	// The name of the pod in Kubernetes.
	KubernetesPodName string `protobuf:"bytes,3,opt,name=kubernetes_pod_name,json=kubernetesPodName,proto3" json:"kubernetes_pod_name,omitempty"`
	// The name of the container in Kubernetes.
	KubernetesContainerName string `protobuf:"bytes,4,opt,name=kubernetes_container_name,json=kubernetesContainerName,proto3" json:"kubernetes_container_name,omitempty"`
}

func (x *ContainerIdentifier) Reset() {
	*x = ContainerIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerIdentifier) ProtoMessage() {}

func (x *ContainerIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerIdentifier.ProtoReflect.Descriptor instead.
func (*ContainerIdentifier) Descriptor() ([]byte, []int) {
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerIdentifier) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ContainerIdentifier) GetKubernetesNamespace() string {
	if x != nil {
		return x.KubernetesNamespace
	}
	return ""
}

func (x *ContainerIdentifier) GetKubernetesPodName() string {
	if x != nil {
		return x.KubernetesPodName
	}
	return ""
}

func (x *ContainerIdentifier) GetKubernetesContainerName() string {
	if x != nil {
		return x.KubernetesContainerName
	}
	return ""
}

type ContainerSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the cluster.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// The namespace in Kubernetes.
	KubernetesNamespace string `protobuf:"bytes,2,opt,name=kubernetes_namespace,json=kubernetesNamespace,proto3" json:"kubernetes_namespace,omitempty"`
	// The prefix of the name of the pod in Kubernetes. This will only apply to persisted pods' logs because listing by
	// prefix is the supported way to filter pods.
	KubernetesPodNamePrefix string `protobuf:"bytes,3,opt,name=kubernetes_pod_name_prefix,json=kubernetesPodNamePrefix,proto3" json:"kubernetes_pod_name_prefix,omitempty"`
	// The name of the container in Kubernetes. If not specified, logs for all containers
	// will be streamed.
	KubernetesContainerName string `protobuf:"bytes,4,opt,name=kubernetes_container_name,json=kubernetesContainerName,proto3" json:"kubernetes_container_name,omitempty"`
	// The label selector to filter pods. This will only apply to live pods' logs because Listing by prefix
	// isn't supported.
	KubernetesPodLabelSelector string `protobuf:"bytes,5,opt,name=kubernetes_pod_label_selector,json=kubernetesPodLabelSelector,proto3" json:"kubernetes_pod_label_selector,omitempty"`
}

func (x *ContainerSelector) Reset() {
	*x = ContainerSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerSelector) ProtoMessage() {}

func (x *ContainerSelector) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerSelector.ProtoReflect.Descriptor instead.
func (*ContainerSelector) Descriptor() ([]byte, []int) {
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP(), []int{3}
}

func (x *ContainerSelector) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ContainerSelector) GetKubernetesNamespace() string {
	if x != nil {
		return x.KubernetesNamespace
	}
	return ""
}

func (x *ContainerSelector) GetKubernetesPodNamePrefix() string {
	if x != nil {
		return x.KubernetesPodNamePrefix
	}
	return ""
}

func (x *ContainerSelector) GetKubernetesContainerName() string {
	if x != nil {
		return x.KubernetesContainerName
	}
	return ""
}

func (x *ContainerSelector) GetKubernetesPodLabelSelector() string {
	if x != nil {
		return x.KubernetesPodLabelSelector
	}
	return ""
}

type LiveLogsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LogPodStatus indicates whether to log the pod status along with the logs.
	LogPodStatus bool `protobuf:"varint,1,opt,name=log_pod_status,json=logPodStatus,proto3" json:"log_pod_status,omitempty"`
	// LogTimestamps indicates whether to log the timestamps along with the logs. It prepends RFC3339 or RFC3339Nano
	// format in the beginning of each log line.
	LogTimestamps bool `protobuf:"varint,2,opt,name=log_timestamps,json=logTimestamps,proto3" json:"log_timestamps,omitempty"`
}

func (x *LiveLogsOptions) Reset() {
	*x = LiveLogsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveLogsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveLogsOptions) ProtoMessage() {}

func (x *LiveLogsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveLogsOptions.ProtoReflect.Descriptor instead.
func (*LiveLogsOptions) Descriptor() ([]byte, []int) {
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP(), []int{4}
}

func (x *LiveLogsOptions) GetLogPodStatus() bool {
	if x != nil {
		return x.LogPodStatus
	}
	return false
}

func (x *LiveLogsOptions) GetLogTimestamps() bool {
	if x != nil {
		return x.LogTimestamps
	}
	return false
}

type LogLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Each line is separated by either CRLF, CR or LF, which are included
	// at the ends of the lines. This lets clients know whether log emitter
	// wanted to overwrite the previous line (LF) or append a new line (CRLF).
	Message    string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Originator LogLineOriginator `protobuf:"varint,3,opt,name=originator,proto3,enum=flyteidl2.logs.dataplane.LogLineOriginator" json:"originator,omitempty"`
}

func (x *LogLine) Reset() {
	*x = LogLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLine) ProtoMessage() {}

func (x *LogLine) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLine.ProtoReflect.Descriptor instead.
func (*LogLine) Descriptor() ([]byte, []int) {
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP(), []int{5}
}

func (x *LogLine) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogLine) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LogLine) GetOriginator() LogLineOriginator {
	if x != nil {
		return x.Originator
	}
	return LogLineOriginator_UNKNOWN
}

type LogLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each line is separated by either CRLF, CR or LF, which are included
	// at the ends of the lines. This lets clients know whether log emitter
	// wanted to overwrite the previous line (LF) or append a new line (CRLF).
	//
	// Deprecated: Marked as deprecated in flyteidl2/logs/dataplane/payload.proto.
	Lines []string `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
	// The index of the container in the list of containers. If the request was made with a single container identifier,
	// this value will always be 0. Otherwise, it'll be an index into the last list of containers sent in the stream.
	ContainerIndex uint32 `protobuf:"varint,2,opt,name=container_index,json=containerIndex,proto3" json:"container_index,omitempty"`
	// The container identifier.
	Container *ContainerIdentifier `protobuf:"bytes,3,opt,name=container,proto3" json:"container,omitempty"`
	// Each line is separated by either CRLF, CR or LF, which are included
	// at the ends of the lines. This lets clients know whether log emitter
	// wanted to overwrite the previous line (LF) or append a new line (CRLF).
	StructuredLines []*LogLine `protobuf:"bytes,4,rep,name=structured_lines,json=structuredLines,proto3" json:"structured_lines,omitempty"`
}

func (x *LogLines) Reset() {
	*x = LogLines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLines) ProtoMessage() {}

func (x *LogLines) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLines.ProtoReflect.Descriptor instead.
func (*LogLines) Descriptor() ([]byte, []int) {
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP(), []int{6}
}

// Deprecated: Marked as deprecated in flyteidl2/logs/dataplane/payload.proto.
func (x *LogLines) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *LogLines) GetContainerIndex() uint32 {
	if x != nil {
		return x.ContainerIndex
	}
	return 0
}

func (x *LogLines) GetContainer() *ContainerIdentifier {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *LogLines) GetStructuredLines() []*LogLine {
	if x != nil {
		return x.StructuredLines
	}
	return nil
}

type LogContainersList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containers []*ContainerIdentifier `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *LogContainersList) Reset() {
	*x = LogContainersList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogContainersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogContainersList) ProtoMessage() {}

func (x *LogContainersList) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogContainersList.ProtoReflect.Descriptor instead.
func (*LogContainersList) Descriptor() ([]byte, []int) {
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP(), []int{7}
}

func (x *LogContainersList) GetContainers() []*ContainerIdentifier {
	if x != nil {
		return x.Containers
	}
	return nil
}

type LogLinesBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*LogLines `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *LogLinesBatch) Reset() {
	*x = LogLinesBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLinesBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLinesBatch) ProtoMessage() {}

func (x *LogLinesBatch) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_logs_dataplane_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLinesBatch.ProtoReflect.Descriptor instead.
func (*LogLinesBatch) Descriptor() ([]byte, []int) {
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP(), []int{8}
}

func (x *LogLinesBatch) GetLogs() []*LogLines {
	if x != nil {
		return x.Logs
	}
	return nil
}

var File_flyteidl2_logs_dataplane_payload_proto protoreflect.FileDescriptor

var file_flyteidl2_logs_dataplane_payload_proto_rawDesc = []byte{
	0x0a, 0x26, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x6c, 0x6f, 0x67, 0x73,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x6f, 0x0a, 0x0b, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x22, 0xf7, 0x04, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x13,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x19, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x1c, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x1a, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x75, 0x0a, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x70,
	0x6f, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x46, 0x0a, 0x18, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xf2, 0x01, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x13, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xb7, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x1a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3a, 0x0a, 0x19, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x5e, 0x0a, 0x0f, 0x4c, 0x69,
	0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x07, 0x4c,
	0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e,
	0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xf0, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x10,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x11, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x47,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x36, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x2a, 0x36, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x4c, 0x69,
	0x6e, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x2a,
	0x46, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x44,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x42, 0xee, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x42, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0xa2, 0x02, 0x03, 0x46, 0x4c, 0x44, 0xaa, 0x02,
	0x18, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0xca, 0x02, 0x18, 0x46, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x4c, 0x6f, 0x67, 0x73, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0xe2, 0x02, 0x24, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x5c, 0x4c, 0x6f, 0x67, 0x73, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x46, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x3a, 0x3a, 0x4c, 0x6f, 0x67, 0x73, 0x3a, 0x3a, 0x44,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl2_logs_dataplane_payload_proto_rawDescOnce sync.Once
	file_flyteidl2_logs_dataplane_payload_proto_rawDescData = file_flyteidl2_logs_dataplane_payload_proto_rawDesc
)

func file_flyteidl2_logs_dataplane_payload_proto_rawDescGZIP() []byte {
	file_flyteidl2_logs_dataplane_payload_proto_rawDescOnce.Do(func() {
		file_flyteidl2_logs_dataplane_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl2_logs_dataplane_payload_proto_rawDescData)
	})
	return file_flyteidl2_logs_dataplane_payload_proto_rawDescData
}

var file_flyteidl2_logs_dataplane_payload_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_flyteidl2_logs_dataplane_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_flyteidl2_logs_dataplane_payload_proto_goTypes = []interface{}{
	(LogLineOriginator)(0),        // 0: flyteidl2.logs.dataplane.LogLineOriginator
	(LogsSource)(0),               // 1: flyteidl2.logs.dataplane.LogsSource
	(*PodResource)(nil),           // 2: flyteidl2.logs.dataplane.PodResource
	(*LoggingContext)(nil),        // 3: flyteidl2.logs.dataplane.LoggingContext
	(*ContainerIdentifier)(nil),   // 4: flyteidl2.logs.dataplane.ContainerIdentifier
	(*ContainerSelector)(nil),     // 5: flyteidl2.logs.dataplane.ContainerSelector
	(*LiveLogsOptions)(nil),       // 6: flyteidl2.logs.dataplane.LiveLogsOptions
	(*LogLine)(nil),               // 7: flyteidl2.logs.dataplane.LogLine
	(*LogLines)(nil),              // 8: flyteidl2.logs.dataplane.LogLines
	(*LogContainersList)(nil),     // 9: flyteidl2.logs.dataplane.LogContainersList
	(*LogLinesBatch)(nil),         // 10: flyteidl2.logs.dataplane.LogLinesBatch
	nil,                           // 11: flyteidl2.logs.dataplane.LoggingContext.KubernetesPodLabelsEntry
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_flyteidl2_logs_dataplane_payload_proto_depIdxs = []int32{
	12, // 0: flyteidl2.logs.dataplane.LoggingContext.execution_attempt_start_time:type_name -> google.protobuf.Timestamp
	12, // 1: flyteidl2.logs.dataplane.LoggingContext.execution_attempt_end_time:type_name -> google.protobuf.Timestamp
	11, // 2: flyteidl2.logs.dataplane.LoggingContext.kubernetes_pod_labels:type_name -> flyteidl2.logs.dataplane.LoggingContext.KubernetesPodLabelsEntry
	12, // 3: flyteidl2.logs.dataplane.LogLine.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 4: flyteidl2.logs.dataplane.LogLine.originator:type_name -> flyteidl2.logs.dataplane.LogLineOriginator
	4,  // 5: flyteidl2.logs.dataplane.LogLines.container:type_name -> flyteidl2.logs.dataplane.ContainerIdentifier
	7,  // 6: flyteidl2.logs.dataplane.LogLines.structured_lines:type_name -> flyteidl2.logs.dataplane.LogLine
	4,  // 7: flyteidl2.logs.dataplane.LogContainersList.containers:type_name -> flyteidl2.logs.dataplane.ContainerIdentifier
	8,  // 8: flyteidl2.logs.dataplane.LogLinesBatch.logs:type_name -> flyteidl2.logs.dataplane.LogLines
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_flyteidl2_logs_dataplane_payload_proto_init() }
func file_flyteidl2_logs_dataplane_payload_proto_init() {
	if File_flyteidl2_logs_dataplane_payload_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyteidl2_logs_dataplane_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_logs_dataplane_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_logs_dataplane_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_logs_dataplane_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_logs_dataplane_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveLogsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_logs_dataplane_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_logs_dataplane_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_logs_dataplane_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogContainersList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_logs_dataplane_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLinesBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl2_logs_dataplane_payload_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl2_logs_dataplane_payload_proto_goTypes,
		DependencyIndexes: file_flyteidl2_logs_dataplane_payload_proto_depIdxs,
		EnumInfos:         file_flyteidl2_logs_dataplane_payload_proto_enumTypes,
		MessageInfos:      file_flyteidl2_logs_dataplane_payload_proto_msgTypes,
	}.Build()
	File_flyteidl2_logs_dataplane_payload_proto = out.File
	file_flyteidl2_logs_dataplane_payload_proto_rawDesc = nil
	file_flyteidl2_logs_dataplane_payload_proto_goTypes = nil
	file_flyteidl2_logs_dataplane_payload_proto_depIdxs = nil
}
