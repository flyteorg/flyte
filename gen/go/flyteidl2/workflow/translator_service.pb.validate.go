// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/workflow/translator_service.proto

package workflow

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LiteralsToLaunchFormJsonRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LiteralsToLaunchFormJsonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiteralsToLaunchFormJsonRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LiteralsToLaunchFormJsonRequestMultiError, or nil if none found.
func (m *LiteralsToLaunchFormJsonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LiteralsToLaunchFormJsonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLiterals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LiteralsToLaunchFormJsonRequestValidationError{
						field:  fmt.Sprintf("Literals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LiteralsToLaunchFormJsonRequestValidationError{
						field:  fmt.Sprintf("Literals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralsToLaunchFormJsonRequestValidationError{
					field:  fmt.Sprintf("Literals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetVariables()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiteralsToLaunchFormJsonRequestValidationError{
					field:  "Variables",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiteralsToLaunchFormJsonRequestValidationError{
					field:  "Variables",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVariables()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiteralsToLaunchFormJsonRequestValidationError{
				field:  "Variables",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LiteralsToLaunchFormJsonRequestMultiError(errors)
	}

	return nil
}

// LiteralsToLaunchFormJsonRequestMultiError is an error wrapping multiple
// validation errors returned by LiteralsToLaunchFormJsonRequest.ValidateAll()
// if the designated constraints aren't met.
type LiteralsToLaunchFormJsonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiteralsToLaunchFormJsonRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiteralsToLaunchFormJsonRequestMultiError) AllErrors() []error { return m }

// LiteralsToLaunchFormJsonRequestValidationError is the validation error
// returned by LiteralsToLaunchFormJsonRequest.Validate if the designated
// constraints aren't met.
type LiteralsToLaunchFormJsonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiteralsToLaunchFormJsonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiteralsToLaunchFormJsonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiteralsToLaunchFormJsonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiteralsToLaunchFormJsonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiteralsToLaunchFormJsonRequestValidationError) ErrorName() string {
	return "LiteralsToLaunchFormJsonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LiteralsToLaunchFormJsonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiteralsToLaunchFormJsonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiteralsToLaunchFormJsonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiteralsToLaunchFormJsonRequestValidationError{}

// Validate checks the field values on LiteralsToLaunchFormJsonResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LiteralsToLaunchFormJsonResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LiteralsToLaunchFormJsonResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LiteralsToLaunchFormJsonResponseMultiError, or nil if none found.
func (m *LiteralsToLaunchFormJsonResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LiteralsToLaunchFormJsonResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJson()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LiteralsToLaunchFormJsonResponseValidationError{
					field:  "Json",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LiteralsToLaunchFormJsonResponseValidationError{
					field:  "Json",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJson()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LiteralsToLaunchFormJsonResponseValidationError{
				field:  "Json",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LiteralsToLaunchFormJsonResponseMultiError(errors)
	}

	return nil
}

// LiteralsToLaunchFormJsonResponseMultiError is an error wrapping multiple
// validation errors returned by
// LiteralsToLaunchFormJsonResponse.ValidateAll() if the designated
// constraints aren't met.
type LiteralsToLaunchFormJsonResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiteralsToLaunchFormJsonResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiteralsToLaunchFormJsonResponseMultiError) AllErrors() []error { return m }

// LiteralsToLaunchFormJsonResponseValidationError is the validation error
// returned by LiteralsToLaunchFormJsonResponse.Validate if the designated
// constraints aren't met.
type LiteralsToLaunchFormJsonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiteralsToLaunchFormJsonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiteralsToLaunchFormJsonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiteralsToLaunchFormJsonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiteralsToLaunchFormJsonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiteralsToLaunchFormJsonResponseValidationError) ErrorName() string {
	return "LiteralsToLaunchFormJsonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LiteralsToLaunchFormJsonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiteralsToLaunchFormJsonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiteralsToLaunchFormJsonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiteralsToLaunchFormJsonResponseValidationError{}

// Validate checks the field values on LaunchFormJsonToLiteralsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LaunchFormJsonToLiteralsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LaunchFormJsonToLiteralsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LaunchFormJsonToLiteralsRequestMultiError, or nil if none found.
func (m *LaunchFormJsonToLiteralsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LaunchFormJsonToLiteralsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJson()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LaunchFormJsonToLiteralsRequestValidationError{
					field:  "Json",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LaunchFormJsonToLiteralsRequestValidationError{
					field:  "Json",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJson()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LaunchFormJsonToLiteralsRequestValidationError{
				field:  "Json",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LaunchFormJsonToLiteralsRequestMultiError(errors)
	}

	return nil
}

// LaunchFormJsonToLiteralsRequestMultiError is an error wrapping multiple
// validation errors returned by LaunchFormJsonToLiteralsRequest.ValidateAll()
// if the designated constraints aren't met.
type LaunchFormJsonToLiteralsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LaunchFormJsonToLiteralsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LaunchFormJsonToLiteralsRequestMultiError) AllErrors() []error { return m }

// LaunchFormJsonToLiteralsRequestValidationError is the validation error
// returned by LaunchFormJsonToLiteralsRequest.Validate if the designated
// constraints aren't met.
type LaunchFormJsonToLiteralsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LaunchFormJsonToLiteralsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LaunchFormJsonToLiteralsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LaunchFormJsonToLiteralsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LaunchFormJsonToLiteralsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LaunchFormJsonToLiteralsRequestValidationError) ErrorName() string {
	return "LaunchFormJsonToLiteralsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LaunchFormJsonToLiteralsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLaunchFormJsonToLiteralsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LaunchFormJsonToLiteralsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LaunchFormJsonToLiteralsRequestValidationError{}

// Validate checks the field values on LaunchFormJsonToLiteralsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LaunchFormJsonToLiteralsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LaunchFormJsonToLiteralsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LaunchFormJsonToLiteralsResponseMultiError, or nil if none found.
func (m *LaunchFormJsonToLiteralsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LaunchFormJsonToLiteralsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLiterals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LaunchFormJsonToLiteralsResponseValidationError{
						field:  fmt.Sprintf("Literals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LaunchFormJsonToLiteralsResponseValidationError{
						field:  fmt.Sprintf("Literals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LaunchFormJsonToLiteralsResponseValidationError{
					field:  fmt.Sprintf("Literals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LaunchFormJsonToLiteralsResponseMultiError(errors)
	}

	return nil
}

// LaunchFormJsonToLiteralsResponseMultiError is an error wrapping multiple
// validation errors returned by
// LaunchFormJsonToLiteralsResponse.ValidateAll() if the designated
// constraints aren't met.
type LaunchFormJsonToLiteralsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LaunchFormJsonToLiteralsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LaunchFormJsonToLiteralsResponseMultiError) AllErrors() []error { return m }

// LaunchFormJsonToLiteralsResponseValidationError is the validation error
// returned by LaunchFormJsonToLiteralsResponse.Validate if the designated
// constraints aren't met.
type LaunchFormJsonToLiteralsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LaunchFormJsonToLiteralsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LaunchFormJsonToLiteralsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LaunchFormJsonToLiteralsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LaunchFormJsonToLiteralsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LaunchFormJsonToLiteralsResponseValidationError) ErrorName() string {
	return "LaunchFormJsonToLiteralsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LaunchFormJsonToLiteralsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLaunchFormJsonToLiteralsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LaunchFormJsonToLiteralsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LaunchFormJsonToLiteralsResponseValidationError{}

// Validate checks the field values on TaskSpecToLaunchFormJsonRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskSpecToLaunchFormJsonRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskSpecToLaunchFormJsonRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TaskSpecToLaunchFormJsonRequestMultiError, or nil if none found.
func (m *TaskSpecToLaunchFormJsonRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskSpecToLaunchFormJsonRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaskSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskSpecToLaunchFormJsonRequestValidationError{
					field:  "TaskSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskSpecToLaunchFormJsonRequestValidationError{
					field:  "TaskSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskSpecToLaunchFormJsonRequestValidationError{
				field:  "TaskSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskSpecToLaunchFormJsonRequestMultiError(errors)
	}

	return nil
}

// TaskSpecToLaunchFormJsonRequestMultiError is an error wrapping multiple
// validation errors returned by TaskSpecToLaunchFormJsonRequest.ValidateAll()
// if the designated constraints aren't met.
type TaskSpecToLaunchFormJsonRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskSpecToLaunchFormJsonRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskSpecToLaunchFormJsonRequestMultiError) AllErrors() []error { return m }

// TaskSpecToLaunchFormJsonRequestValidationError is the validation error
// returned by TaskSpecToLaunchFormJsonRequest.Validate if the designated
// constraints aren't met.
type TaskSpecToLaunchFormJsonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskSpecToLaunchFormJsonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskSpecToLaunchFormJsonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskSpecToLaunchFormJsonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskSpecToLaunchFormJsonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskSpecToLaunchFormJsonRequestValidationError) ErrorName() string {
	return "TaskSpecToLaunchFormJsonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskSpecToLaunchFormJsonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskSpecToLaunchFormJsonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskSpecToLaunchFormJsonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskSpecToLaunchFormJsonRequestValidationError{}

// Validate checks the field values on TaskSpecToLaunchFormJsonResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TaskSpecToLaunchFormJsonResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskSpecToLaunchFormJsonResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TaskSpecToLaunchFormJsonResponseMultiError, or nil if none found.
func (m *TaskSpecToLaunchFormJsonResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskSpecToLaunchFormJsonResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJson()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskSpecToLaunchFormJsonResponseValidationError{
					field:  "Json",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskSpecToLaunchFormJsonResponseValidationError{
					field:  "Json",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJson()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskSpecToLaunchFormJsonResponseValidationError{
				field:  "Json",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskSpecToLaunchFormJsonResponseMultiError(errors)
	}

	return nil
}

// TaskSpecToLaunchFormJsonResponseMultiError is an error wrapping multiple
// validation errors returned by
// TaskSpecToLaunchFormJsonResponse.ValidateAll() if the designated
// constraints aren't met.
type TaskSpecToLaunchFormJsonResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskSpecToLaunchFormJsonResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskSpecToLaunchFormJsonResponseMultiError) AllErrors() []error { return m }

// TaskSpecToLaunchFormJsonResponseValidationError is the validation error
// returned by TaskSpecToLaunchFormJsonResponse.Validate if the designated
// constraints aren't met.
type TaskSpecToLaunchFormJsonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskSpecToLaunchFormJsonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskSpecToLaunchFormJsonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskSpecToLaunchFormJsonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskSpecToLaunchFormJsonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskSpecToLaunchFormJsonResponseValidationError) ErrorName() string {
	return "TaskSpecToLaunchFormJsonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskSpecToLaunchFormJsonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskSpecToLaunchFormJsonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskSpecToLaunchFormJsonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskSpecToLaunchFormJsonResponseValidationError{}
