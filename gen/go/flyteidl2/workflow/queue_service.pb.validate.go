// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/workflow/queue_service.proto

package workflow

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EnqueueActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnqueueActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnqueueActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnqueueActionRequestMultiError, or nil if none found.
func (m *EnqueueActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnqueueActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnqueueActionRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnqueueActionRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnqueueActionRequestValidationError{
				field:  "ActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRunSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnqueueActionRequestValidationError{
					field:  "RunSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnqueueActionRequestValidationError{
					field:  "RunSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnqueueActionRequestValidationError{
				field:  "RunSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InputUri

	// no validation rules for RunOutputBase

	// no validation rules for Group

	// no validation rules for Subject

	switch v := m.Spec.(type) {
	case *EnqueueActionRequest_Task:
		if v == nil {
			err := EnqueueActionRequestValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTask()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnqueueActionRequestValidationError{
						field:  "Task",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnqueueActionRequestValidationError{
						field:  "Task",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnqueueActionRequestValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnqueueActionRequest_Trace:
		if v == nil {
			err := EnqueueActionRequestValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTrace()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnqueueActionRequestValidationError{
						field:  "Trace",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnqueueActionRequestValidationError{
						field:  "Trace",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTrace()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnqueueActionRequestValidationError{
					field:  "Trace",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EnqueueActionRequest_Condition:
		if v == nil {
			err := EnqueueActionRequestValidationError{
				field:  "Spec",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCondition()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnqueueActionRequestValidationError{
						field:  "Condition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnqueueActionRequestValidationError{
						field:  "Condition",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCondition()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnqueueActionRequestValidationError{
					field:  "Condition",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.ParentActionName != nil {
		// no validation rules for ParentActionName
	}

	if len(errors) > 0 {
		return EnqueueActionRequestMultiError(errors)
	}

	return nil
}

// EnqueueActionRequestMultiError is an error wrapping multiple validation
// errors returned by EnqueueActionRequest.ValidateAll() if the designated
// constraints aren't met.
type EnqueueActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnqueueActionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnqueueActionRequestMultiError) AllErrors() []error { return m }

// EnqueueActionRequestValidationError is the validation error returned by
// EnqueueActionRequest.Validate if the designated constraints aren't met.
type EnqueueActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnqueueActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnqueueActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnqueueActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnqueueActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnqueueActionRequestValidationError) ErrorName() string {
	return "EnqueueActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnqueueActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnqueueActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnqueueActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnqueueActionRequestValidationError{}

// Validate checks the field values on EnqueueActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnqueueActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnqueueActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnqueueActionResponseMultiError, or nil if none found.
func (m *EnqueueActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnqueueActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnqueueActionResponseMultiError(errors)
	}

	return nil
}

// EnqueueActionResponseMultiError is an error wrapping multiple validation
// errors returned by EnqueueActionResponse.ValidateAll() if the designated
// constraints aren't met.
type EnqueueActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnqueueActionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnqueueActionResponseMultiError) AllErrors() []error { return m }

// EnqueueActionResponseValidationError is the validation error returned by
// EnqueueActionResponse.Validate if the designated constraints aren't met.
type EnqueueActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnqueueActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnqueueActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnqueueActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnqueueActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnqueueActionResponseValidationError) ErrorName() string {
	return "EnqueueActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnqueueActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnqueueActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnqueueActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnqueueActionResponseValidationError{}

// Validate checks the field values on AbortQueuedRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AbortQueuedRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AbortQueuedRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AbortQueuedRunRequestMultiError, or nil if none found.
func (m *AbortQueuedRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AbortQueuedRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AbortQueuedRunRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AbortQueuedRunRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbortQueuedRunRequestValidationError{
				field:  "RunId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Reason != nil {
		// no validation rules for Reason
	}

	if len(errors) > 0 {
		return AbortQueuedRunRequestMultiError(errors)
	}

	return nil
}

// AbortQueuedRunRequestMultiError is an error wrapping multiple validation
// errors returned by AbortQueuedRunRequest.ValidateAll() if the designated
// constraints aren't met.
type AbortQueuedRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbortQueuedRunRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbortQueuedRunRequestMultiError) AllErrors() []error { return m }

// AbortQueuedRunRequestValidationError is the validation error returned by
// AbortQueuedRunRequest.Validate if the designated constraints aren't met.
type AbortQueuedRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbortQueuedRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbortQueuedRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbortQueuedRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbortQueuedRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbortQueuedRunRequestValidationError) ErrorName() string {
	return "AbortQueuedRunRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AbortQueuedRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbortQueuedRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbortQueuedRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbortQueuedRunRequestValidationError{}

// Validate checks the field values on AbortQueuedRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AbortQueuedRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AbortQueuedRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AbortQueuedRunResponseMultiError, or nil if none found.
func (m *AbortQueuedRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AbortQueuedRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AbortQueuedRunResponseMultiError(errors)
	}

	return nil
}

// AbortQueuedRunResponseMultiError is an error wrapping multiple validation
// errors returned by AbortQueuedRunResponse.ValidateAll() if the designated
// constraints aren't met.
type AbortQueuedRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbortQueuedRunResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbortQueuedRunResponseMultiError) AllErrors() []error { return m }

// AbortQueuedRunResponseValidationError is the validation error returned by
// AbortQueuedRunResponse.Validate if the designated constraints aren't met.
type AbortQueuedRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbortQueuedRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbortQueuedRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbortQueuedRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbortQueuedRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbortQueuedRunResponseValidationError) ErrorName() string {
	return "AbortQueuedRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AbortQueuedRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbortQueuedRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbortQueuedRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbortQueuedRunResponseValidationError{}

// Validate checks the field values on AbortQueuedActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AbortQueuedActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AbortQueuedActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AbortQueuedActionRequestMultiError, or nil if none found.
func (m *AbortQueuedActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AbortQueuedActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AbortQueuedActionRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AbortQueuedActionRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbortQueuedActionRequestValidationError{
				field:  "ActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Reason != nil {
		// no validation rules for Reason
	}

	if len(errors) > 0 {
		return AbortQueuedActionRequestMultiError(errors)
	}

	return nil
}

// AbortQueuedActionRequestMultiError is an error wrapping multiple validation
// errors returned by AbortQueuedActionRequest.ValidateAll() if the designated
// constraints aren't met.
type AbortQueuedActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbortQueuedActionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbortQueuedActionRequestMultiError) AllErrors() []error { return m }

// AbortQueuedActionRequestValidationError is the validation error returned by
// AbortQueuedActionRequest.Validate if the designated constraints aren't met.
type AbortQueuedActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbortQueuedActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbortQueuedActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbortQueuedActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbortQueuedActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbortQueuedActionRequestValidationError) ErrorName() string {
	return "AbortQueuedActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AbortQueuedActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbortQueuedActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbortQueuedActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbortQueuedActionRequestValidationError{}

// Validate checks the field values on AbortQueuedActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AbortQueuedActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AbortQueuedActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AbortQueuedActionResponseMultiError, or nil if none found.
func (m *AbortQueuedActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AbortQueuedActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AbortQueuedActionResponseMultiError(errors)
	}

	return nil
}

// AbortQueuedActionResponseMultiError is an error wrapping multiple validation
// errors returned by AbortQueuedActionResponse.ValidateAll() if the
// designated constraints aren't met.
type AbortQueuedActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbortQueuedActionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbortQueuedActionResponseMultiError) AllErrors() []error { return m }

// AbortQueuedActionResponseValidationError is the validation error returned by
// AbortQueuedActionResponse.Validate if the designated constraints aren't met.
type AbortQueuedActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbortQueuedActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbortQueuedActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbortQueuedActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbortQueuedActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbortQueuedActionResponseValidationError) ErrorName() string {
	return "AbortQueuedActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AbortQueuedActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbortQueuedActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbortQueuedActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbortQueuedActionResponseValidationError{}
