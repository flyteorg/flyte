// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl2/workflow/run_service.proto

package workflow

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	common "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/common"
	task "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/task"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for creating a run.
type CreateRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*CreateRunRequest_RunId
	//	*CreateRunRequest_ProjectId
	Id isCreateRunRequest_Id `protobuf_oneof:"id"`
	// The task to run.
	//
	// Types that are assignable to Task:
	//
	//	*CreateRunRequest_TaskId
	//	*CreateRunRequest_TaskSpec
	//	*CreateRunRequest_TriggerName
	Task isCreateRunRequest_Task `protobuf_oneof:"task"`
	// Inputs to use.
	Inputs *task.Inputs `protobuf:"bytes,4,opt,name=inputs,proto3" json:"inputs,omitempty"`
	// The run spec to use.
	RunSpec *task.RunSpec `protobuf:"bytes,5,opt,name=run_spec,json=runSpec,proto3" json:"run_spec,omitempty"`
	// Indicates client that created this run.
	Source RunSource `protobuf:"varint,8,opt,name=source,proto3,enum=flyteidl2.workflow.RunSource" json:"source,omitempty"`
}

func (x *CreateRunRequest) Reset() {
	*x = CreateRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunRequest) ProtoMessage() {}

func (x *CreateRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunRequest.ProtoReflect.Descriptor instead.
func (*CreateRunRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{0}
}

func (m *CreateRunRequest) GetId() isCreateRunRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *CreateRunRequest) GetRunId() *common.RunIdentifier {
	if x, ok := x.GetId().(*CreateRunRequest_RunId); ok {
		return x.RunId
	}
	return nil
}

func (x *CreateRunRequest) GetProjectId() *common.ProjectIdentifier {
	if x, ok := x.GetId().(*CreateRunRequest_ProjectId); ok {
		return x.ProjectId
	}
	return nil
}

func (m *CreateRunRequest) GetTask() isCreateRunRequest_Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (x *CreateRunRequest) GetTaskId() *task.TaskIdentifier {
	if x, ok := x.GetTask().(*CreateRunRequest_TaskId); ok {
		return x.TaskId
	}
	return nil
}

func (x *CreateRunRequest) GetTaskSpec() *task.TaskSpec {
	if x, ok := x.GetTask().(*CreateRunRequest_TaskSpec); ok {
		return x.TaskSpec
	}
	return nil
}

func (x *CreateRunRequest) GetTriggerName() *common.TriggerName {
	if x, ok := x.GetTask().(*CreateRunRequest_TriggerName); ok {
		return x.TriggerName
	}
	return nil
}

func (x *CreateRunRequest) GetInputs() *task.Inputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *CreateRunRequest) GetRunSpec() *task.RunSpec {
	if x != nil {
		return x.RunSpec
	}
	return nil
}

func (x *CreateRunRequest) GetSource() RunSource {
	if x != nil {
		return x.Source
	}
	return RunSource_RUN_SOURCE_UNSPECIFIED
}

type isCreateRunRequest_Id interface {
	isCreateRunRequest_Id()
}

type CreateRunRequest_RunId struct {
	// The user provided run id.
	RunId *common.RunIdentifier `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3,oneof"`
}

type CreateRunRequest_ProjectId struct {
	// The project id for this run. Run name will be generated.
	ProjectId *common.ProjectIdentifier `protobuf:"bytes,6,opt,name=project_id,json=projectId,proto3,oneof"`
}

func (*CreateRunRequest_RunId) isCreateRunRequest_Id() {}

func (*CreateRunRequest_ProjectId) isCreateRunRequest_Id() {}

type isCreateRunRequest_Task interface {
	isCreateRunRequest_Task()
}

type CreateRunRequest_TaskId struct {
	// The task id to use.
	TaskId *task.TaskIdentifier `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3,oneof"`
}

type CreateRunRequest_TaskSpec struct {
	// The task spec to use.
	TaskSpec *task.TaskSpec `protobuf:"bytes,3,opt,name=task_spec,json=taskSpec,proto3,oneof"`
}

type CreateRunRequest_TriggerName struct {
	// The trigger name to use.
	TriggerName *common.TriggerName `protobuf:"bytes,7,opt,name=trigger_name,json=triggerName,proto3,oneof"`
}

func (*CreateRunRequest_TaskId) isCreateRunRequest_Task() {}

func (*CreateRunRequest_TaskSpec) isCreateRunRequest_Task() {}

func (*CreateRunRequest_TriggerName) isCreateRunRequest_Task() {}

// Response message for creating a run.
type CreateRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Run *Run `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
}

func (x *CreateRunResponse) Reset() {
	*x = CreateRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunResponse) ProtoMessage() {}

func (x *CreateRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunResponse.ProtoReflect.Descriptor instead.
func (*CreateRunResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRunResponse) GetRun() *Run {
	if x != nil {
		return x.Run
	}
	return nil
}

// Request message for aborting a run.
type AbortRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run to abort.
	RunId *common.RunIdentifier `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Reason for aborting the run. if applicable.
	Reason *string `protobuf:"bytes,2,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
}

func (x *AbortRunRequest) Reset() {
	*x = AbortRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortRunRequest) ProtoMessage() {}

func (x *AbortRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortRunRequest.ProtoReflect.Descriptor instead.
func (*AbortRunRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{2}
}

func (x *AbortRunRequest) GetRunId() *common.RunIdentifier {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *AbortRunRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

// Response message for aborting a run.
type AbortRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AbortRunResponse) Reset() {
	*x = AbortRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortRunResponse) ProtoMessage() {}

func (x *AbortRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortRunResponse.ProtoReflect.Descriptor instead.
func (*AbortRunResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{3}
}

// Request message for getting detailed information about a run.
type GetRunDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run to query.
	RunId *common.RunIdentifier `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *GetRunDetailsRequest) Reset() {
	*x = GetRunDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunDetailsRequest) ProtoMessage() {}

func (x *GetRunDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetRunDetailsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetRunDetailsRequest) GetRunId() *common.RunIdentifier {
	if x != nil {
		return x.RunId
	}
	return nil
}

// Response message for getting detailed information about a run.
type GetRunDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Detailed information about the run.
	Details *RunDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *GetRunDetailsResponse) Reset() {
	*x = GetRunDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunDetailsResponse) ProtoMessage() {}

func (x *GetRunDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetRunDetailsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetRunDetailsResponse) GetDetails() *RunDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// Request message for watching detailed information about a run.
type WatchRunDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run to query.
	RunId *common.RunIdentifier `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *WatchRunDetailsRequest) Reset() {
	*x = WatchRunDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRunDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRunDetailsRequest) ProtoMessage() {}

func (x *WatchRunDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRunDetailsRequest.ProtoReflect.Descriptor instead.
func (*WatchRunDetailsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{6}
}

func (x *WatchRunDetailsRequest) GetRunId() *common.RunIdentifier {
	if x != nil {
		return x.RunId
	}
	return nil
}

// Response message for watching detailed information about a run.
type WatchRunDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Detailed information about the run.
	Details *RunDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *WatchRunDetailsResponse) Reset() {
	*x = WatchRunDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRunDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRunDetailsResponse) ProtoMessage() {}

func (x *WatchRunDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRunDetailsResponse.ProtoReflect.Descriptor instead.
func (*WatchRunDetailsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{7}
}

func (x *WatchRunDetailsResponse) GetDetails() *RunDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// Request message for getting detailed information about an action.
type GetActionDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action to query.
	ActionId *common.ActionIdentifier `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *GetActionDetailsRequest) Reset() {
	*x = GetActionDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActionDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionDetailsRequest) ProtoMessage() {}

func (x *GetActionDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetActionDetailsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetActionDetailsRequest) GetActionId() *common.ActionIdentifier {
	if x != nil {
		return x.ActionId
	}
	return nil
}

// Response message for getting detailed information about an action.
type GetActionDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Detailed information about the action.
	Details *ActionDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *GetActionDetailsResponse) Reset() {
	*x = GetActionDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActionDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionDetailsResponse) ProtoMessage() {}

func (x *GetActionDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetActionDetailsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetActionDetailsResponse) GetDetails() *ActionDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// Request message for watching detailed information about an action.
type WatchActionDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action to query.
	ActionId *common.ActionIdentifier `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *WatchActionDetailsRequest) Reset() {
	*x = WatchActionDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchActionDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchActionDetailsRequest) ProtoMessage() {}

func (x *WatchActionDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchActionDetailsRequest.ProtoReflect.Descriptor instead.
func (*WatchActionDetailsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{10}
}

func (x *WatchActionDetailsRequest) GetActionId() *common.ActionIdentifier {
	if x != nil {
		return x.ActionId
	}
	return nil
}

// Response message for watching detailed information about an action.
type WatchActionDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Detailed information about the action.
	Details *ActionDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *WatchActionDetailsResponse) Reset() {
	*x = WatchActionDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchActionDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchActionDetailsResponse) ProtoMessage() {}

func (x *WatchActionDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchActionDetailsResponse.ProtoReflect.Descriptor instead.
func (*WatchActionDetailsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{11}
}

func (x *WatchActionDetailsResponse) GetDetails() *ActionDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// Request message for querying action data.
type GetActionDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action to query.
	ActionId *common.ActionIdentifier `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
}

func (x *GetActionDataRequest) Reset() {
	*x = GetActionDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActionDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionDataRequest) ProtoMessage() {}

func (x *GetActionDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionDataRequest.ProtoReflect.Descriptor instead.
func (*GetActionDataRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetActionDataRequest) GetActionId() *common.ActionIdentifier {
	if x != nil {
		return x.ActionId
	}
	return nil
}

// Response message for querying action data.
type GetActionDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inputs for the action.
	Inputs *task.Inputs `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	// Outputs for the action.
	Outputs *task.Outputs `protobuf:"bytes,2,opt,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *GetActionDataResponse) Reset() {
	*x = GetActionDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActionDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionDataResponse) ProtoMessage() {}

func (x *GetActionDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionDataResponse.ProtoReflect.Descriptor instead.
func (*GetActionDataResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetActionDataResponse) GetInputs() *task.Inputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *GetActionDataResponse) GetOutputs() *task.Outputs {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// Request message for listing runs.
type ListRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common list request parameters.
	Request *common.ListRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Types that are assignable to ScopeBy:
	//
	//	*ListRunsRequest_Org
	//	*ListRunsRequest_ProjectId
	//	*ListRunsRequest_TriggerName
	ScopeBy isListRunsRequest_ScopeBy `protobuf_oneof:"scope_by"`
}

func (x *ListRunsRequest) Reset() {
	*x = ListRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsRequest) ProtoMessage() {}

func (x *ListRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsRequest.ProtoReflect.Descriptor instead.
func (*ListRunsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListRunsRequest) GetRequest() *common.ListRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (m *ListRunsRequest) GetScopeBy() isListRunsRequest_ScopeBy {
	if m != nil {
		return m.ScopeBy
	}
	return nil
}

func (x *ListRunsRequest) GetOrg() string {
	if x, ok := x.GetScopeBy().(*ListRunsRequest_Org); ok {
		return x.Org
	}
	return ""
}

func (x *ListRunsRequest) GetProjectId() *common.ProjectIdentifier {
	if x, ok := x.GetScopeBy().(*ListRunsRequest_ProjectId); ok {
		return x.ProjectId
	}
	return nil
}

func (x *ListRunsRequest) GetTriggerName() *common.TriggerName {
	if x, ok := x.GetScopeBy().(*ListRunsRequest_TriggerName); ok {
		return x.TriggerName
	}
	return nil
}

type isListRunsRequest_ScopeBy interface {
	isListRunsRequest_ScopeBy()
}

type ListRunsRequest_Org struct {
	// Organization name for filtering runs.
	Org string `protobuf:"bytes,2,opt,name=org,proto3,oneof"`
}

type ListRunsRequest_ProjectId struct {
	// Project identifier for filtering runs.
	ProjectId *common.ProjectIdentifier `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3,oneof"`
}

type ListRunsRequest_TriggerName struct {
	// List runs created from a trigger.
	TriggerName *common.TriggerName `protobuf:"bytes,6,opt,name=trigger_name,json=triggerName,proto3,oneof"`
}

func (*ListRunsRequest_Org) isListRunsRequest_ScopeBy() {}

func (*ListRunsRequest_ProjectId) isListRunsRequest_ScopeBy() {}

func (*ListRunsRequest_TriggerName) isListRunsRequest_ScopeBy() {}

// Response message for listing runs.
type ListRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of runs matching the filter criteria.
	Runs []*Run `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	// Token for fetching the next page of results, if any.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListRunsResponse) Reset() {
	*x = ListRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsResponse) ProtoMessage() {}

func (x *ListRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsResponse.ProtoReflect.Descriptor instead.
func (*ListRunsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListRunsResponse) GetRuns() []*Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *ListRunsResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Request message for watching runs.
type WatchRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*WatchRunsRequest_Org
	//	*WatchRunsRequest_ClusterId
	//	*WatchRunsRequest_ProjectId
	//	*WatchRunsRequest_TaskId
	Target isWatchRunsRequest_Target `protobuf_oneof:"target"`
}

func (x *WatchRunsRequest) Reset() {
	*x = WatchRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRunsRequest) ProtoMessage() {}

func (x *WatchRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRunsRequest.ProtoReflect.Descriptor instead.
func (*WatchRunsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{16}
}

func (m *WatchRunsRequest) GetTarget() isWatchRunsRequest_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *WatchRunsRequest) GetOrg() string {
	if x, ok := x.GetTarget().(*WatchRunsRequest_Org); ok {
		return x.Org
	}
	return ""
}

func (x *WatchRunsRequest) GetClusterId() *common.ClusterIdentifier {
	if x, ok := x.GetTarget().(*WatchRunsRequest_ClusterId); ok {
		return x.ClusterId
	}
	return nil
}

func (x *WatchRunsRequest) GetProjectId() *common.ProjectIdentifier {
	if x, ok := x.GetTarget().(*WatchRunsRequest_ProjectId); ok {
		return x.ProjectId
	}
	return nil
}

func (x *WatchRunsRequest) GetTaskId() *task.TaskIdentifier {
	if x, ok := x.GetTarget().(*WatchRunsRequest_TaskId); ok {
		return x.TaskId
	}
	return nil
}

type isWatchRunsRequest_Target interface {
	isWatchRunsRequest_Target()
}

type WatchRunsRequest_Org struct {
	// Organization name for filtering runs.
	Org string `protobuf:"bytes,2,opt,name=org,proto3,oneof"`
}

type WatchRunsRequest_ClusterId struct {
	// Cluster identifier for filtering runs.
	ClusterId *common.ClusterIdentifier `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3,oneof"`
}

type WatchRunsRequest_ProjectId struct {
	// Project identifier for filtering runs.
	ProjectId *common.ProjectIdentifier `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3,oneof"`
}

type WatchRunsRequest_TaskId struct {
	// Task identifier for filtering runs.
	TaskId *task.TaskIdentifier `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3,oneof"`
}

func (*WatchRunsRequest_Org) isWatchRunsRequest_Target() {}

func (*WatchRunsRequest_ClusterId) isWatchRunsRequest_Target() {}

func (*WatchRunsRequest_ProjectId) isWatchRunsRequest_Target() {}

func (*WatchRunsRequest_TaskId) isWatchRunsRequest_Target() {}

// Response message for watching runs.
type WatchRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New or updated runs matching the filter criteria.
	Runs []*Run `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *WatchRunsResponse) Reset() {
	*x = WatchRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRunsResponse) ProtoMessage() {}

func (x *WatchRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRunsResponse.ProtoReflect.Descriptor instead.
func (*WatchRunsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{17}
}

func (x *WatchRunsResponse) GetRuns() []*Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

// Request message for listing actions.
type ListActionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common list request parameters.
	Request *common.ListRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Run identifier for filtering actions.
	RunId *common.RunIdentifier `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *ListActionsRequest) Reset() {
	*x = ListActionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActionsRequest) ProtoMessage() {}

func (x *ListActionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActionsRequest.ProtoReflect.Descriptor instead.
func (*ListActionsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListActionsRequest) GetRequest() *common.ListRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ListActionsRequest) GetRunId() *common.RunIdentifier {
	if x != nil {
		return x.RunId
	}
	return nil
}

// Response message for listing actions.
type ListActionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of actions matching the filter criteria.
	Actions []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	// Token for fetching the next page of results, if any.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListActionsResponse) Reset() {
	*x = ListActionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActionsResponse) ProtoMessage() {}

func (x *ListActionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActionsResponse.ProtoReflect.Descriptor instead.
func (*ListActionsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{19}
}

func (x *ListActionsResponse) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ListActionsResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Request message for watching actions.
type WatchActionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run identifier for filtering actions.
	RunId *common.RunIdentifier `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Optional filter(s) criteria for actions.
	// Valid filter fields include:
	// - NAME (must use function CONTAINS_CASE_INSENSITIVE): the value is whatever string to match to. This will cast all strings to lowercase and match.
	// - PHASE (must use function VALUE_IN): the value is the stringified integer of the enum of the phase and you can pass multiple phases (i.e. ["1", "4"])
	Filter []*common.Filter `protobuf:"bytes,2,rep,name=filter,proto3" json:"filter,omitempty"`
}

func (x *WatchActionsRequest) Reset() {
	*x = WatchActionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchActionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchActionsRequest) ProtoMessage() {}

func (x *WatchActionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchActionsRequest.ProtoReflect.Descriptor instead.
func (*WatchActionsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{20}
}

func (x *WatchActionsRequest) GetRunId() *common.RunIdentifier {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *WatchActionsRequest) GetFilter() []*common.Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Response message for watching actions, comes with enriched action metadata.
type WatchActionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New or updated actions matching the filter criteria. Enriched with children status counts
	EnrichedActions []*EnrichedAction `protobuf:"bytes,1,rep,name=enriched_actions,json=enrichedActions,proto3" json:"enriched_actions,omitempty"`
}

func (x *WatchActionsResponse) Reset() {
	*x = WatchActionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchActionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchActionsResponse) ProtoMessage() {}

func (x *WatchActionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchActionsResponse.ProtoReflect.Descriptor instead.
func (*WatchActionsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{21}
}

func (x *WatchActionsResponse) GetEnrichedActions() []*EnrichedAction {
	if x != nil {
		return x.EnrichedActions
	}
	return nil
}

type WatchClusterEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *common.ActionIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attempt uint32                   `protobuf:"varint,2,opt,name=attempt,proto3" json:"attempt,omitempty"`
}

func (x *WatchClusterEventsRequest) Reset() {
	*x = WatchClusterEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchClusterEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchClusterEventsRequest) ProtoMessage() {}

func (x *WatchClusterEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchClusterEventsRequest.ProtoReflect.Descriptor instead.
func (*WatchClusterEventsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{22}
}

func (x *WatchClusterEventsRequest) GetId() *common.ActionIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *WatchClusterEventsRequest) GetAttempt() uint32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

type WatchClusterEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterEvents []*ClusterEvent `protobuf:"bytes,1,rep,name=cluster_events,json=clusterEvents,proto3" json:"cluster_events,omitempty"`
}

func (x *WatchClusterEventsResponse) Reset() {
	*x = WatchClusterEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchClusterEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchClusterEventsResponse) ProtoMessage() {}

func (x *WatchClusterEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchClusterEventsResponse.ProtoReflect.Descriptor instead.
func (*WatchClusterEventsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{23}
}

func (x *WatchClusterEventsResponse) GetClusterEvents() []*ClusterEvent {
	if x != nil {
		return x.ClusterEvents
	}
	return nil
}

type AbortActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action to abort.
	ActionId *common.ActionIdentifier `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// Optional reason for aborting the action.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AbortActionRequest) Reset() {
	*x = AbortActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortActionRequest) ProtoMessage() {}

func (x *AbortActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortActionRequest.ProtoReflect.Descriptor instead.
func (*AbortActionRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{24}
}

func (x *AbortActionRequest) GetActionId() *common.ActionIdentifier {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *AbortActionRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AbortActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AbortActionResponse) Reset() {
	*x = AbortActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortActionResponse) ProtoMessage() {}

func (x *AbortActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortActionResponse.ProtoReflect.Descriptor instead.
func (*AbortActionResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{25}
}

type WatchGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ScopeBy:
	//
	//	*WatchGroupsRequest_ProjectId
	ScopeBy isWatchGroupsRequest_ScopeBy `protobuf_oneof:"scope_by"`
	// Filter groups after this date (inclusive). Required.
	StartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Filter groups before this date (inclusive).
	// If null, will stream updates up to current time.
	// If not null, will return groups once and close stream.
	EndDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Common list request parameters.
	Request *common.ListRequest `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *WatchGroupsRequest) Reset() {
	*x = WatchGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchGroupsRequest) ProtoMessage() {}

func (x *WatchGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchGroupsRequest.ProtoReflect.Descriptor instead.
func (*WatchGroupsRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{26}
}

func (m *WatchGroupsRequest) GetScopeBy() isWatchGroupsRequest_ScopeBy {
	if m != nil {
		return m.ScopeBy
	}
	return nil
}

func (x *WatchGroupsRequest) GetProjectId() *common.ProjectIdentifier {
	if x, ok := x.GetScopeBy().(*WatchGroupsRequest_ProjectId); ok {
		return x.ProjectId
	}
	return nil
}

func (x *WatchGroupsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *WatchGroupsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *WatchGroupsRequest) GetRequest() *common.ListRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type isWatchGroupsRequest_ScopeBy interface {
	isWatchGroupsRequest_ScopeBy()
}

type WatchGroupsRequest_ProjectId struct {
	// Watch groups within a project.
	ProjectId *common.ProjectIdentifier `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3,oneof"`
}

func (*WatchGroupsRequest_ProjectId) isWatchGroupsRequest_ScopeBy() {}

// Response message for watching task groups.
type WatchGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of task groups matching the filter criteria.
	// For the initial response, this contains all groups.
	// For subsequent updates, this contains only changed groups.
	TaskGroups []*TaskGroup `protobuf:"bytes,1,rep,name=task_groups,json=taskGroups,proto3" json:"task_groups,omitempty"`
	// Indicates when the initial List call is complete, and subsequent messages are updates.
	Sentinel bool `protobuf:"varint,2,opt,name=sentinel,proto3" json:"sentinel,omitempty"`
}

func (x *WatchGroupsResponse) Reset() {
	*x = WatchGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchGroupsResponse) ProtoMessage() {}

func (x *WatchGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchGroupsResponse.ProtoReflect.Descriptor instead.
func (*WatchGroupsResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_service_proto_rawDescGZIP(), []int{27}
}

func (x *WatchGroupsResponse) GetTaskGroups() []*TaskGroup {
	if x != nil {
		return x.TaskGroups
	}
	return nil
}

func (x *WatchGroupsResponse) GetSentinel() bool {
	if x != nil {
		return x.Sentinel
	}
	return false
}

var File_flyteidl2_workflow_run_service_proto protoreflect.FileDescriptor

var file_flyteidl2_workflow_run_service_proto_rawDesc = []byte{
	0x0a, 0x24, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x2f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81,
	0x04, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x48, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x48, 0x01, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x01, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x72,
	0x75, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52,
	0x75, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x05, 0xba, 0x48,
	0x02, 0x08, 0x01, 0x42, 0x0d, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x05, 0xba, 0x48, 0x02,
	0x08, 0x01, 0x22, 0x3e, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x03, 0x72,
	0x75, 0x6e, 0x22, 0x79, 0x0a, 0x0f, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x12, 0x0a,
	0x10, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x56, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x58, 0x0a, 0x16,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x62, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x57, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x64, 0x0a, 0x19, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x59,
	0x0a, 0x1a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5f, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x72, 0x67,
	0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x08, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x5f, 0x62, 0x79, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x55, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x87, 0x02, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x03, 0x6f,
	0x72, 0x67, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x40, 0x0a, 0x11, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x22, 0x8d, 0x01, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x75, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x87, 0x01, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x14, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x10, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x7a, 0x0a, 0x19, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x65, 0x0a, 0x1a,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x12, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa0, 0x02, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x11, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x62, 0x79, 0x12, 0x05, 0xba,
	0x48, 0x02, 0x08, 0x01, 0x22, 0x71, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x32, 0xb9, 0x0b, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6e, 0x12, 0x24, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x08, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x23,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x6e, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x77, 0x0a, 0x12, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x2d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x5a,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x5c, 0x0a, 0x09, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x65, 0x0a,
	0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x60, 0x0a,
	0x0b, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x26,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x42, 0xcc, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x0f,
	0x52, 0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x02, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x76,
	0x32, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xa2, 0x02, 0x03, 0x46, 0x57,
	0x58, 0xaa, 0x02, 0x12, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xca, 0x02, 0x12, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xe2, 0x02, 0x1e, 0x46, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x46,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x3a, 0x3a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl2_workflow_run_service_proto_rawDescOnce sync.Once
	file_flyteidl2_workflow_run_service_proto_rawDescData = file_flyteidl2_workflow_run_service_proto_rawDesc
)

func file_flyteidl2_workflow_run_service_proto_rawDescGZIP() []byte {
	file_flyteidl2_workflow_run_service_proto_rawDescOnce.Do(func() {
		file_flyteidl2_workflow_run_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl2_workflow_run_service_proto_rawDescData)
	})
	return file_flyteidl2_workflow_run_service_proto_rawDescData
}

var file_flyteidl2_workflow_run_service_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_flyteidl2_workflow_run_service_proto_goTypes = []interface{}{
	(*CreateRunRequest)(nil),           // 0: flyteidl2.workflow.CreateRunRequest
	(*CreateRunResponse)(nil),          // 1: flyteidl2.workflow.CreateRunResponse
	(*AbortRunRequest)(nil),            // 2: flyteidl2.workflow.AbortRunRequest
	(*AbortRunResponse)(nil),           // 3: flyteidl2.workflow.AbortRunResponse
	(*GetRunDetailsRequest)(nil),       // 4: flyteidl2.workflow.GetRunDetailsRequest
	(*GetRunDetailsResponse)(nil),      // 5: flyteidl2.workflow.GetRunDetailsResponse
	(*WatchRunDetailsRequest)(nil),     // 6: flyteidl2.workflow.WatchRunDetailsRequest
	(*WatchRunDetailsResponse)(nil),    // 7: flyteidl2.workflow.WatchRunDetailsResponse
	(*GetActionDetailsRequest)(nil),    // 8: flyteidl2.workflow.GetActionDetailsRequest
	(*GetActionDetailsResponse)(nil),   // 9: flyteidl2.workflow.GetActionDetailsResponse
	(*WatchActionDetailsRequest)(nil),  // 10: flyteidl2.workflow.WatchActionDetailsRequest
	(*WatchActionDetailsResponse)(nil), // 11: flyteidl2.workflow.WatchActionDetailsResponse
	(*GetActionDataRequest)(nil),       // 12: flyteidl2.workflow.GetActionDataRequest
	(*GetActionDataResponse)(nil),      // 13: flyteidl2.workflow.GetActionDataResponse
	(*ListRunsRequest)(nil),            // 14: flyteidl2.workflow.ListRunsRequest
	(*ListRunsResponse)(nil),           // 15: flyteidl2.workflow.ListRunsResponse
	(*WatchRunsRequest)(nil),           // 16: flyteidl2.workflow.WatchRunsRequest
	(*WatchRunsResponse)(nil),          // 17: flyteidl2.workflow.WatchRunsResponse
	(*ListActionsRequest)(nil),         // 18: flyteidl2.workflow.ListActionsRequest
	(*ListActionsResponse)(nil),        // 19: flyteidl2.workflow.ListActionsResponse
	(*WatchActionsRequest)(nil),        // 20: flyteidl2.workflow.WatchActionsRequest
	(*WatchActionsResponse)(nil),       // 21: flyteidl2.workflow.WatchActionsResponse
	(*WatchClusterEventsRequest)(nil),  // 22: flyteidl2.workflow.WatchClusterEventsRequest
	(*WatchClusterEventsResponse)(nil), // 23: flyteidl2.workflow.WatchClusterEventsResponse
	(*AbortActionRequest)(nil),         // 24: flyteidl2.workflow.AbortActionRequest
	(*AbortActionResponse)(nil),        // 25: flyteidl2.workflow.AbortActionResponse
	(*WatchGroupsRequest)(nil),         // 26: flyteidl2.workflow.WatchGroupsRequest
	(*WatchGroupsResponse)(nil),        // 27: flyteidl2.workflow.WatchGroupsResponse
	(*common.RunIdentifier)(nil),       // 28: flyteidl2.common.RunIdentifier
	(*common.ProjectIdentifier)(nil),   // 29: flyteidl2.common.ProjectIdentifier
	(*task.TaskIdentifier)(nil),        // 30: flyteidl2.task.TaskIdentifier
	(*task.TaskSpec)(nil),              // 31: flyteidl2.task.TaskSpec
	(*common.TriggerName)(nil),         // 32: flyteidl2.common.TriggerName
	(*task.Inputs)(nil),                // 33: flyteidl2.task.Inputs
	(*task.RunSpec)(nil),               // 34: flyteidl2.task.RunSpec
	(RunSource)(0),                     // 35: flyteidl2.workflow.RunSource
	(*Run)(nil),                        // 36: flyteidl2.workflow.Run
	(*RunDetails)(nil),                 // 37: flyteidl2.workflow.RunDetails
	(*common.ActionIdentifier)(nil),    // 38: flyteidl2.common.ActionIdentifier
	(*ActionDetails)(nil),              // 39: flyteidl2.workflow.ActionDetails
	(*task.Outputs)(nil),               // 40: flyteidl2.task.Outputs
	(*common.ListRequest)(nil),         // 41: flyteidl2.common.ListRequest
	(*common.ClusterIdentifier)(nil),   // 42: flyteidl2.common.ClusterIdentifier
	(*Action)(nil),                     // 43: flyteidl2.workflow.Action
	(*common.Filter)(nil),              // 44: flyteidl2.common.Filter
	(*EnrichedAction)(nil),             // 45: flyteidl2.workflow.EnrichedAction
	(*ClusterEvent)(nil),               // 46: flyteidl2.workflow.ClusterEvent
	(*timestamppb.Timestamp)(nil),      // 47: google.protobuf.Timestamp
	(*TaskGroup)(nil),                  // 48: flyteidl2.workflow.TaskGroup
}
var file_flyteidl2_workflow_run_service_proto_depIdxs = []int32{
	28, // 0: flyteidl2.workflow.CreateRunRequest.run_id:type_name -> flyteidl2.common.RunIdentifier
	29, // 1: flyteidl2.workflow.CreateRunRequest.project_id:type_name -> flyteidl2.common.ProjectIdentifier
	30, // 2: flyteidl2.workflow.CreateRunRequest.task_id:type_name -> flyteidl2.task.TaskIdentifier
	31, // 3: flyteidl2.workflow.CreateRunRequest.task_spec:type_name -> flyteidl2.task.TaskSpec
	32, // 4: flyteidl2.workflow.CreateRunRequest.trigger_name:type_name -> flyteidl2.common.TriggerName
	33, // 5: flyteidl2.workflow.CreateRunRequest.inputs:type_name -> flyteidl2.task.Inputs
	34, // 6: flyteidl2.workflow.CreateRunRequest.run_spec:type_name -> flyteidl2.task.RunSpec
	35, // 7: flyteidl2.workflow.CreateRunRequest.source:type_name -> flyteidl2.workflow.RunSource
	36, // 8: flyteidl2.workflow.CreateRunResponse.run:type_name -> flyteidl2.workflow.Run
	28, // 9: flyteidl2.workflow.AbortRunRequest.run_id:type_name -> flyteidl2.common.RunIdentifier
	28, // 10: flyteidl2.workflow.GetRunDetailsRequest.run_id:type_name -> flyteidl2.common.RunIdentifier
	37, // 11: flyteidl2.workflow.GetRunDetailsResponse.details:type_name -> flyteidl2.workflow.RunDetails
	28, // 12: flyteidl2.workflow.WatchRunDetailsRequest.run_id:type_name -> flyteidl2.common.RunIdentifier
	37, // 13: flyteidl2.workflow.WatchRunDetailsResponse.details:type_name -> flyteidl2.workflow.RunDetails
	38, // 14: flyteidl2.workflow.GetActionDetailsRequest.action_id:type_name -> flyteidl2.common.ActionIdentifier
	39, // 15: flyteidl2.workflow.GetActionDetailsResponse.details:type_name -> flyteidl2.workflow.ActionDetails
	38, // 16: flyteidl2.workflow.WatchActionDetailsRequest.action_id:type_name -> flyteidl2.common.ActionIdentifier
	39, // 17: flyteidl2.workflow.WatchActionDetailsResponse.details:type_name -> flyteidl2.workflow.ActionDetails
	38, // 18: flyteidl2.workflow.GetActionDataRequest.action_id:type_name -> flyteidl2.common.ActionIdentifier
	33, // 19: flyteidl2.workflow.GetActionDataResponse.inputs:type_name -> flyteidl2.task.Inputs
	40, // 20: flyteidl2.workflow.GetActionDataResponse.outputs:type_name -> flyteidl2.task.Outputs
	41, // 21: flyteidl2.workflow.ListRunsRequest.request:type_name -> flyteidl2.common.ListRequest
	29, // 22: flyteidl2.workflow.ListRunsRequest.project_id:type_name -> flyteidl2.common.ProjectIdentifier
	32, // 23: flyteidl2.workflow.ListRunsRequest.trigger_name:type_name -> flyteidl2.common.TriggerName
	36, // 24: flyteidl2.workflow.ListRunsResponse.runs:type_name -> flyteidl2.workflow.Run
	42, // 25: flyteidl2.workflow.WatchRunsRequest.cluster_id:type_name -> flyteidl2.common.ClusterIdentifier
	29, // 26: flyteidl2.workflow.WatchRunsRequest.project_id:type_name -> flyteidl2.common.ProjectIdentifier
	30, // 27: flyteidl2.workflow.WatchRunsRequest.task_id:type_name -> flyteidl2.task.TaskIdentifier
	36, // 28: flyteidl2.workflow.WatchRunsResponse.runs:type_name -> flyteidl2.workflow.Run
	41, // 29: flyteidl2.workflow.ListActionsRequest.request:type_name -> flyteidl2.common.ListRequest
	28, // 30: flyteidl2.workflow.ListActionsRequest.run_id:type_name -> flyteidl2.common.RunIdentifier
	43, // 31: flyteidl2.workflow.ListActionsResponse.actions:type_name -> flyteidl2.workflow.Action
	28, // 32: flyteidl2.workflow.WatchActionsRequest.run_id:type_name -> flyteidl2.common.RunIdentifier
	44, // 33: flyteidl2.workflow.WatchActionsRequest.filter:type_name -> flyteidl2.common.Filter
	45, // 34: flyteidl2.workflow.WatchActionsResponse.enriched_actions:type_name -> flyteidl2.workflow.EnrichedAction
	38, // 35: flyteidl2.workflow.WatchClusterEventsRequest.id:type_name -> flyteidl2.common.ActionIdentifier
	46, // 36: flyteidl2.workflow.WatchClusterEventsResponse.cluster_events:type_name -> flyteidl2.workflow.ClusterEvent
	38, // 37: flyteidl2.workflow.AbortActionRequest.action_id:type_name -> flyteidl2.common.ActionIdentifier
	29, // 38: flyteidl2.workflow.WatchGroupsRequest.project_id:type_name -> flyteidl2.common.ProjectIdentifier
	47, // 39: flyteidl2.workflow.WatchGroupsRequest.start_date:type_name -> google.protobuf.Timestamp
	47, // 40: flyteidl2.workflow.WatchGroupsRequest.end_date:type_name -> google.protobuf.Timestamp
	41, // 41: flyteidl2.workflow.WatchGroupsRequest.request:type_name -> flyteidl2.common.ListRequest
	48, // 42: flyteidl2.workflow.WatchGroupsResponse.task_groups:type_name -> flyteidl2.workflow.TaskGroup
	0,  // 43: flyteidl2.workflow.RunService.CreateRun:input_type -> flyteidl2.workflow.CreateRunRequest
	2,  // 44: flyteidl2.workflow.RunService.AbortRun:input_type -> flyteidl2.workflow.AbortRunRequest
	4,  // 45: flyteidl2.workflow.RunService.GetRunDetails:input_type -> flyteidl2.workflow.GetRunDetailsRequest
	6,  // 46: flyteidl2.workflow.RunService.WatchRunDetails:input_type -> flyteidl2.workflow.WatchRunDetailsRequest
	8,  // 47: flyteidl2.workflow.RunService.GetActionDetails:input_type -> flyteidl2.workflow.GetActionDetailsRequest
	10, // 48: flyteidl2.workflow.RunService.WatchActionDetails:input_type -> flyteidl2.workflow.WatchActionDetailsRequest
	12, // 49: flyteidl2.workflow.RunService.GetActionData:input_type -> flyteidl2.workflow.GetActionDataRequest
	14, // 50: flyteidl2.workflow.RunService.ListRuns:input_type -> flyteidl2.workflow.ListRunsRequest
	16, // 51: flyteidl2.workflow.RunService.WatchRuns:input_type -> flyteidl2.workflow.WatchRunsRequest
	18, // 52: flyteidl2.workflow.RunService.ListActions:input_type -> flyteidl2.workflow.ListActionsRequest
	20, // 53: flyteidl2.workflow.RunService.WatchActions:input_type -> flyteidl2.workflow.WatchActionsRequest
	22, // 54: flyteidl2.workflow.RunService.WatchClusterEvents:input_type -> flyteidl2.workflow.WatchClusterEventsRequest
	24, // 55: flyteidl2.workflow.RunService.AbortAction:input_type -> flyteidl2.workflow.AbortActionRequest
	26, // 56: flyteidl2.workflow.RunService.WatchGroups:input_type -> flyteidl2.workflow.WatchGroupsRequest
	1,  // 57: flyteidl2.workflow.RunService.CreateRun:output_type -> flyteidl2.workflow.CreateRunResponse
	3,  // 58: flyteidl2.workflow.RunService.AbortRun:output_type -> flyteidl2.workflow.AbortRunResponse
	5,  // 59: flyteidl2.workflow.RunService.GetRunDetails:output_type -> flyteidl2.workflow.GetRunDetailsResponse
	7,  // 60: flyteidl2.workflow.RunService.WatchRunDetails:output_type -> flyteidl2.workflow.WatchRunDetailsResponse
	9,  // 61: flyteidl2.workflow.RunService.GetActionDetails:output_type -> flyteidl2.workflow.GetActionDetailsResponse
	11, // 62: flyteidl2.workflow.RunService.WatchActionDetails:output_type -> flyteidl2.workflow.WatchActionDetailsResponse
	13, // 63: flyteidl2.workflow.RunService.GetActionData:output_type -> flyteidl2.workflow.GetActionDataResponse
	15, // 64: flyteidl2.workflow.RunService.ListRuns:output_type -> flyteidl2.workflow.ListRunsResponse
	17, // 65: flyteidl2.workflow.RunService.WatchRuns:output_type -> flyteidl2.workflow.WatchRunsResponse
	19, // 66: flyteidl2.workflow.RunService.ListActions:output_type -> flyteidl2.workflow.ListActionsResponse
	21, // 67: flyteidl2.workflow.RunService.WatchActions:output_type -> flyteidl2.workflow.WatchActionsResponse
	23, // 68: flyteidl2.workflow.RunService.WatchClusterEvents:output_type -> flyteidl2.workflow.WatchClusterEventsResponse
	25, // 69: flyteidl2.workflow.RunService.AbortAction:output_type -> flyteidl2.workflow.AbortActionResponse
	27, // 70: flyteidl2.workflow.RunService.WatchGroups:output_type -> flyteidl2.workflow.WatchGroupsResponse
	57, // [57:71] is the sub-list for method output_type
	43, // [43:57] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_flyteidl2_workflow_run_service_proto_init() }
func file_flyteidl2_workflow_run_service_proto_init() {
	if File_flyteidl2_workflow_run_service_proto != nil {
		return
	}
	file_flyteidl2_workflow_run_definition_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flyteidl2_workflow_run_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRunDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRunDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActionDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActionDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchActionDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchActionDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActionDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActionDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchActionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchActionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchClusterEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchClusterEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flyteidl2_workflow_run_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreateRunRequest_RunId)(nil),
		(*CreateRunRequest_ProjectId)(nil),
		(*CreateRunRequest_TaskId)(nil),
		(*CreateRunRequest_TaskSpec)(nil),
		(*CreateRunRequest_TriggerName)(nil),
	}
	file_flyteidl2_workflow_run_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_flyteidl2_workflow_run_service_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ListRunsRequest_Org)(nil),
		(*ListRunsRequest_ProjectId)(nil),
		(*ListRunsRequest_TriggerName)(nil),
	}
	file_flyteidl2_workflow_run_service_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*WatchRunsRequest_Org)(nil),
		(*WatchRunsRequest_ClusterId)(nil),
		(*WatchRunsRequest_ProjectId)(nil),
		(*WatchRunsRequest_TaskId)(nil),
	}
	file_flyteidl2_workflow_run_service_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*WatchGroupsRequest_ProjectId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl2_workflow_run_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flyteidl2_workflow_run_service_proto_goTypes,
		DependencyIndexes: file_flyteidl2_workflow_run_service_proto_depIdxs,
		MessageInfos:      file_flyteidl2_workflow_run_service_proto_msgTypes,
	}.Build()
	File_flyteidl2_workflow_run_service_proto = out.File
	file_flyteidl2_workflow_run_service_proto_rawDesc = nil
	file_flyteidl2_workflow_run_service_proto_goTypes = nil
	file_flyteidl2_workflow_run_service_proto_depIdxs = nil
}
