// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl2/workflow/run_definition.proto

package workflow

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	common "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/common"
	core "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/core"
	task "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/task"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TODO: define phase transitions
type Phase int32

const (
	Phase_PHASE_UNSPECIFIED           Phase = 0
	Phase_PHASE_QUEUED                Phase = 1
	Phase_PHASE_WAITING_FOR_RESOURCES Phase = 2
	Phase_PHASE_INITIALIZING          Phase = 3
	Phase_PHASE_RUNNING               Phase = 4
	Phase_PHASE_SUCCEEDED             Phase = 5
	Phase_PHASE_FAILED                Phase = 6
	Phase_PHASE_ABORTED               Phase = 7
	Phase_PHASE_TIMED_OUT             Phase = 8
)

// Enum value maps for Phase.
var (
	Phase_name = map[int32]string{
		0: "PHASE_UNSPECIFIED",
		1: "PHASE_QUEUED",
		2: "PHASE_WAITING_FOR_RESOURCES",
		3: "PHASE_INITIALIZING",
		4: "PHASE_RUNNING",
		5: "PHASE_SUCCEEDED",
		6: "PHASE_FAILED",
		7: "PHASE_ABORTED",
		8: "PHASE_TIMED_OUT",
	}
	Phase_value = map[string]int32{
		"PHASE_UNSPECIFIED":           0,
		"PHASE_QUEUED":                1,
		"PHASE_WAITING_FOR_RESOURCES": 2,
		"PHASE_INITIALIZING":          3,
		"PHASE_RUNNING":               4,
		"PHASE_SUCCEEDED":             5,
		"PHASE_FAILED":                6,
		"PHASE_ABORTED":               7,
		"PHASE_TIMED_OUT":             8,
	}
)

func (x Phase) Enum() *Phase {
	p := new(Phase)
	*p = x
	return p
}

func (x Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl2_workflow_run_definition_proto_enumTypes[0].Descriptor()
}

func (Phase) Type() protoreflect.EnumType {
	return &file_flyteidl2_workflow_run_definition_proto_enumTypes[0]
}

func (x Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Phase.Descriptor instead.
func (Phase) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{0}
}

type ActionType int32

const (
	ActionType_ACTION_TYPE_UNSPECIFIED ActionType = 0
	ActionType_ACTION_TYPE_TASK        ActionType = 1
	ActionType_ACTION_TYPE_TRACE       ActionType = 2
	ActionType_ACTION_TYPE_CONDITION   ActionType = 3
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ACTION_TYPE_UNSPECIFIED",
		1: "ACTION_TYPE_TASK",
		2: "ACTION_TYPE_TRACE",
		3: "ACTION_TYPE_CONDITION",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_UNSPECIFIED": 0,
		"ACTION_TYPE_TASK":        1,
		"ACTION_TYPE_TRACE":       2,
		"ACTION_TYPE_CONDITION":   3,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl2_workflow_run_definition_proto_enumTypes[1].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_flyteidl2_workflow_run_definition_proto_enumTypes[1]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{1}
}

type RunSource int32

const (
	RunSource_RUN_SOURCE_UNSPECIFIED      RunSource = 0
	RunSource_RUN_SOURCE_WEB              RunSource = 1
	RunSource_RUN_SOURCE_CLI              RunSource = 2
	RunSource_RUN_SOURCE_SCHEDULE_TRIGGER RunSource = 3
)

// Enum value maps for RunSource.
var (
	RunSource_name = map[int32]string{
		0: "RUN_SOURCE_UNSPECIFIED",
		1: "RUN_SOURCE_WEB",
		2: "RUN_SOURCE_CLI",
		3: "RUN_SOURCE_SCHEDULE_TRIGGER",
	}
	RunSource_value = map[string]int32{
		"RUN_SOURCE_UNSPECIFIED":      0,
		"RUN_SOURCE_WEB":              1,
		"RUN_SOURCE_CLI":              2,
		"RUN_SOURCE_SCHEDULE_TRIGGER": 3,
	}
)

func (x RunSource) Enum() *RunSource {
	p := new(RunSource)
	*p = x
	return p
}

func (x RunSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunSource) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl2_workflow_run_definition_proto_enumTypes[2].Descriptor()
}

func (RunSource) Type() protoreflect.EnumType {
	return &file_flyteidl2_workflow_run_definition_proto_enumTypes[2]
}

func (x RunSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunSource.Descriptor instead.
func (RunSource) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{2}
}

type ErrorInfo_Kind int32

const (
	ErrorInfo_KIND_UNSPECIFIED ErrorInfo_Kind = 0
	ErrorInfo_KIND_USER        ErrorInfo_Kind = 1
	ErrorInfo_KIND_SYSTEM      ErrorInfo_Kind = 2
)

// Enum value maps for ErrorInfo_Kind.
var (
	ErrorInfo_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "KIND_USER",
		2: "KIND_SYSTEM",
	}
	ErrorInfo_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"KIND_USER":        1,
		"KIND_SYSTEM":      2,
	}
)

func (x ErrorInfo_Kind) Enum() *ErrorInfo_Kind {
	p := new(ErrorInfo_Kind)
	*p = x
	return p
}

func (x ErrorInfo_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorInfo_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl2_workflow_run_definition_proto_enumTypes[3].Descriptor()
}

func (ErrorInfo_Kind) Type() protoreflect.EnumType {
	return &file_flyteidl2_workflow_run_definition_proto_enumTypes[3]
}

func (x ErrorInfo_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorInfo_Kind.Descriptor instead.
func (ErrorInfo_Kind) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{12, 0}
}

type Run struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lightweight information about the root action.
	Action *Action `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Run) Reset() {
	*x = Run{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Run) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Run) ProtoMessage() {}

func (x *Run) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Run.ProtoReflect.Descriptor instead.
func (*Run) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{0}
}

func (x *Run) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type RunDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Run spec.
	RunSpec *task.RunSpec `protobuf:"bytes,1,opt,name=run_spec,json=runSpec,proto3" json:"run_spec,omitempty"`
	// Detailed information about the root action.
	Action *ActionDetails `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *RunDetails) Reset() {
	*x = RunDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDetails) ProtoMessage() {}

func (x *RunDetails) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDetails.ProtoReflect.Descriptor instead.
func (*RunDetails) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{1}
}

func (x *RunDetails) GetRunSpec() *task.RunSpec {
	if x != nil {
		return x.RunSpec
	}
	return nil
}

func (x *RunDetails) GetAction() *ActionDetails {
	if x != nil {
		return x.Action
	}
	return nil
}

type TaskAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a unique identifier for the task this action is associated with, if applicable.
	Id *task.TaskIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the definition of the task to be executed.
	Spec *task.TaskSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Enables caching when set and specifies the cache version to use.
	CacheKey *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key,omitempty"`
	// the specific cluster that this action should be executed on. if not set, the cluster from the
	// `RunSpec` will be used.
	Cluster string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *TaskAction) Reset() {
	*x = TaskAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAction) ProtoMessage() {}

func (x *TaskAction) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAction.ProtoReflect.Descriptor instead.
func (*TaskAction) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{2}
}

func (x *TaskAction) GetId() *task.TaskIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskAction) GetSpec() *task.TaskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *TaskAction) GetCacheKey() *wrapperspb.StringValue {
	if x != nil {
		return x.CacheKey
	}
	return nil
}

func (x *TaskAction) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

// TraceAction is used to define a trace action that can be used to track the execution of an action that's managed
// by the local worker. This can be used to bring determinism to code that's otherwise not deterministic (e.g. current
// time).
type TraceAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Last known phase.
	Phase Phase `protobuf:"varint,2,opt,name=phase,proto3,enum=flyteidl2.workflow.Phase" json:"phase,omitempty"`
	// Time the attempt started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time the attempt ended, if applicable.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	// Output references.
	Outputs *task.OutputReferences `protobuf:"bytes,5,opt,name=outputs,proto3" json:"outputs,omitempty"`
	// Task spec for the trace, useful for the typed interface inside.
	Spec *task.TraceSpec `protobuf:"bytes,6,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *TraceAction) Reset() {
	*x = TraceAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceAction) ProtoMessage() {}

func (x *TraceAction) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceAction.ProtoReflect.Descriptor instead.
func (*TraceAction) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{3}
}

func (x *TraceAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraceAction) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_PHASE_UNSPECIFIED
}

func (x *TraceAction) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TraceAction) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TraceAction) GetOutputs() *task.OutputReferences {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TraceAction) GetSpec() *task.TraceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ConditionAction is used to define a condition that can be evaluated at runtime. It can be used to
// await a signal from an external system and can carry a value.
type ConditionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the unique identifier for the action. It must be unique within the defined scope below.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Scope:
	//
	//	*ConditionAction_RunId
	//	*ConditionAction_ActionId
	//	*ConditionAction_Global
	Scope isConditionAction_Scope `protobuf_oneof:"scope"`
	// Type is the type of the value the condition is expected. This can be used to properly render
	// a UI element for the condition or validate when a value is received that it is of the expected
	// type.
	Type *core.LiteralType `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// Prompt is the prompt that will be shown to the user when the condition is awaited.
	Prompt string `protobuf:"bytes,7,opt,name=prompt,proto3" json:"prompt,omitempty"`
	// Description is a description of the condition. This can be used to provide additional
	// information to the user about the condition.
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ConditionAction) Reset() {
	*x = ConditionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionAction) ProtoMessage() {}

func (x *ConditionAction) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionAction.ProtoReflect.Descriptor instead.
func (*ConditionAction) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{4}
}

func (x *ConditionAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ConditionAction) GetScope() isConditionAction_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *ConditionAction) GetRunId() string {
	if x, ok := x.GetScope().(*ConditionAction_RunId); ok {
		return x.RunId
	}
	return ""
}

func (x *ConditionAction) GetActionId() string {
	if x, ok := x.GetScope().(*ConditionAction_ActionId); ok {
		return x.ActionId
	}
	return ""
}

func (x *ConditionAction) GetGlobal() bool {
	if x, ok := x.GetScope().(*ConditionAction_Global); ok {
		return x.Global
	}
	return false
}

func (x *ConditionAction) GetType() *core.LiteralType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ConditionAction) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *ConditionAction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type isConditionAction_Scope interface {
	isConditionAction_Scope()
}

type ConditionAction_RunId struct {
	// RunId is the unique identifier for the run this action is associated with.
	RunId string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3,oneof"`
}

type ConditionAction_ActionId struct {
	// ActionId is the unique identifier for the action this action is associated with.
	ActionId string `protobuf:"bytes,3,opt,name=action_id,json=actionId,proto3,oneof"`
}

type ConditionAction_Global struct {
	// Global indicates the condition is global and can be used across all runs and actions.
	Global bool `protobuf:"varint,4,opt,name=global,proto3,oneof"`
}

func (*ConditionAction_RunId) isConditionAction_Scope() {}

func (*ConditionAction_ActionId) isConditionAction_Scope() {}

func (*ConditionAction_Global) isConditionAction_Scope() {}

type TaskActionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the task this action is associated with.
	Id *task.TaskIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Extensible task type.
	TaskType string `protobuf:"bytes,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	// The short name for this task.
	ShortName string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
}

func (x *TaskActionMetadata) Reset() {
	*x = TaskActionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskActionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskActionMetadata) ProtoMessage() {}

func (x *TaskActionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskActionMetadata.ProtoReflect.Descriptor instead.
func (*TaskActionMetadata) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{5}
}

func (x *TaskActionMetadata) GetId() *task.TaskIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TaskActionMetadata) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *TaskActionMetadata) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

type TraceActionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TraceActionMetadata) Reset() {
	*x = TraceActionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceActionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceActionMetadata) ProtoMessage() {}

func (x *TraceActionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceActionMetadata.ProtoReflect.Descriptor instead.
func (*TraceActionMetadata) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{6}
}

func (x *TraceActionMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ConditionActionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Scope:
	//
	//	*ConditionActionMetadata_RunId
	//	*ConditionActionMetadata_ActionId
	//	*ConditionActionMetadata_Global
	Scope isConditionActionMetadata_Scope `protobuf_oneof:"scope"`
}

func (x *ConditionActionMetadata) Reset() {
	*x = ConditionActionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionActionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionActionMetadata) ProtoMessage() {}

func (x *ConditionActionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionActionMetadata.ProtoReflect.Descriptor instead.
func (*ConditionActionMetadata) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{7}
}

func (x *ConditionActionMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ConditionActionMetadata) GetScope() isConditionActionMetadata_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *ConditionActionMetadata) GetRunId() string {
	if x, ok := x.GetScope().(*ConditionActionMetadata_RunId); ok {
		return x.RunId
	}
	return ""
}

func (x *ConditionActionMetadata) GetActionId() string {
	if x, ok := x.GetScope().(*ConditionActionMetadata_ActionId); ok {
		return x.ActionId
	}
	return ""
}

func (x *ConditionActionMetadata) GetGlobal() bool {
	if x, ok := x.GetScope().(*ConditionActionMetadata_Global); ok {
		return x.Global
	}
	return false
}

type isConditionActionMetadata_Scope interface {
	isConditionActionMetadata_Scope()
}

type ConditionActionMetadata_RunId struct {
	// RunId is the unique identifier for the run this action is associated with.
	RunId string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3,oneof"`
}

type ConditionActionMetadata_ActionId struct {
	// ActionId is the unique identifier for the action this action is associated with.
	ActionId string `protobuf:"bytes,3,opt,name=action_id,json=actionId,proto3,oneof"`
}

type ConditionActionMetadata_Global struct {
	// Global indicates the condition is global and can be used across all runs and actions.
	Global bool `protobuf:"varint,4,opt,name=global,proto3,oneof"`
}

func (*ConditionActionMetadata_RunId) isConditionActionMetadata_Scope() {}

func (*ConditionActionMetadata_ActionId) isConditionActionMetadata_Scope() {}

func (*ConditionActionMetadata_Global) isConditionActionMetadata_Scope() {}

// Static, lightweight metadata about an action.
type ActionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parent action if not the root.
	Parent string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	// Group this action belongs to, if applicable.
	Group string `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	// Identity that executed this run.
	ExecutedBy *common.EnrichedIdentity `protobuf:"bytes,6,opt,name=executed_by,json=executedBy,proto3" json:"executed_by,omitempty"`
	// Types that are assignable to Spec:
	//
	//	*ActionMetadata_Task
	//	*ActionMetadata_Trace
	//	*ActionMetadata_Condition
	Spec isActionMetadata_Spec `protobuf_oneof:"spec"`
	// Action type.
	ActionType ActionType `protobuf:"varint,10,opt,name=action_type,json=actionType,proto3,enum=flyteidl2.workflow.ActionType" json:"action_type,omitempty"`
	// If this run was initiated by a trigger, this will store the trigger identifier.
	TriggerId *common.TriggerIdentifier `protobuf:"bytes,11,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	// Environment name
	EnvironmentName string `protobuf:"bytes,12,opt,name=environment_name,json=environmentName,proto3" json:"environment_name,omitempty"`
	// Function name
	FuntionName string `protobuf:"bytes,13,opt,name=funtion_name,json=funtionName,proto3" json:"funtion_name,omitempty"`
	// Trigger name
	TriggerName string `protobuf:"bytes,14,opt,name=trigger_name,json=triggerName,proto3" json:"trigger_name,omitempty"`
	// Trigger Type
	TriggerType *task.TriggerAutomationSpec `protobuf:"bytes,15,opt,name=trigger_type,json=triggerType,proto3" json:"trigger_type,omitempty"`
}

func (x *ActionMetadata) Reset() {
	*x = ActionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionMetadata) ProtoMessage() {}

func (x *ActionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionMetadata.ProtoReflect.Descriptor instead.
func (*ActionMetadata) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{8}
}

func (x *ActionMetadata) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ActionMetadata) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ActionMetadata) GetExecutedBy() *common.EnrichedIdentity {
	if x != nil {
		return x.ExecutedBy
	}
	return nil
}

func (m *ActionMetadata) GetSpec() isActionMetadata_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *ActionMetadata) GetTask() *TaskActionMetadata {
	if x, ok := x.GetSpec().(*ActionMetadata_Task); ok {
		return x.Task
	}
	return nil
}

func (x *ActionMetadata) GetTrace() *TraceActionMetadata {
	if x, ok := x.GetSpec().(*ActionMetadata_Trace); ok {
		return x.Trace
	}
	return nil
}

func (x *ActionMetadata) GetCondition() *ConditionActionMetadata {
	if x, ok := x.GetSpec().(*ActionMetadata_Condition); ok {
		return x.Condition
	}
	return nil
}

func (x *ActionMetadata) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ACTION_TYPE_UNSPECIFIED
}

func (x *ActionMetadata) GetTriggerId() *common.TriggerIdentifier {
	if x != nil {
		return x.TriggerId
	}
	return nil
}

func (x *ActionMetadata) GetEnvironmentName() string {
	if x != nil {
		return x.EnvironmentName
	}
	return ""
}

func (x *ActionMetadata) GetFuntionName() string {
	if x != nil {
		return x.FuntionName
	}
	return ""
}

func (x *ActionMetadata) GetTriggerName() string {
	if x != nil {
		return x.TriggerName
	}
	return ""
}

func (x *ActionMetadata) GetTriggerType() *task.TriggerAutomationSpec {
	if x != nil {
		return x.TriggerType
	}
	return nil
}

type isActionMetadata_Spec interface {
	isActionMetadata_Spec()
}

type ActionMetadata_Task struct {
	// Task action.
	Task *TaskActionMetadata `protobuf:"bytes,7,opt,name=task,proto3,oneof"`
}

type ActionMetadata_Trace struct {
	// Trace action.
	Trace *TraceActionMetadata `protobuf:"bytes,8,opt,name=trace,proto3,oneof"`
}

type ActionMetadata_Condition struct {
	// Condition action.
	Condition *ConditionActionMetadata `protobuf:"bytes,9,opt,name=condition,proto3,oneof"`
}

func (*ActionMetadata_Task) isActionMetadata_Spec() {}

func (*ActionMetadata_Trace) isActionMetadata_Spec() {}

func (*ActionMetadata_Condition) isActionMetadata_Spec() {}

// Lightweight status of an action. For more detailed status see ActionDetails.
type ActionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last known phase.
	Phase Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=flyteidl2.workflow.Phase" json:"phase,omitempty"`
	// Time the action started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time the action ended, if applicable.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	// Number of action attempts.
	Attempts uint32 `protobuf:"varint,4,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// cache status of the action's latest attempt
	CacheStatus core.CatalogCacheStatus `protobuf:"varint,5,opt,name=cache_status,json=cacheStatus,proto3,enum=flyteidl2.core.CatalogCacheStatus" json:"cache_status,omitempty"`
	// Duration of the action in milliseconds.
	DurationMs *uint64 `protobuf:"varint,6,opt,name=duration_ms,json=durationMs,proto3,oneof" json:"duration_ms,omitempty"`
}

func (x *ActionStatus) Reset() {
	*x = ActionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionStatus) ProtoMessage() {}

func (x *ActionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionStatus.ProtoReflect.Descriptor instead.
func (*ActionStatus) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{9}
}

func (x *ActionStatus) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_PHASE_UNSPECIFIED
}

func (x *ActionStatus) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ActionStatus) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ActionStatus) GetAttempts() uint32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *ActionStatus) GetCacheStatus() core.CatalogCacheStatus {
	if x != nil {
		return x.CacheStatus
	}
	return core.CatalogCacheStatus(0)
}

func (x *ActionStatus) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

// Lightweight representation of an action.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id for this action.
	Id *common.ActionIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata for this action.
	Metadata *ActionMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Last known status.
	Status *ActionStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{10}
}

func (x *Action) GetId() *common.ActionIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Action) GetMetadata() *ActionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Action) GetStatus() *ActionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// EnrichedAction is a wrapper around Action that contains additional information
type EnrichedAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action itself.
	Action *Action `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	// Whether this action meets specified filters of the request or not.
	// If an action that was previously meeting the filter but no longer does, will be sent with this flag set to false
	MeetsFilter bool `protobuf:"varint,2,opt,name=meets_filter,json=meetsFilter,proto3" json:"meets_filter,omitempty"`
	// Child phase info for this action (Map of phase to counts of children in given phase)
	ChildrenPhaseCounts map[int32]int32 `protobuf:"bytes,3,rep,name=children_phase_counts,json=childrenPhaseCounts,proto3" json:"children_phase_counts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EnrichedAction) Reset() {
	*x = EnrichedAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichedAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichedAction) ProtoMessage() {}

func (x *EnrichedAction) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichedAction.ProtoReflect.Descriptor instead.
func (*EnrichedAction) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{11}
}

func (x *EnrichedAction) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *EnrichedAction) GetMeetsFilter() bool {
	if x != nil {
		return x.MeetsFilter
	}
	return false
}

func (x *EnrichedAction) GetChildrenPhaseCounts() map[int32]int32 {
	if x != nil {
		return x.ChildrenPhaseCounts
	}
	return nil
}

// ErrorInfo captures details of an error.
type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Error kind.
	Kind ErrorInfo_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=flyteidl2.workflow.ErrorInfo_Kind" json:"kind,omitempty"`
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{12}
}

func (x *ErrorInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorInfo) GetKind() ErrorInfo_Kind {
	if x != nil {
		return x.Kind
	}
	return ErrorInfo_KIND_UNSPECIFIED
}

// AbortInfo captures details of an aborted run.
type AbortInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason provided for the abort.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// Identity that aborted the run.
	AbortedBy *common.EnrichedIdentity `protobuf:"bytes,2,opt,name=aborted_by,json=abortedBy,proto3" json:"aborted_by,omitempty"`
}

func (x *AbortInfo) Reset() {
	*x = AbortInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortInfo) ProtoMessage() {}

func (x *AbortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortInfo.ProtoReflect.Descriptor instead.
func (*AbortInfo) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{13}
}

func (x *AbortInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AbortInfo) GetAbortedBy() *common.EnrichedIdentity {
	if x != nil {
		return x.AbortedBy
	}
	return nil
}

// ActionDetails is the full details of an action.
type ActionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id for this action.
	Id *common.ActionIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata for this action.
	Metadata *ActionMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Last known status.
	Status *ActionStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are assignable to Result:
	//
	//	*ActionDetails_ErrorInfo
	//	*ActionDetails_AbortInfo
	Result isActionDetails_Result `protobuf_oneof:"result"`
	// Fully resolved spec of the action. Merges user submitted task spec with platform defaults.
	//
	// Types that are assignable to Spec:
	//
	//	*ActionDetails_Task
	//	*ActionDetails_Trace
	Spec isActionDetails_Spec `protobuf_oneof:"spec"`
	// List of action attempts.
	Attempts []*ActionAttempt `protobuf:"bytes,7,rep,name=attempts,proto3" json:"attempts,omitempty"`
}

func (x *ActionDetails) Reset() {
	*x = ActionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDetails) ProtoMessage() {}

func (x *ActionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDetails.ProtoReflect.Descriptor instead.
func (*ActionDetails) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{14}
}

func (x *ActionDetails) GetId() *common.ActionIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionDetails) GetMetadata() *ActionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ActionDetails) GetStatus() *ActionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (m *ActionDetails) GetResult() isActionDetails_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ActionDetails) GetErrorInfo() *ErrorInfo {
	if x, ok := x.GetResult().(*ActionDetails_ErrorInfo); ok {
		return x.ErrorInfo
	}
	return nil
}

func (x *ActionDetails) GetAbortInfo() *AbortInfo {
	if x, ok := x.GetResult().(*ActionDetails_AbortInfo); ok {
		return x.AbortInfo
	}
	return nil
}

func (m *ActionDetails) GetSpec() isActionDetails_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *ActionDetails) GetTask() *task.TaskSpec {
	if x, ok := x.GetSpec().(*ActionDetails_Task); ok {
		return x.Task
	}
	return nil
}

func (x *ActionDetails) GetTrace() *task.TraceSpec {
	if x, ok := x.GetSpec().(*ActionDetails_Trace); ok {
		return x.Trace
	}
	return nil
}

func (x *ActionDetails) GetAttempts() []*ActionAttempt {
	if x != nil {
		return x.Attempts
	}
	return nil
}

type isActionDetails_Result interface {
	isActionDetails_Result()
}

type ActionDetails_ErrorInfo struct {
	// Error info for the action, if failed.
	ErrorInfo *ErrorInfo `protobuf:"bytes,4,opt,name=error_info,json=errorInfo,proto3,oneof"`
}

type ActionDetails_AbortInfo struct {
	// Abort info for the action, if aborted.
	AbortInfo *AbortInfo `protobuf:"bytes,5,opt,name=abort_info,json=abortInfo,proto3,oneof"`
}

func (*ActionDetails_ErrorInfo) isActionDetails_Result() {}

func (*ActionDetails_AbortInfo) isActionDetails_Result() {}

type isActionDetails_Spec interface {
	isActionDetails_Spec()
}

type ActionDetails_Task struct {
	Task *task.TaskSpec `protobuf:"bytes,6,opt,name=task,proto3,oneof"`
}

type ActionDetails_Trace struct {
	Trace *task.TraceSpec `protobuf:"bytes,8,opt,name=trace,proto3,oneof"`
}

func (*ActionDetails_Task) isActionDetails_Spec() {}

func (*ActionDetails_Trace) isActionDetails_Spec() {}

// ActionAttempt is a single attempt of an action.
type ActionAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last known phase.
	Phase Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=flyteidl2.workflow.Phase" json:"phase,omitempty"`
	// Time the attempt started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time the attempt ended, if applicable.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	// Error info for the attempt, if failed.
	ErrorInfo *ErrorInfo `protobuf:"bytes,4,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	// The attempt number, starting with 1.
	Attempt uint32 `protobuf:"varint,5,opt,name=attempt,proto3" json:"attempt,omitempty"`
	// Log references.
	LogInfo []*core.TaskLog `protobuf:"bytes,6,rep,name=log_info,json=logInfo,proto3" json:"log_info,omitempty"`
	// Output references.
	Outputs *task.OutputReferences `protobuf:"bytes,7,opt,name=outputs,proto3" json:"outputs,omitempty"`
	// Indicates whether logs are available for tailing. It doesn't necessarily indicate the logs are present, but that
	// we have the info we need to look them up.
	LogsAvailable bool `protobuf:"varint,8,opt,name=logs_available,json=logsAvailable,proto3" json:"logs_available,omitempty"`
	// cache status of the action attempt
	CacheStatus core.CatalogCacheStatus `protobuf:"varint,9,opt,name=cache_status,json=cacheStatus,proto3,enum=flyteidl2.core.CatalogCacheStatus" json:"cache_status,omitempty"`
	// Cluster events like k8s events in a human-readable form.
	ClusterEvents []*ClusterEvent `protobuf:"bytes,10,rep,name=cluster_events,json=clusterEvents,proto3" json:"cluster_events,omitempty"`
	// History of phase transitions.
	PhaseTransitions []*PhaseTransition `protobuf:"bytes,11,rep,name=phase_transitions,json=phaseTransitions,proto3" json:"phase_transitions,omitempty"`
	// The cluster this attempt is assigned to.
	Cluster string `protobuf:"bytes,12,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Contains corresponding k8s pods and containers information for this action attempt.
	LogContext *core.LogContext `protobuf:"bytes,13,opt,name=log_context,json=logContext,proto3" json:"log_context,omitempty"`
}

func (x *ActionAttempt) Reset() {
	*x = ActionAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAttempt) ProtoMessage() {}

func (x *ActionAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAttempt.ProtoReflect.Descriptor instead.
func (*ActionAttempt) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{15}
}

func (x *ActionAttempt) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_PHASE_UNSPECIFIED
}

func (x *ActionAttempt) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ActionAttempt) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ActionAttempt) GetErrorInfo() *ErrorInfo {
	if x != nil {
		return x.ErrorInfo
	}
	return nil
}

func (x *ActionAttempt) GetAttempt() uint32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *ActionAttempt) GetLogInfo() []*core.TaskLog {
	if x != nil {
		return x.LogInfo
	}
	return nil
}

func (x *ActionAttempt) GetOutputs() *task.OutputReferences {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *ActionAttempt) GetLogsAvailable() bool {
	if x != nil {
		return x.LogsAvailable
	}
	return false
}

func (x *ActionAttempt) GetCacheStatus() core.CatalogCacheStatus {
	if x != nil {
		return x.CacheStatus
	}
	return core.CatalogCacheStatus(0)
}

func (x *ActionAttempt) GetClusterEvents() []*ClusterEvent {
	if x != nil {
		return x.ClusterEvents
	}
	return nil
}

func (x *ActionAttempt) GetPhaseTransitions() []*PhaseTransition {
	if x != nil {
		return x.PhaseTransitions
	}
	return nil
}

func (x *ActionAttempt) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ActionAttempt) GetLogContext() *core.LogContext {
	if x != nil {
		return x.LogContext
	}
	return nil
}

type ClusterEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// occurred_at is the timestamp indicating the instant that this reason happened.
	OccurredAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	// message is the explanation for the most recent phase transition or status update.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClusterEvent) Reset() {
	*x = ClusterEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterEvent) ProtoMessage() {}

func (x *ClusterEvent) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterEvent.ProtoReflect.Descriptor instead.
func (*ClusterEvent) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{16}
}

func (x *ClusterEvent) GetOccurredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OccurredAt
	}
	return nil
}

func (x *ClusterEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PhaseTransition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The phase.
	Phase Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=flyteidl2.workflow.Phase" json:"phase,omitempty"`
	// Time this phase started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time this phase ended, if applicable. For terminal phases, start time will equal end time.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
}

func (x *PhaseTransition) Reset() {
	*x = PhaseTransition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseTransition) ProtoMessage() {}

func (x *PhaseTransition) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseTransition.ProtoReflect.Descriptor instead.
func (*PhaseTransition) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{17}
}

func (x *PhaseTransition) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_PHASE_UNSPECIFIED
}

func (x *PhaseTransition) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PhaseTransition) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// Event payload for an action
type ActionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action id.
	Id *common.ActionIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The attempt number.
	Attempt uint32 `protobuf:"varint,2,opt,name=attempt,proto3" json:"attempt,omitempty"`
	// The phase for this attempt.
	Phase Phase `protobuf:"varint,3,opt,name=phase,proto3,enum=flyteidl2.workflow.Phase" json:"phase,omitempty"`
	// The version of this attempt and phase.
	Version uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Time the attempt started.
	//
	// Deprecated: Marked as deprecated in flyteidl2/workflow/run_definition.proto.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Timestamp when the event occurred, as recorded by the underlying platform (e.g. Kubernetes).
	UpdatedTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	// Time the attempt ended, if applicable.
	//
	// Deprecated: Marked as deprecated in flyteidl2/workflow/run_definition.proto.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	// Error info for the attempt, if failed.
	ErrorInfo *ErrorInfo `protobuf:"bytes,8,opt,name=error_info,json=errorInfo,proto3,oneof" json:"error_info,omitempty"`
	// Log references.
	LogInfo []*core.TaskLog `protobuf:"bytes,9,rep,name=log_info,json=logInfo,proto3" json:"log_info,omitempty"`
	// Metadata to associate containers with logs.
	LogContext *core.LogContext `protobuf:"bytes,10,opt,name=log_context,json=logContext,proto3" json:"log_context,omitempty"`
	// The cluster this attempt is running on.
	Cluster string `protobuf:"bytes,11,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Output references.
	Outputs *task.OutputReferences `protobuf:"bytes,12,opt,name=outputs,proto3" json:"outputs,omitempty"`
	// cache status of the action attempt
	CacheStatus core.CatalogCacheStatus `protobuf:"varint,13,opt,name=cache_status,json=cacheStatus,proto3,enum=flyteidl2.core.CatalogCacheStatus" json:"cache_status,omitempty"`
	// Cluster events like k8s events in a human-readable form.
	ClusterEvents []*ClusterEvent `protobuf:"bytes,14,rep,name=cluster_events,json=clusterEvents,proto3" json:"cluster_events,omitempty"`
	// Timestamp when the event was observed and reported by the executor
	ReportedTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=reported_time,json=reportedTime,proto3" json:"reported_time,omitempty"`
}

func (x *ActionEvent) Reset() {
	*x = ActionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionEvent) ProtoMessage() {}

func (x *ActionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionEvent.ProtoReflect.Descriptor instead.
func (*ActionEvent) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{18}
}

func (x *ActionEvent) GetId() *common.ActionIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActionEvent) GetAttempt() uint32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *ActionEvent) GetPhase() Phase {
	if x != nil {
		return x.Phase
	}
	return Phase_PHASE_UNSPECIFIED
}

func (x *ActionEvent) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Deprecated: Marked as deprecated in flyteidl2/workflow/run_definition.proto.
func (x *ActionEvent) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ActionEvent) GetUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

// Deprecated: Marked as deprecated in flyteidl2/workflow/run_definition.proto.
func (x *ActionEvent) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ActionEvent) GetErrorInfo() *ErrorInfo {
	if x != nil {
		return x.ErrorInfo
	}
	return nil
}

func (x *ActionEvent) GetLogInfo() []*core.TaskLog {
	if x != nil {
		return x.LogInfo
	}
	return nil
}

func (x *ActionEvent) GetLogContext() *core.LogContext {
	if x != nil {
		return x.LogContext
	}
	return nil
}

func (x *ActionEvent) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ActionEvent) GetOutputs() *task.OutputReferences {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *ActionEvent) GetCacheStatus() core.CatalogCacheStatus {
	if x != nil {
		return x.CacheStatus
	}
	return core.CatalogCacheStatus(0)
}

func (x *ActionEvent) GetClusterEvents() []*ClusterEvent {
	if x != nil {
		return x.ClusterEvents
	}
	return nil
}

func (x *ActionEvent) GetReportedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportedTime
	}
	return nil
}

type ActionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the unique identifier for the action.
	ActionId *common.ActionIdentifier `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// an optional name for the parent action, if it exists. the remaining run metadata (ex. org,
	// project, domain) will be the same as the action_id defined above.
	ParentActionName *string `protobuf:"bytes,2,opt,name=parent_action_name,json=parentActionName,proto3,oneof" json:"parent_action_name,omitempty"`
	// the run spec for this action
	RunSpec *task.RunSpec `protobuf:"bytes,3,opt,name=run_spec,json=runSpec,proto3" json:"run_spec,omitempty"`
	// the path to the input data for this action.
	InputUri string `protobuf:"bytes,4,opt,name=input_uri,json=inputUri,proto3" json:"input_uri,omitempty"`
	// the run base path this action should write its output to.
	RunOutputBase string `protobuf:"bytes,5,opt,name=run_output_base,json=runOutputBase,proto3" json:"run_output_base,omitempty"`
	// Types that are assignable to Spec:
	//
	//	*ActionSpec_Task
	//	*ActionSpec_Condition
	//	*ActionSpec_Trace
	Spec isActionSpec_Spec `protobuf_oneof:"spec"`
	// group this action belongs to, if applicable.
	Group string `protobuf:"bytes,8,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *ActionSpec) Reset() {
	*x = ActionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSpec) ProtoMessage() {}

func (x *ActionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl2_workflow_run_definition_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSpec.ProtoReflect.Descriptor instead.
func (*ActionSpec) Descriptor() ([]byte, []int) {
	return file_flyteidl2_workflow_run_definition_proto_rawDescGZIP(), []int{19}
}

func (x *ActionSpec) GetActionId() *common.ActionIdentifier {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *ActionSpec) GetParentActionName() string {
	if x != nil && x.ParentActionName != nil {
		return *x.ParentActionName
	}
	return ""
}

func (x *ActionSpec) GetRunSpec() *task.RunSpec {
	if x != nil {
		return x.RunSpec
	}
	return nil
}

func (x *ActionSpec) GetInputUri() string {
	if x != nil {
		return x.InputUri
	}
	return ""
}

func (x *ActionSpec) GetRunOutputBase() string {
	if x != nil {
		return x.RunOutputBase
	}
	return ""
}

func (m *ActionSpec) GetSpec() isActionSpec_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *ActionSpec) GetTask() *TaskAction {
	if x, ok := x.GetSpec().(*ActionSpec_Task); ok {
		return x.Task
	}
	return nil
}

func (x *ActionSpec) GetCondition() *ConditionAction {
	if x, ok := x.GetSpec().(*ActionSpec_Condition); ok {
		return x.Condition
	}
	return nil
}

func (x *ActionSpec) GetTrace() *TraceAction {
	if x, ok := x.GetSpec().(*ActionSpec_Trace); ok {
		return x.Trace
	}
	return nil
}

func (x *ActionSpec) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type isActionSpec_Spec interface {
	isActionSpec_Spec()
}

type ActionSpec_Task struct {
	Task *TaskAction `protobuf:"bytes,6,opt,name=task,proto3,oneof"`
}

type ActionSpec_Condition struct {
	Condition *ConditionAction `protobuf:"bytes,7,opt,name=condition,proto3,oneof"`
}

type ActionSpec_Trace struct {
	Trace *TraceAction `protobuf:"bytes,10,opt,name=trace,proto3,oneof"`
}

func (*ActionSpec_Task) isActionSpec_Spec() {}

func (*ActionSpec_Condition) isActionSpec_Spec() {}

func (*ActionSpec_Trace) isActionSpec_Spec() {}

var File_flyteidl2_workflow_run_definition_proto protoreflect.FileDescriptor

var file_flyteidl2_workflow_run_definition_proto_rawDesc = []byte{
	0x0a, 0x27, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x32, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x7b, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x32, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc7,
	0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xd2, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8d, 0x02,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x80, 0x01,
	0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x29, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x17,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42,
	0x0e, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22,
	0x97, 0x05, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x43, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xe5, 0x02, 0x0a, 0x0c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x73, 0x22, 0xb6, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x0e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x65, 0x65, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x15, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x46, 0x0a, 0x18, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x3c, 0x0a,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x22, 0x66, 0x0a, 0x09, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x0a, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0xf1, 0x03, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x48, 0x01, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x01, 0x52,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x89, 0x06, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x07,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6c, 0x6f, 0x67, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x45,
	0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x50,
	0x0a, 0x11, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x6f,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x6c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xec, 0x06, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x0e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x83, 0x04, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x08, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x52, 0x75, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x24, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x55, 0x72, 0x69, 0x12, 0x2f, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x43,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0d, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08,
	0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0xcb, 0x01, 0x0a, 0x05, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x48, 0x41, 0x53, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44,
	0x5f, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x2a, 0x71, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x09, 0x52, 0x75, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x57, 0x45, 0x42, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x55,
	0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x03, 0x42, 0xcf, 0x01, 0x0a, 0x16,
	0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x12, 0x52, 0x75, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x36,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xa2, 0x02, 0x03, 0x46, 0x57, 0x58, 0xaa, 0x02, 0x12, 0x46,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0xca, 0x02, 0x12, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x32, 0x5c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xe2, 0x02, 0x1e, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x32, 0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x32, 0x3a, 0x3a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl2_workflow_run_definition_proto_rawDescOnce sync.Once
	file_flyteidl2_workflow_run_definition_proto_rawDescData = file_flyteidl2_workflow_run_definition_proto_rawDesc
)

func file_flyteidl2_workflow_run_definition_proto_rawDescGZIP() []byte {
	file_flyteidl2_workflow_run_definition_proto_rawDescOnce.Do(func() {
		file_flyteidl2_workflow_run_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl2_workflow_run_definition_proto_rawDescData)
	})
	return file_flyteidl2_workflow_run_definition_proto_rawDescData
}

var file_flyteidl2_workflow_run_definition_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_flyteidl2_workflow_run_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_flyteidl2_workflow_run_definition_proto_goTypes = []interface{}{
	(Phase)(0),                         // 0: flyteidl2.workflow.Phase
	(ActionType)(0),                    // 1: flyteidl2.workflow.ActionType
	(RunSource)(0),                     // 2: flyteidl2.workflow.RunSource
	(ErrorInfo_Kind)(0),                // 3: flyteidl2.workflow.ErrorInfo.Kind
	(*Run)(nil),                        // 4: flyteidl2.workflow.Run
	(*RunDetails)(nil),                 // 5: flyteidl2.workflow.RunDetails
	(*TaskAction)(nil),                 // 6: flyteidl2.workflow.TaskAction
	(*TraceAction)(nil),                // 7: flyteidl2.workflow.TraceAction
	(*ConditionAction)(nil),            // 8: flyteidl2.workflow.ConditionAction
	(*TaskActionMetadata)(nil),         // 9: flyteidl2.workflow.TaskActionMetadata
	(*TraceActionMetadata)(nil),        // 10: flyteidl2.workflow.TraceActionMetadata
	(*ConditionActionMetadata)(nil),    // 11: flyteidl2.workflow.ConditionActionMetadata
	(*ActionMetadata)(nil),             // 12: flyteidl2.workflow.ActionMetadata
	(*ActionStatus)(nil),               // 13: flyteidl2.workflow.ActionStatus
	(*Action)(nil),                     // 14: flyteidl2.workflow.Action
	(*EnrichedAction)(nil),             // 15: flyteidl2.workflow.EnrichedAction
	(*ErrorInfo)(nil),                  // 16: flyteidl2.workflow.ErrorInfo
	(*AbortInfo)(nil),                  // 17: flyteidl2.workflow.AbortInfo
	(*ActionDetails)(nil),              // 18: flyteidl2.workflow.ActionDetails
	(*ActionAttempt)(nil),              // 19: flyteidl2.workflow.ActionAttempt
	(*ClusterEvent)(nil),               // 20: flyteidl2.workflow.ClusterEvent
	(*PhaseTransition)(nil),            // 21: flyteidl2.workflow.PhaseTransition
	(*ActionEvent)(nil),                // 22: flyteidl2.workflow.ActionEvent
	(*ActionSpec)(nil),                 // 23: flyteidl2.workflow.ActionSpec
	nil,                                // 24: flyteidl2.workflow.EnrichedAction.ChildrenPhaseCountsEntry
	(*task.RunSpec)(nil),               // 25: flyteidl2.task.RunSpec
	(*task.TaskIdentifier)(nil),        // 26: flyteidl2.task.TaskIdentifier
	(*task.TaskSpec)(nil),              // 27: flyteidl2.task.TaskSpec
	(*wrapperspb.StringValue)(nil),     // 28: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),      // 29: google.protobuf.Timestamp
	(*task.OutputReferences)(nil),      // 30: flyteidl2.task.OutputReferences
	(*task.TraceSpec)(nil),             // 31: flyteidl2.task.TraceSpec
	(*core.LiteralType)(nil),           // 32: flyteidl2.core.LiteralType
	(*common.EnrichedIdentity)(nil),    // 33: flyteidl2.common.EnrichedIdentity
	(*common.TriggerIdentifier)(nil),   // 34: flyteidl2.common.TriggerIdentifier
	(*task.TriggerAutomationSpec)(nil), // 35: flyteidl2.task.TriggerAutomationSpec
	(core.CatalogCacheStatus)(0),       // 36: flyteidl2.core.CatalogCacheStatus
	(*common.ActionIdentifier)(nil),    // 37: flyteidl2.common.ActionIdentifier
	(*core.TaskLog)(nil),               // 38: flyteidl2.core.TaskLog
	(*core.LogContext)(nil),            // 39: flyteidl2.core.LogContext
}
var file_flyteidl2_workflow_run_definition_proto_depIdxs = []int32{
	14, // 0: flyteidl2.workflow.Run.action:type_name -> flyteidl2.workflow.Action
	25, // 1: flyteidl2.workflow.RunDetails.run_spec:type_name -> flyteidl2.task.RunSpec
	18, // 2: flyteidl2.workflow.RunDetails.action:type_name -> flyteidl2.workflow.ActionDetails
	26, // 3: flyteidl2.workflow.TaskAction.id:type_name -> flyteidl2.task.TaskIdentifier
	27, // 4: flyteidl2.workflow.TaskAction.spec:type_name -> flyteidl2.task.TaskSpec
	28, // 5: flyteidl2.workflow.TaskAction.cache_key:type_name -> google.protobuf.StringValue
	0,  // 6: flyteidl2.workflow.TraceAction.phase:type_name -> flyteidl2.workflow.Phase
	29, // 7: flyteidl2.workflow.TraceAction.start_time:type_name -> google.protobuf.Timestamp
	29, // 8: flyteidl2.workflow.TraceAction.end_time:type_name -> google.protobuf.Timestamp
	30, // 9: flyteidl2.workflow.TraceAction.outputs:type_name -> flyteidl2.task.OutputReferences
	31, // 10: flyteidl2.workflow.TraceAction.spec:type_name -> flyteidl2.task.TraceSpec
	32, // 11: flyteidl2.workflow.ConditionAction.type:type_name -> flyteidl2.core.LiteralType
	26, // 12: flyteidl2.workflow.TaskActionMetadata.id:type_name -> flyteidl2.task.TaskIdentifier
	33, // 13: flyteidl2.workflow.ActionMetadata.executed_by:type_name -> flyteidl2.common.EnrichedIdentity
	9,  // 14: flyteidl2.workflow.ActionMetadata.task:type_name -> flyteidl2.workflow.TaskActionMetadata
	10, // 15: flyteidl2.workflow.ActionMetadata.trace:type_name -> flyteidl2.workflow.TraceActionMetadata
	11, // 16: flyteidl2.workflow.ActionMetadata.condition:type_name -> flyteidl2.workflow.ConditionActionMetadata
	1,  // 17: flyteidl2.workflow.ActionMetadata.action_type:type_name -> flyteidl2.workflow.ActionType
	34, // 18: flyteidl2.workflow.ActionMetadata.trigger_id:type_name -> flyteidl2.common.TriggerIdentifier
	35, // 19: flyteidl2.workflow.ActionMetadata.trigger_type:type_name -> flyteidl2.task.TriggerAutomationSpec
	0,  // 20: flyteidl2.workflow.ActionStatus.phase:type_name -> flyteidl2.workflow.Phase
	29, // 21: flyteidl2.workflow.ActionStatus.start_time:type_name -> google.protobuf.Timestamp
	29, // 22: flyteidl2.workflow.ActionStatus.end_time:type_name -> google.protobuf.Timestamp
	36, // 23: flyteidl2.workflow.ActionStatus.cache_status:type_name -> flyteidl2.core.CatalogCacheStatus
	37, // 24: flyteidl2.workflow.Action.id:type_name -> flyteidl2.common.ActionIdentifier
	12, // 25: flyteidl2.workflow.Action.metadata:type_name -> flyteidl2.workflow.ActionMetadata
	13, // 26: flyteidl2.workflow.Action.status:type_name -> flyteidl2.workflow.ActionStatus
	14, // 27: flyteidl2.workflow.EnrichedAction.action:type_name -> flyteidl2.workflow.Action
	24, // 28: flyteidl2.workflow.EnrichedAction.children_phase_counts:type_name -> flyteidl2.workflow.EnrichedAction.ChildrenPhaseCountsEntry
	3,  // 29: flyteidl2.workflow.ErrorInfo.kind:type_name -> flyteidl2.workflow.ErrorInfo.Kind
	33, // 30: flyteidl2.workflow.AbortInfo.aborted_by:type_name -> flyteidl2.common.EnrichedIdentity
	37, // 31: flyteidl2.workflow.ActionDetails.id:type_name -> flyteidl2.common.ActionIdentifier
	12, // 32: flyteidl2.workflow.ActionDetails.metadata:type_name -> flyteidl2.workflow.ActionMetadata
	13, // 33: flyteidl2.workflow.ActionDetails.status:type_name -> flyteidl2.workflow.ActionStatus
	16, // 34: flyteidl2.workflow.ActionDetails.error_info:type_name -> flyteidl2.workflow.ErrorInfo
	17, // 35: flyteidl2.workflow.ActionDetails.abort_info:type_name -> flyteidl2.workflow.AbortInfo
	27, // 36: flyteidl2.workflow.ActionDetails.task:type_name -> flyteidl2.task.TaskSpec
	31, // 37: flyteidl2.workflow.ActionDetails.trace:type_name -> flyteidl2.task.TraceSpec
	19, // 38: flyteidl2.workflow.ActionDetails.attempts:type_name -> flyteidl2.workflow.ActionAttempt
	0,  // 39: flyteidl2.workflow.ActionAttempt.phase:type_name -> flyteidl2.workflow.Phase
	29, // 40: flyteidl2.workflow.ActionAttempt.start_time:type_name -> google.protobuf.Timestamp
	29, // 41: flyteidl2.workflow.ActionAttempt.end_time:type_name -> google.protobuf.Timestamp
	16, // 42: flyteidl2.workflow.ActionAttempt.error_info:type_name -> flyteidl2.workflow.ErrorInfo
	38, // 43: flyteidl2.workflow.ActionAttempt.log_info:type_name -> flyteidl2.core.TaskLog
	30, // 44: flyteidl2.workflow.ActionAttempt.outputs:type_name -> flyteidl2.task.OutputReferences
	36, // 45: flyteidl2.workflow.ActionAttempt.cache_status:type_name -> flyteidl2.core.CatalogCacheStatus
	20, // 46: flyteidl2.workflow.ActionAttempt.cluster_events:type_name -> flyteidl2.workflow.ClusterEvent
	21, // 47: flyteidl2.workflow.ActionAttempt.phase_transitions:type_name -> flyteidl2.workflow.PhaseTransition
	39, // 48: flyteidl2.workflow.ActionAttempt.log_context:type_name -> flyteidl2.core.LogContext
	29, // 49: flyteidl2.workflow.ClusterEvent.occurred_at:type_name -> google.protobuf.Timestamp
	0,  // 50: flyteidl2.workflow.PhaseTransition.phase:type_name -> flyteidl2.workflow.Phase
	29, // 51: flyteidl2.workflow.PhaseTransition.start_time:type_name -> google.protobuf.Timestamp
	29, // 52: flyteidl2.workflow.PhaseTransition.end_time:type_name -> google.protobuf.Timestamp
	37, // 53: flyteidl2.workflow.ActionEvent.id:type_name -> flyteidl2.common.ActionIdentifier
	0,  // 54: flyteidl2.workflow.ActionEvent.phase:type_name -> flyteidl2.workflow.Phase
	29, // 55: flyteidl2.workflow.ActionEvent.start_time:type_name -> google.protobuf.Timestamp
	29, // 56: flyteidl2.workflow.ActionEvent.updated_time:type_name -> google.protobuf.Timestamp
	29, // 57: flyteidl2.workflow.ActionEvent.end_time:type_name -> google.protobuf.Timestamp
	16, // 58: flyteidl2.workflow.ActionEvent.error_info:type_name -> flyteidl2.workflow.ErrorInfo
	38, // 59: flyteidl2.workflow.ActionEvent.log_info:type_name -> flyteidl2.core.TaskLog
	39, // 60: flyteidl2.workflow.ActionEvent.log_context:type_name -> flyteidl2.core.LogContext
	30, // 61: flyteidl2.workflow.ActionEvent.outputs:type_name -> flyteidl2.task.OutputReferences
	36, // 62: flyteidl2.workflow.ActionEvent.cache_status:type_name -> flyteidl2.core.CatalogCacheStatus
	20, // 63: flyteidl2.workflow.ActionEvent.cluster_events:type_name -> flyteidl2.workflow.ClusterEvent
	29, // 64: flyteidl2.workflow.ActionEvent.reported_time:type_name -> google.protobuf.Timestamp
	37, // 65: flyteidl2.workflow.ActionSpec.action_id:type_name -> flyteidl2.common.ActionIdentifier
	25, // 66: flyteidl2.workflow.ActionSpec.run_spec:type_name -> flyteidl2.task.RunSpec
	6,  // 67: flyteidl2.workflow.ActionSpec.task:type_name -> flyteidl2.workflow.TaskAction
	8,  // 68: flyteidl2.workflow.ActionSpec.condition:type_name -> flyteidl2.workflow.ConditionAction
	7,  // 69: flyteidl2.workflow.ActionSpec.trace:type_name -> flyteidl2.workflow.TraceAction
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_flyteidl2_workflow_run_definition_proto_init() }
func file_flyteidl2_workflow_run_definition_proto_init() {
	if File_flyteidl2_workflow_run_definition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyteidl2_workflow_run_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Run); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskActionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceActionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionActionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrichedAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseTransition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl2_workflow_run_definition_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flyteidl2_workflow_run_definition_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_flyteidl2_workflow_run_definition_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ConditionAction_RunId)(nil),
		(*ConditionAction_ActionId)(nil),
		(*ConditionAction_Global)(nil),
	}
	file_flyteidl2_workflow_run_definition_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ConditionActionMetadata_RunId)(nil),
		(*ConditionActionMetadata_ActionId)(nil),
		(*ConditionActionMetadata_Global)(nil),
	}
	file_flyteidl2_workflow_run_definition_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ActionMetadata_Task)(nil),
		(*ActionMetadata_Trace)(nil),
		(*ActionMetadata_Condition)(nil),
	}
	file_flyteidl2_workflow_run_definition_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_flyteidl2_workflow_run_definition_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ActionDetails_ErrorInfo)(nil),
		(*ActionDetails_AbortInfo)(nil),
		(*ActionDetails_Task)(nil),
		(*ActionDetails_Trace)(nil),
	}
	file_flyteidl2_workflow_run_definition_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_flyteidl2_workflow_run_definition_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_flyteidl2_workflow_run_definition_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_flyteidl2_workflow_run_definition_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ActionSpec_Task)(nil),
		(*ActionSpec_Condition)(nil),
		(*ActionSpec_Trace)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl2_workflow_run_definition_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl2_workflow_run_definition_proto_goTypes,
		DependencyIndexes: file_flyteidl2_workflow_run_definition_proto_depIdxs,
		EnumInfos:         file_flyteidl2_workflow_run_definition_proto_enumTypes,
		MessageInfos:      file_flyteidl2_workflow_run_definition_proto_msgTypes,
	}.Build()
	File_flyteidl2_workflow_run_definition_proto = out.File
	file_flyteidl2_workflow_run_definition_proto_rawDesc = nil
	file_flyteidl2_workflow_run_definition_proto_goTypes = nil
	file_flyteidl2_workflow_run_definition_proto_depIdxs = nil
}
