// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: flyteidl2/workflow/translator_service.proto

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TranslatorService_LiteralsToLaunchFormJson_FullMethodName = "/flyteidl2.workflow.TranslatorService/LiteralsToLaunchFormJson"
	TranslatorService_LaunchFormJsonToLiterals_FullMethodName = "/flyteidl2.workflow.TranslatorService/LaunchFormJsonToLiterals"
	TranslatorService_TaskSpecToLaunchFormJson_FullMethodName = "/flyteidl2.workflow.TranslatorService/TaskSpecToLaunchFormJson"
)

// TranslatorServiceClient is the client API for TranslatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranslatorServiceClient interface {
	LiteralsToLaunchFormJson(ctx context.Context, in *LiteralsToLaunchFormJsonRequest, opts ...grpc.CallOption) (*LiteralsToLaunchFormJsonResponse, error)
	LaunchFormJsonToLiterals(ctx context.Context, in *LaunchFormJsonToLiteralsRequest, opts ...grpc.CallOption) (*LaunchFormJsonToLiteralsResponse, error)
	TaskSpecToLaunchFormJson(ctx context.Context, in *TaskSpecToLaunchFormJsonRequest, opts ...grpc.CallOption) (*TaskSpecToLaunchFormJsonResponse, error)
}

type translatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslatorServiceClient(cc grpc.ClientConnInterface) TranslatorServiceClient {
	return &translatorServiceClient{cc}
}

func (c *translatorServiceClient) LiteralsToLaunchFormJson(ctx context.Context, in *LiteralsToLaunchFormJsonRequest, opts ...grpc.CallOption) (*LiteralsToLaunchFormJsonResponse, error) {
	out := new(LiteralsToLaunchFormJsonResponse)
	err := c.cc.Invoke(ctx, TranslatorService_LiteralsToLaunchFormJson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorServiceClient) LaunchFormJsonToLiterals(ctx context.Context, in *LaunchFormJsonToLiteralsRequest, opts ...grpc.CallOption) (*LaunchFormJsonToLiteralsResponse, error) {
	out := new(LaunchFormJsonToLiteralsResponse)
	err := c.cc.Invoke(ctx, TranslatorService_LaunchFormJsonToLiterals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translatorServiceClient) TaskSpecToLaunchFormJson(ctx context.Context, in *TaskSpecToLaunchFormJsonRequest, opts ...grpc.CallOption) (*TaskSpecToLaunchFormJsonResponse, error) {
	out := new(TaskSpecToLaunchFormJsonResponse)
	err := c.cc.Invoke(ctx, TranslatorService_TaskSpecToLaunchFormJson_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslatorServiceServer is the server API for TranslatorService service.
// All implementations should embed UnimplementedTranslatorServiceServer
// for forward compatibility
type TranslatorServiceServer interface {
	LiteralsToLaunchFormJson(context.Context, *LiteralsToLaunchFormJsonRequest) (*LiteralsToLaunchFormJsonResponse, error)
	LaunchFormJsonToLiterals(context.Context, *LaunchFormJsonToLiteralsRequest) (*LaunchFormJsonToLiteralsResponse, error)
	TaskSpecToLaunchFormJson(context.Context, *TaskSpecToLaunchFormJsonRequest) (*TaskSpecToLaunchFormJsonResponse, error)
}

// UnimplementedTranslatorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTranslatorServiceServer struct {
}

func (UnimplementedTranslatorServiceServer) LiteralsToLaunchFormJson(context.Context, *LiteralsToLaunchFormJsonRequest) (*LiteralsToLaunchFormJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiteralsToLaunchFormJson not implemented")
}
func (UnimplementedTranslatorServiceServer) LaunchFormJsonToLiterals(context.Context, *LaunchFormJsonToLiteralsRequest) (*LaunchFormJsonToLiteralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchFormJsonToLiterals not implemented")
}
func (UnimplementedTranslatorServiceServer) TaskSpecToLaunchFormJson(context.Context, *TaskSpecToLaunchFormJsonRequest) (*TaskSpecToLaunchFormJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSpecToLaunchFormJson not implemented")
}

// UnsafeTranslatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranslatorServiceServer will
// result in compilation errors.
type UnsafeTranslatorServiceServer interface {
	mustEmbedUnimplementedTranslatorServiceServer()
}

func RegisterTranslatorServiceServer(s grpc.ServiceRegistrar, srv TranslatorServiceServer) {
	s.RegisterService(&TranslatorService_ServiceDesc, srv)
}

func _TranslatorService_LiteralsToLaunchFormJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiteralsToLaunchFormJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServiceServer).LiteralsToLaunchFormJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranslatorService_LiteralsToLaunchFormJson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServiceServer).LiteralsToLaunchFormJson(ctx, req.(*LiteralsToLaunchFormJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslatorService_LaunchFormJsonToLiterals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchFormJsonToLiteralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServiceServer).LaunchFormJsonToLiterals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranslatorService_LaunchFormJsonToLiterals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServiceServer).LaunchFormJsonToLiterals(ctx, req.(*LaunchFormJsonToLiteralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranslatorService_TaskSpecToLaunchFormJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSpecToLaunchFormJsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslatorServiceServer).TaskSpecToLaunchFormJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranslatorService_TaskSpecToLaunchFormJson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslatorServiceServer).TaskSpecToLaunchFormJson(ctx, req.(*TaskSpecToLaunchFormJsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TranslatorService_ServiceDesc is the grpc.ServiceDesc for TranslatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranslatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl2.workflow.TranslatorService",
	HandlerType: (*TranslatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LiteralsToLaunchFormJson",
			Handler:    _TranslatorService_LiteralsToLaunchFormJson_Handler,
		},
		{
			MethodName: "LaunchFormJsonToLiterals",
			Handler:    _TranslatorService_LaunchFormJsonToLiterals_Handler,
		},
		{
			MethodName: "TaskSpecToLaunchFormJson",
			Handler:    _TranslatorService_TaskSpecToLaunchFormJson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flyteidl2/workflow/translator_service.proto",
}
