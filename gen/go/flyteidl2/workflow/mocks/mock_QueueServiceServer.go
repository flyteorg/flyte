// Code generated by mockery. DO NOT EDIT.

package workflow

import (
	context "context"

	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
	mock "github.com/stretchr/testify/mock"
)

// QueueServiceServer is an autogenerated mock type for the QueueServiceServer type
type QueueServiceServer struct {
	mock.Mock
}

type QueueServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *QueueServiceServer) EXPECT() *QueueServiceServer_Expecter {
	return &QueueServiceServer_Expecter{mock: &_m.Mock}
}

// AbortQueuedAction provides a mock function with given fields: _a0, _a1
func (_m *QueueServiceServer) AbortQueuedAction(_a0 context.Context, _a1 *workflow.AbortQueuedActionRequest) (*workflow.AbortQueuedActionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AbortQueuedAction")
	}

	var r0 *workflow.AbortQueuedActionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortQueuedActionRequest) (*workflow.AbortQueuedActionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortQueuedActionRequest) *workflow.AbortQueuedActionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.AbortQueuedActionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.AbortQueuedActionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueServiceServer_AbortQueuedAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortQueuedAction'
type QueueServiceServer_AbortQueuedAction_Call struct {
	*mock.Call
}

// AbortQueuedAction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.AbortQueuedActionRequest
func (_e *QueueServiceServer_Expecter) AbortQueuedAction(_a0 interface{}, _a1 interface{}) *QueueServiceServer_AbortQueuedAction_Call {
	return &QueueServiceServer_AbortQueuedAction_Call{Call: _e.mock.On("AbortQueuedAction", _a0, _a1)}
}

func (_c *QueueServiceServer_AbortQueuedAction_Call) Run(run func(_a0 context.Context, _a1 *workflow.AbortQueuedActionRequest)) *QueueServiceServer_AbortQueuedAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.AbortQueuedActionRequest))
	})
	return _c
}

func (_c *QueueServiceServer_AbortQueuedAction_Call) Return(_a0 *workflow.AbortQueuedActionResponse, _a1 error) *QueueServiceServer_AbortQueuedAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueueServiceServer_AbortQueuedAction_Call) RunAndReturn(run func(context.Context, *workflow.AbortQueuedActionRequest) (*workflow.AbortQueuedActionResponse, error)) *QueueServiceServer_AbortQueuedAction_Call {
	_c.Call.Return(run)
	return _c
}

// AbortQueuedRun provides a mock function with given fields: _a0, _a1
func (_m *QueueServiceServer) AbortQueuedRun(_a0 context.Context, _a1 *workflow.AbortQueuedRunRequest) (*workflow.AbortQueuedRunResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AbortQueuedRun")
	}

	var r0 *workflow.AbortQueuedRunResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortQueuedRunRequest) (*workflow.AbortQueuedRunResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortQueuedRunRequest) *workflow.AbortQueuedRunResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.AbortQueuedRunResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.AbortQueuedRunRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueServiceServer_AbortQueuedRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortQueuedRun'
type QueueServiceServer_AbortQueuedRun_Call struct {
	*mock.Call
}

// AbortQueuedRun is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.AbortQueuedRunRequest
func (_e *QueueServiceServer_Expecter) AbortQueuedRun(_a0 interface{}, _a1 interface{}) *QueueServiceServer_AbortQueuedRun_Call {
	return &QueueServiceServer_AbortQueuedRun_Call{Call: _e.mock.On("AbortQueuedRun", _a0, _a1)}
}

func (_c *QueueServiceServer_AbortQueuedRun_Call) Run(run func(_a0 context.Context, _a1 *workflow.AbortQueuedRunRequest)) *QueueServiceServer_AbortQueuedRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.AbortQueuedRunRequest))
	})
	return _c
}

func (_c *QueueServiceServer_AbortQueuedRun_Call) Return(_a0 *workflow.AbortQueuedRunResponse, _a1 error) *QueueServiceServer_AbortQueuedRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueueServiceServer_AbortQueuedRun_Call) RunAndReturn(run func(context.Context, *workflow.AbortQueuedRunRequest) (*workflow.AbortQueuedRunResponse, error)) *QueueServiceServer_AbortQueuedRun_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueAction provides a mock function with given fields: _a0, _a1
func (_m *QueueServiceServer) EnqueueAction(_a0 context.Context, _a1 *workflow.EnqueueActionRequest) (*workflow.EnqueueActionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueAction")
	}

	var r0 *workflow.EnqueueActionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.EnqueueActionRequest) (*workflow.EnqueueActionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.EnqueueActionRequest) *workflow.EnqueueActionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.EnqueueActionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.EnqueueActionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueServiceServer_EnqueueAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueAction'
type QueueServiceServer_EnqueueAction_Call struct {
	*mock.Call
}

// EnqueueAction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.EnqueueActionRequest
func (_e *QueueServiceServer_Expecter) EnqueueAction(_a0 interface{}, _a1 interface{}) *QueueServiceServer_EnqueueAction_Call {
	return &QueueServiceServer_EnqueueAction_Call{Call: _e.mock.On("EnqueueAction", _a0, _a1)}
}

func (_c *QueueServiceServer_EnqueueAction_Call) Run(run func(_a0 context.Context, _a1 *workflow.EnqueueActionRequest)) *QueueServiceServer_EnqueueAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.EnqueueActionRequest))
	})
	return _c
}

func (_c *QueueServiceServer_EnqueueAction_Call) Return(_a0 *workflow.EnqueueActionResponse, _a1 error) *QueueServiceServer_EnqueueAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueueServiceServer_EnqueueAction_Call) RunAndReturn(run func(context.Context, *workflow.EnqueueActionRequest) (*workflow.EnqueueActionResponse, error)) *QueueServiceServer_EnqueueAction_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueueServiceServer creates a new instance of QueueServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueServiceServer {
	mock := &QueueServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
