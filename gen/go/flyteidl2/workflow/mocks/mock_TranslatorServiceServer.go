// Code generated by mockery. DO NOT EDIT.

package workflow

import (
	context "context"

	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
	mock "github.com/stretchr/testify/mock"
)

// TranslatorServiceServer is an autogenerated mock type for the TranslatorServiceServer type
type TranslatorServiceServer struct {
	mock.Mock
}

type TranslatorServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *TranslatorServiceServer) EXPECT() *TranslatorServiceServer_Expecter {
	return &TranslatorServiceServer_Expecter{mock: &_m.Mock}
}

// LaunchFormJsonToLiterals provides a mock function with given fields: _a0, _a1
func (_m *TranslatorServiceServer) LaunchFormJsonToLiterals(_a0 context.Context, _a1 *workflow.LaunchFormJsonToLiteralsRequest) (*workflow.LaunchFormJsonToLiteralsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LaunchFormJsonToLiterals")
	}

	var r0 *workflow.LaunchFormJsonToLiteralsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.LaunchFormJsonToLiteralsRequest) (*workflow.LaunchFormJsonToLiteralsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.LaunchFormJsonToLiteralsRequest) *workflow.LaunchFormJsonToLiteralsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.LaunchFormJsonToLiteralsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.LaunchFormJsonToLiteralsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TranslatorServiceServer_LaunchFormJsonToLiterals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LaunchFormJsonToLiterals'
type TranslatorServiceServer_LaunchFormJsonToLiterals_Call struct {
	*mock.Call
}

// LaunchFormJsonToLiterals is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.LaunchFormJsonToLiteralsRequest
func (_e *TranslatorServiceServer_Expecter) LaunchFormJsonToLiterals(_a0 interface{}, _a1 interface{}) *TranslatorServiceServer_LaunchFormJsonToLiterals_Call {
	return &TranslatorServiceServer_LaunchFormJsonToLiterals_Call{Call: _e.mock.On("LaunchFormJsonToLiterals", _a0, _a1)}
}

func (_c *TranslatorServiceServer_LaunchFormJsonToLiterals_Call) Run(run func(_a0 context.Context, _a1 *workflow.LaunchFormJsonToLiteralsRequest)) *TranslatorServiceServer_LaunchFormJsonToLiterals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.LaunchFormJsonToLiteralsRequest))
	})
	return _c
}

func (_c *TranslatorServiceServer_LaunchFormJsonToLiterals_Call) Return(_a0 *workflow.LaunchFormJsonToLiteralsResponse, _a1 error) *TranslatorServiceServer_LaunchFormJsonToLiterals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TranslatorServiceServer_LaunchFormJsonToLiterals_Call) RunAndReturn(run func(context.Context, *workflow.LaunchFormJsonToLiteralsRequest) (*workflow.LaunchFormJsonToLiteralsResponse, error)) *TranslatorServiceServer_LaunchFormJsonToLiterals_Call {
	_c.Call.Return(run)
	return _c
}

// LiteralsToLaunchFormJson provides a mock function with given fields: _a0, _a1
func (_m *TranslatorServiceServer) LiteralsToLaunchFormJson(_a0 context.Context, _a1 *workflow.LiteralsToLaunchFormJsonRequest) (*workflow.LiteralsToLaunchFormJsonResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LiteralsToLaunchFormJson")
	}

	var r0 *workflow.LiteralsToLaunchFormJsonResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.LiteralsToLaunchFormJsonRequest) (*workflow.LiteralsToLaunchFormJsonResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.LiteralsToLaunchFormJsonRequest) *workflow.LiteralsToLaunchFormJsonResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.LiteralsToLaunchFormJsonResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.LiteralsToLaunchFormJsonRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TranslatorServiceServer_LiteralsToLaunchFormJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LiteralsToLaunchFormJson'
type TranslatorServiceServer_LiteralsToLaunchFormJson_Call struct {
	*mock.Call
}

// LiteralsToLaunchFormJson is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.LiteralsToLaunchFormJsonRequest
func (_e *TranslatorServiceServer_Expecter) LiteralsToLaunchFormJson(_a0 interface{}, _a1 interface{}) *TranslatorServiceServer_LiteralsToLaunchFormJson_Call {
	return &TranslatorServiceServer_LiteralsToLaunchFormJson_Call{Call: _e.mock.On("LiteralsToLaunchFormJson", _a0, _a1)}
}

func (_c *TranslatorServiceServer_LiteralsToLaunchFormJson_Call) Run(run func(_a0 context.Context, _a1 *workflow.LiteralsToLaunchFormJsonRequest)) *TranslatorServiceServer_LiteralsToLaunchFormJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.LiteralsToLaunchFormJsonRequest))
	})
	return _c
}

func (_c *TranslatorServiceServer_LiteralsToLaunchFormJson_Call) Return(_a0 *workflow.LiteralsToLaunchFormJsonResponse, _a1 error) *TranslatorServiceServer_LiteralsToLaunchFormJson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TranslatorServiceServer_LiteralsToLaunchFormJson_Call) RunAndReturn(run func(context.Context, *workflow.LiteralsToLaunchFormJsonRequest) (*workflow.LiteralsToLaunchFormJsonResponse, error)) *TranslatorServiceServer_LiteralsToLaunchFormJson_Call {
	_c.Call.Return(run)
	return _c
}

// TaskSpecToLaunchFormJson provides a mock function with given fields: _a0, _a1
func (_m *TranslatorServiceServer) TaskSpecToLaunchFormJson(_a0 context.Context, _a1 *workflow.TaskSpecToLaunchFormJsonRequest) (*workflow.TaskSpecToLaunchFormJsonResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TaskSpecToLaunchFormJson")
	}

	var r0 *workflow.TaskSpecToLaunchFormJsonResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.TaskSpecToLaunchFormJsonRequest) (*workflow.TaskSpecToLaunchFormJsonResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.TaskSpecToLaunchFormJsonRequest) *workflow.TaskSpecToLaunchFormJsonResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.TaskSpecToLaunchFormJsonResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.TaskSpecToLaunchFormJsonRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TranslatorServiceServer_TaskSpecToLaunchFormJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TaskSpecToLaunchFormJson'
type TranslatorServiceServer_TaskSpecToLaunchFormJson_Call struct {
	*mock.Call
}

// TaskSpecToLaunchFormJson is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.TaskSpecToLaunchFormJsonRequest
func (_e *TranslatorServiceServer_Expecter) TaskSpecToLaunchFormJson(_a0 interface{}, _a1 interface{}) *TranslatorServiceServer_TaskSpecToLaunchFormJson_Call {
	return &TranslatorServiceServer_TaskSpecToLaunchFormJson_Call{Call: _e.mock.On("TaskSpecToLaunchFormJson", _a0, _a1)}
}

func (_c *TranslatorServiceServer_TaskSpecToLaunchFormJson_Call) Run(run func(_a0 context.Context, _a1 *workflow.TaskSpecToLaunchFormJsonRequest)) *TranslatorServiceServer_TaskSpecToLaunchFormJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.TaskSpecToLaunchFormJsonRequest))
	})
	return _c
}

func (_c *TranslatorServiceServer_TaskSpecToLaunchFormJson_Call) Return(_a0 *workflow.TaskSpecToLaunchFormJsonResponse, _a1 error) *TranslatorServiceServer_TaskSpecToLaunchFormJson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TranslatorServiceServer_TaskSpecToLaunchFormJson_Call) RunAndReturn(run func(context.Context, *workflow.TaskSpecToLaunchFormJsonRequest) (*workflow.TaskSpecToLaunchFormJsonResponse, error)) *TranslatorServiceServer_TaskSpecToLaunchFormJson_Call {
	_c.Call.Return(run)
	return _c
}

// NewTranslatorServiceServer creates a new instance of TranslatorServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTranslatorServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TranslatorServiceServer {
	mock := &TranslatorServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
