// Code generated by mockery. DO NOT EDIT.

package workflow

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
)

// StateServiceClient is an autogenerated mock type for the StateServiceClient type
type StateServiceClient struct {
	mock.Mock
}

type StateServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *StateServiceClient) EXPECT() *StateServiceClient_Expecter {
	return &StateServiceClient_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, opts
func (_m *StateServiceClient) Get(ctx context.Context, opts ...grpc.CallOption) (workflow.StateService_GetClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 workflow.StateService_GetClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (workflow.StateService_GetClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) workflow.StateService_GetClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workflow.StateService_GetClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type StateServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *StateServiceClient_Expecter) Get(ctx interface{}, opts ...interface{}) *StateServiceClient_Get_Call {
	return &StateServiceClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *StateServiceClient_Get_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *StateServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *StateServiceClient_Get_Call) Return(_a0 workflow.StateService_GetClient, _a1 error) *StateServiceClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateServiceClient_Get_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (workflow.StateService_GetClient, error)) *StateServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, opts
func (_m *StateServiceClient) Put(ctx context.Context, opts ...grpc.CallOption) (workflow.StateService_PutClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 workflow.StateService_PutClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (workflow.StateService_PutClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) workflow.StateService_PutClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workflow.StateService_PutClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateServiceClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type StateServiceClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *StateServiceClient_Expecter) Put(ctx interface{}, opts ...interface{}) *StateServiceClient_Put_Call {
	return &StateServiceClient_Put_Call{Call: _e.mock.On("Put",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *StateServiceClient_Put_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *StateServiceClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *StateServiceClient_Put_Call) Return(_a0 workflow.StateService_PutClient, _a1 error) *StateServiceClient_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateServiceClient_Put_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (workflow.StateService_PutClient, error)) *StateServiceClient_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, in, opts
func (_m *StateServiceClient) Watch(ctx context.Context, in *workflow.WatchRequest, opts ...grpc.CallOption) (workflow.StateService_WatchClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 workflow.StateService_WatchClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchRequest, ...grpc.CallOption) (workflow.StateService_WatchClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchRequest, ...grpc.CallOption) workflow.StateService_WatchClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workflow.StateService_WatchClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WatchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateServiceClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type StateServiceClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.WatchRequest
//   - opts ...grpc.CallOption
func (_e *StateServiceClient_Expecter) Watch(ctx interface{}, in interface{}, opts ...interface{}) *StateServiceClient_Watch_Call {
	return &StateServiceClient_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *StateServiceClient_Watch_Call) Run(run func(ctx context.Context, in *workflow.WatchRequest, opts ...grpc.CallOption)) *StateServiceClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.WatchRequest), variadicArgs...)
	})
	return _c
}

func (_c *StateServiceClient_Watch_Call) Return(_a0 workflow.StateService_WatchClient, _a1 error) *StateServiceClient_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateServiceClient_Watch_Call) RunAndReturn(run func(context.Context, *workflow.WatchRequest, ...grpc.CallOption) (workflow.StateService_WatchClient, error)) *StateServiceClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateServiceClient creates a new instance of StateServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateServiceClient {
	mock := &StateServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
