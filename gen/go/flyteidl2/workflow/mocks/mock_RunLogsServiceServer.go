// Code generated by mockery. DO NOT EDIT.

package workflow

import (
	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
	mock "github.com/stretchr/testify/mock"
)

// RunLogsServiceServer is an autogenerated mock type for the RunLogsServiceServer type
type RunLogsServiceServer struct {
	mock.Mock
}

type RunLogsServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *RunLogsServiceServer) EXPECT() *RunLogsServiceServer_Expecter {
	return &RunLogsServiceServer_Expecter{mock: &_m.Mock}
}

// TailLogs provides a mock function with given fields: _a0, _a1
func (_m *RunLogsServiceServer) TailLogs(_a0 *workflow.TailLogsRequest, _a1 workflow.RunLogsService_TailLogsServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TailLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*workflow.TailLogsRequest, workflow.RunLogsService_TailLogsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunLogsServiceServer_TailLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TailLogs'
type RunLogsServiceServer_TailLogs_Call struct {
	*mock.Call
}

// TailLogs is a helper method to define mock.On call
//   - _a0 *workflow.TailLogsRequest
//   - _a1 workflow.RunLogsService_TailLogsServer
func (_e *RunLogsServiceServer_Expecter) TailLogs(_a0 interface{}, _a1 interface{}) *RunLogsServiceServer_TailLogs_Call {
	return &RunLogsServiceServer_TailLogs_Call{Call: _e.mock.On("TailLogs", _a0, _a1)}
}

func (_c *RunLogsServiceServer_TailLogs_Call) Run(run func(_a0 *workflow.TailLogsRequest, _a1 workflow.RunLogsService_TailLogsServer)) *RunLogsServiceServer_TailLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*workflow.TailLogsRequest), args[1].(workflow.RunLogsService_TailLogsServer))
	})
	return _c
}

func (_c *RunLogsServiceServer_TailLogs_Call) Return(_a0 error) *RunLogsServiceServer_TailLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunLogsServiceServer_TailLogs_Call) RunAndReturn(run func(*workflow.TailLogsRequest, workflow.RunLogsService_TailLogsServer) error) *RunLogsServiceServer_TailLogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewRunLogsServiceServer creates a new instance of RunLogsServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRunLogsServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *RunLogsServiceServer {
	mock := &RunLogsServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
