// Code generated by mockery. DO NOT EDIT.

package workflow

import mock "github.com/stretchr/testify/mock"

// isListRunsRequest_ScopeBy is an autogenerated mock type for the isListRunsRequest_ScopeBy type
type isListRunsRequest_ScopeBy struct {
	mock.Mock
}

type isListRunsRequest_ScopeBy_Expecter struct {
	mock *mock.Mock
}

func (_m *isListRunsRequest_ScopeBy) EXPECT() *isListRunsRequest_ScopeBy_Expecter {
	return &isListRunsRequest_ScopeBy_Expecter{mock: &_m.Mock}
}

// isListRunsRequest_ScopeBy provides a mock function with no fields
func (_m *isListRunsRequest_ScopeBy) isListRunsRequest_ScopeBy() {
	_m.Called()
}

// isListRunsRequest_ScopeBy_isListRunsRequest_ScopeBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isListRunsRequest_ScopeBy'
type isListRunsRequest_ScopeBy_isListRunsRequest_ScopeBy_Call struct {
	*mock.Call
}

// isListRunsRequest_ScopeBy is a helper method to define mock.On call
func (_e *isListRunsRequest_ScopeBy_Expecter) isListRunsRequest_ScopeBy() *isListRunsRequest_ScopeBy_isListRunsRequest_ScopeBy_Call {
	return &isListRunsRequest_ScopeBy_isListRunsRequest_ScopeBy_Call{Call: _e.mock.On("isListRunsRequest_ScopeBy")}
}

func (_c *isListRunsRequest_ScopeBy_isListRunsRequest_ScopeBy_Call) Run(run func()) *isListRunsRequest_ScopeBy_isListRunsRequest_ScopeBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *isListRunsRequest_ScopeBy_isListRunsRequest_ScopeBy_Call) Return() *isListRunsRequest_ScopeBy_isListRunsRequest_ScopeBy_Call {
	_c.Call.Return()
	return _c
}

func (_c *isListRunsRequest_ScopeBy_isListRunsRequest_ScopeBy_Call) RunAndReturn(run func()) *isListRunsRequest_ScopeBy_isListRunsRequest_ScopeBy_Call {
	_c.Run(run)
	return _c
}

// newIsListRunsRequest_ScopeBy creates a new instance of isListRunsRequest_ScopeBy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newIsListRunsRequest_ScopeBy(t interface {
	mock.TestingT
	Cleanup(func())
}) *isListRunsRequest_ScopeBy {
	mock := &isListRunsRequest_ScopeBy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
