// Code generated by mockery. DO NOT EDIT.

package workflow

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
)

// QueueServiceClient is an autogenerated mock type for the QueueServiceClient type
type QueueServiceClient struct {
	mock.Mock
}

type QueueServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *QueueServiceClient) EXPECT() *QueueServiceClient_Expecter {
	return &QueueServiceClient_Expecter{mock: &_m.Mock}
}

// AbortQueuedAction provides a mock function with given fields: ctx, in, opts
func (_m *QueueServiceClient) AbortQueuedAction(ctx context.Context, in *workflow.AbortQueuedActionRequest, opts ...grpc.CallOption) (*workflow.AbortQueuedActionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AbortQueuedAction")
	}

	var r0 *workflow.AbortQueuedActionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortQueuedActionRequest, ...grpc.CallOption) (*workflow.AbortQueuedActionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortQueuedActionRequest, ...grpc.CallOption) *workflow.AbortQueuedActionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.AbortQueuedActionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.AbortQueuedActionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueServiceClient_AbortQueuedAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortQueuedAction'
type QueueServiceClient_AbortQueuedAction_Call struct {
	*mock.Call
}

// AbortQueuedAction is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.AbortQueuedActionRequest
//   - opts ...grpc.CallOption
func (_e *QueueServiceClient_Expecter) AbortQueuedAction(ctx interface{}, in interface{}, opts ...interface{}) *QueueServiceClient_AbortQueuedAction_Call {
	return &QueueServiceClient_AbortQueuedAction_Call{Call: _e.mock.On("AbortQueuedAction",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueueServiceClient_AbortQueuedAction_Call) Run(run func(ctx context.Context, in *workflow.AbortQueuedActionRequest, opts ...grpc.CallOption)) *QueueServiceClient_AbortQueuedAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.AbortQueuedActionRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueueServiceClient_AbortQueuedAction_Call) Return(_a0 *workflow.AbortQueuedActionResponse, _a1 error) *QueueServiceClient_AbortQueuedAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueueServiceClient_AbortQueuedAction_Call) RunAndReturn(run func(context.Context, *workflow.AbortQueuedActionRequest, ...grpc.CallOption) (*workflow.AbortQueuedActionResponse, error)) *QueueServiceClient_AbortQueuedAction_Call {
	_c.Call.Return(run)
	return _c
}

// AbortQueuedRun provides a mock function with given fields: ctx, in, opts
func (_m *QueueServiceClient) AbortQueuedRun(ctx context.Context, in *workflow.AbortQueuedRunRequest, opts ...grpc.CallOption) (*workflow.AbortQueuedRunResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AbortQueuedRun")
	}

	var r0 *workflow.AbortQueuedRunResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortQueuedRunRequest, ...grpc.CallOption) (*workflow.AbortQueuedRunResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortQueuedRunRequest, ...grpc.CallOption) *workflow.AbortQueuedRunResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.AbortQueuedRunResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.AbortQueuedRunRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueServiceClient_AbortQueuedRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortQueuedRun'
type QueueServiceClient_AbortQueuedRun_Call struct {
	*mock.Call
}

// AbortQueuedRun is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.AbortQueuedRunRequest
//   - opts ...grpc.CallOption
func (_e *QueueServiceClient_Expecter) AbortQueuedRun(ctx interface{}, in interface{}, opts ...interface{}) *QueueServiceClient_AbortQueuedRun_Call {
	return &QueueServiceClient_AbortQueuedRun_Call{Call: _e.mock.On("AbortQueuedRun",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueueServiceClient_AbortQueuedRun_Call) Run(run func(ctx context.Context, in *workflow.AbortQueuedRunRequest, opts ...grpc.CallOption)) *QueueServiceClient_AbortQueuedRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.AbortQueuedRunRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueueServiceClient_AbortQueuedRun_Call) Return(_a0 *workflow.AbortQueuedRunResponse, _a1 error) *QueueServiceClient_AbortQueuedRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueueServiceClient_AbortQueuedRun_Call) RunAndReturn(run func(context.Context, *workflow.AbortQueuedRunRequest, ...grpc.CallOption) (*workflow.AbortQueuedRunResponse, error)) *QueueServiceClient_AbortQueuedRun_Call {
	_c.Call.Return(run)
	return _c
}

// EnqueueAction provides a mock function with given fields: ctx, in, opts
func (_m *QueueServiceClient) EnqueueAction(ctx context.Context, in *workflow.EnqueueActionRequest, opts ...grpc.CallOption) (*workflow.EnqueueActionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueAction")
	}

	var r0 *workflow.EnqueueActionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.EnqueueActionRequest, ...grpc.CallOption) (*workflow.EnqueueActionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.EnqueueActionRequest, ...grpc.CallOption) *workflow.EnqueueActionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.EnqueueActionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.EnqueueActionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueServiceClient_EnqueueAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnqueueAction'
type QueueServiceClient_EnqueueAction_Call struct {
	*mock.Call
}

// EnqueueAction is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.EnqueueActionRequest
//   - opts ...grpc.CallOption
func (_e *QueueServiceClient_Expecter) EnqueueAction(ctx interface{}, in interface{}, opts ...interface{}) *QueueServiceClient_EnqueueAction_Call {
	return &QueueServiceClient_EnqueueAction_Call{Call: _e.mock.On("EnqueueAction",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueueServiceClient_EnqueueAction_Call) Run(run func(ctx context.Context, in *workflow.EnqueueActionRequest, opts ...grpc.CallOption)) *QueueServiceClient_EnqueueAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.EnqueueActionRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueueServiceClient_EnqueueAction_Call) Return(_a0 *workflow.EnqueueActionResponse, _a1 error) *QueueServiceClient_EnqueueAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueueServiceClient_EnqueueAction_Call) RunAndReturn(run func(context.Context, *workflow.EnqueueActionRequest, ...grpc.CallOption) (*workflow.EnqueueActionResponse, error)) *QueueServiceClient_EnqueueAction_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueueServiceClient creates a new instance of QueueServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueServiceClient {
	mock := &QueueServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
