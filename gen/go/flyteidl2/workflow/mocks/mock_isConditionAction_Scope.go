// Code generated by mockery. DO NOT EDIT.

package workflow

import mock "github.com/stretchr/testify/mock"

// isConditionAction_Scope is an autogenerated mock type for the isConditionAction_Scope type
type isConditionAction_Scope struct {
	mock.Mock
}

type isConditionAction_Scope_Expecter struct {
	mock *mock.Mock
}

func (_m *isConditionAction_Scope) EXPECT() *isConditionAction_Scope_Expecter {
	return &isConditionAction_Scope_Expecter{mock: &_m.Mock}
}

// isConditionAction_Scope provides a mock function with no fields
func (_m *isConditionAction_Scope) isConditionAction_Scope() {
	_m.Called()
}

// isConditionAction_Scope_isConditionAction_Scope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isConditionAction_Scope'
type isConditionAction_Scope_isConditionAction_Scope_Call struct {
	*mock.Call
}

// isConditionAction_Scope is a helper method to define mock.On call
func (_e *isConditionAction_Scope_Expecter) isConditionAction_Scope() *isConditionAction_Scope_isConditionAction_Scope_Call {
	return &isConditionAction_Scope_isConditionAction_Scope_Call{Call: _e.mock.On("isConditionAction_Scope")}
}

func (_c *isConditionAction_Scope_isConditionAction_Scope_Call) Run(run func()) *isConditionAction_Scope_isConditionAction_Scope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *isConditionAction_Scope_isConditionAction_Scope_Call) Return() *isConditionAction_Scope_isConditionAction_Scope_Call {
	_c.Call.Return()
	return _c
}

func (_c *isConditionAction_Scope_isConditionAction_Scope_Call) RunAndReturn(run func()) *isConditionAction_Scope_isConditionAction_Scope_Call {
	_c.Run(run)
	return _c
}

// newIsConditionAction_Scope creates a new instance of isConditionAction_Scope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newIsConditionAction_Scope(t interface {
	mock.TestingT
	Cleanup(func())
}) *isConditionAction_Scope {
	mock := &isConditionAction_Scope{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
