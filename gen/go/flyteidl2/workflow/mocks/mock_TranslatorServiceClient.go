// Code generated by mockery. DO NOT EDIT.

package workflow

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
)

// TranslatorServiceClient is an autogenerated mock type for the TranslatorServiceClient type
type TranslatorServiceClient struct {
	mock.Mock
}

type TranslatorServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TranslatorServiceClient) EXPECT() *TranslatorServiceClient_Expecter {
	return &TranslatorServiceClient_Expecter{mock: &_m.Mock}
}

// LaunchFormJsonToLiterals provides a mock function with given fields: ctx, in, opts
func (_m *TranslatorServiceClient) LaunchFormJsonToLiterals(ctx context.Context, in *workflow.LaunchFormJsonToLiteralsRequest, opts ...grpc.CallOption) (*workflow.LaunchFormJsonToLiteralsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LaunchFormJsonToLiterals")
	}

	var r0 *workflow.LaunchFormJsonToLiteralsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.LaunchFormJsonToLiteralsRequest, ...grpc.CallOption) (*workflow.LaunchFormJsonToLiteralsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.LaunchFormJsonToLiteralsRequest, ...grpc.CallOption) *workflow.LaunchFormJsonToLiteralsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.LaunchFormJsonToLiteralsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.LaunchFormJsonToLiteralsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TranslatorServiceClient_LaunchFormJsonToLiterals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LaunchFormJsonToLiterals'
type TranslatorServiceClient_LaunchFormJsonToLiterals_Call struct {
	*mock.Call
}

// LaunchFormJsonToLiterals is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.LaunchFormJsonToLiteralsRequest
//   - opts ...grpc.CallOption
func (_e *TranslatorServiceClient_Expecter) LaunchFormJsonToLiterals(ctx interface{}, in interface{}, opts ...interface{}) *TranslatorServiceClient_LaunchFormJsonToLiterals_Call {
	return &TranslatorServiceClient_LaunchFormJsonToLiterals_Call{Call: _e.mock.On("LaunchFormJsonToLiterals",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TranslatorServiceClient_LaunchFormJsonToLiterals_Call) Run(run func(ctx context.Context, in *workflow.LaunchFormJsonToLiteralsRequest, opts ...grpc.CallOption)) *TranslatorServiceClient_LaunchFormJsonToLiterals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.LaunchFormJsonToLiteralsRequest), variadicArgs...)
	})
	return _c
}

func (_c *TranslatorServiceClient_LaunchFormJsonToLiterals_Call) Return(_a0 *workflow.LaunchFormJsonToLiteralsResponse, _a1 error) *TranslatorServiceClient_LaunchFormJsonToLiterals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TranslatorServiceClient_LaunchFormJsonToLiterals_Call) RunAndReturn(run func(context.Context, *workflow.LaunchFormJsonToLiteralsRequest, ...grpc.CallOption) (*workflow.LaunchFormJsonToLiteralsResponse, error)) *TranslatorServiceClient_LaunchFormJsonToLiterals_Call {
	_c.Call.Return(run)
	return _c
}

// LiteralsToLaunchFormJson provides a mock function with given fields: ctx, in, opts
func (_m *TranslatorServiceClient) LiteralsToLaunchFormJson(ctx context.Context, in *workflow.LiteralsToLaunchFormJsonRequest, opts ...grpc.CallOption) (*workflow.LiteralsToLaunchFormJsonResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LiteralsToLaunchFormJson")
	}

	var r0 *workflow.LiteralsToLaunchFormJsonResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.LiteralsToLaunchFormJsonRequest, ...grpc.CallOption) (*workflow.LiteralsToLaunchFormJsonResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.LiteralsToLaunchFormJsonRequest, ...grpc.CallOption) *workflow.LiteralsToLaunchFormJsonResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.LiteralsToLaunchFormJsonResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.LiteralsToLaunchFormJsonRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TranslatorServiceClient_LiteralsToLaunchFormJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LiteralsToLaunchFormJson'
type TranslatorServiceClient_LiteralsToLaunchFormJson_Call struct {
	*mock.Call
}

// LiteralsToLaunchFormJson is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.LiteralsToLaunchFormJsonRequest
//   - opts ...grpc.CallOption
func (_e *TranslatorServiceClient_Expecter) LiteralsToLaunchFormJson(ctx interface{}, in interface{}, opts ...interface{}) *TranslatorServiceClient_LiteralsToLaunchFormJson_Call {
	return &TranslatorServiceClient_LiteralsToLaunchFormJson_Call{Call: _e.mock.On("LiteralsToLaunchFormJson",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TranslatorServiceClient_LiteralsToLaunchFormJson_Call) Run(run func(ctx context.Context, in *workflow.LiteralsToLaunchFormJsonRequest, opts ...grpc.CallOption)) *TranslatorServiceClient_LiteralsToLaunchFormJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.LiteralsToLaunchFormJsonRequest), variadicArgs...)
	})
	return _c
}

func (_c *TranslatorServiceClient_LiteralsToLaunchFormJson_Call) Return(_a0 *workflow.LiteralsToLaunchFormJsonResponse, _a1 error) *TranslatorServiceClient_LiteralsToLaunchFormJson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TranslatorServiceClient_LiteralsToLaunchFormJson_Call) RunAndReturn(run func(context.Context, *workflow.LiteralsToLaunchFormJsonRequest, ...grpc.CallOption) (*workflow.LiteralsToLaunchFormJsonResponse, error)) *TranslatorServiceClient_LiteralsToLaunchFormJson_Call {
	_c.Call.Return(run)
	return _c
}

// TaskSpecToLaunchFormJson provides a mock function with given fields: ctx, in, opts
func (_m *TranslatorServiceClient) TaskSpecToLaunchFormJson(ctx context.Context, in *workflow.TaskSpecToLaunchFormJsonRequest, opts ...grpc.CallOption) (*workflow.TaskSpecToLaunchFormJsonResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TaskSpecToLaunchFormJson")
	}

	var r0 *workflow.TaskSpecToLaunchFormJsonResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.TaskSpecToLaunchFormJsonRequest, ...grpc.CallOption) (*workflow.TaskSpecToLaunchFormJsonResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.TaskSpecToLaunchFormJsonRequest, ...grpc.CallOption) *workflow.TaskSpecToLaunchFormJsonResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.TaskSpecToLaunchFormJsonResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.TaskSpecToLaunchFormJsonRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TranslatorServiceClient_TaskSpecToLaunchFormJson_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TaskSpecToLaunchFormJson'
type TranslatorServiceClient_TaskSpecToLaunchFormJson_Call struct {
	*mock.Call
}

// TaskSpecToLaunchFormJson is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.TaskSpecToLaunchFormJsonRequest
//   - opts ...grpc.CallOption
func (_e *TranslatorServiceClient_Expecter) TaskSpecToLaunchFormJson(ctx interface{}, in interface{}, opts ...interface{}) *TranslatorServiceClient_TaskSpecToLaunchFormJson_Call {
	return &TranslatorServiceClient_TaskSpecToLaunchFormJson_Call{Call: _e.mock.On("TaskSpecToLaunchFormJson",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TranslatorServiceClient_TaskSpecToLaunchFormJson_Call) Run(run func(ctx context.Context, in *workflow.TaskSpecToLaunchFormJsonRequest, opts ...grpc.CallOption)) *TranslatorServiceClient_TaskSpecToLaunchFormJson_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.TaskSpecToLaunchFormJsonRequest), variadicArgs...)
	})
	return _c
}

func (_c *TranslatorServiceClient_TaskSpecToLaunchFormJson_Call) Return(_a0 *workflow.TaskSpecToLaunchFormJsonResponse, _a1 error) *TranslatorServiceClient_TaskSpecToLaunchFormJson_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TranslatorServiceClient_TaskSpecToLaunchFormJson_Call) RunAndReturn(run func(context.Context, *workflow.TaskSpecToLaunchFormJsonRequest, ...grpc.CallOption) (*workflow.TaskSpecToLaunchFormJsonResponse, error)) *TranslatorServiceClient_TaskSpecToLaunchFormJson_Call {
	_c.Call.Return(run)
	return _c
}

// NewTranslatorServiceClient creates a new instance of TranslatorServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTranslatorServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TranslatorServiceClient {
	mock := &TranslatorServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
