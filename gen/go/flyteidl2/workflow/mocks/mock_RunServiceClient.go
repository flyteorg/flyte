// Code generated by mockery. DO NOT EDIT.

package workflow

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
)

// RunServiceClient is an autogenerated mock type for the RunServiceClient type
type RunServiceClient struct {
	mock.Mock
}

type RunServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RunServiceClient) EXPECT() *RunServiceClient_Expecter {
	return &RunServiceClient_Expecter{mock: &_m.Mock}
}

// AbortAction provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) AbortAction(ctx context.Context, in *workflow.AbortActionRequest, opts ...grpc.CallOption) (*workflow.AbortActionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AbortAction")
	}

	var r0 *workflow.AbortActionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortActionRequest, ...grpc.CallOption) (*workflow.AbortActionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortActionRequest, ...grpc.CallOption) *workflow.AbortActionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.AbortActionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.AbortActionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_AbortAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortAction'
type RunServiceClient_AbortAction_Call struct {
	*mock.Call
}

// AbortAction is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.AbortActionRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) AbortAction(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_AbortAction_Call {
	return &RunServiceClient_AbortAction_Call{Call: _e.mock.On("AbortAction",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_AbortAction_Call) Run(run func(ctx context.Context, in *workflow.AbortActionRequest, opts ...grpc.CallOption)) *RunServiceClient_AbortAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.AbortActionRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_AbortAction_Call) Return(_a0 *workflow.AbortActionResponse, _a1 error) *RunServiceClient_AbortAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_AbortAction_Call) RunAndReturn(run func(context.Context, *workflow.AbortActionRequest, ...grpc.CallOption) (*workflow.AbortActionResponse, error)) *RunServiceClient_AbortAction_Call {
	_c.Call.Return(run)
	return _c
}

// AbortRun provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) AbortRun(ctx context.Context, in *workflow.AbortRunRequest, opts ...grpc.CallOption) (*workflow.AbortRunResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AbortRun")
	}

	var r0 *workflow.AbortRunResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortRunRequest, ...grpc.CallOption) (*workflow.AbortRunResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortRunRequest, ...grpc.CallOption) *workflow.AbortRunResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.AbortRunResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.AbortRunRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_AbortRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortRun'
type RunServiceClient_AbortRun_Call struct {
	*mock.Call
}

// AbortRun is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.AbortRunRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) AbortRun(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_AbortRun_Call {
	return &RunServiceClient_AbortRun_Call{Call: _e.mock.On("AbortRun",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_AbortRun_Call) Run(run func(ctx context.Context, in *workflow.AbortRunRequest, opts ...grpc.CallOption)) *RunServiceClient_AbortRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.AbortRunRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_AbortRun_Call) Return(_a0 *workflow.AbortRunResponse, _a1 error) *RunServiceClient_AbortRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_AbortRun_Call) RunAndReturn(run func(context.Context, *workflow.AbortRunRequest, ...grpc.CallOption) (*workflow.AbortRunResponse, error)) *RunServiceClient_AbortRun_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRun provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) CreateRun(ctx context.Context, in *workflow.CreateRunRequest, opts ...grpc.CallOption) (*workflow.CreateRunResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRun")
	}

	var r0 *workflow.CreateRunResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.CreateRunRequest, ...grpc.CallOption) (*workflow.CreateRunResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.CreateRunRequest, ...grpc.CallOption) *workflow.CreateRunResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.CreateRunResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.CreateRunRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_CreateRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRun'
type RunServiceClient_CreateRun_Call struct {
	*mock.Call
}

// CreateRun is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.CreateRunRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) CreateRun(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_CreateRun_Call {
	return &RunServiceClient_CreateRun_Call{Call: _e.mock.On("CreateRun",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_CreateRun_Call) Run(run func(ctx context.Context, in *workflow.CreateRunRequest, opts ...grpc.CallOption)) *RunServiceClient_CreateRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.CreateRunRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_CreateRun_Call) Return(_a0 *workflow.CreateRunResponse, _a1 error) *RunServiceClient_CreateRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_CreateRun_Call) RunAndReturn(run func(context.Context, *workflow.CreateRunRequest, ...grpc.CallOption) (*workflow.CreateRunResponse, error)) *RunServiceClient_CreateRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionData provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) GetActionData(ctx context.Context, in *workflow.GetActionDataRequest, opts ...grpc.CallOption) (*workflow.GetActionDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetActionData")
	}

	var r0 *workflow.GetActionDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetActionDataRequest, ...grpc.CallOption) (*workflow.GetActionDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetActionDataRequest, ...grpc.CallOption) *workflow.GetActionDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.GetActionDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.GetActionDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_GetActionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionData'
type RunServiceClient_GetActionData_Call struct {
	*mock.Call
}

// GetActionData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.GetActionDataRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) GetActionData(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_GetActionData_Call {
	return &RunServiceClient_GetActionData_Call{Call: _e.mock.On("GetActionData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_GetActionData_Call) Run(run func(ctx context.Context, in *workflow.GetActionDataRequest, opts ...grpc.CallOption)) *RunServiceClient_GetActionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.GetActionDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_GetActionData_Call) Return(_a0 *workflow.GetActionDataResponse, _a1 error) *RunServiceClient_GetActionData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_GetActionData_Call) RunAndReturn(run func(context.Context, *workflow.GetActionDataRequest, ...grpc.CallOption) (*workflow.GetActionDataResponse, error)) *RunServiceClient_GetActionData_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionDetails provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) GetActionDetails(ctx context.Context, in *workflow.GetActionDetailsRequest, opts ...grpc.CallOption) (*workflow.GetActionDetailsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetActionDetails")
	}

	var r0 *workflow.GetActionDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetActionDetailsRequest, ...grpc.CallOption) (*workflow.GetActionDetailsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetActionDetailsRequest, ...grpc.CallOption) *workflow.GetActionDetailsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.GetActionDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.GetActionDetailsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_GetActionDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionDetails'
type RunServiceClient_GetActionDetails_Call struct {
	*mock.Call
}

// GetActionDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.GetActionDetailsRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) GetActionDetails(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_GetActionDetails_Call {
	return &RunServiceClient_GetActionDetails_Call{Call: _e.mock.On("GetActionDetails",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_GetActionDetails_Call) Run(run func(ctx context.Context, in *workflow.GetActionDetailsRequest, opts ...grpc.CallOption)) *RunServiceClient_GetActionDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.GetActionDetailsRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_GetActionDetails_Call) Return(_a0 *workflow.GetActionDetailsResponse, _a1 error) *RunServiceClient_GetActionDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_GetActionDetails_Call) RunAndReturn(run func(context.Context, *workflow.GetActionDetailsRequest, ...grpc.CallOption) (*workflow.GetActionDetailsResponse, error)) *RunServiceClient_GetActionDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRun provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) GetLatestRun(ctx context.Context, in *workflow.GetLatestRunRequest, opts ...grpc.CallOption) (*workflow.GetLatestRunResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRun")
	}

	var r0 *workflow.GetLatestRunResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetLatestRunRequest, ...grpc.CallOption) (*workflow.GetLatestRunResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetLatestRunRequest, ...grpc.CallOption) *workflow.GetLatestRunResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.GetLatestRunResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.GetLatestRunRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_GetLatestRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRun'
type RunServiceClient_GetLatestRun_Call struct {
	*mock.Call
}

// GetLatestRun is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.GetLatestRunRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) GetLatestRun(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_GetLatestRun_Call {
	return &RunServiceClient_GetLatestRun_Call{Call: _e.mock.On("GetLatestRun",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_GetLatestRun_Call) Run(run func(ctx context.Context, in *workflow.GetLatestRunRequest, opts ...grpc.CallOption)) *RunServiceClient_GetLatestRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.GetLatestRunRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_GetLatestRun_Call) Return(_a0 *workflow.GetLatestRunResponse, _a1 error) *RunServiceClient_GetLatestRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_GetLatestRun_Call) RunAndReturn(run func(context.Context, *workflow.GetLatestRunRequest, ...grpc.CallOption) (*workflow.GetLatestRunResponse, error)) *RunServiceClient_GetLatestRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetRunDetails provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) GetRunDetails(ctx context.Context, in *workflow.GetRunDetailsRequest, opts ...grpc.CallOption) (*workflow.GetRunDetailsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRunDetails")
	}

	var r0 *workflow.GetRunDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetRunDetailsRequest, ...grpc.CallOption) (*workflow.GetRunDetailsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetRunDetailsRequest, ...grpc.CallOption) *workflow.GetRunDetailsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.GetRunDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.GetRunDetailsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_GetRunDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRunDetails'
type RunServiceClient_GetRunDetails_Call struct {
	*mock.Call
}

// GetRunDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.GetRunDetailsRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) GetRunDetails(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_GetRunDetails_Call {
	return &RunServiceClient_GetRunDetails_Call{Call: _e.mock.On("GetRunDetails",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_GetRunDetails_Call) Run(run func(ctx context.Context, in *workflow.GetRunDetailsRequest, opts ...grpc.CallOption)) *RunServiceClient_GetRunDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.GetRunDetailsRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_GetRunDetails_Call) Return(_a0 *workflow.GetRunDetailsResponse, _a1 error) *RunServiceClient_GetRunDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_GetRunDetails_Call) RunAndReturn(run func(context.Context, *workflow.GetRunDetailsRequest, ...grpc.CallOption) (*workflow.GetRunDetailsResponse, error)) *RunServiceClient_GetRunDetails_Call {
	_c.Call.Return(run)
	return _c
}

// ListActions provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) ListActions(ctx context.Context, in *workflow.ListActionsRequest, opts ...grpc.CallOption) (*workflow.ListActionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListActions")
	}

	var r0 *workflow.ListActionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.ListActionsRequest, ...grpc.CallOption) (*workflow.ListActionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.ListActionsRequest, ...grpc.CallOption) *workflow.ListActionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.ListActionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.ListActionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_ListActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActions'
type RunServiceClient_ListActions_Call struct {
	*mock.Call
}

// ListActions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.ListActionsRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) ListActions(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_ListActions_Call {
	return &RunServiceClient_ListActions_Call{Call: _e.mock.On("ListActions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_ListActions_Call) Run(run func(ctx context.Context, in *workflow.ListActionsRequest, opts ...grpc.CallOption)) *RunServiceClient_ListActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.ListActionsRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_ListActions_Call) Return(_a0 *workflow.ListActionsResponse, _a1 error) *RunServiceClient_ListActions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_ListActions_Call) RunAndReturn(run func(context.Context, *workflow.ListActionsRequest, ...grpc.CallOption) (*workflow.ListActionsResponse, error)) *RunServiceClient_ListActions_Call {
	_c.Call.Return(run)
	return _c
}

// ListRuns provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) ListRuns(ctx context.Context, in *workflow.ListRunsRequest, opts ...grpc.CallOption) (*workflow.ListRunsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRuns")
	}

	var r0 *workflow.ListRunsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.ListRunsRequest, ...grpc.CallOption) (*workflow.ListRunsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.ListRunsRequest, ...grpc.CallOption) *workflow.ListRunsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.ListRunsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.ListRunsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_ListRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRuns'
type RunServiceClient_ListRuns_Call struct {
	*mock.Call
}

// ListRuns is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.ListRunsRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) ListRuns(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_ListRuns_Call {
	return &RunServiceClient_ListRuns_Call{Call: _e.mock.On("ListRuns",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_ListRuns_Call) Run(run func(ctx context.Context, in *workflow.ListRunsRequest, opts ...grpc.CallOption)) *RunServiceClient_ListRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.ListRunsRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_ListRuns_Call) Return(_a0 *workflow.ListRunsResponse, _a1 error) *RunServiceClient_ListRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_ListRuns_Call) RunAndReturn(run func(context.Context, *workflow.ListRunsRequest, ...grpc.CallOption) (*workflow.ListRunsResponse, error)) *RunServiceClient_ListRuns_Call {
	_c.Call.Return(run)
	return _c
}

// WatchActionDetails provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) WatchActionDetails(ctx context.Context, in *workflow.WatchActionDetailsRequest, opts ...grpc.CallOption) (workflow.RunService_WatchActionDetailsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchActionDetails")
	}

	var r0 workflow.RunService_WatchActionDetailsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchActionDetailsRequest, ...grpc.CallOption) (workflow.RunService_WatchActionDetailsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchActionDetailsRequest, ...grpc.CallOption) workflow.RunService_WatchActionDetailsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workflow.RunService_WatchActionDetailsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WatchActionDetailsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_WatchActionDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchActionDetails'
type RunServiceClient_WatchActionDetails_Call struct {
	*mock.Call
}

// WatchActionDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.WatchActionDetailsRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) WatchActionDetails(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_WatchActionDetails_Call {
	return &RunServiceClient_WatchActionDetails_Call{Call: _e.mock.On("WatchActionDetails",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_WatchActionDetails_Call) Run(run func(ctx context.Context, in *workflow.WatchActionDetailsRequest, opts ...grpc.CallOption)) *RunServiceClient_WatchActionDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.WatchActionDetailsRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_WatchActionDetails_Call) Return(_a0 workflow.RunService_WatchActionDetailsClient, _a1 error) *RunServiceClient_WatchActionDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_WatchActionDetails_Call) RunAndReturn(run func(context.Context, *workflow.WatchActionDetailsRequest, ...grpc.CallOption) (workflow.RunService_WatchActionDetailsClient, error)) *RunServiceClient_WatchActionDetails_Call {
	_c.Call.Return(run)
	return _c
}

// WatchActions provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) WatchActions(ctx context.Context, in *workflow.WatchActionsRequest, opts ...grpc.CallOption) (workflow.RunService_WatchActionsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchActions")
	}

	var r0 workflow.RunService_WatchActionsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchActionsRequest, ...grpc.CallOption) (workflow.RunService_WatchActionsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchActionsRequest, ...grpc.CallOption) workflow.RunService_WatchActionsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workflow.RunService_WatchActionsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WatchActionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_WatchActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchActions'
type RunServiceClient_WatchActions_Call struct {
	*mock.Call
}

// WatchActions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.WatchActionsRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) WatchActions(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_WatchActions_Call {
	return &RunServiceClient_WatchActions_Call{Call: _e.mock.On("WatchActions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_WatchActions_Call) Run(run func(ctx context.Context, in *workflow.WatchActionsRequest, opts ...grpc.CallOption)) *RunServiceClient_WatchActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.WatchActionsRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_WatchActions_Call) Return(_a0 workflow.RunService_WatchActionsClient, _a1 error) *RunServiceClient_WatchActions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_WatchActions_Call) RunAndReturn(run func(context.Context, *workflow.WatchActionsRequest, ...grpc.CallOption) (workflow.RunService_WatchActionsClient, error)) *RunServiceClient_WatchActions_Call {
	_c.Call.Return(run)
	return _c
}

// WatchClusterEvents provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) WatchClusterEvents(ctx context.Context, in *workflow.WatchClusterEventsRequest, opts ...grpc.CallOption) (workflow.RunService_WatchClusterEventsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchClusterEvents")
	}

	var r0 workflow.RunService_WatchClusterEventsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchClusterEventsRequest, ...grpc.CallOption) (workflow.RunService_WatchClusterEventsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchClusterEventsRequest, ...grpc.CallOption) workflow.RunService_WatchClusterEventsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workflow.RunService_WatchClusterEventsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WatchClusterEventsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_WatchClusterEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchClusterEvents'
type RunServiceClient_WatchClusterEvents_Call struct {
	*mock.Call
}

// WatchClusterEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.WatchClusterEventsRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) WatchClusterEvents(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_WatchClusterEvents_Call {
	return &RunServiceClient_WatchClusterEvents_Call{Call: _e.mock.On("WatchClusterEvents",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_WatchClusterEvents_Call) Run(run func(ctx context.Context, in *workflow.WatchClusterEventsRequest, opts ...grpc.CallOption)) *RunServiceClient_WatchClusterEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.WatchClusterEventsRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_WatchClusterEvents_Call) Return(_a0 workflow.RunService_WatchClusterEventsClient, _a1 error) *RunServiceClient_WatchClusterEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_WatchClusterEvents_Call) RunAndReturn(run func(context.Context, *workflow.WatchClusterEventsRequest, ...grpc.CallOption) (workflow.RunService_WatchClusterEventsClient, error)) *RunServiceClient_WatchClusterEvents_Call {
	_c.Call.Return(run)
	return _c
}

// WatchRunDetails provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) WatchRunDetails(ctx context.Context, in *workflow.WatchRunDetailsRequest, opts ...grpc.CallOption) (workflow.RunService_WatchRunDetailsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchRunDetails")
	}

	var r0 workflow.RunService_WatchRunDetailsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchRunDetailsRequest, ...grpc.CallOption) (workflow.RunService_WatchRunDetailsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchRunDetailsRequest, ...grpc.CallOption) workflow.RunService_WatchRunDetailsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workflow.RunService_WatchRunDetailsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WatchRunDetailsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_WatchRunDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchRunDetails'
type RunServiceClient_WatchRunDetails_Call struct {
	*mock.Call
}

// WatchRunDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.WatchRunDetailsRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) WatchRunDetails(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_WatchRunDetails_Call {
	return &RunServiceClient_WatchRunDetails_Call{Call: _e.mock.On("WatchRunDetails",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_WatchRunDetails_Call) Run(run func(ctx context.Context, in *workflow.WatchRunDetailsRequest, opts ...grpc.CallOption)) *RunServiceClient_WatchRunDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.WatchRunDetailsRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_WatchRunDetails_Call) Return(_a0 workflow.RunService_WatchRunDetailsClient, _a1 error) *RunServiceClient_WatchRunDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_WatchRunDetails_Call) RunAndReturn(run func(context.Context, *workflow.WatchRunDetailsRequest, ...grpc.CallOption) (workflow.RunService_WatchRunDetailsClient, error)) *RunServiceClient_WatchRunDetails_Call {
	_c.Call.Return(run)
	return _c
}

// WatchRuns provides a mock function with given fields: ctx, in, opts
func (_m *RunServiceClient) WatchRuns(ctx context.Context, in *workflow.WatchRunsRequest, opts ...grpc.CallOption) (workflow.RunService_WatchRunsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchRuns")
	}

	var r0 workflow.RunService_WatchRunsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchRunsRequest, ...grpc.CallOption) (workflow.RunService_WatchRunsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WatchRunsRequest, ...grpc.CallOption) workflow.RunService_WatchRunsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(workflow.RunService_WatchRunsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WatchRunsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceClient_WatchRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchRuns'
type RunServiceClient_WatchRuns_Call struct {
	*mock.Call
}

// WatchRuns is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflow.WatchRunsRequest
//   - opts ...grpc.CallOption
func (_e *RunServiceClient_Expecter) WatchRuns(ctx interface{}, in interface{}, opts ...interface{}) *RunServiceClient_WatchRuns_Call {
	return &RunServiceClient_WatchRuns_Call{Call: _e.mock.On("WatchRuns",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *RunServiceClient_WatchRuns_Call) Run(run func(ctx context.Context, in *workflow.WatchRunsRequest, opts ...grpc.CallOption)) *RunServiceClient_WatchRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*workflow.WatchRunsRequest), variadicArgs...)
	})
	return _c
}

func (_c *RunServiceClient_WatchRuns_Call) Return(_a0 workflow.RunService_WatchRunsClient, _a1 error) *RunServiceClient_WatchRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceClient_WatchRuns_Call) RunAndReturn(run func(context.Context, *workflow.WatchRunsRequest, ...grpc.CallOption) (workflow.RunService_WatchRunsClient, error)) *RunServiceClient_WatchRuns_Call {
	_c.Call.Return(run)
	return _c
}

// NewRunServiceClient creates a new instance of RunServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRunServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RunServiceClient {
	mock := &RunServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
