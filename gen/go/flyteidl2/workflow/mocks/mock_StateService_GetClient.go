// Code generated by mockery. DO NOT EDIT.

package workflow

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metadata "google.golang.org/grpc/metadata"

	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
)

// StateService_GetClient is an autogenerated mock type for the StateService_GetClient type
type StateService_GetClient struct {
	mock.Mock
}

type StateService_GetClient_Expecter struct {
	mock *mock.Mock
}

func (_m *StateService_GetClient) EXPECT() *StateService_GetClient_Expecter {
	return &StateService_GetClient_Expecter{mock: &_m.Mock}
}

// CloseSend provides a mock function with no fields
func (_m *StateService_GetClient) CloseSend() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseSend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateService_GetClient_CloseSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSend'
type StateService_GetClient_CloseSend_Call struct {
	*mock.Call
}

// CloseSend is a helper method to define mock.On call
func (_e *StateService_GetClient_Expecter) CloseSend() *StateService_GetClient_CloseSend_Call {
	return &StateService_GetClient_CloseSend_Call{Call: _e.mock.On("CloseSend")}
}

func (_c *StateService_GetClient_CloseSend_Call) Run(run func()) *StateService_GetClient_CloseSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateService_GetClient_CloseSend_Call) Return(_a0 error) *StateService_GetClient_CloseSend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateService_GetClient_CloseSend_Call) RunAndReturn(run func() error) *StateService_GetClient_CloseSend_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function with no fields
func (_m *StateService_GetClient) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// StateService_GetClient_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type StateService_GetClient_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *StateService_GetClient_Expecter) Context() *StateService_GetClient_Context_Call {
	return &StateService_GetClient_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *StateService_GetClient_Context_Call) Run(run func()) *StateService_GetClient_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateService_GetClient_Context_Call) Return(_a0 context.Context) *StateService_GetClient_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateService_GetClient_Context_Call) RunAndReturn(run func() context.Context) *StateService_GetClient_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with no fields
func (_m *StateService_GetClient) Header() (metadata.MD, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 metadata.MD
	var r1 error
	if rf, ok := ret.Get(0).(func() (metadata.MD, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateService_GetClient_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type StateService_GetClient_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *StateService_GetClient_Expecter) Header() *StateService_GetClient_Header_Call {
	return &StateService_GetClient_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *StateService_GetClient_Header_Call) Run(run func()) *StateService_GetClient_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateService_GetClient_Header_Call) Return(_a0 metadata.MD, _a1 error) *StateService_GetClient_Header_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateService_GetClient_Header_Call) RunAndReturn(run func() (metadata.MD, error)) *StateService_GetClient_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function with no fields
func (_m *StateService_GetClient) Recv() (*workflow.GetResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 *workflow.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*workflow.GetResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *workflow.GetResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateService_GetClient_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type StateService_GetClient_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
func (_e *StateService_GetClient_Expecter) Recv() *StateService_GetClient_Recv_Call {
	return &StateService_GetClient_Recv_Call{Call: _e.mock.On("Recv")}
}

func (_c *StateService_GetClient_Recv_Call) Run(run func()) *StateService_GetClient_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateService_GetClient_Recv_Call) Return(_a0 *workflow.GetResponse, _a1 error) *StateService_GetClient_Recv_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateService_GetClient_Recv_Call) RunAndReturn(run func() (*workflow.GetResponse, error)) *StateService_GetClient_Recv_Call {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function with given fields: m
func (_m *StateService_GetClient) RecvMsg(m any) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(any) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateService_GetClient_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type StateService_GetClient_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m any
func (_e *StateService_GetClient_Expecter) RecvMsg(m interface{}) *StateService_GetClient_RecvMsg_Call {
	return &StateService_GetClient_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *StateService_GetClient_RecvMsg_Call) Run(run func(m any)) *StateService_GetClient_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *StateService_GetClient_RecvMsg_Call) Return(_a0 error) *StateService_GetClient_RecvMsg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateService_GetClient_RecvMsg_Call) RunAndReturn(run func(any) error) *StateService_GetClient_RecvMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: _a0
func (_m *StateService_GetClient) Send(_a0 *workflow.GetRequest) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*workflow.GetRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateService_GetClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type StateService_GetClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - _a0 *workflow.GetRequest
func (_e *StateService_GetClient_Expecter) Send(_a0 interface{}) *StateService_GetClient_Send_Call {
	return &StateService_GetClient_Send_Call{Call: _e.mock.On("Send", _a0)}
}

func (_c *StateService_GetClient_Send_Call) Run(run func(_a0 *workflow.GetRequest)) *StateService_GetClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*workflow.GetRequest))
	})
	return _c
}

func (_c *StateService_GetClient_Send_Call) Return(_a0 error) *StateService_GetClient_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateService_GetClient_Send_Call) RunAndReturn(run func(*workflow.GetRequest) error) *StateService_GetClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function with given fields: m
func (_m *StateService_GetClient) SendMsg(m any) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(any) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateService_GetClient_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type StateService_GetClient_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m any
func (_e *StateService_GetClient_Expecter) SendMsg(m interface{}) *StateService_GetClient_SendMsg_Call {
	return &StateService_GetClient_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *StateService_GetClient_SendMsg_Call) Run(run func(m any)) *StateService_GetClient_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *StateService_GetClient_SendMsg_Call) Return(_a0 error) *StateService_GetClient_SendMsg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateService_GetClient_SendMsg_Call) RunAndReturn(run func(any) error) *StateService_GetClient_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Trailer provides a mock function with no fields
func (_m *StateService_GetClient) Trailer() metadata.MD {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trailer")
	}

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	return r0
}

// StateService_GetClient_Trailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trailer'
type StateService_GetClient_Trailer_Call struct {
	*mock.Call
}

// Trailer is a helper method to define mock.On call
func (_e *StateService_GetClient_Expecter) Trailer() *StateService_GetClient_Trailer_Call {
	return &StateService_GetClient_Trailer_Call{Call: _e.mock.On("Trailer")}
}

func (_c *StateService_GetClient_Trailer_Call) Run(run func()) *StateService_GetClient_Trailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateService_GetClient_Trailer_Call) Return(_a0 metadata.MD) *StateService_GetClient_Trailer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateService_GetClient_Trailer_Call) RunAndReturn(run func() metadata.MD) *StateService_GetClient_Trailer_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateService_GetClient creates a new instance of StateService_GetClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateService_GetClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateService_GetClient {
	mock := &StateService_GetClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
