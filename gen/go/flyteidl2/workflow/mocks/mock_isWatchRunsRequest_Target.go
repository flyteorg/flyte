// Code generated by mockery. DO NOT EDIT.

package workflow

import mock "github.com/stretchr/testify/mock"

// isWatchRunsRequest_Target is an autogenerated mock type for the isWatchRunsRequest_Target type
type isWatchRunsRequest_Target struct {
	mock.Mock
}

type isWatchRunsRequest_Target_Expecter struct {
	mock *mock.Mock
}

func (_m *isWatchRunsRequest_Target) EXPECT() *isWatchRunsRequest_Target_Expecter {
	return &isWatchRunsRequest_Target_Expecter{mock: &_m.Mock}
}

// isWatchRunsRequest_Target provides a mock function with no fields
func (_m *isWatchRunsRequest_Target) isWatchRunsRequest_Target() {
	_m.Called()
}

// isWatchRunsRequest_Target_isWatchRunsRequest_Target_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isWatchRunsRequest_Target'
type isWatchRunsRequest_Target_isWatchRunsRequest_Target_Call struct {
	*mock.Call
}

// isWatchRunsRequest_Target is a helper method to define mock.On call
func (_e *isWatchRunsRequest_Target_Expecter) isWatchRunsRequest_Target() *isWatchRunsRequest_Target_isWatchRunsRequest_Target_Call {
	return &isWatchRunsRequest_Target_isWatchRunsRequest_Target_Call{Call: _e.mock.On("isWatchRunsRequest_Target")}
}

func (_c *isWatchRunsRequest_Target_isWatchRunsRequest_Target_Call) Run(run func()) *isWatchRunsRequest_Target_isWatchRunsRequest_Target_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *isWatchRunsRequest_Target_isWatchRunsRequest_Target_Call) Return() *isWatchRunsRequest_Target_isWatchRunsRequest_Target_Call {
	_c.Call.Return()
	return _c
}

func (_c *isWatchRunsRequest_Target_isWatchRunsRequest_Target_Call) RunAndReturn(run func()) *isWatchRunsRequest_Target_isWatchRunsRequest_Target_Call {
	_c.Run(run)
	return _c
}

// newIsWatchRunsRequest_Target creates a new instance of isWatchRunsRequest_Target. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newIsWatchRunsRequest_Target(t interface {
	mock.TestingT
	Cleanup(func())
}) *isWatchRunsRequest_Target {
	mock := &isWatchRunsRequest_Target{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
