// Code generated by mockery. DO NOT EDIT.

package workflow

import (
	context "context"

	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
	mock "github.com/stretchr/testify/mock"
)

// RunServiceServer is an autogenerated mock type for the RunServiceServer type
type RunServiceServer struct {
	mock.Mock
}

type RunServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *RunServiceServer) EXPECT() *RunServiceServer_Expecter {
	return &RunServiceServer_Expecter{mock: &_m.Mock}
}

// AbortAction provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) AbortAction(_a0 context.Context, _a1 *workflow.AbortActionRequest) (*workflow.AbortActionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AbortAction")
	}

	var r0 *workflow.AbortActionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortActionRequest) (*workflow.AbortActionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortActionRequest) *workflow.AbortActionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.AbortActionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.AbortActionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceServer_AbortAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortAction'
type RunServiceServer_AbortAction_Call struct {
	*mock.Call
}

// AbortAction is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.AbortActionRequest
func (_e *RunServiceServer_Expecter) AbortAction(_a0 interface{}, _a1 interface{}) *RunServiceServer_AbortAction_Call {
	return &RunServiceServer_AbortAction_Call{Call: _e.mock.On("AbortAction", _a0, _a1)}
}

func (_c *RunServiceServer_AbortAction_Call) Run(run func(_a0 context.Context, _a1 *workflow.AbortActionRequest)) *RunServiceServer_AbortAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.AbortActionRequest))
	})
	return _c
}

func (_c *RunServiceServer_AbortAction_Call) Return(_a0 *workflow.AbortActionResponse, _a1 error) *RunServiceServer_AbortAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceServer_AbortAction_Call) RunAndReturn(run func(context.Context, *workflow.AbortActionRequest) (*workflow.AbortActionResponse, error)) *RunServiceServer_AbortAction_Call {
	_c.Call.Return(run)
	return _c
}

// AbortRun provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) AbortRun(_a0 context.Context, _a1 *workflow.AbortRunRequest) (*workflow.AbortRunResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AbortRun")
	}

	var r0 *workflow.AbortRunResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortRunRequest) (*workflow.AbortRunResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.AbortRunRequest) *workflow.AbortRunResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.AbortRunResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.AbortRunRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceServer_AbortRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortRun'
type RunServiceServer_AbortRun_Call struct {
	*mock.Call
}

// AbortRun is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.AbortRunRequest
func (_e *RunServiceServer_Expecter) AbortRun(_a0 interface{}, _a1 interface{}) *RunServiceServer_AbortRun_Call {
	return &RunServiceServer_AbortRun_Call{Call: _e.mock.On("AbortRun", _a0, _a1)}
}

func (_c *RunServiceServer_AbortRun_Call) Run(run func(_a0 context.Context, _a1 *workflow.AbortRunRequest)) *RunServiceServer_AbortRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.AbortRunRequest))
	})
	return _c
}

func (_c *RunServiceServer_AbortRun_Call) Return(_a0 *workflow.AbortRunResponse, _a1 error) *RunServiceServer_AbortRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceServer_AbortRun_Call) RunAndReturn(run func(context.Context, *workflow.AbortRunRequest) (*workflow.AbortRunResponse, error)) *RunServiceServer_AbortRun_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRun provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) CreateRun(_a0 context.Context, _a1 *workflow.CreateRunRequest) (*workflow.CreateRunResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateRun")
	}

	var r0 *workflow.CreateRunResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.CreateRunRequest) (*workflow.CreateRunResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.CreateRunRequest) *workflow.CreateRunResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.CreateRunResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.CreateRunRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceServer_CreateRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRun'
type RunServiceServer_CreateRun_Call struct {
	*mock.Call
}

// CreateRun is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.CreateRunRequest
func (_e *RunServiceServer_Expecter) CreateRun(_a0 interface{}, _a1 interface{}) *RunServiceServer_CreateRun_Call {
	return &RunServiceServer_CreateRun_Call{Call: _e.mock.On("CreateRun", _a0, _a1)}
}

func (_c *RunServiceServer_CreateRun_Call) Run(run func(_a0 context.Context, _a1 *workflow.CreateRunRequest)) *RunServiceServer_CreateRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.CreateRunRequest))
	})
	return _c
}

func (_c *RunServiceServer_CreateRun_Call) Return(_a0 *workflow.CreateRunResponse, _a1 error) *RunServiceServer_CreateRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceServer_CreateRun_Call) RunAndReturn(run func(context.Context, *workflow.CreateRunRequest) (*workflow.CreateRunResponse, error)) *RunServiceServer_CreateRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionData provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) GetActionData(_a0 context.Context, _a1 *workflow.GetActionDataRequest) (*workflow.GetActionDataResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetActionData")
	}

	var r0 *workflow.GetActionDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetActionDataRequest) (*workflow.GetActionDataResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetActionDataRequest) *workflow.GetActionDataResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.GetActionDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.GetActionDataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceServer_GetActionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionData'
type RunServiceServer_GetActionData_Call struct {
	*mock.Call
}

// GetActionData is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.GetActionDataRequest
func (_e *RunServiceServer_Expecter) GetActionData(_a0 interface{}, _a1 interface{}) *RunServiceServer_GetActionData_Call {
	return &RunServiceServer_GetActionData_Call{Call: _e.mock.On("GetActionData", _a0, _a1)}
}

func (_c *RunServiceServer_GetActionData_Call) Run(run func(_a0 context.Context, _a1 *workflow.GetActionDataRequest)) *RunServiceServer_GetActionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.GetActionDataRequest))
	})
	return _c
}

func (_c *RunServiceServer_GetActionData_Call) Return(_a0 *workflow.GetActionDataResponse, _a1 error) *RunServiceServer_GetActionData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceServer_GetActionData_Call) RunAndReturn(run func(context.Context, *workflow.GetActionDataRequest) (*workflow.GetActionDataResponse, error)) *RunServiceServer_GetActionData_Call {
	_c.Call.Return(run)
	return _c
}

// GetActionDetails provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) GetActionDetails(_a0 context.Context, _a1 *workflow.GetActionDetailsRequest) (*workflow.GetActionDetailsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetActionDetails")
	}

	var r0 *workflow.GetActionDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetActionDetailsRequest) (*workflow.GetActionDetailsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetActionDetailsRequest) *workflow.GetActionDetailsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.GetActionDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.GetActionDetailsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceServer_GetActionDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActionDetails'
type RunServiceServer_GetActionDetails_Call struct {
	*mock.Call
}

// GetActionDetails is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.GetActionDetailsRequest
func (_e *RunServiceServer_Expecter) GetActionDetails(_a0 interface{}, _a1 interface{}) *RunServiceServer_GetActionDetails_Call {
	return &RunServiceServer_GetActionDetails_Call{Call: _e.mock.On("GetActionDetails", _a0, _a1)}
}

func (_c *RunServiceServer_GetActionDetails_Call) Run(run func(_a0 context.Context, _a1 *workflow.GetActionDetailsRequest)) *RunServiceServer_GetActionDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.GetActionDetailsRequest))
	})
	return _c
}

func (_c *RunServiceServer_GetActionDetails_Call) Return(_a0 *workflow.GetActionDetailsResponse, _a1 error) *RunServiceServer_GetActionDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceServer_GetActionDetails_Call) RunAndReturn(run func(context.Context, *workflow.GetActionDetailsRequest) (*workflow.GetActionDetailsResponse, error)) *RunServiceServer_GetActionDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetRunDetails provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) GetRunDetails(_a0 context.Context, _a1 *workflow.GetRunDetailsRequest) (*workflow.GetRunDetailsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRunDetails")
	}

	var r0 *workflow.GetRunDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetRunDetailsRequest) (*workflow.GetRunDetailsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.GetRunDetailsRequest) *workflow.GetRunDetailsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.GetRunDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.GetRunDetailsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceServer_GetRunDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRunDetails'
type RunServiceServer_GetRunDetails_Call struct {
	*mock.Call
}

// GetRunDetails is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.GetRunDetailsRequest
func (_e *RunServiceServer_Expecter) GetRunDetails(_a0 interface{}, _a1 interface{}) *RunServiceServer_GetRunDetails_Call {
	return &RunServiceServer_GetRunDetails_Call{Call: _e.mock.On("GetRunDetails", _a0, _a1)}
}

func (_c *RunServiceServer_GetRunDetails_Call) Run(run func(_a0 context.Context, _a1 *workflow.GetRunDetailsRequest)) *RunServiceServer_GetRunDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.GetRunDetailsRequest))
	})
	return _c
}

func (_c *RunServiceServer_GetRunDetails_Call) Return(_a0 *workflow.GetRunDetailsResponse, _a1 error) *RunServiceServer_GetRunDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceServer_GetRunDetails_Call) RunAndReturn(run func(context.Context, *workflow.GetRunDetailsRequest) (*workflow.GetRunDetailsResponse, error)) *RunServiceServer_GetRunDetails_Call {
	_c.Call.Return(run)
	return _c
}

// ListActions provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) ListActions(_a0 context.Context, _a1 *workflow.ListActionsRequest) (*workflow.ListActionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListActions")
	}

	var r0 *workflow.ListActionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.ListActionsRequest) (*workflow.ListActionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.ListActionsRequest) *workflow.ListActionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.ListActionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.ListActionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceServer_ListActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActions'
type RunServiceServer_ListActions_Call struct {
	*mock.Call
}

// ListActions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.ListActionsRequest
func (_e *RunServiceServer_Expecter) ListActions(_a0 interface{}, _a1 interface{}) *RunServiceServer_ListActions_Call {
	return &RunServiceServer_ListActions_Call{Call: _e.mock.On("ListActions", _a0, _a1)}
}

func (_c *RunServiceServer_ListActions_Call) Run(run func(_a0 context.Context, _a1 *workflow.ListActionsRequest)) *RunServiceServer_ListActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.ListActionsRequest))
	})
	return _c
}

func (_c *RunServiceServer_ListActions_Call) Return(_a0 *workflow.ListActionsResponse, _a1 error) *RunServiceServer_ListActions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceServer_ListActions_Call) RunAndReturn(run func(context.Context, *workflow.ListActionsRequest) (*workflow.ListActionsResponse, error)) *RunServiceServer_ListActions_Call {
	_c.Call.Return(run)
	return _c
}

// ListRuns provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) ListRuns(_a0 context.Context, _a1 *workflow.ListRunsRequest) (*workflow.ListRunsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListRuns")
	}

	var r0 *workflow.ListRunsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.ListRunsRequest) (*workflow.ListRunsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.ListRunsRequest) *workflow.ListRunsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.ListRunsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workflow.ListRunsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunServiceServer_ListRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRuns'
type RunServiceServer_ListRuns_Call struct {
	*mock.Call
}

// ListRuns is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *workflow.ListRunsRequest
func (_e *RunServiceServer_Expecter) ListRuns(_a0 interface{}, _a1 interface{}) *RunServiceServer_ListRuns_Call {
	return &RunServiceServer_ListRuns_Call{Call: _e.mock.On("ListRuns", _a0, _a1)}
}

func (_c *RunServiceServer_ListRuns_Call) Run(run func(_a0 context.Context, _a1 *workflow.ListRunsRequest)) *RunServiceServer_ListRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*workflow.ListRunsRequest))
	})
	return _c
}

func (_c *RunServiceServer_ListRuns_Call) Return(_a0 *workflow.ListRunsResponse, _a1 error) *RunServiceServer_ListRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RunServiceServer_ListRuns_Call) RunAndReturn(run func(context.Context, *workflow.ListRunsRequest) (*workflow.ListRunsResponse, error)) *RunServiceServer_ListRuns_Call {
	_c.Call.Return(run)
	return _c
}

// WatchActionDetails provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) WatchActionDetails(_a0 *workflow.WatchActionDetailsRequest, _a1 workflow.RunService_WatchActionDetailsServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WatchActionDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*workflow.WatchActionDetailsRequest, workflow.RunService_WatchActionDetailsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunServiceServer_WatchActionDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchActionDetails'
type RunServiceServer_WatchActionDetails_Call struct {
	*mock.Call
}

// WatchActionDetails is a helper method to define mock.On call
//   - _a0 *workflow.WatchActionDetailsRequest
//   - _a1 workflow.RunService_WatchActionDetailsServer
func (_e *RunServiceServer_Expecter) WatchActionDetails(_a0 interface{}, _a1 interface{}) *RunServiceServer_WatchActionDetails_Call {
	return &RunServiceServer_WatchActionDetails_Call{Call: _e.mock.On("WatchActionDetails", _a0, _a1)}
}

func (_c *RunServiceServer_WatchActionDetails_Call) Run(run func(_a0 *workflow.WatchActionDetailsRequest, _a1 workflow.RunService_WatchActionDetailsServer)) *RunServiceServer_WatchActionDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*workflow.WatchActionDetailsRequest), args[1].(workflow.RunService_WatchActionDetailsServer))
	})
	return _c
}

func (_c *RunServiceServer_WatchActionDetails_Call) Return(_a0 error) *RunServiceServer_WatchActionDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunServiceServer_WatchActionDetails_Call) RunAndReturn(run func(*workflow.WatchActionDetailsRequest, workflow.RunService_WatchActionDetailsServer) error) *RunServiceServer_WatchActionDetails_Call {
	_c.Call.Return(run)
	return _c
}

// WatchActions provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) WatchActions(_a0 *workflow.WatchActionsRequest, _a1 workflow.RunService_WatchActionsServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WatchActions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*workflow.WatchActionsRequest, workflow.RunService_WatchActionsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunServiceServer_WatchActions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchActions'
type RunServiceServer_WatchActions_Call struct {
	*mock.Call
}

// WatchActions is a helper method to define mock.On call
//   - _a0 *workflow.WatchActionsRequest
//   - _a1 workflow.RunService_WatchActionsServer
func (_e *RunServiceServer_Expecter) WatchActions(_a0 interface{}, _a1 interface{}) *RunServiceServer_WatchActions_Call {
	return &RunServiceServer_WatchActions_Call{Call: _e.mock.On("WatchActions", _a0, _a1)}
}

func (_c *RunServiceServer_WatchActions_Call) Run(run func(_a0 *workflow.WatchActionsRequest, _a1 workflow.RunService_WatchActionsServer)) *RunServiceServer_WatchActions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*workflow.WatchActionsRequest), args[1].(workflow.RunService_WatchActionsServer))
	})
	return _c
}

func (_c *RunServiceServer_WatchActions_Call) Return(_a0 error) *RunServiceServer_WatchActions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunServiceServer_WatchActions_Call) RunAndReturn(run func(*workflow.WatchActionsRequest, workflow.RunService_WatchActionsServer) error) *RunServiceServer_WatchActions_Call {
	_c.Call.Return(run)
	return _c
}

// WatchClusterEvents provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) WatchClusterEvents(_a0 *workflow.WatchClusterEventsRequest, _a1 workflow.RunService_WatchClusterEventsServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WatchClusterEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*workflow.WatchClusterEventsRequest, workflow.RunService_WatchClusterEventsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunServiceServer_WatchClusterEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchClusterEvents'
type RunServiceServer_WatchClusterEvents_Call struct {
	*mock.Call
}

// WatchClusterEvents is a helper method to define mock.On call
//   - _a0 *workflow.WatchClusterEventsRequest
//   - _a1 workflow.RunService_WatchClusterEventsServer
func (_e *RunServiceServer_Expecter) WatchClusterEvents(_a0 interface{}, _a1 interface{}) *RunServiceServer_WatchClusterEvents_Call {
	return &RunServiceServer_WatchClusterEvents_Call{Call: _e.mock.On("WatchClusterEvents", _a0, _a1)}
}

func (_c *RunServiceServer_WatchClusterEvents_Call) Run(run func(_a0 *workflow.WatchClusterEventsRequest, _a1 workflow.RunService_WatchClusterEventsServer)) *RunServiceServer_WatchClusterEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*workflow.WatchClusterEventsRequest), args[1].(workflow.RunService_WatchClusterEventsServer))
	})
	return _c
}

func (_c *RunServiceServer_WatchClusterEvents_Call) Return(_a0 error) *RunServiceServer_WatchClusterEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunServiceServer_WatchClusterEvents_Call) RunAndReturn(run func(*workflow.WatchClusterEventsRequest, workflow.RunService_WatchClusterEventsServer) error) *RunServiceServer_WatchClusterEvents_Call {
	_c.Call.Return(run)
	return _c
}

// WatchRunDetails provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) WatchRunDetails(_a0 *workflow.WatchRunDetailsRequest, _a1 workflow.RunService_WatchRunDetailsServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WatchRunDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*workflow.WatchRunDetailsRequest, workflow.RunService_WatchRunDetailsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunServiceServer_WatchRunDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchRunDetails'
type RunServiceServer_WatchRunDetails_Call struct {
	*mock.Call
}

// WatchRunDetails is a helper method to define mock.On call
//   - _a0 *workflow.WatchRunDetailsRequest
//   - _a1 workflow.RunService_WatchRunDetailsServer
func (_e *RunServiceServer_Expecter) WatchRunDetails(_a0 interface{}, _a1 interface{}) *RunServiceServer_WatchRunDetails_Call {
	return &RunServiceServer_WatchRunDetails_Call{Call: _e.mock.On("WatchRunDetails", _a0, _a1)}
}

func (_c *RunServiceServer_WatchRunDetails_Call) Run(run func(_a0 *workflow.WatchRunDetailsRequest, _a1 workflow.RunService_WatchRunDetailsServer)) *RunServiceServer_WatchRunDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*workflow.WatchRunDetailsRequest), args[1].(workflow.RunService_WatchRunDetailsServer))
	})
	return _c
}

func (_c *RunServiceServer_WatchRunDetails_Call) Return(_a0 error) *RunServiceServer_WatchRunDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunServiceServer_WatchRunDetails_Call) RunAndReturn(run func(*workflow.WatchRunDetailsRequest, workflow.RunService_WatchRunDetailsServer) error) *RunServiceServer_WatchRunDetails_Call {
	_c.Call.Return(run)
	return _c
}

// WatchRuns provides a mock function with given fields: _a0, _a1
func (_m *RunServiceServer) WatchRuns(_a0 *workflow.WatchRunsRequest, _a1 workflow.RunService_WatchRunsServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WatchRuns")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*workflow.WatchRunsRequest, workflow.RunService_WatchRunsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunServiceServer_WatchRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchRuns'
type RunServiceServer_WatchRuns_Call struct {
	*mock.Call
}

// WatchRuns is a helper method to define mock.On call
//   - _a0 *workflow.WatchRunsRequest
//   - _a1 workflow.RunService_WatchRunsServer
func (_e *RunServiceServer_Expecter) WatchRuns(_a0 interface{}, _a1 interface{}) *RunServiceServer_WatchRuns_Call {
	return &RunServiceServer_WatchRuns_Call{Call: _e.mock.On("WatchRuns", _a0, _a1)}
}

func (_c *RunServiceServer_WatchRuns_Call) Run(run func(_a0 *workflow.WatchRunsRequest, _a1 workflow.RunService_WatchRunsServer)) *RunServiceServer_WatchRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*workflow.WatchRunsRequest), args[1].(workflow.RunService_WatchRunsServer))
	})
	return _c
}

func (_c *RunServiceServer_WatchRuns_Call) Return(_a0 error) *RunServiceServer_WatchRuns_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RunServiceServer_WatchRuns_Call) RunAndReturn(run func(*workflow.WatchRunsRequest, workflow.RunService_WatchRunsServer) error) *RunServiceServer_WatchRuns_Call {
	_c.Call.Return(run)
	return _c
}

// NewRunServiceServer creates a new instance of RunServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRunServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *RunServiceServer {
	mock := &RunServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
