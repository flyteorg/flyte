// Code generated by mockery. DO NOT EDIT.

package workflow

import (
	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
	mock "github.com/stretchr/testify/mock"
)

// StateServiceServer is an autogenerated mock type for the StateServiceServer type
type StateServiceServer struct {
	mock.Mock
}

type StateServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *StateServiceServer) EXPECT() *StateServiceServer_Expecter {
	return &StateServiceServer_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0
func (_m *StateServiceServer) Get(_a0 workflow.StateService_GetServer) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(workflow.StateService_GetServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type StateServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 workflow.StateService_GetServer
func (_e *StateServiceServer_Expecter) Get(_a0 interface{}) *StateServiceServer_Get_Call {
	return &StateServiceServer_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *StateServiceServer_Get_Call) Run(run func(_a0 workflow.StateService_GetServer)) *StateServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workflow.StateService_GetServer))
	})
	return _c
}

func (_c *StateServiceServer_Get_Call) Return(_a0 error) *StateServiceServer_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateServiceServer_Get_Call) RunAndReturn(run func(workflow.StateService_GetServer) error) *StateServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: _a0
func (_m *StateServiceServer) Put(_a0 workflow.StateService_PutServer) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(workflow.StateService_PutServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateServiceServer_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type StateServiceServer_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - _a0 workflow.StateService_PutServer
func (_e *StateServiceServer_Expecter) Put(_a0 interface{}) *StateServiceServer_Put_Call {
	return &StateServiceServer_Put_Call{Call: _e.mock.On("Put", _a0)}
}

func (_c *StateServiceServer_Put_Call) Run(run func(_a0 workflow.StateService_PutServer)) *StateServiceServer_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(workflow.StateService_PutServer))
	})
	return _c
}

func (_c *StateServiceServer_Put_Call) Return(_a0 error) *StateServiceServer_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateServiceServer_Put_Call) RunAndReturn(run func(workflow.StateService_PutServer) error) *StateServiceServer_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: _a0, _a1
func (_m *StateServiceServer) Watch(_a0 *workflow.WatchRequest, _a1 workflow.StateService_WatchServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*workflow.WatchRequest, workflow.StateService_WatchServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateServiceServer_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type StateServiceServer_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - _a0 *workflow.WatchRequest
//   - _a1 workflow.StateService_WatchServer
func (_e *StateServiceServer_Expecter) Watch(_a0 interface{}, _a1 interface{}) *StateServiceServer_Watch_Call {
	return &StateServiceServer_Watch_Call{Call: _e.mock.On("Watch", _a0, _a1)}
}

func (_c *StateServiceServer_Watch_Call) Run(run func(_a0 *workflow.WatchRequest, _a1 workflow.StateService_WatchServer)) *StateServiceServer_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*workflow.WatchRequest), args[1].(workflow.StateService_WatchServer))
	})
	return _c
}

func (_c *StateServiceServer_Watch_Call) Return(_a0 error) *StateServiceServer_Watch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateServiceServer_Watch_Call) RunAndReturn(run func(*workflow.WatchRequest, workflow.StateService_WatchServer) error) *StateServiceServer_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateServiceServer creates a new instance of StateServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateServiceServer {
	mock := &StateServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
