// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl2/workflow/run_service.proto

package workflow

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRunRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRunRequestMultiError, or nil if none found.
func (m *CreateRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRunRequestValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRunRequestValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRunRequestValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRunSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRunRequestValidationError{
					field:  "RunSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRunRequestValidationError{
					field:  "RunSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRunRequestValidationError{
				field:  "RunSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Id.(type) {
	case *CreateRunRequest_RunId:
		if v == nil {
			err := CreateRunRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRunId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRunRequestValidationError{
						field:  "RunId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRunRequestValidationError{
						field:  "RunId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRunId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRunRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateRunRequest_ProjectId:
		if v == nil {
			err := CreateRunRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProjectId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRunRequestValidationError{
						field:  "ProjectId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRunRequestValidationError{
						field:  "ProjectId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProjectId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRunRequestValidationError{
					field:  "ProjectId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	switch v := m.Task.(type) {
	case *CreateRunRequest_TaskId:
		if v == nil {
			err := CreateRunRequestValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTaskId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRunRequestValidationError{
						field:  "TaskId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRunRequestValidationError{
						field:  "TaskId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTaskId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRunRequestValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateRunRequest_TaskSpec:
		if v == nil {
			err := CreateRunRequestValidationError{
				field:  "Task",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTaskSpec()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRunRequestValidationError{
						field:  "TaskSpec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRunRequestValidationError{
						field:  "TaskSpec",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTaskSpec()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRunRequestValidationError{
					field:  "TaskSpec",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreateRunRequestMultiError(errors)
	}

	return nil
}

// CreateRunRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRunRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRunRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRunRequestMultiError) AllErrors() []error { return m }

// CreateRunRequestValidationError is the validation error returned by
// CreateRunRequest.Validate if the designated constraints aren't met.
type CreateRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRunRequestValidationError) ErrorName() string { return "CreateRunRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRunRequestValidationError{}

// Validate checks the field values on CreateRunResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRunResponseMultiError, or nil if none found.
func (m *CreateRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRunResponseValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRunResponseValidationError{
					field:  "Run",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRunResponseValidationError{
				field:  "Run",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRunResponseMultiError(errors)
	}

	return nil
}

// CreateRunResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRunResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRunResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRunResponseMultiError) AllErrors() []error { return m }

// CreateRunResponseValidationError is the validation error returned by
// CreateRunResponse.Validate if the designated constraints aren't met.
type CreateRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRunResponseValidationError) ErrorName() string {
	return "CreateRunResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRunResponseValidationError{}

// Validate checks the field values on AbortRunRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AbortRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AbortRunRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AbortRunRequestMultiError, or nil if none found.
func (m *AbortRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AbortRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AbortRunRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AbortRunRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbortRunRequestValidationError{
				field:  "RunId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Reason != nil {
		// no validation rules for Reason
	}

	if len(errors) > 0 {
		return AbortRunRequestMultiError(errors)
	}

	return nil
}

// AbortRunRequestMultiError is an error wrapping multiple validation errors
// returned by AbortRunRequest.ValidateAll() if the designated constraints
// aren't met.
type AbortRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbortRunRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbortRunRequestMultiError) AllErrors() []error { return m }

// AbortRunRequestValidationError is the validation error returned by
// AbortRunRequest.Validate if the designated constraints aren't met.
type AbortRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbortRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbortRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbortRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbortRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbortRunRequestValidationError) ErrorName() string { return "AbortRunRequestValidationError" }

// Error satisfies the builtin error interface
func (e AbortRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbortRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbortRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbortRunRequestValidationError{}

// Validate checks the field values on AbortRunResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AbortRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AbortRunResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AbortRunResponseMultiError, or nil if none found.
func (m *AbortRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AbortRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AbortRunResponseMultiError(errors)
	}

	return nil
}

// AbortRunResponseMultiError is an error wrapping multiple validation errors
// returned by AbortRunResponse.ValidateAll() if the designated constraints
// aren't met.
type AbortRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbortRunResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbortRunResponseMultiError) AllErrors() []error { return m }

// AbortRunResponseValidationError is the validation error returned by
// AbortRunResponse.Validate if the designated constraints aren't met.
type AbortRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbortRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbortRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbortRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbortRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbortRunResponseValidationError) ErrorName() string { return "AbortRunResponseValidationError" }

// Error satisfies the builtin error interface
func (e AbortRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbortRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbortRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbortRunResponseValidationError{}

// Validate checks the field values on GetRunDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRunDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRunDetailsRequestMultiError, or nil if none found.
func (m *GetRunDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunDetailsRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunDetailsRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunDetailsRequestValidationError{
				field:  "RunId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRunDetailsRequestMultiError(errors)
	}

	return nil
}

// GetRunDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by GetRunDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRunDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunDetailsRequestMultiError) AllErrors() []error { return m }

// GetRunDetailsRequestValidationError is the validation error returned by
// GetRunDetailsRequest.Validate if the designated constraints aren't met.
type GetRunDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunDetailsRequestValidationError) ErrorName() string {
	return "GetRunDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRunDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunDetailsRequestValidationError{}

// Validate checks the field values on GetRunDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRunDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRunDetailsResponseMultiError, or nil if none found.
func (m *GetRunDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunDetailsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunDetailsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunDetailsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRunDetailsResponseMultiError(errors)
	}

	return nil
}

// GetRunDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by GetRunDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRunDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunDetailsResponseMultiError) AllErrors() []error { return m }

// GetRunDetailsResponseValidationError is the validation error returned by
// GetRunDetailsResponse.Validate if the designated constraints aren't met.
type GetRunDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunDetailsResponseValidationError) ErrorName() string {
	return "GetRunDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRunDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunDetailsResponseValidationError{}

// Validate checks the field values on WatchRunDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchRunDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchRunDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchRunDetailsRequestMultiError, or nil if none found.
func (m *WatchRunDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchRunDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchRunDetailsRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchRunDetailsRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchRunDetailsRequestValidationError{
				field:  "RunId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchRunDetailsRequestMultiError(errors)
	}

	return nil
}

// WatchRunDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by WatchRunDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchRunDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchRunDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchRunDetailsRequestMultiError) AllErrors() []error { return m }

// WatchRunDetailsRequestValidationError is the validation error returned by
// WatchRunDetailsRequest.Validate if the designated constraints aren't met.
type WatchRunDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchRunDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchRunDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchRunDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchRunDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchRunDetailsRequestValidationError) ErrorName() string {
	return "WatchRunDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchRunDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchRunDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchRunDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchRunDetailsRequestValidationError{}

// Validate checks the field values on WatchRunDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchRunDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchRunDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchRunDetailsResponseMultiError, or nil if none found.
func (m *WatchRunDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchRunDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchRunDetailsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchRunDetailsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchRunDetailsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchRunDetailsResponseMultiError(errors)
	}

	return nil
}

// WatchRunDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by WatchRunDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchRunDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchRunDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchRunDetailsResponseMultiError) AllErrors() []error { return m }

// WatchRunDetailsResponseValidationError is the validation error returned by
// WatchRunDetailsResponse.Validate if the designated constraints aren't met.
type WatchRunDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchRunDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchRunDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchRunDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchRunDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchRunDetailsResponseValidationError) ErrorName() string {
	return "WatchRunDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchRunDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchRunDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchRunDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchRunDetailsResponseValidationError{}

// Validate checks the field values on GetActionDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActionDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionDetailsRequestMultiError, or nil if none found.
func (m *GetActionDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActionDetailsRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActionDetailsRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActionDetailsRequestValidationError{
				field:  "ActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetActionDetailsRequestMultiError(errors)
	}

	return nil
}

// GetActionDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by GetActionDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetActionDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionDetailsRequestMultiError) AllErrors() []error { return m }

// GetActionDetailsRequestValidationError is the validation error returned by
// GetActionDetailsRequest.Validate if the designated constraints aren't met.
type GetActionDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionDetailsRequestValidationError) ErrorName() string {
	return "GetActionDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActionDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionDetailsRequestValidationError{}

// Validate checks the field values on GetActionDetailsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActionDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionDetailsResponseMultiError, or nil if none found.
func (m *GetActionDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActionDetailsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActionDetailsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActionDetailsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetActionDetailsResponseMultiError(errors)
	}

	return nil
}

// GetActionDetailsResponseMultiError is an error wrapping multiple validation
// errors returned by GetActionDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetActionDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionDetailsResponseMultiError) AllErrors() []error { return m }

// GetActionDetailsResponseValidationError is the validation error returned by
// GetActionDetailsResponse.Validate if the designated constraints aren't met.
type GetActionDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionDetailsResponseValidationError) ErrorName() string {
	return "GetActionDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActionDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionDetailsResponseValidationError{}

// Validate checks the field values on WatchActionDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchActionDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchActionDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchActionDetailsRequestMultiError, or nil if none found.
func (m *WatchActionDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchActionDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchActionDetailsRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchActionDetailsRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchActionDetailsRequestValidationError{
				field:  "ActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchActionDetailsRequestMultiError(errors)
	}

	return nil
}

// WatchActionDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by WatchActionDetailsRequest.ValidateAll() if the
// designated constraints aren't met.
type WatchActionDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchActionDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchActionDetailsRequestMultiError) AllErrors() []error { return m }

// WatchActionDetailsRequestValidationError is the validation error returned by
// WatchActionDetailsRequest.Validate if the designated constraints aren't met.
type WatchActionDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchActionDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchActionDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchActionDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchActionDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchActionDetailsRequestValidationError) ErrorName() string {
	return "WatchActionDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchActionDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchActionDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchActionDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchActionDetailsRequestValidationError{}

// Validate checks the field values on WatchActionDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchActionDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchActionDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchActionDetailsResponseMultiError, or nil if none found.
func (m *WatchActionDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchActionDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchActionDetailsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchActionDetailsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchActionDetailsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchActionDetailsResponseMultiError(errors)
	}

	return nil
}

// WatchActionDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by WatchActionDetailsResponse.ValidateAll() if
// the designated constraints aren't met.
type WatchActionDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchActionDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchActionDetailsResponseMultiError) AllErrors() []error { return m }

// WatchActionDetailsResponseValidationError is the validation error returned
// by WatchActionDetailsResponse.Validate if the designated constraints aren't met.
type WatchActionDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchActionDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchActionDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchActionDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchActionDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchActionDetailsResponseValidationError) ErrorName() string {
	return "WatchActionDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchActionDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchActionDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchActionDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchActionDetailsResponseValidationError{}

// Validate checks the field values on GetActionDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActionDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionDataRequestMultiError, or nil if none found.
func (m *GetActionDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActionDataRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActionDataRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActionDataRequestValidationError{
				field:  "ActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetActionDataRequestMultiError(errors)
	}

	return nil
}

// GetActionDataRequestMultiError is an error wrapping multiple validation
// errors returned by GetActionDataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetActionDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionDataRequestMultiError) AllErrors() []error { return m }

// GetActionDataRequestValidationError is the validation error returned by
// GetActionDataRequest.Validate if the designated constraints aren't met.
type GetActionDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionDataRequestValidationError) ErrorName() string {
	return "GetActionDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActionDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionDataRequestValidationError{}

// Validate checks the field values on GetActionDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActionDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActionDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActionDataResponseMultiError, or nil if none found.
func (m *GetActionDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActionDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActionDataResponseValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActionDataResponseValidationError{
					field:  "Inputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActionDataResponseValidationError{
				field:  "Inputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutputs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActionDataResponseValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActionDataResponseValidationError{
					field:  "Outputs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutputs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActionDataResponseValidationError{
				field:  "Outputs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetActionDataResponseMultiError(errors)
	}

	return nil
}

// GetActionDataResponseMultiError is an error wrapping multiple validation
// errors returned by GetActionDataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetActionDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActionDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActionDataResponseMultiError) AllErrors() []error { return m }

// GetActionDataResponseValidationError is the validation error returned by
// GetActionDataResponse.Validate if the designated constraints aren't met.
type GetActionDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionDataResponseValidationError) ErrorName() string {
	return "GetActionDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActionDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionDataResponseValidationError{}

// Validate checks the field values on ListRunsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRunsRequestMultiError, or nil if none found.
func (m *ListRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRunsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRunsRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.ScopeBy.(type) {
	case *ListRunsRequest_Org:
		if v == nil {
			err := ListRunsRequestValidationError{
				field:  "ScopeBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Org
	case *ListRunsRequest_ProjectId:
		if v == nil {
			err := ListRunsRequestValidationError{
				field:  "ScopeBy",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProjectId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRunsRequestValidationError{
						field:  "ProjectId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRunsRequestValidationError{
						field:  "ProjectId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProjectId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRunsRequestValidationError{
					field:  "ProjectId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListRunsRequestMultiError(errors)
	}

	return nil
}

// ListRunsRequestMultiError is an error wrapping multiple validation errors
// returned by ListRunsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRunsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRunsRequestMultiError) AllErrors() []error { return m }

// ListRunsRequestValidationError is the validation error returned by
// ListRunsRequest.Validate if the designated constraints aren't met.
type ListRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunsRequestValidationError) ErrorName() string { return "ListRunsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunsRequestValidationError{}

// Validate checks the field values on ListRunsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRunsResponseMultiError, or nil if none found.
func (m *ListRunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRunsResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRunsResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRunsResponseValidationError{
					field:  fmt.Sprintf("Runs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Token

	if len(errors) > 0 {
		return ListRunsResponseMultiError(errors)
	}

	return nil
}

// ListRunsResponseMultiError is an error wrapping multiple validation errors
// returned by ListRunsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRunsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRunsResponseMultiError) AllErrors() []error { return m }

// ListRunsResponseValidationError is the validation error returned by
// ListRunsResponse.Validate if the designated constraints aren't met.
type ListRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRunsResponseValidationError) ErrorName() string { return "ListRunsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRunsResponseValidationError{}

// Validate checks the field values on WatchRunsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WatchRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchRunsRequestMultiError, or nil if none found.
func (m *WatchRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Target.(type) {
	case *WatchRunsRequest_Org:
		if v == nil {
			err := WatchRunsRequestValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Org
	case *WatchRunsRequest_ClusterId:
		if v == nil {
			err := WatchRunsRequestValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetClusterId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchRunsRequestValidationError{
						field:  "ClusterId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchRunsRequestValidationError{
						field:  "ClusterId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetClusterId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchRunsRequestValidationError{
					field:  "ClusterId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchRunsRequest_ProjectId:
		if v == nil {
			err := WatchRunsRequestValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProjectId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchRunsRequestValidationError{
						field:  "ProjectId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchRunsRequestValidationError{
						field:  "ProjectId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProjectId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchRunsRequestValidationError{
					field:  "ProjectId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchRunsRequest_TaskId:
		if v == nil {
			err := WatchRunsRequestValidationError{
				field:  "Target",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTaskId()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchRunsRequestValidationError{
						field:  "TaskId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchRunsRequestValidationError{
						field:  "TaskId",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTaskId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchRunsRequestValidationError{
					field:  "TaskId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return WatchRunsRequestMultiError(errors)
	}

	return nil
}

// WatchRunsRequestMultiError is an error wrapping multiple validation errors
// returned by WatchRunsRequest.ValidateAll() if the designated constraints
// aren't met.
type WatchRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchRunsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchRunsRequestMultiError) AllErrors() []error { return m }

// WatchRunsRequestValidationError is the validation error returned by
// WatchRunsRequest.Validate if the designated constraints aren't met.
type WatchRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchRunsRequestValidationError) ErrorName() string { return "WatchRunsRequestValidationError" }

// Error satisfies the builtin error interface
func (e WatchRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchRunsRequestValidationError{}

// Validate checks the field values on WatchRunsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WatchRunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchRunsResponseMultiError, or nil if none found.
func (m *WatchRunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchRunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchRunsResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchRunsResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchRunsResponseValidationError{
					field:  fmt.Sprintf("Runs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WatchRunsResponseMultiError(errors)
	}

	return nil
}

// WatchRunsResponseMultiError is an error wrapping multiple validation errors
// returned by WatchRunsResponse.ValidateAll() if the designated constraints
// aren't met.
type WatchRunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchRunsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchRunsResponseMultiError) AllErrors() []error { return m }

// WatchRunsResponseValidationError is the validation error returned by
// WatchRunsResponse.Validate if the designated constraints aren't met.
type WatchRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchRunsResponseValidationError) ErrorName() string {
	return "WatchRunsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchRunsResponseValidationError{}

// Validate checks the field values on ListActionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActionsRequestMultiError, or nil if none found.
func (m *ListActionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListActionsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListActionsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListActionsRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRunId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListActionsRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListActionsRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListActionsRequestValidationError{
				field:  "RunId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListActionsRequestMultiError(errors)
	}

	return nil
}

// ListActionsRequestMultiError is an error wrapping multiple validation errors
// returned by ListActionsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListActionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActionsRequestMultiError) AllErrors() []error { return m }

// ListActionsRequestValidationError is the validation error returned by
// ListActionsRequest.Validate if the designated constraints aren't met.
type ListActionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActionsRequestValidationError) ErrorName() string {
	return "ListActionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListActionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActionsRequestValidationError{}

// Validate checks the field values on ListActionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActionsResponseMultiError, or nil if none found.
func (m *ListActionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListActionsResponseValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListActionsResponseValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListActionsResponseValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Token

	if len(errors) > 0 {
		return ListActionsResponseMultiError(errors)
	}

	return nil
}

// ListActionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListActionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListActionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActionsResponseMultiError) AllErrors() []error { return m }

// ListActionsResponseValidationError is the validation error returned by
// ListActionsResponse.Validate if the designated constraints aren't met.
type ListActionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActionsResponseValidationError) ErrorName() string {
	return "ListActionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListActionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActionsResponseValidationError{}

// Validate checks the field values on WatchActionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchActionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchActionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchActionsRequestMultiError, or nil if none found.
func (m *WatchActionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchActionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRunId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchActionsRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchActionsRequestValidationError{
					field:  "RunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchActionsRequestValidationError{
				field:  "RunId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilter() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchActionsRequestValidationError{
						field:  fmt.Sprintf("Filter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchActionsRequestValidationError{
						field:  fmt.Sprintf("Filter[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchActionsRequestValidationError{
					field:  fmt.Sprintf("Filter[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WatchActionsRequestMultiError(errors)
	}

	return nil
}

// WatchActionsRequestMultiError is an error wrapping multiple validation
// errors returned by WatchActionsRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchActionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchActionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchActionsRequestMultiError) AllErrors() []error { return m }

// WatchActionsRequestValidationError is the validation error returned by
// WatchActionsRequest.Validate if the designated constraints aren't met.
type WatchActionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchActionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchActionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchActionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchActionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchActionsRequestValidationError) ErrorName() string {
	return "WatchActionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchActionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchActionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchActionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchActionsRequestValidationError{}

// Validate checks the field values on WatchActionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchActionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchActionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchActionsResponseMultiError, or nil if none found.
func (m *WatchActionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchActionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEnrichedActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchActionsResponseValidationError{
						field:  fmt.Sprintf("EnrichedActions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchActionsResponseValidationError{
						field:  fmt.Sprintf("EnrichedActions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchActionsResponseValidationError{
					field:  fmt.Sprintf("EnrichedActions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WatchActionsResponseMultiError(errors)
	}

	return nil
}

// WatchActionsResponseMultiError is an error wrapping multiple validation
// errors returned by WatchActionsResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchActionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchActionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchActionsResponseMultiError) AllErrors() []error { return m }

// WatchActionsResponseValidationError is the validation error returned by
// WatchActionsResponse.Validate if the designated constraints aren't met.
type WatchActionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchActionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchActionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchActionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchActionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchActionsResponseValidationError) ErrorName() string {
	return "WatchActionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchActionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchActionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchActionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchActionsResponseValidationError{}

// Validate checks the field values on WatchClusterEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchClusterEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchClusterEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchClusterEventsRequestMultiError, or nil if none found.
func (m *WatchClusterEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchClusterEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchClusterEventsRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchClusterEventsRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchClusterEventsRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Attempt

	if len(errors) > 0 {
		return WatchClusterEventsRequestMultiError(errors)
	}

	return nil
}

// WatchClusterEventsRequestMultiError is an error wrapping multiple validation
// errors returned by WatchClusterEventsRequest.ValidateAll() if the
// designated constraints aren't met.
type WatchClusterEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchClusterEventsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchClusterEventsRequestMultiError) AllErrors() []error { return m }

// WatchClusterEventsRequestValidationError is the validation error returned by
// WatchClusterEventsRequest.Validate if the designated constraints aren't met.
type WatchClusterEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchClusterEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchClusterEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchClusterEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchClusterEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchClusterEventsRequestValidationError) ErrorName() string {
	return "WatchClusterEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchClusterEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchClusterEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchClusterEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchClusterEventsRequestValidationError{}

// Validate checks the field values on WatchClusterEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchClusterEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchClusterEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchClusterEventsResponseMultiError, or nil if none found.
func (m *WatchClusterEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchClusterEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClusterEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchClusterEventsResponseValidationError{
						field:  fmt.Sprintf("ClusterEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchClusterEventsResponseValidationError{
						field:  fmt.Sprintf("ClusterEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchClusterEventsResponseValidationError{
					field:  fmt.Sprintf("ClusterEvents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WatchClusterEventsResponseMultiError(errors)
	}

	return nil
}

// WatchClusterEventsResponseMultiError is an error wrapping multiple
// validation errors returned by WatchClusterEventsResponse.ValidateAll() if
// the designated constraints aren't met.
type WatchClusterEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchClusterEventsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchClusterEventsResponseMultiError) AllErrors() []error { return m }

// WatchClusterEventsResponseValidationError is the validation error returned
// by WatchClusterEventsResponse.Validate if the designated constraints aren't met.
type WatchClusterEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchClusterEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchClusterEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchClusterEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchClusterEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchClusterEventsResponseValidationError) ErrorName() string {
	return "WatchClusterEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchClusterEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchClusterEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchClusterEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchClusterEventsResponseValidationError{}

// Validate checks the field values on AbortActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AbortActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AbortActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AbortActionRequestMultiError, or nil if none found.
func (m *AbortActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AbortActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActionId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AbortActionRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AbortActionRequestValidationError{
					field:  "ActionId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbortActionRequestValidationError{
				field:  "ActionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reason

	if len(errors) > 0 {
		return AbortActionRequestMultiError(errors)
	}

	return nil
}

// AbortActionRequestMultiError is an error wrapping multiple validation errors
// returned by AbortActionRequest.ValidateAll() if the designated constraints
// aren't met.
type AbortActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbortActionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbortActionRequestMultiError) AllErrors() []error { return m }

// AbortActionRequestValidationError is the validation error returned by
// AbortActionRequest.Validate if the designated constraints aren't met.
type AbortActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbortActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbortActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbortActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbortActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbortActionRequestValidationError) ErrorName() string {
	return "AbortActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AbortActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbortActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbortActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbortActionRequestValidationError{}

// Validate checks the field values on AbortActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AbortActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AbortActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AbortActionResponseMultiError, or nil if none found.
func (m *AbortActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AbortActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AbortActionResponseMultiError(errors)
	}

	return nil
}

// AbortActionResponseMultiError is an error wrapping multiple validation
// errors returned by AbortActionResponse.ValidateAll() if the designated
// constraints aren't met.
type AbortActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbortActionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbortActionResponseMultiError) AllErrors() []error { return m }

// AbortActionResponseValidationError is the validation error returned by
// AbortActionResponse.Validate if the designated constraints aren't met.
type AbortActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbortActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbortActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbortActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbortActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbortActionResponseValidationError) ErrorName() string {
	return "AbortActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AbortActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbortActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbortActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbortActionResponseValidationError{}
