// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flyteidl2/workflow/translator_service.proto

package workflowconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	workflow "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TranslatorServiceName is the fully-qualified name of the TranslatorService service.
	TranslatorServiceName = "flyteidl2.workflow.TranslatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TranslatorServiceLiteralsToLaunchFormJsonProcedure is the fully-qualified name of the
	// TranslatorService's LiteralsToLaunchFormJson RPC.
	TranslatorServiceLiteralsToLaunchFormJsonProcedure = "/flyteidl2.workflow.TranslatorService/LiteralsToLaunchFormJson"
	// TranslatorServiceLaunchFormJsonToLiteralsProcedure is the fully-qualified name of the
	// TranslatorService's LaunchFormJsonToLiterals RPC.
	TranslatorServiceLaunchFormJsonToLiteralsProcedure = "/flyteidl2.workflow.TranslatorService/LaunchFormJsonToLiterals"
	// TranslatorServiceTaskSpecToLaunchFormJsonProcedure is the fully-qualified name of the
	// TranslatorService's TaskSpecToLaunchFormJson RPC.
	TranslatorServiceTaskSpecToLaunchFormJsonProcedure = "/flyteidl2.workflow.TranslatorService/TaskSpecToLaunchFormJson"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	translatorServiceServiceDescriptor                        = workflow.File_flyteidl2_workflow_translator_service_proto.Services().ByName("TranslatorService")
	translatorServiceLiteralsToLaunchFormJsonMethodDescriptor = translatorServiceServiceDescriptor.Methods().ByName("LiteralsToLaunchFormJson")
	translatorServiceLaunchFormJsonToLiteralsMethodDescriptor = translatorServiceServiceDescriptor.Methods().ByName("LaunchFormJsonToLiterals")
	translatorServiceTaskSpecToLaunchFormJsonMethodDescriptor = translatorServiceServiceDescriptor.Methods().ByName("TaskSpecToLaunchFormJson")
)

// TranslatorServiceClient is a client for the flyteidl2.workflow.TranslatorService service.
type TranslatorServiceClient interface {
	LiteralsToLaunchFormJson(context.Context, *connect.Request[workflow.LiteralsToLaunchFormJsonRequest]) (*connect.Response[workflow.LiteralsToLaunchFormJsonResponse], error)
	LaunchFormJsonToLiterals(context.Context, *connect.Request[workflow.LaunchFormJsonToLiteralsRequest]) (*connect.Response[workflow.LaunchFormJsonToLiteralsResponse], error)
	TaskSpecToLaunchFormJson(context.Context, *connect.Request[workflow.TaskSpecToLaunchFormJsonRequest]) (*connect.Response[workflow.TaskSpecToLaunchFormJsonResponse], error)
}

// NewTranslatorServiceClient constructs a client for the flyteidl2.workflow.TranslatorService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTranslatorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TranslatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &translatorServiceClient{
		literalsToLaunchFormJson: connect.NewClient[workflow.LiteralsToLaunchFormJsonRequest, workflow.LiteralsToLaunchFormJsonResponse](
			httpClient,
			baseURL+TranslatorServiceLiteralsToLaunchFormJsonProcedure,
			connect.WithSchema(translatorServiceLiteralsToLaunchFormJsonMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		launchFormJsonToLiterals: connect.NewClient[workflow.LaunchFormJsonToLiteralsRequest, workflow.LaunchFormJsonToLiteralsResponse](
			httpClient,
			baseURL+TranslatorServiceLaunchFormJsonToLiteralsProcedure,
			connect.WithSchema(translatorServiceLaunchFormJsonToLiteralsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		taskSpecToLaunchFormJson: connect.NewClient[workflow.TaskSpecToLaunchFormJsonRequest, workflow.TaskSpecToLaunchFormJsonResponse](
			httpClient,
			baseURL+TranslatorServiceTaskSpecToLaunchFormJsonProcedure,
			connect.WithSchema(translatorServiceTaskSpecToLaunchFormJsonMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// translatorServiceClient implements TranslatorServiceClient.
type translatorServiceClient struct {
	literalsToLaunchFormJson *connect.Client[workflow.LiteralsToLaunchFormJsonRequest, workflow.LiteralsToLaunchFormJsonResponse]
	launchFormJsonToLiterals *connect.Client[workflow.LaunchFormJsonToLiteralsRequest, workflow.LaunchFormJsonToLiteralsResponse]
	taskSpecToLaunchFormJson *connect.Client[workflow.TaskSpecToLaunchFormJsonRequest, workflow.TaskSpecToLaunchFormJsonResponse]
}

// LiteralsToLaunchFormJson calls flyteidl2.workflow.TranslatorService.LiteralsToLaunchFormJson.
func (c *translatorServiceClient) LiteralsToLaunchFormJson(ctx context.Context, req *connect.Request[workflow.LiteralsToLaunchFormJsonRequest]) (*connect.Response[workflow.LiteralsToLaunchFormJsonResponse], error) {
	return c.literalsToLaunchFormJson.CallUnary(ctx, req)
}

// LaunchFormJsonToLiterals calls flyteidl2.workflow.TranslatorService.LaunchFormJsonToLiterals.
func (c *translatorServiceClient) LaunchFormJsonToLiterals(ctx context.Context, req *connect.Request[workflow.LaunchFormJsonToLiteralsRequest]) (*connect.Response[workflow.LaunchFormJsonToLiteralsResponse], error) {
	return c.launchFormJsonToLiterals.CallUnary(ctx, req)
}

// TaskSpecToLaunchFormJson calls flyteidl2.workflow.TranslatorService.TaskSpecToLaunchFormJson.
func (c *translatorServiceClient) TaskSpecToLaunchFormJson(ctx context.Context, req *connect.Request[workflow.TaskSpecToLaunchFormJsonRequest]) (*connect.Response[workflow.TaskSpecToLaunchFormJsonResponse], error) {
	return c.taskSpecToLaunchFormJson.CallUnary(ctx, req)
}

// TranslatorServiceHandler is an implementation of the flyteidl2.workflow.TranslatorService
// service.
type TranslatorServiceHandler interface {
	LiteralsToLaunchFormJson(context.Context, *connect.Request[workflow.LiteralsToLaunchFormJsonRequest]) (*connect.Response[workflow.LiteralsToLaunchFormJsonResponse], error)
	LaunchFormJsonToLiterals(context.Context, *connect.Request[workflow.LaunchFormJsonToLiteralsRequest]) (*connect.Response[workflow.LaunchFormJsonToLiteralsResponse], error)
	TaskSpecToLaunchFormJson(context.Context, *connect.Request[workflow.TaskSpecToLaunchFormJsonRequest]) (*connect.Response[workflow.TaskSpecToLaunchFormJsonResponse], error)
}

// NewTranslatorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTranslatorServiceHandler(svc TranslatorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	translatorServiceLiteralsToLaunchFormJsonHandler := connect.NewUnaryHandler(
		TranslatorServiceLiteralsToLaunchFormJsonProcedure,
		svc.LiteralsToLaunchFormJson,
		connect.WithSchema(translatorServiceLiteralsToLaunchFormJsonMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	translatorServiceLaunchFormJsonToLiteralsHandler := connect.NewUnaryHandler(
		TranslatorServiceLaunchFormJsonToLiteralsProcedure,
		svc.LaunchFormJsonToLiterals,
		connect.WithSchema(translatorServiceLaunchFormJsonToLiteralsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	translatorServiceTaskSpecToLaunchFormJsonHandler := connect.NewUnaryHandler(
		TranslatorServiceTaskSpecToLaunchFormJsonProcedure,
		svc.TaskSpecToLaunchFormJson,
		connect.WithSchema(translatorServiceTaskSpecToLaunchFormJsonMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/flyteidl2.workflow.TranslatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TranslatorServiceLiteralsToLaunchFormJsonProcedure:
			translatorServiceLiteralsToLaunchFormJsonHandler.ServeHTTP(w, r)
		case TranslatorServiceLaunchFormJsonToLiteralsProcedure:
			translatorServiceLaunchFormJsonToLiteralsHandler.ServeHTTP(w, r)
		case TranslatorServiceTaskSpecToLaunchFormJsonProcedure:
			translatorServiceTaskSpecToLaunchFormJsonHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTranslatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTranslatorServiceHandler struct{}

func (UnimplementedTranslatorServiceHandler) LiteralsToLaunchFormJson(context.Context, *connect.Request[workflow.LiteralsToLaunchFormJsonRequest]) (*connect.Response[workflow.LiteralsToLaunchFormJsonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.workflow.TranslatorService.LiteralsToLaunchFormJson is not implemented"))
}

func (UnimplementedTranslatorServiceHandler) LaunchFormJsonToLiterals(context.Context, *connect.Request[workflow.LaunchFormJsonToLiteralsRequest]) (*connect.Response[workflow.LaunchFormJsonToLiteralsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.workflow.TranslatorService.LaunchFormJsonToLiterals is not implemented"))
}

func (UnimplementedTranslatorServiceHandler) TaskSpecToLaunchFormJson(context.Context, *connect.Request[workflow.TaskSpecToLaunchFormJsonRequest]) (*connect.Response[workflow.TaskSpecToLaunchFormJsonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flyteidl2.workflow.TranslatorService.TaskSpecToLaunchFormJson is not implemented"))
}
