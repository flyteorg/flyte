# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flyteidl2.task import task_service_pb2 as flyteidl2_dot_task_dot_task__service__pb2


class TaskServiceStub(object):
    """TaskService provides an interface for managing tasks.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeployTask = channel.unary_unary(
                '/flyteidl2.task.TaskService/DeployTask',
                request_serializer=flyteidl2_dot_task_dot_task__service__pb2.DeployTaskRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_task_dot_task__service__pb2.DeployTaskResponse.FromString,
                )
        self.GetTaskDetails = channel.unary_unary(
                '/flyteidl2.task.TaskService/GetTaskDetails',
                request_serializer=flyteidl2_dot_task_dot_task__service__pb2.GetTaskDetailsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_task_dot_task__service__pb2.GetTaskDetailsResponse.FromString,
                )
        self.ListTasks = channel.unary_unary(
                '/flyteidl2.task.TaskService/ListTasks',
                request_serializer=flyteidl2_dot_task_dot_task__service__pb2.ListTasksRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_task_dot_task__service__pb2.ListTasksResponse.FromString,
                )


class TaskServiceServicer(object):
    """TaskService provides an interface for managing tasks.
    """

    def DeployTask(self, request, context):
        """Deploy a task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskDetails(self, request, context):
        """Get detailed information about a task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTasks(self, request, context):
        """Lists tasks, one per task name, returning the latest version and who it was deployed by.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeployTask': grpc.unary_unary_rpc_method_handler(
                    servicer.DeployTask,
                    request_deserializer=flyteidl2_dot_task_dot_task__service__pb2.DeployTaskRequest.FromString,
                    response_serializer=flyteidl2_dot_task_dot_task__service__pb2.DeployTaskResponse.SerializeToString,
            ),
            'GetTaskDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskDetails,
                    request_deserializer=flyteidl2_dot_task_dot_task__service__pb2.GetTaskDetailsRequest.FromString,
                    response_serializer=flyteidl2_dot_task_dot_task__service__pb2.GetTaskDetailsResponse.SerializeToString,
            ),
            'ListTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTasks,
                    request_deserializer=flyteidl2_dot_task_dot_task__service__pb2.ListTasksRequest.FromString,
                    response_serializer=flyteidl2_dot_task_dot_task__service__pb2.ListTasksResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flyteidl2.task.TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """TaskService provides an interface for managing tasks.
    """

    @staticmethod
    def DeployTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.task.TaskService/DeployTask',
            flyteidl2_dot_task_dot_task__service__pb2.DeployTaskRequest.SerializeToString,
            flyteidl2_dot_task_dot_task__service__pb2.DeployTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.task.TaskService/GetTaskDetails',
            flyteidl2_dot_task_dot_task__service__pb2.GetTaskDetailsRequest.SerializeToString,
            flyteidl2_dot_task_dot_task__service__pb2.GetTaskDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.task.TaskService/ListTasks',
            flyteidl2_dot_task_dot_task__service__pb2.ListTasksRequest.SerializeToString,
            flyteidl2_dot_task_dot_task__service__pb2.ListTasksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
