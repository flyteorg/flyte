# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flyteidl2.trigger import trigger_service_pb2 as flyteidl2_dot_trigger_dot_trigger__service__pb2


class TriggerServiceStub(object):
    """TriggerService provides an interface for managing triggers.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeployTrigger = channel.unary_unary(
                '/flyteidl2.trigger.TriggerService/DeployTrigger',
                request_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.DeployTriggerRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.DeployTriggerResponse.FromString,
                )
        self.GetTriggerDetails = channel.unary_unary(
                '/flyteidl2.trigger.TriggerService/GetTriggerDetails',
                request_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerDetailsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerDetailsResponse.FromString,
                )
        self.GetTriggerRevisionDetails = channel.unary_unary(
                '/flyteidl2.trigger.TriggerService/GetTriggerRevisionDetails',
                request_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionDetailsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionDetailsResponse.FromString,
                )
        self.ListTriggers = channel.unary_unary(
                '/flyteidl2.trigger.TriggerService/ListTriggers',
                request_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.ListTriggersRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.ListTriggersResponse.FromString,
                )
        self.GetTriggerRevisionHistory = channel.unary_unary(
                '/flyteidl2.trigger.TriggerService/GetTriggerRevisionHistory',
                request_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionHistoryRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionHistoryResponse.FromString,
                )
        self.UpdateTriggers = channel.unary_unary(
                '/flyteidl2.trigger.TriggerService/UpdateTriggers',
                request_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.UpdateTriggersRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.UpdateTriggersResponse.FromString,
                )
        self.DeleteTriggers = channel.unary_unary(
                '/flyteidl2.trigger.TriggerService/DeleteTriggers',
                request_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.DeleteTriggersRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.DeleteTriggersResponse.FromString,
                )


class TriggerServiceServicer(object):
    """TriggerService provides an interface for managing triggers.
    """

    def DeployTrigger(self, request, context):
        """Create if trigger didn't exist previously.
        Update if it already exists.
        Re-create(or undelete) if it was soft-deleted.
        Client must fetch the latest trigger in order to obtain the latest `trigger.id.revision`.
        If trigger is not found, client can set `trigger.id.revision` to 1, it is ignored and set automatically by backend.
        If trigger is found, client should set `trigger.id.revision` to the <latest>.
        Backend validates that version is the latest and creates a new revision of the trigger.
        Otherwise, operation is rejected(optimistic locking) and client must re-fetch trigger again.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTriggerDetails(self, request, context):
        """Get detailed info about the latest trigger revision
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTriggerRevisionDetails(self, request, context):
        """Get detailed info about a specific trigger revision
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTriggers(self, request, context):
        """List basic info about triggers based on various filtering and sorting rules.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTriggerRevisionHistory(self, request, context):
        """GetTriggerRevisionHistory returns all revisions for a given trigger
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTriggers(self, request, context):
        """Update some trigger spec fields for multiple triggers at once
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTriggers(self, request, context):
        """Soft-delete multiple triggers at once.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TriggerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeployTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.DeployTrigger,
                    request_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.DeployTriggerRequest.FromString,
                    response_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.DeployTriggerResponse.SerializeToString,
            ),
            'GetTriggerDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTriggerDetails,
                    request_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerDetailsRequest.FromString,
                    response_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerDetailsResponse.SerializeToString,
            ),
            'GetTriggerRevisionDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTriggerRevisionDetails,
                    request_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionDetailsRequest.FromString,
                    response_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionDetailsResponse.SerializeToString,
            ),
            'ListTriggers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTriggers,
                    request_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.ListTriggersRequest.FromString,
                    response_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.ListTriggersResponse.SerializeToString,
            ),
            'GetTriggerRevisionHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTriggerRevisionHistory,
                    request_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionHistoryRequest.FromString,
                    response_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionHistoryResponse.SerializeToString,
            ),
            'UpdateTriggers': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTriggers,
                    request_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.UpdateTriggersRequest.FromString,
                    response_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.UpdateTriggersResponse.SerializeToString,
            ),
            'DeleteTriggers': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTriggers,
                    request_deserializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.DeleteTriggersRequest.FromString,
                    response_serializer=flyteidl2_dot_trigger_dot_trigger__service__pb2.DeleteTriggersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flyteidl2.trigger.TriggerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TriggerService(object):
    """TriggerService provides an interface for managing triggers.
    """

    @staticmethod
    def DeployTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.trigger.TriggerService/DeployTrigger',
            flyteidl2_dot_trigger_dot_trigger__service__pb2.DeployTriggerRequest.SerializeToString,
            flyteidl2_dot_trigger_dot_trigger__service__pb2.DeployTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTriggerDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.trigger.TriggerService/GetTriggerDetails',
            flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerDetailsRequest.SerializeToString,
            flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTriggerRevisionDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.trigger.TriggerService/GetTriggerRevisionDetails',
            flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionDetailsRequest.SerializeToString,
            flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTriggers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.trigger.TriggerService/ListTriggers',
            flyteidl2_dot_trigger_dot_trigger__service__pb2.ListTriggersRequest.SerializeToString,
            flyteidl2_dot_trigger_dot_trigger__service__pb2.ListTriggersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTriggerRevisionHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.trigger.TriggerService/GetTriggerRevisionHistory',
            flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionHistoryRequest.SerializeToString,
            flyteidl2_dot_trigger_dot_trigger__service__pb2.GetTriggerRevisionHistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTriggers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.trigger.TriggerService/UpdateTriggers',
            flyteidl2_dot_trigger_dot_trigger__service__pb2.UpdateTriggersRequest.SerializeToString,
            flyteidl2_dot_trigger_dot_trigger__service__pb2.UpdateTriggersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTriggers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.trigger.TriggerService/DeleteTriggers',
            flyteidl2_dot_trigger_dot_trigger__service__pb2.DeleteTriggersRequest.SerializeToString,
            flyteidl2_dot_trigger_dot_trigger__service__pb2.DeleteTriggersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
