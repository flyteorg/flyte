# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flyteidl2.workflow import run_service_pb2 as flyteidl2_dot_workflow_dot_run__service__pb2


class RunServiceStub(object):
    """RunService provides an interface for managing runs.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRun = channel.unary_unary(
                '/flyteidl2.workflow.RunService/CreateRun',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.CreateRunRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.CreateRunResponse.FromString,
                )
        self.AbortRun = channel.unary_unary(
                '/flyteidl2.workflow.RunService/AbortRun',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.AbortRunRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.AbortRunResponse.FromString,
                )
        self.GetRunDetails = channel.unary_unary(
                '/flyteidl2.workflow.RunService/GetRunDetails',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetRunDetailsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetRunDetailsResponse.FromString,
                )
        self.WatchRunDetails = channel.unary_stream(
                '/flyteidl2.workflow.RunService/WatchRunDetails',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunDetailsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunDetailsResponse.FromString,
                )
        self.GetActionDetails = channel.unary_unary(
                '/flyteidl2.workflow.RunService/GetActionDetails',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDetailsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDetailsResponse.FromString,
                )
        self.WatchActionDetails = channel.unary_stream(
                '/flyteidl2.workflow.RunService/WatchActionDetails',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionDetailsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionDetailsResponse.FromString,
                )
        self.GetActionData = channel.unary_unary(
                '/flyteidl2.workflow.RunService/GetActionData',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDataRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDataResponse.FromString,
                )
        self.ListRuns = channel.unary_unary(
                '/flyteidl2.workflow.RunService/ListRuns',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.ListRunsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.ListRunsResponse.FromString,
                )
        self.WatchRuns = channel.unary_stream(
                '/flyteidl2.workflow.RunService/WatchRuns',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunsResponse.FromString,
                )
        self.ListActions = channel.unary_unary(
                '/flyteidl2.workflow.RunService/ListActions',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.ListActionsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.ListActionsResponse.FromString,
                )
        self.WatchActions = channel.unary_stream(
                '/flyteidl2.workflow.RunService/WatchActions',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionsResponse.FromString,
                )
        self.WatchClusterEvents = channel.unary_stream(
                '/flyteidl2.workflow.RunService/WatchClusterEvents',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchClusterEventsRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchClusterEventsResponse.FromString,
                )
        self.AbortAction = channel.unary_unary(
                '/flyteidl2.workflow.RunService/AbortAction',
                request_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.AbortActionRequest.SerializeToString,
                response_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.AbortActionResponse.FromString,
                )


class RunServiceServicer(object):
    """RunService provides an interface for managing runs.
    """

    def CreateRun(self, request, context):
        """Create a new run of the given task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortRun(self, request, context):
        """Abort a run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRunDetails(self, request, context):
        """Get detailed information about a run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchRunDetails(self, request, context):
        """Stream detailed information updates about a run. The call will terminate when the run reaches a terminal phase.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActionDetails(self, request, context):
        """Get detailed information about an action.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchActionDetails(self, request, context):
        """Stream detailed information updates about an action. The call will terminate when the action reaches a terminal phase.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActionData(self, request, context):
        """Get input and output for an action.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRuns(self, request, context):
        """List runs based on the provided filter criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchRuns(self, request, context):
        """Stream updates for runs based on the provided filter criteria. Responses may include newly discovered
        runs or updates to existing ones from the point of invocation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListActions(self, request, context):
        """List all actions for a given run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchActions(self, request, context):
        """Stream updates for actions given a run. Responses may include newly discovered nested runs or updates
        to  existing ones from the point of invocation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchClusterEvents(self, request, context):
        """Stream of k8s cluster events in human readable form
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortAction(self, request, context):
        """AbortAction aborts a single action that was previously created or is currently being processed by a worker.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RunServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRun': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRun,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.CreateRunRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.CreateRunResponse.SerializeToString,
            ),
            'AbortRun': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortRun,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.AbortRunRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.AbortRunResponse.SerializeToString,
            ),
            'GetRunDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRunDetails,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetRunDetailsRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetRunDetailsResponse.SerializeToString,
            ),
            'WatchRunDetails': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchRunDetails,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunDetailsRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunDetailsResponse.SerializeToString,
            ),
            'GetActionDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActionDetails,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDetailsRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDetailsResponse.SerializeToString,
            ),
            'WatchActionDetails': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchActionDetails,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionDetailsRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionDetailsResponse.SerializeToString,
            ),
            'GetActionData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActionData,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDataRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDataResponse.SerializeToString,
            ),
            'ListRuns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRuns,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.ListRunsRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.ListRunsResponse.SerializeToString,
            ),
            'WatchRuns': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchRuns,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunsRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunsResponse.SerializeToString,
            ),
            'ListActions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListActions,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.ListActionsRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.ListActionsResponse.SerializeToString,
            ),
            'WatchActions': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchActions,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionsRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionsResponse.SerializeToString,
            ),
            'WatchClusterEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchClusterEvents,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchClusterEventsRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.WatchClusterEventsResponse.SerializeToString,
            ),
            'AbortAction': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortAction,
                    request_deserializer=flyteidl2_dot_workflow_dot_run__service__pb2.AbortActionRequest.FromString,
                    response_serializer=flyteidl2_dot_workflow_dot_run__service__pb2.AbortActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flyteidl2.workflow.RunService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RunService(object):
    """RunService provides an interface for managing runs.
    """

    @staticmethod
    def CreateRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.workflow.RunService/CreateRun',
            flyteidl2_dot_workflow_dot_run__service__pb2.CreateRunRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.CreateRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AbortRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.workflow.RunService/AbortRun',
            flyteidl2_dot_workflow_dot_run__service__pb2.AbortRunRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.AbortRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRunDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.workflow.RunService/GetRunDetails',
            flyteidl2_dot_workflow_dot_run__service__pb2.GetRunDetailsRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.GetRunDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchRunDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/flyteidl2.workflow.RunService/WatchRunDetails',
            flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunDetailsRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActionDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.workflow.RunService/GetActionDetails',
            flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDetailsRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchActionDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/flyteidl2.workflow.RunService/WatchActionDetails',
            flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionDetailsRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActionData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.workflow.RunService/GetActionData',
            flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDataRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.GetActionDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRuns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.workflow.RunService/ListRuns',
            flyteidl2_dot_workflow_dot_run__service__pb2.ListRunsRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.ListRunsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchRuns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/flyteidl2.workflow.RunService/WatchRuns',
            flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunsRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.WatchRunsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.workflow.RunService/ListActions',
            flyteidl2_dot_workflow_dot_run__service__pb2.ListActionsRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.ListActionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/flyteidl2.workflow.RunService/WatchActions',
            flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionsRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.WatchActionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WatchClusterEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/flyteidl2.workflow.RunService/WatchClusterEvents',
            flyteidl2_dot_workflow_dot_run__service__pb2.WatchClusterEventsRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.WatchClusterEventsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AbortAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl2.workflow.RunService/AbortAction',
            flyteidl2_dot_workflow_dot_run__service__pb2.AbortActionRequest.SerializeToString,
            flyteidl2_dot_workflow_dot_run__service__pb2.AbortActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
