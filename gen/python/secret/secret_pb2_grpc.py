# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from secret import payload_pb2 as secret_dot_payload__pb2


class SecretServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSecret = channel.unary_unary(
                '/flyteidl.secret.SecretService/CreateSecret',
                request_serializer=secret_dot_payload__pb2.CreateSecretRequest.SerializeToString,
                response_deserializer=secret_dot_payload__pb2.CreateSecretResponse.FromString,
                )
        self.UpdateSecret = channel.unary_unary(
                '/flyteidl.secret.SecretService/UpdateSecret',
                request_serializer=secret_dot_payload__pb2.UpdateSecretRequest.SerializeToString,
                response_deserializer=secret_dot_payload__pb2.UpdateSecretResponse.FromString,
                )
        self.GetSecret = channel.unary_unary(
                '/flyteidl.secret.SecretService/GetSecret',
                request_serializer=secret_dot_payload__pb2.GetSecretRequest.SerializeToString,
                response_deserializer=secret_dot_payload__pb2.GetSecretResponse.FromString,
                )
        self.DeleteSecret = channel.unary_unary(
                '/flyteidl.secret.SecretService/DeleteSecret',
                request_serializer=secret_dot_payload__pb2.DeleteSecretRequest.SerializeToString,
                response_deserializer=secret_dot_payload__pb2.DeleteSecretResponse.FromString,
                )
        self.ListSecrets = channel.unary_unary(
                '/flyteidl.secret.SecretService/ListSecrets',
                request_serializer=secret_dot_payload__pb2.ListSecretsRequest.SerializeToString,
                response_deserializer=secret_dot_payload__pb2.ListSecretsResponse.FromString,
                )


class SecretServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSecret(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSecrets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SecretServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSecret,
                    request_deserializer=secret_dot_payload__pb2.CreateSecretRequest.FromString,
                    response_serializer=secret_dot_payload__pb2.CreateSecretResponse.SerializeToString,
            ),
            'UpdateSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSecret,
                    request_deserializer=secret_dot_payload__pb2.UpdateSecretRequest.FromString,
                    response_serializer=secret_dot_payload__pb2.UpdateSecretResponse.SerializeToString,
            ),
            'GetSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSecret,
                    request_deserializer=secret_dot_payload__pb2.GetSecretRequest.FromString,
                    response_serializer=secret_dot_payload__pb2.GetSecretResponse.SerializeToString,
            ),
            'DeleteSecret': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSecret,
                    request_deserializer=secret_dot_payload__pb2.DeleteSecretRequest.FromString,
                    response_serializer=secret_dot_payload__pb2.DeleteSecretResponse.SerializeToString,
            ),
            'ListSecrets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSecrets,
                    request_deserializer=secret_dot_payload__pb2.ListSecretsRequest.FromString,
                    response_serializer=secret_dot_payload__pb2.ListSecretsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flyteidl.secret.SecretService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SecretService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.secret.SecretService/CreateSecret',
            secret_dot_payload__pb2.CreateSecretRequest.SerializeToString,
            secret_dot_payload__pb2.CreateSecretResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.secret.SecretService/UpdateSecret',
            secret_dot_payload__pb2.UpdateSecretRequest.SerializeToString,
            secret_dot_payload__pb2.UpdateSecretResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.secret.SecretService/GetSecret',
            secret_dot_payload__pb2.GetSecretRequest.SerializeToString,
            secret_dot_payload__pb2.GetSecretResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSecret(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.secret.SecretService/DeleteSecret',
            secret_dot_payload__pb2.DeleteSecretRequest.SerializeToString,
            secret_dot_payload__pb2.DeleteSecretResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSecrets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.secret.SecretService/ListSecrets',
            secret_dot_payload__pb2.ListSecretsRequest.SerializeToString,
            secret_dot_payload__pb2.ListSecretsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
