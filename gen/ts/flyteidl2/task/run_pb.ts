// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file flyteidl2/task/run.proto (package flyteidl2.task, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { KeyValuePair } from "../core/literals_pb.ts";
import { file_flyteidl2_core_literals } from "../core/literals_pb.ts";
import { file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file flyteidl2/task/run.proto.
 */
export const file_flyteidl2_task_run: GenFile = /*@__PURE__*/
  fileDesc("ChhmbHl0ZWlkbDIvdGFzay9ydW4ucHJvdG8SDmZseXRlaWRsMi50YXNrImsKBkxhYmVscxIyCgZ2YWx1ZXMYASADKAsyIi5mbHl0ZWlkbDIudGFzay5MYWJlbHMuVmFsdWVzRW50cnkaLQoLVmFsdWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJ1CgtBbm5vdGF0aW9ucxI3CgZ2YWx1ZXMYASADKAsyJy5mbHl0ZWlkbDIudGFzay5Bbm5vdGF0aW9ucy5WYWx1ZXNFbnRyeRotCgtWYWx1ZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIjQKBEVudnMSLAoGdmFsdWVzGAEgAygLMhwuZmx5dGVpZGwyLmNvcmUuS2V5VmFsdWVQYWlyIuQBCgdSdW5TcGVjEiYKBmxhYmVscxgBIAEoCzIWLmZseXRlaWRsMi50YXNrLkxhYmVscxIwCgthbm5vdGF0aW9ucxgCIAEoCzIbLmZseXRlaWRsMi50YXNrLkFubm90YXRpb25zEiIKBGVudnMYAyABKAsyFC5mbHl0ZWlkbDIudGFzay5FbnZzEjEKDWludGVycnVwdGlibGUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEhcKD292ZXJ3cml0ZV9jYWNoZRgFIAEoCBIPCgdjbHVzdGVyGAYgASgJQq0BChJjb20uZmx5dGVpZGwyLnRhc2tCCFJ1blByb3RvSAJQAVoyZ2l0aHViLmNvbS9mbHl0ZW9yZy9mbHl0ZS92Mi9nZW4vZ28vZmx5dGVpZGwyL3Rhc2uiAgNGVFiqAg5GbHl0ZWlkbDIuVGFza8oCDkZseXRlaWRsMlxUYXNr4gIaRmx5dGVpZGwyXFRhc2tcR1BCTWV0YWRhdGHqAg9GbHl0ZWlkbDI6OlRhc2tiBnByb3RvMw", [file_flyteidl2_core_literals, file_google_protobuf_wrappers]);

/**
 * Label values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge labels defined at registration and execution time.
 *
 * @generated from message flyteidl2.task.Labels
 */
export type Labels = Message<"flyteidl2.task.Labels"> & {
  /**
   * Map of custom labels to be applied to the execution resource.
   *
   * @generated from field: map<string, string> values = 1;
   */
  values: { [key: string]: string };
};

/**
 * Describes the message flyteidl2.task.Labels.
 * Use `create(LabelsSchema)` to create a new message.
 */
export const LabelsSchema: GenMessage<Labels> = /*@__PURE__*/
  messageDesc(file_flyteidl2_task_run, 0);

/**
 * Annotation values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge annotations defined at registration and execution time.
 *
 * @generated from message flyteidl2.task.Annotations
 */
export type Annotations = Message<"flyteidl2.task.Annotations"> & {
  /**
   * Map of custom annotations to be applied to the execution resource.
   *
   * @generated from field: map<string, string> values = 1;
   */
  values: { [key: string]: string };
};

/**
 * Describes the message flyteidl2.task.Annotations.
 * Use `create(AnnotationsSchema)` to create a new message.
 */
export const AnnotationsSchema: GenMessage<Annotations> = /*@__PURE__*/
  messageDesc(file_flyteidl2_task_run, 1);

/**
 * Environment variable values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge environment variables defined at registration and execution time.
 *
 * @generated from message flyteidl2.task.Envs
 */
export type Envs = Message<"flyteidl2.task.Envs"> & {
  /**
   * Map of custom environment variables to be applied to the execution resource.
   *
   * @generated from field: repeated flyteidl2.core.KeyValuePair values = 1;
   */
  values: KeyValuePair[];
};

/**
 * Describes the message flyteidl2.task.Envs.
 * Use `create(EnvsSchema)` to create a new message.
 */
export const EnvsSchema: GenMessage<Envs> = /*@__PURE__*/
  messageDesc(file_flyteidl2_task_run, 2);

/**
 * @generated from message flyteidl2.task.RunSpec
 */
export type RunSpec = Message<"flyteidl2.task.RunSpec"> & {
  /**
   * Labels to apply to the run.
   *
   * @generated from field: flyteidl2.task.Labels labels = 1;
   */
  labels?: Labels;

  /**
   * Annotations to apply to the run.
   *
   * @generated from field: flyteidl2.task.Annotations annotations = 2;
   */
  annotations?: Annotations;

  /**
   * Envs to apply to the run.
   *
   * @generated from field: flyteidl2.task.Envs envs = 3;
   */
  envs?: Envs;

  /**
   * Explicit override for executing this run as interruptible or not. If not set, use the default.
   *
   * @generated from field: google.protobuf.BoolValue interruptible = 4;
   */
  interruptible?: boolean;

  /**
   * If true, recompute outputs for this run and overwrite any existing cache.
   *
   * @generated from field: bool overwrite_cache = 5;
   */
  overwriteCache: boolean;

  /**
   * the specific cluster that this action should be executed on. this value will be used as the
   * default for all actions in the run unless overridden.
   *
   * @generated from field: string cluster = 6;
   */
  cluster: string;
};

/**
 * Describes the message flyteidl2.task.RunSpec.
 * Use `create(RunSpecSchema)` to create a new message.
 */
export const RunSpecSchema: GenMessage<RunSpec> = /*@__PURE__*/
  messageDesc(file_flyteidl2_task_run, 3);

