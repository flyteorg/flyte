// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file flyteidl2/logs/dataplane/payload.proto (package flyteidl2.logs.dataplane, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_buf_validate_validate } from "../../../buf/validate/validate_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file flyteidl2/logs/dataplane/payload.proto.
 */
export const file_flyteidl2_logs_dataplane_payload: GenFile = /*@__PURE__*/
  fileDesc("CiZmbHl0ZWlkbDIvbG9ncy9kYXRhcGxhbmUvcGF5bG9hZC5wcm90bxIYZmx5dGVpZGwyLmxvZ3MuZGF0YXBsYW5lIlMKC1BvZFJlc291cmNlEhoKCW5hbWVzcGFjZRgBIAEoCUIHukgEcgIQARIVCgRuYW1lGAIgASgJQge6SARyAhABEhEKCWNvbnRhaW5lchgDIAEoCSLUAwoOTG9nZ2luZ0NvbnRleHQSHQoMY2x1c3Rlcl9uYW1lGAMgASgJQge6SARyAhABEiUKFGt1YmVybmV0ZXNfbmFtZXNwYWNlGAQgASgJQge6SARyAhABEiQKE2t1YmVybmV0ZXNfcG9kX25hbWUYBSABKAlCB7pIBHICEAESKgoZa3ViZXJuZXRlc19jb250YWluZXJfbmFtZRgGIAEoCUIHukgEcgIQARJAChxleGVjdXRpb25fYXR0ZW1wdF9zdGFydF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI+ChpleGVjdXRpb25fYXR0ZW1wdF9lbmRfdGltZRgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASYAoVa3ViZXJuZXRlc19wb2RfbGFiZWxzGAkgAygLMkEuZmx5dGVpZGwyLmxvZ3MuZGF0YXBsYW5lLkxvZ2dpbmdDb250ZXh0Lkt1YmVybmV0ZXNQb2RMYWJlbHNFbnRyeRo6ChhLdWJlcm5ldGVzUG9kTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUoECAEQAkoECAIQAyKkAQoTQ29udGFpbmVySWRlbnRpZmllchIdCgxjbHVzdGVyX25hbWUYASABKAlCB7pIBHICEAESJQoUa3ViZXJuZXRlc19uYW1lc3BhY2UYAiABKAlCB7pIBHICEAESJAoTa3ViZXJuZXRlc19wb2RfbmFtZRgDIAEoCUIHukgEcgIQARIhChlrdWJlcm5ldGVzX2NvbnRhaW5lcl9uYW1lGAQgASgJIscBChFDb250YWluZXJTZWxlY3RvchIdCgxjbHVzdGVyX25hbWUYASABKAlCB7pIBHICEAESJQoUa3ViZXJuZXRlc19uYW1lc3BhY2UYAiABKAlCB7pIBHICEAESIgoaa3ViZXJuZXRlc19wb2RfbmFtZV9wcmVmaXgYAyABKAkSIQoZa3ViZXJuZXRlc19jb250YWluZXJfbmFtZRgEIAEoCRIlCh1rdWJlcm5ldGVzX3BvZF9sYWJlbF9zZWxlY3RvchgFIAEoCSJBCg9MaXZlTG9nc09wdGlvbnMSFgoObG9nX3BvZF9zdGF0dXMYASABKAgSFgoObG9nX3RpbWVzdGFtcHMYAiABKAgiigEKB0xvZ0xpbmUSLQoJdGltZXN0YW1wGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIPCgdtZXNzYWdlGAIgASgJEj8KCm9yaWdpbmF0b3IYAyABKA4yKy5mbHl0ZWlkbDIubG9ncy5kYXRhcGxhbmUuTG9nTGluZU9yaWdpbmF0b3IivQEKCExvZ0xpbmVzEhEKBWxpbmVzGAEgAygJQgIYARIXCg9jb250YWluZXJfaW5kZXgYAiABKA0SSAoJY29udGFpbmVyGAMgASgLMi0uZmx5dGVpZGwyLmxvZ3MuZGF0YXBsYW5lLkNvbnRhaW5lcklkZW50aWZpZXJCBrpIA8gBARI7ChBzdHJ1Y3R1cmVkX2xpbmVzGAQgAygLMiEuZmx5dGVpZGwyLmxvZ3MuZGF0YXBsYW5lLkxvZ0xpbmUiVgoRTG9nQ29udGFpbmVyc0xpc3QSQQoKY29udGFpbmVycxgBIAMoCzItLmZseXRlaWRsMi5sb2dzLmRhdGFwbGFuZS5Db250YWluZXJJZGVudGlmaWVyIkEKDUxvZ0xpbmVzQmF0Y2gSMAoEbG9ncxgBIAMoCzIiLmZseXRlaWRsMi5sb2dzLmRhdGFwbGFuZS5Mb2dMaW5lcyo2ChFMb2dMaW5lT3JpZ2luYXRvchILCgdVTktOT1dOEAASCAoEVVNFUhABEgoKBlNZU1RFTRACKkYKCkxvZ3NTb3VyY2USFQoRTElWRV9PUl9QRVJTSVNURUQQABINCglMSVZFX09OTFkQARISCg5QRVJTSVNURURfT05MWRACQu4BChxjb20uZmx5dGVpZGwyLmxvZ3MuZGF0YXBsYW5lQgxQYXlsb2FkUHJvdG9IAlABWjxnaXRodWIuY29tL2ZseXRlb3JnL2ZseXRlL3YyL2dlbi9nby9mbHl0ZWlkbDIvbG9ncy9kYXRhcGxhbmWiAgNGTESqAhhGbHl0ZWlkbDIuTG9ncy5EYXRhcGxhbmXKAhhGbHl0ZWlkbDJcTG9nc1xEYXRhcGxhbmXiAiRGbHl0ZWlkbDJcTG9nc1xEYXRhcGxhbmVcR1BCTWV0YWRhdGHqAhpGbHl0ZWlkbDI6OkxvZ3M6OkRhdGFwbGFuZWIGcHJvdG8z", [file_google_protobuf_timestamp, file_buf_validate_validate]);

/**
 * @generated from message flyteidl2.logs.dataplane.PodResource
 */
export type PodResource = Message<"flyteidl2.logs.dataplane.PodResource"> & {
  /**
   * The namespace of the pod.
   *
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * The pod name.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The container name. If not provided, attempt to find the primary container, else assume the first container.
   * +optional
   *
   * @generated from field: string container = 3;
   */
  container: string;
};

/**
 * Describes the message flyteidl2.logs.dataplane.PodResource.
 * Use `create(PodResourceSchema)` to create a new message.
 */
export const PodResourceSchema: GenMessage<PodResource> = /*@__PURE__*/
  messageDesc(file_flyteidl2_logs_dataplane_payload, 0);

/**
 * Parameters of environment in which logs were collected. Should contain everything
 * necessary to identify location of task execution logs in cloud providers.
 *
 * @generated from message flyteidl2.logs.dataplane.LoggingContext
 */
export type LoggingContext = Message<"flyteidl2.logs.dataplane.LoggingContext"> & {
  /**
   * @generated from field: string cluster_name = 3;
   */
  clusterName: string;

  /**
   * @generated from field: string kubernetes_namespace = 4;
   */
  kubernetesNamespace: string;

  /**
   * @generated from field: string kubernetes_pod_name = 5;
   */
  kubernetesPodName: string;

  /**
   * @generated from field: string kubernetes_container_name = 6;
   */
  kubernetesContainerName: string;

  /**
   * @generated from field: google.protobuf.Timestamp execution_attempt_start_time = 7;
   */
  executionAttemptStartTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp execution_attempt_end_time = 8;
   */
  executionAttemptEndTime?: Timestamp;

  /**
   * @generated from field: map<string, string> kubernetes_pod_labels = 9;
   */
  kubernetesPodLabels: { [key: string]: string };
};

/**
 * Describes the message flyteidl2.logs.dataplane.LoggingContext.
 * Use `create(LoggingContextSchema)` to create a new message.
 */
export const LoggingContextSchema: GenMessage<LoggingContext> = /*@__PURE__*/
  messageDesc(file_flyteidl2_logs_dataplane_payload, 1);

/**
 * Parameters of environment in which logs were collected. Should contain everything
 * necessary to identify location of task execution logs in cloud providers.
 *
 * @generated from message flyteidl2.logs.dataplane.ContainerIdentifier
 */
export type ContainerIdentifier = Message<"flyteidl2.logs.dataplane.ContainerIdentifier"> & {
  /**
   * The name of the cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * The namespace in Kubernetes.
   *
   * @generated from field: string kubernetes_namespace = 2;
   */
  kubernetesNamespace: string;

  /**
   * The name of the pod in Kubernetes.
   *
   * @generated from field: string kubernetes_pod_name = 3;
   */
  kubernetesPodName: string;

  /**
   * The name of the container in Kubernetes.
   *
   * @generated from field: string kubernetes_container_name = 4;
   */
  kubernetesContainerName: string;
};

/**
 * Describes the message flyteidl2.logs.dataplane.ContainerIdentifier.
 * Use `create(ContainerIdentifierSchema)` to create a new message.
 */
export const ContainerIdentifierSchema: GenMessage<ContainerIdentifier> = /*@__PURE__*/
  messageDesc(file_flyteidl2_logs_dataplane_payload, 2);

/**
 * @generated from message flyteidl2.logs.dataplane.ContainerSelector
 */
export type ContainerSelector = Message<"flyteidl2.logs.dataplane.ContainerSelector"> & {
  /**
   * The name of the cluster.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * The namespace in Kubernetes.
   *
   * @generated from field: string kubernetes_namespace = 2;
   */
  kubernetesNamespace: string;

  /**
   * The prefix of the name of the pod in Kubernetes. This will only apply to persisted pods' logs because listing by
   * prefix is the supported way to filter pods.
   *
   * @generated from field: string kubernetes_pod_name_prefix = 3;
   */
  kubernetesPodNamePrefix: string;

  /**
   * The name of the container in Kubernetes. If not specified, logs for all containers
   * will be streamed.
   *
   * @generated from field: string kubernetes_container_name = 4;
   */
  kubernetesContainerName: string;

  /**
   * The label selector to filter pods. This will only apply to live pods' logs because Listing by prefix
   * isn't supported.
   *
   * @generated from field: string kubernetes_pod_label_selector = 5;
   */
  kubernetesPodLabelSelector: string;
};

/**
 * Describes the message flyteidl2.logs.dataplane.ContainerSelector.
 * Use `create(ContainerSelectorSchema)` to create a new message.
 */
export const ContainerSelectorSchema: GenMessage<ContainerSelector> = /*@__PURE__*/
  messageDesc(file_flyteidl2_logs_dataplane_payload, 3);

/**
 * @generated from message flyteidl2.logs.dataplane.LiveLogsOptions
 */
export type LiveLogsOptions = Message<"flyteidl2.logs.dataplane.LiveLogsOptions"> & {
  /**
   * LogPodStatus indicates whether to log the pod status along with the logs.
   *
   * @generated from field: bool log_pod_status = 1;
   */
  logPodStatus: boolean;

  /**
   * LogTimestamps indicates whether to log the timestamps along with the logs. It prepends RFC3339 or RFC3339Nano
   * format in the beginning of each log line.
   *
   * @generated from field: bool log_timestamps = 2;
   */
  logTimestamps: boolean;
};

/**
 * Describes the message flyteidl2.logs.dataplane.LiveLogsOptions.
 * Use `create(LiveLogsOptionsSchema)` to create a new message.
 */
export const LiveLogsOptionsSchema: GenMessage<LiveLogsOptions> = /*@__PURE__*/
  messageDesc(file_flyteidl2_logs_dataplane_payload, 4);

/**
 * @generated from message flyteidl2.logs.dataplane.LogLine
 */
export type LogLine = Message<"flyteidl2.logs.dataplane.LogLine"> & {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * Each line is separated by either CRLF, CR or LF, which are included
   * at the ends of the lines. This lets clients know whether log emitter
   * wanted to overwrite the previous line (LF) or append a new line (CRLF).
   *
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: flyteidl2.logs.dataplane.LogLineOriginator originator = 3;
   */
  originator: LogLineOriginator;
};

/**
 * Describes the message flyteidl2.logs.dataplane.LogLine.
 * Use `create(LogLineSchema)` to create a new message.
 */
export const LogLineSchema: GenMessage<LogLine> = /*@__PURE__*/
  messageDesc(file_flyteidl2_logs_dataplane_payload, 5);

/**
 * @generated from message flyteidl2.logs.dataplane.LogLines
 */
export type LogLines = Message<"flyteidl2.logs.dataplane.LogLines"> & {
  /**
   * Each line is separated by either CRLF, CR or LF, which are included
   * at the ends of the lines. This lets clients know whether log emitter
   * wanted to overwrite the previous line (LF) or append a new line (CRLF).
   *
   * @generated from field: repeated string lines = 1 [deprecated = true];
   * @deprecated
   */
  lines: string[];

  /**
   * The index of the container in the list of containers. If the request was made with a single container identifier,
   * this value will always be 0. Otherwise, it'll be an index into the last list of containers sent in the stream.
   *
   * @generated from field: uint32 container_index = 2;
   */
  containerIndex: number;

  /**
   * The container identifier.
   *
   * @generated from field: flyteidl2.logs.dataplane.ContainerIdentifier container = 3;
   */
  container?: ContainerIdentifier;

  /**
   * Each line is separated by either CRLF, CR or LF, which are included
   * at the ends of the lines. This lets clients know whether log emitter
   * wanted to overwrite the previous line (LF) or append a new line (CRLF).
   *
   * @generated from field: repeated flyteidl2.logs.dataplane.LogLine structured_lines = 4;
   */
  structuredLines: LogLine[];
};

/**
 * Describes the message flyteidl2.logs.dataplane.LogLines.
 * Use `create(LogLinesSchema)` to create a new message.
 */
export const LogLinesSchema: GenMessage<LogLines> = /*@__PURE__*/
  messageDesc(file_flyteidl2_logs_dataplane_payload, 6);

/**
 * @generated from message flyteidl2.logs.dataplane.LogContainersList
 */
export type LogContainersList = Message<"flyteidl2.logs.dataplane.LogContainersList"> & {
  /**
   * @generated from field: repeated flyteidl2.logs.dataplane.ContainerIdentifier containers = 1;
   */
  containers: ContainerIdentifier[];
};

/**
 * Describes the message flyteidl2.logs.dataplane.LogContainersList.
 * Use `create(LogContainersListSchema)` to create a new message.
 */
export const LogContainersListSchema: GenMessage<LogContainersList> = /*@__PURE__*/
  messageDesc(file_flyteidl2_logs_dataplane_payload, 7);

/**
 * @generated from message flyteidl2.logs.dataplane.LogLinesBatch
 */
export type LogLinesBatch = Message<"flyteidl2.logs.dataplane.LogLinesBatch"> & {
  /**
   * @generated from field: repeated flyteidl2.logs.dataplane.LogLines logs = 1;
   */
  logs: LogLines[];
};

/**
 * Describes the message flyteidl2.logs.dataplane.LogLinesBatch.
 * Use `create(LogLinesBatchSchema)` to create a new message.
 */
export const LogLinesBatchSchema: GenMessage<LogLinesBatch> = /*@__PURE__*/
  messageDesc(file_flyteidl2_logs_dataplane_payload, 8);

/**
 * @generated from enum flyteidl2.logs.dataplane.LogLineOriginator
 */
export enum LogLineOriginator {
  /**
   * The originator of the log line is unknown.
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * The originator of the log line is the user application.
   *
   * @generated from enum value: USER = 1;
   */
  USER = 1,

  /**
   * The originator of the log line is the system.
   *
   * @generated from enum value: SYSTEM = 2;
   */
  SYSTEM = 2,
}

/**
 * Describes the enum flyteidl2.logs.dataplane.LogLineOriginator.
 */
export const LogLineOriginatorSchema: GenEnum<LogLineOriginator> = /*@__PURE__*/
  enumDesc(file_flyteidl2_logs_dataplane_payload, 0);

/**
 * @generated from enum flyteidl2.logs.dataplane.LogsSource
 */
export enum LogsSource {
  /**
   * Return live logs and fall back to persisted if not available.
   *
   * @generated from enum value: LIVE_OR_PERSISTED = 0;
   */
  LIVE_OR_PERSISTED = 0,

  /**
   * Return live logs only or error if pod is no longer around.
   *
   * @generated from enum value: LIVE_ONLY = 1;
   */
  LIVE_ONLY = 1,

  /**
   * Return persisted logs only.
   *
   * @generated from enum value: PERSISTED_ONLY = 2;
   */
  PERSISTED_ONLY = 2,
}

/**
 * Describes the enum flyteidl2.logs.dataplane.LogsSource.
 */
export const LogsSourceSchema: GenEnum<LogsSource> = /*@__PURE__*/
  enumDesc(file_flyteidl2_logs_dataplane_payload, 1);

