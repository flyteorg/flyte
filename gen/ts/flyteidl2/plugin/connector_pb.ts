// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file flyteidl2/plugin/connector.proto (package flyteidl2.plugin, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { TaskExecution_Phase, TaskLog } from "../core/execution_pb.ts";
import { file_flyteidl2_core_execution } from "../core/execution_pb.ts";
import type { TaskExecutionIdentifier } from "../core/identifier_pb.ts";
import { file_flyteidl2_core_identifier } from "../core/identifier_pb.ts";
import type { LiteralMap } from "../core/literals_pb.ts";
import { file_flyteidl2_core_literals } from "../core/literals_pb.ts";
import type { ExecutionMetricResult } from "../core/metrics_pb.ts";
import { file_flyteidl2_core_metrics } from "../core/metrics_pb.ts";
import type { Connection, Identity } from "../core/security_pb.ts";
import { file_flyteidl2_core_security } from "../core/security_pb.ts";
import type { TaskTemplate } from "../core/tasks_pb.ts";
import { file_flyteidl2_core_tasks } from "../core/tasks_pb.ts";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file flyteidl2/plugin/connector.proto.
 */
export const file_flyteidl2_plugin_connector: GenFile = /*@__PURE__*/
  fileDesc("CiBmbHl0ZWlkbDIvcGx1Z2luL2Nvbm5lY3Rvci5wcm90bxIQZmx5dGVpZGwyLnBsdWdpbiKjBQoVVGFza0V4ZWN1dGlvbk1ldGFkYXRhEkIKEXRhc2tfZXhlY3V0aW9uX2lkGAEgASgLMicuZmx5dGVpZGwyLmNvcmUuVGFza0V4ZWN1dGlvbklkZW50aWZpZXISEQoJbmFtZXNwYWNlGAIgASgJEkMKBmxhYmVscxgDIAMoCzIzLmZseXRlaWRsMi5wbHVnaW4uVGFza0V4ZWN1dGlvbk1ldGFkYXRhLkxhYmVsc0VudHJ5Ek0KC2Fubm90YXRpb25zGAQgAygLMjguZmx5dGVpZGwyLnBsdWdpbi5UYXNrRXhlY3V0aW9uTWV0YWRhdGEuQW5ub3RhdGlvbnNFbnRyeRIbChNrOHNfc2VydmljZV9hY2NvdW50GAUgASgJEmAKFWVudmlyb25tZW50X3ZhcmlhYmxlcxgGIAMoCzJBLmZseXRlaWRsMi5wbHVnaW4uVGFza0V4ZWN1dGlvbk1ldGFkYXRhLkVudmlyb25tZW50VmFyaWFibGVzRW50cnkSFAoMbWF4X2F0dGVtcHRzGAcgASgFEhUKDWludGVycnVwdGlibGUYCCABKAgSJwofaW50ZXJydXB0aWJsZV9mYWlsdXJlX3RocmVzaG9sZBgJIAEoBRIqCghpZGVudGl0eRgKIAEoCzIYLmZseXRlaWRsMi5jb3JlLklkZW50aXR5Gi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaMgoQQW5ub3RhdGlvbnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGjsKGUVudmlyb25tZW50VmFyaWFibGVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKAAgoRQ3JlYXRlVGFza1JlcXVlc3QSKgoGaW5wdXRzGAEgASgLMhouZmx5dGVpZGwyLmNvcmUuTGl0ZXJhbE1hcBIuCgh0ZW1wbGF0ZRgCIAEoCzIcLmZseXRlaWRsMi5jb3JlLlRhc2tUZW1wbGF0ZRIVCg1vdXRwdXRfcHJlZml4GAMgASgJEkgKF3Rhc2tfZXhlY3V0aW9uX21ldGFkYXRhGAQgASgLMicuZmx5dGVpZGwyLnBsdWdpbi5UYXNrRXhlY3V0aW9uTWV0YWRhdGESLgoKY29ubmVjdGlvbhgFIAEoCzIaLmZseXRlaWRsMi5jb3JlLkNvbm5lY3Rpb24iKwoSQ3JlYXRlVGFza1Jlc3BvbnNlEhUKDXJlc291cmNlX21ldGEYASABKAwi9gEKE0NyZWF0ZVJlcXVlc3RIZWFkZXISLgoIdGVtcGxhdGUYASABKAsyHC5mbHl0ZWlkbDIuY29yZS5UYXNrVGVtcGxhdGUSFQoNb3V0cHV0X3ByZWZpeBgCIAEoCRJIChd0YXNrX2V4ZWN1dGlvbl9tZXRhZGF0YRgDIAEoCzInLmZseXRlaWRsMi5wbHVnaW4uVGFza0V4ZWN1dGlvbk1ldGFkYXRhEh4KFm1heF9kYXRhc2V0X3NpemVfYnl0ZXMYBCABKAMSLgoKY29ubmVjdGlvbhgFIAEoCzIaLmZseXRlaWRsMi5jb3JlLkNvbm5lY3Rpb24ihwEKFkV4ZWN1dGVUYXNrU3luY1JlcXVlc3QSNwoGaGVhZGVyGAEgASgLMiUuZmx5dGVpZGwyLnBsdWdpbi5DcmVhdGVSZXF1ZXN0SGVhZGVySAASLAoGaW5wdXRzGAIgASgLMhouZmx5dGVpZGwyLmNvcmUuTGl0ZXJhbE1hcEgAQgYKBHBhcnQiTQodRXhlY3V0ZVRhc2tTeW5jUmVzcG9uc2VIZWFkZXISLAoIcmVzb3VyY2UYASABKAsyGi5mbHl0ZWlkbDIucGx1Z2luLlJlc291cmNlIpIBChdFeGVjdXRlVGFza1N5bmNSZXNwb25zZRJBCgZoZWFkZXIYASABKAsyLy5mbHl0ZWlkbDIucGx1Z2luLkV4ZWN1dGVUYXNrU3luY1Jlc3BvbnNlSGVhZGVySAASLQoHb3V0cHV0cxgCIAEoCzIaLmZseXRlaWRsMi5jb3JlLkxpdGVyYWxNYXBIAEIFCgNyZXMipQEKDkdldFRhc2tSZXF1ZXN0EhUKDXJlc291cmNlX21ldGEYASABKAwSNQoNdGFza19jYXRlZ29yeRgCIAEoCzIeLmZseXRlaWRsMi5wbHVnaW4uVGFza0NhdGVnb3J5EhUKDW91dHB1dF9wcmVmaXgYAyABKAkSLgoKY29ubmVjdGlvbhgEIAEoCzIaLmZseXRlaWRsMi5jb3JlLkNvbm5lY3Rpb24iPwoPR2V0VGFza1Jlc3BvbnNlEiwKCHJlc291cmNlGAEgASgLMhouZmx5dGVpZGwyLnBsdWdpbi5SZXNvdXJjZSLWAQoIUmVzb3VyY2USKwoHb3V0cHV0cxgBIAEoCzIaLmZseXRlaWRsMi5jb3JlLkxpdGVyYWxNYXASDwoHbWVzc2FnZRgCIAEoCRIqCglsb2dfbGlua3MYAyADKAsyFy5mbHl0ZWlkbDIuY29yZS5UYXNrTG9nEjIKBXBoYXNlGAQgASgOMiMuZmx5dGVpZGwyLmNvcmUuVGFza0V4ZWN1dGlvbi5QaGFzZRIsCgtjdXN0b21faW5mbxgFIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QikQEKEURlbGV0ZVRhc2tSZXF1ZXN0EhUKDXJlc291cmNlX21ldGEYASABKAwSNQoNdGFza19jYXRlZ29yeRgCIAEoCzIeLmZseXRlaWRsMi5wbHVnaW4uVGFza0NhdGVnb3J5Ei4KCmNvbm5lY3Rpb24YAyABKAsyGi5mbHl0ZWlkbDIuY29yZS5Db25uZWN0aW9uIhQKEkRlbGV0ZVRhc2tSZXNwb25zZSJcCglDb25uZWN0b3ISDAoEbmFtZRgBIAEoCRJBChlzdXBwb3J0ZWRfdGFza19jYXRlZ29yaWVzGAIgAygLMh4uZmx5dGVpZGwyLnBsdWdpbi5UYXNrQ2F0ZWdvcnkiLQoMVGFza0NhdGVnb3J5EgwKBG5hbWUYASABKAkSDwoHdmVyc2lvbhgCIAEoBSIjChNHZXRDb25uZWN0b3JSZXF1ZXN0EgwKBG5hbWUYASABKAkiRgoUR2V0Q29ubmVjdG9yUmVzcG9uc2USLgoJY29ubmVjdG9yGAEgASgLMhsuZmx5dGVpZGwyLnBsdWdpbi5Db25uZWN0b3IiFwoVTGlzdENvbm5lY3RvcnNSZXF1ZXN0IkkKFkxpc3RDb25uZWN0b3JzUmVzcG9uc2USLwoKY29ubmVjdG9ycxgBIAMoCzIbLmZseXRlaWRsMi5wbHVnaW4uQ29ubmVjdG9yIv0BChVHZXRUYXNrTWV0cmljc1JlcXVlc3QSFQoNcmVzb3VyY2VfbWV0YRgBIAEoDBIPCgdxdWVyaWVzGAIgAygJEi4KCnN0YXJ0X3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiwKCGVuZF90aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBInCgRzdGVwGAUgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjUKDXRhc2tfY2F0ZWdvcnkYBiABKAsyHi5mbHl0ZWlkbDIucGx1Z2luLlRhc2tDYXRlZ29yeSJQChZHZXRUYXNrTWV0cmljc1Jlc3BvbnNlEjYKB3Jlc3VsdHMYASADKAsyJS5mbHl0ZWlkbDIuY29yZS5FeGVjdXRpb25NZXRyaWNSZXN1bHQigAEKEkdldFRhc2tMb2dzUmVxdWVzdBIVCg1yZXNvdXJjZV9tZXRhGAEgASgMEg0KBWxpbmVzGAIgASgEEg0KBXRva2VuGAMgASgJEjUKDXRhc2tfY2F0ZWdvcnkYBCABKAsyHi5mbHl0ZWlkbDIucGx1Z2luLlRhc2tDYXRlZ29yeSIqChlHZXRUYXNrTG9nc1Jlc3BvbnNlSGVhZGVyEg0KBXRva2VuGAEgASgJIioKF0dldFRhc2tMb2dzUmVzcG9uc2VCb2R5Eg8KB3Jlc3VsdHMYASADKAkilwEKE0dldFRhc2tMb2dzUmVzcG9uc2USPQoGaGVhZGVyGAEgASgLMisuZmx5dGVpZGwyLnBsdWdpbi5HZXRUYXNrTG9nc1Jlc3BvbnNlSGVhZGVySAASOQoEYm9keRgCIAEoCzIpLmZseXRlaWRsMi5wbHVnaW4uR2V0VGFza0xvZ3NSZXNwb25zZUJvZHlIAEIGCgRwYXJ0Qr0BChRjb20uZmx5dGVpZGwyLnBsdWdpbkIOQ29ubmVjdG9yUHJvdG9IAlABWjJnaXRodWIuY29tL2ZseXRlb3JnL2ZseXRlL3YyL2dlbi9nby9mbHl0ZWlkbC9hZG1pbqICA0ZQWKoCEEZseXRlaWRsMi5QbHVnaW7KAhBGbHl0ZWlkbDJcUGx1Z2lu4gIcRmx5dGVpZGwyXFBsdWdpblxHUEJNZXRhZGF0YeoCEUZseXRlaWRsMjo6UGx1Z2luYgZwcm90bzM", [file_flyteidl2_core_execution, file_flyteidl2_core_identifier, file_flyteidl2_core_literals, file_flyteidl2_core_metrics, file_flyteidl2_core_security, file_flyteidl2_core_tasks, file_google_protobuf_duration, file_google_protobuf_struct, file_google_protobuf_timestamp]);

/**
 * Represents a subset of runtime task execution metadata that are relevant to external plugins.
 *
 * ID of the task execution
 *
 * @generated from message flyteidl2.plugin.TaskExecutionMetadata
 */
export type TaskExecutionMetadata = Message<"flyteidl2.plugin.TaskExecutionMetadata"> & {
  /**
   * @generated from field: flyteidl2.core.TaskExecutionIdentifier task_execution_id = 1;
   */
  taskExecutionId?: TaskExecutionIdentifier;

  /**
   * k8s namespace where the task is executed in
   *
   * @generated from field: string namespace = 2;
   */
  namespace: string;

  /**
   * Labels attached to the task execution
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * Annotations attached to the task execution
   *
   * @generated from field: map<string, string> annotations = 4;
   */
  annotations: { [key: string]: string };

  /**
   * k8s service account associated with the task execution
   *
   * @generated from field: string k8s_service_account = 5;
   */
  k8sServiceAccount: string;

  /**
   * Environment variables attached to the task execution
   *
   * @generated from field: map<string, string> environment_variables = 6;
   */
  environmentVariables: { [key: string]: string };

  /**
   * Represents the maximum number of attempts allowed for a task.
   * If a task fails, it can be retried up to this maximum number of attempts.
   *
   * @generated from field: int32 max_attempts = 7;
   */
  maxAttempts: number;

  /**
   * Indicates whether the task execution can be interrupted.
   * If set to true, the task can be stopped before completion.
   *
   * @generated from field: bool interruptible = 8;
   */
  interruptible: boolean;

  /**
   * Specifies the threshold for failure count at which the interruptible property
   * will take effect. If the number of consecutive task failures exceeds this threshold,
   * interruptible behavior will be activated.
   *
   * @generated from field: int32 interruptible_failure_threshold = 9;
   */
  interruptibleFailureThreshold: number;

  /**
   * Identity of user running this task execution
   *
   * @generated from field: flyteidl2.core.Identity identity = 10;
   */
  identity?: Identity;
};

/**
 * Describes the message flyteidl2.plugin.TaskExecutionMetadata.
 * Use `create(TaskExecutionMetadataSchema)` to create a new message.
 */
export const TaskExecutionMetadataSchema: GenMessage<TaskExecutionMetadata> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 0);

/**
 * Represents a request structure to create task.
 *
 * @generated from message flyteidl2.plugin.CreateTaskRequest
 */
export type CreateTaskRequest = Message<"flyteidl2.plugin.CreateTaskRequest"> & {
  /**
   * The inputs required to start the execution. All required inputs must be
   * included in this map. If not required and not provided, defaults apply.
   * +optional
   *
   * @generated from field: flyteidl2.core.LiteralMap inputs = 1;
   */
  inputs?: LiteralMap;

  /**
   * Template of the task that encapsulates all the metadata of the task.
   *
   * @generated from field: flyteidl2.core.TaskTemplate template = 2;
   */
  template?: TaskTemplate;

  /**
   * Prefix for where task output data will be written. (e.g. s3://my-bucket/randomstring)
   *
   * @generated from field: string output_prefix = 3;
   */
  outputPrefix: string;

  /**
   * subset of runtime task execution metadata.
   *
   * @generated from field: flyteidl2.plugin.TaskExecutionMetadata task_execution_metadata = 4;
   */
  taskExecutionMetadata?: TaskExecutionMetadata;

  /**
   * Connection (secret and config) required by the connector.
   * Connector will use the secret and config in the taskTemplate if it's None.
   * +optional
   *
   * @generated from field: flyteidl2.core.Connection connection = 5;
   */
  connection?: Connection;
};

/**
 * Describes the message flyteidl2.plugin.CreateTaskRequest.
 * Use `create(CreateTaskRequestSchema)` to create a new message.
 */
export const CreateTaskRequestSchema: GenMessage<CreateTaskRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 1);

/**
 * Represents a create response structure.
 *
 * @generated from message flyteidl2.plugin.CreateTaskResponse
 */
export type CreateTaskResponse = Message<"flyteidl2.plugin.CreateTaskResponse"> & {
  /**
   * ResourceMeta is created by the connector. It could be a string (jobId) or a dict (more complex metadata).
   *
   * @generated from field: bytes resource_meta = 1;
   */
  resourceMeta: Uint8Array;
};

/**
 * Describes the message flyteidl2.plugin.CreateTaskResponse.
 * Use `create(CreateTaskResponseSchema)` to create a new message.
 */
export const CreateTaskResponseSchema: GenMessage<CreateTaskResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 2);

/**
 * @generated from message flyteidl2.plugin.CreateRequestHeader
 */
export type CreateRequestHeader = Message<"flyteidl2.plugin.CreateRequestHeader"> & {
  /**
   * Template of the task that encapsulates all the metadata of the task.
   *
   * @generated from field: flyteidl2.core.TaskTemplate template = 1;
   */
  template?: TaskTemplate;

  /**
   * Prefix for where task output data will be written. (e.g. s3://my-bucket/randomstring)
   *
   * @generated from field: string output_prefix = 2;
   */
  outputPrefix: string;

  /**
   * subset of runtime task execution metadata.
   *
   * @generated from field: flyteidl2.plugin.TaskExecutionMetadata task_execution_metadata = 3;
   */
  taskExecutionMetadata?: TaskExecutionMetadata;

  /**
   * MaxDatasetSizeBytes is the maximum size of the dataset that can be generated by the task.
   *
   * @generated from field: int64 max_dataset_size_bytes = 4;
   */
  maxDatasetSizeBytes: bigint;

  /**
   * Connection (secret and config) required by the connector.
   * Connector will use the secret and config in the taskTemplate if it's None.
   * +optional
   *
   * @generated from field: flyteidl2.core.Connection connection = 5;
   */
  connection?: Connection;
};

/**
 * Describes the message flyteidl2.plugin.CreateRequestHeader.
 * Use `create(CreateRequestHeaderSchema)` to create a new message.
 */
export const CreateRequestHeaderSchema: GenMessage<CreateRequestHeader> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 3);

/**
 * @generated from message flyteidl2.plugin.ExecuteTaskSyncRequest
 */
export type ExecuteTaskSyncRequest = Message<"flyteidl2.plugin.ExecuteTaskSyncRequest"> & {
  /**
   * @generated from oneof flyteidl2.plugin.ExecuteTaskSyncRequest.part
   */
  part: {
    /**
     * @generated from field: flyteidl2.plugin.CreateRequestHeader header = 1;
     */
    value: CreateRequestHeader;
    case: "header";
  } | {
    /**
     * @generated from field: flyteidl2.core.LiteralMap inputs = 2;
     */
    value: LiteralMap;
    case: "inputs";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.plugin.ExecuteTaskSyncRequest.
 * Use `create(ExecuteTaskSyncRequestSchema)` to create a new message.
 */
export const ExecuteTaskSyncRequestSchema: GenMessage<ExecuteTaskSyncRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 4);

/**
 * @generated from message flyteidl2.plugin.ExecuteTaskSyncResponseHeader
 */
export type ExecuteTaskSyncResponseHeader = Message<"flyteidl2.plugin.ExecuteTaskSyncResponseHeader"> & {
  /**
   * @generated from field: flyteidl2.plugin.Resource resource = 1;
   */
  resource?: Resource;
};

/**
 * Describes the message flyteidl2.plugin.ExecuteTaskSyncResponseHeader.
 * Use `create(ExecuteTaskSyncResponseHeaderSchema)` to create a new message.
 */
export const ExecuteTaskSyncResponseHeaderSchema: GenMessage<ExecuteTaskSyncResponseHeader> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 5);

/**
 * @generated from message flyteidl2.plugin.ExecuteTaskSyncResponse
 */
export type ExecuteTaskSyncResponse = Message<"flyteidl2.plugin.ExecuteTaskSyncResponse"> & {
  /**
   * Metadata is created by the connector. It could be a string (jobId) or a dict (more complex metadata).
   * Resource is for synchronous task execution.
   *
   * @generated from oneof flyteidl2.plugin.ExecuteTaskSyncResponse.res
   */
  res: {
    /**
     * @generated from field: flyteidl2.plugin.ExecuteTaskSyncResponseHeader header = 1;
     */
    value: ExecuteTaskSyncResponseHeader;
    case: "header";
  } | {
    /**
     * @generated from field: flyteidl2.core.LiteralMap outputs = 2;
     */
    value: LiteralMap;
    case: "outputs";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.plugin.ExecuteTaskSyncResponse.
 * Use `create(ExecuteTaskSyncResponseSchema)` to create a new message.
 */
export const ExecuteTaskSyncResponseSchema: GenMessage<ExecuteTaskSyncResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 6);

/**
 * A message used to fetch a job resource from flyte connector server.
 *
 * @generated from message flyteidl2.plugin.GetTaskRequest
 */
export type GetTaskRequest = Message<"flyteidl2.plugin.GetTaskRequest"> & {
  /**
   * Metadata about the resource to be pass to the connector.
   *
   * @generated from field: bytes resource_meta = 1;
   */
  resourceMeta: Uint8Array;

  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: flyteidl2.plugin.TaskCategory task_category = 2;
   */
  taskCategory?: TaskCategory;

  /**
   * Prefix for where task output data will be written. (e.g. s3://my-bucket/randomstring)
   *
   * @generated from field: string output_prefix = 3;
   */
  outputPrefix: string;

  /**
   * Connection (secret and config) required by the connector.
   * Connector will use the secret and config in the taskTemplate if it's None.
   * +optional
   *
   * @generated from field: flyteidl2.core.Connection connection = 4;
   */
  connection?: Connection;
};

/**
 * Describes the message flyteidl2.plugin.GetTaskRequest.
 * Use `create(GetTaskRequestSchema)` to create a new message.
 */
export const GetTaskRequestSchema: GenMessage<GetTaskRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 7);

/**
 * Response to get an individual task resource.
 *
 * @generated from message flyteidl2.plugin.GetTaskResponse
 */
export type GetTaskResponse = Message<"flyteidl2.plugin.GetTaskResponse"> & {
  /**
   * @generated from field: flyteidl2.plugin.Resource resource = 1;
   */
  resource?: Resource;
};

/**
 * Describes the message flyteidl2.plugin.GetTaskResponse.
 * Use `create(GetTaskResponseSchema)` to create a new message.
 */
export const GetTaskResponseSchema: GenMessage<GetTaskResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 8);

/**
 * @generated from message flyteidl2.plugin.Resource
 */
export type Resource = Message<"flyteidl2.plugin.Resource"> & {
  /**
   * The outputs of the execution. It's typically used by sql task. connector service will create a
   * Structured dataset pointing to the query result table.
   * +optional
   *
   * @generated from field: flyteidl2.core.LiteralMap outputs = 1;
   */
  outputs?: LiteralMap;

  /**
   * A descriptive message for the current state. e.g. waiting for cluster.
   *
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * log information for the task execution.
   *
   * @generated from field: repeated flyteidl2.core.TaskLog log_links = 3;
   */
  logLinks: TaskLog[];

  /**
   * The phase of the execution is used to determine the phase of the plugin's execution.
   *
   * @generated from field: flyteidl2.core.TaskExecution.Phase phase = 4;
   */
  phase: TaskExecution_Phase;

  /**
   * Custom data specific to the connector.
   *
   * @generated from field: google.protobuf.Struct custom_info = 5;
   */
  customInfo?: JsonObject;
};

/**
 * Describes the message flyteidl2.plugin.Resource.
 * Use `create(ResourceSchema)` to create a new message.
 */
export const ResourceSchema: GenMessage<Resource> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 9);

/**
 * A message used to delete a task.
 *
 * @generated from message flyteidl2.plugin.DeleteTaskRequest
 */
export type DeleteTaskRequest = Message<"flyteidl2.plugin.DeleteTaskRequest"> & {
  /**
   * Metadata about the resource to be pass to the connector.
   *
   * @generated from field: bytes resource_meta = 1;
   */
  resourceMeta: Uint8Array;

  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: flyteidl2.plugin.TaskCategory task_category = 2;
   */
  taskCategory?: TaskCategory;

  /**
   * Connection (secret and config) required by the connector.
   * Connector will use the secret and config in the taskTemplate if it's None.
   * +optional
   *
   * @generated from field: flyteidl2.core.Connection connection = 3;
   */
  connection?: Connection;
};

/**
 * Describes the message flyteidl2.plugin.DeleteTaskRequest.
 * Use `create(DeleteTaskRequestSchema)` to create a new message.
 */
export const DeleteTaskRequestSchema: GenMessage<DeleteTaskRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 10);

/**
 * Response to delete a task.
 *
 * @generated from message flyteidl2.plugin.DeleteTaskResponse
 */
export type DeleteTaskResponse = Message<"flyteidl2.plugin.DeleteTaskResponse"> & {
};

/**
 * Describes the message flyteidl2.plugin.DeleteTaskResponse.
 * Use `create(DeleteTaskResponseSchema)` to create a new message.
 */
export const DeleteTaskResponseSchema: GenMessage<DeleteTaskResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 11);

/**
 * A message containing the connector metadata.
 *
 * @generated from message flyteidl2.plugin.Connector
 */
export type Connector = Message<"flyteidl2.plugin.Connector"> & {
  /**
   * Name is the developer-assigned name of the connector.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Supported_task_categories are the categories of the tasks that the connector can handle.
   *
   * @generated from field: repeated flyteidl2.plugin.TaskCategory supported_task_categories = 2;
   */
  supportedTaskCategories: TaskCategory[];
};

/**
 * Describes the message flyteidl2.plugin.Connector.
 * Use `create(ConnectorSchema)` to create a new message.
 */
export const ConnectorSchema: GenMessage<Connector> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 12);

/**
 * @generated from message flyteidl2.plugin.TaskCategory
 */
export type TaskCategory = Message<"flyteidl2.plugin.TaskCategory"> & {
  /**
   * The name of the task type.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The version of the task type.
   *
   * @generated from field: int32 version = 2;
   */
  version: number;
};

/**
 * Describes the message flyteidl2.plugin.TaskCategory.
 * Use `create(TaskCategorySchema)` to create a new message.
 */
export const TaskCategorySchema: GenMessage<TaskCategory> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 13);

/**
 * A request to get an connector.
 *
 * @generated from message flyteidl2.plugin.GetConnectorRequest
 */
export type GetConnectorRequest = Message<"flyteidl2.plugin.GetConnectorRequest"> & {
  /**
   * The name of the connector.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message flyteidl2.plugin.GetConnectorRequest.
 * Use `create(GetConnectorRequestSchema)` to create a new message.
 */
export const GetConnectorRequestSchema: GenMessage<GetConnectorRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 14);

/**
 * A response containing an connector.
 *
 * @generated from message flyteidl2.plugin.GetConnectorResponse
 */
export type GetConnectorResponse = Message<"flyteidl2.plugin.GetConnectorResponse"> & {
  /**
   * @generated from field: flyteidl2.plugin.Connector connector = 1;
   */
  connector?: Connector;
};

/**
 * Describes the message flyteidl2.plugin.GetConnectorResponse.
 * Use `create(GetConnectorResponseSchema)` to create a new message.
 */
export const GetConnectorResponseSchema: GenMessage<GetConnectorResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 15);

/**
 * A request to list all connectors.
 *
 * @generated from message flyteidl2.plugin.ListConnectorsRequest
 */
export type ListConnectorsRequest = Message<"flyteidl2.plugin.ListConnectorsRequest"> & {
};

/**
 * Describes the message flyteidl2.plugin.ListConnectorsRequest.
 * Use `create(ListConnectorsRequestSchema)` to create a new message.
 */
export const ListConnectorsRequestSchema: GenMessage<ListConnectorsRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 16);

/**
 * A response containing a list of connectors.
 *
 * @generated from message flyteidl2.plugin.ListConnectorsResponse
 */
export type ListConnectorsResponse = Message<"flyteidl2.plugin.ListConnectorsResponse"> & {
  /**
   * @generated from field: repeated flyteidl2.plugin.Connector connectors = 1;
   */
  connectors: Connector[];
};

/**
 * Describes the message flyteidl2.plugin.ListConnectorsResponse.
 * Use `create(ListConnectorsResponseSchema)` to create a new message.
 */
export const ListConnectorsResponseSchema: GenMessage<ListConnectorsResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 17);

/**
 * A request to get the metrics from a task execution.
 *
 * @generated from message flyteidl2.plugin.GetTaskMetricsRequest
 */
export type GetTaskMetricsRequest = Message<"flyteidl2.plugin.GetTaskMetricsRequest"> & {
  /**
   * Metadata is created by the connector. It could be a string (jobId) or a dict (more complex metadata).
   *
   * @generated from field: bytes resource_meta = 1;
   */
  resourceMeta: Uint8Array;

  /**
   * The metrics to query. If empty, will return a default set of metrics.
   * e.g. EXECUTION_METRIC_USED_CPU_AVG or EXECUTION_METRIC_USED_MEMORY_BYTES_AVG
   *
   * @generated from field: repeated string queries = 2;
   */
  queries: string[];

  /**
   * Start timestamp, inclusive.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  /**
   * End timestamp, inclusive..
   *
   * @generated from field: google.protobuf.Timestamp end_time = 4;
   */
  endTime?: Timestamp;

  /**
   * Query resolution step width in duration format or float number of seconds.
   *
   * @generated from field: google.protobuf.Duration step = 5;
   */
  step?: Duration;

  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: flyteidl2.plugin.TaskCategory task_category = 6;
   */
  taskCategory?: TaskCategory;
};

/**
 * Describes the message flyteidl2.plugin.GetTaskMetricsRequest.
 * Use `create(GetTaskMetricsRequestSchema)` to create a new message.
 */
export const GetTaskMetricsRequestSchema: GenMessage<GetTaskMetricsRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 18);

/**
 * A response containing a list of metrics for a task execution.
 *
 * @generated from message flyteidl2.plugin.GetTaskMetricsResponse
 */
export type GetTaskMetricsResponse = Message<"flyteidl2.plugin.GetTaskMetricsResponse"> & {
  /**
   * The execution metric results.
   *
   * @generated from field: repeated flyteidl2.core.ExecutionMetricResult results = 1;
   */
  results: ExecutionMetricResult[];
};

/**
 * Describes the message flyteidl2.plugin.GetTaskMetricsResponse.
 * Use `create(GetTaskMetricsResponseSchema)` to create a new message.
 */
export const GetTaskMetricsResponseSchema: GenMessage<GetTaskMetricsResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 19);

/**
 * A request to get the log from a task execution.
 *
 * @generated from message flyteidl2.plugin.GetTaskLogsRequest
 */
export type GetTaskLogsRequest = Message<"flyteidl2.plugin.GetTaskLogsRequest"> & {
  /**
   * Metadata is created by the connector. It could be a string (jobId) or a dict (more complex metadata).
   *
   * @generated from field: bytes resource_meta = 1;
   */
  resourceMeta: Uint8Array;

  /**
   * Number of lines to return.
   *
   * @generated from field: uint64 lines = 2;
   */
  lines: bigint;

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query. If there are no more results, this value will be empty.
   *
   * @generated from field: string token = 3;
   */
  token: string;

  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: flyteidl2.plugin.TaskCategory task_category = 4;
   */
  taskCategory?: TaskCategory;
};

/**
 * Describes the message flyteidl2.plugin.GetTaskLogsRequest.
 * Use `create(GetTaskLogsRequestSchema)` to create a new message.
 */
export const GetTaskLogsRequestSchema: GenMessage<GetTaskLogsRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 20);

/**
 * @generated from message flyteidl2.plugin.GetTaskLogsResponseHeader
 */
export type GetTaskLogsResponseHeader = Message<"flyteidl2.plugin.GetTaskLogsResponseHeader"> & {
  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query. If there are no more results, this value will be empty.
   *
   * @generated from field: string token = 1;
   */
  token: string;
};

/**
 * Describes the message flyteidl2.plugin.GetTaskLogsResponseHeader.
 * Use `create(GetTaskLogsResponseHeaderSchema)` to create a new message.
 */
export const GetTaskLogsResponseHeaderSchema: GenMessage<GetTaskLogsResponseHeader> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 21);

/**
 * @generated from message flyteidl2.plugin.GetTaskLogsResponseBody
 */
export type GetTaskLogsResponseBody = Message<"flyteidl2.plugin.GetTaskLogsResponseBody"> & {
  /**
   * The execution log results.
   *
   * @generated from field: repeated string results = 1;
   */
  results: string[];
};

/**
 * Describes the message flyteidl2.plugin.GetTaskLogsResponseBody.
 * Use `create(GetTaskLogsResponseBodySchema)` to create a new message.
 */
export const GetTaskLogsResponseBodySchema: GenMessage<GetTaskLogsResponseBody> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 22);

/**
 * A response containing the logs for a task execution.
 *
 * @generated from message flyteidl2.plugin.GetTaskLogsResponse
 */
export type GetTaskLogsResponse = Message<"flyteidl2.plugin.GetTaskLogsResponse"> & {
  /**
   * @generated from oneof flyteidl2.plugin.GetTaskLogsResponse.part
   */
  part: {
    /**
     * @generated from field: flyteidl2.plugin.GetTaskLogsResponseHeader header = 1;
     */
    value: GetTaskLogsResponseHeader;
    case: "header";
  } | {
    /**
     * @generated from field: flyteidl2.plugin.GetTaskLogsResponseBody body = 2;
     */
    value: GetTaskLogsResponseBody;
    case: "body";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.plugin.GetTaskLogsResponse.
 * Use `create(GetTaskLogsResponseSchema)` to create a new message.
 */
export const GetTaskLogsResponseSchema: GenMessage<GetTaskLogsResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugin_connector, 23);

