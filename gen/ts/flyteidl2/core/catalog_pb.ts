// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file flyteidl2/core/catalog.proto (package flyteidl2.core, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Identifier, TaskExecutionIdentifier } from "./identifier_pb.ts";
import { file_flyteidl2_core_identifier } from "./identifier_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file flyteidl2/core/catalog.proto.
 */
export const file_flyteidl2_core_catalog: GenFile = /*@__PURE__*/
  fileDesc("ChxmbHl0ZWlkbDIvY29yZS9jYXRhbG9nLnByb3RvEg5mbHl0ZWlkbDIuY29yZSI3ChJDYXRhbG9nQXJ0aWZhY3RUYWcSEwoLYXJ0aWZhY3RfaWQYASABKAkSDAoEbmFtZRgCIAEoCSLZAQoPQ2F0YWxvZ01ldGFkYXRhEi4KCmRhdGFzZXRfaWQYASABKAsyGi5mbHl0ZWlkbDIuY29yZS5JZGVudGlmaWVyEjgKDGFydGlmYWN0X3RhZxgCIAEoCzIiLmZseXRlaWRsMi5jb3JlLkNhdGFsb2dBcnRpZmFjdFRhZxJIChVzb3VyY2VfdGFza19leGVjdXRpb24YAyABKAsyJy5mbHl0ZWlkbDIuY29yZS5UYXNrRXhlY3V0aW9uSWRlbnRpZmllckgAQhIKEHNvdXJjZV9leGVjdXRpb24ingEKEkNhdGFsb2dSZXNlcnZhdGlvbiKHAQoGU3RhdHVzEhgKFFJFU0VSVkFUSU9OX0RJU0FCTEVEEAASGAoUUkVTRVJWQVRJT05fQUNRVUlSRUQQARIWChJSRVNFUlZBVElPTl9FWElTVFMQAhIYChRSRVNFUlZBVElPTl9SRUxFQVNFRBADEhcKE1JFU0VSVkFUSU9OX0ZBSUxVUkUQBCqzAQoSQ2F0YWxvZ0NhY2hlU3RhdHVzEhIKDkNBQ0hFX0RJU0FCTEVEEAASDgoKQ0FDSEVfTUlTUxABEg0KCUNBQ0hFX0hJVBACEhMKD0NBQ0hFX1BPUFVMQVRFRBADEhgKFENBQ0hFX0xPT0tVUF9GQUlMVVJFEAQSFQoRQ0FDSEVfUFVUX0ZBSUxVUkUQBRIRCg1DQUNIRV9TS0lQUEVEEAYSEQoNQ0FDSEVfRVZJQ1RFRBAHQrEBChJjb20uZmx5dGVpZGwyLmNvcmVCDENhdGFsb2dQcm90b0gCUAFaMmdpdGh1Yi5jb20vZmx5dGVvcmcvZmx5dGUvdjIvZ2VuL2dvL2ZseXRlaWRsMi9jb3JlogIDRkNYqgIORmx5dGVpZGwyLkNvcmXKAg5GbHl0ZWlkbDJcQ29yZeICGkZseXRlaWRsMlxDb3JlXEdQQk1ldGFkYXRh6gIPRmx5dGVpZGwyOjpDb3JlYgZwcm90bzM", [file_flyteidl2_core_identifier]);

/**
 * @generated from message flyteidl2.core.CatalogArtifactTag
 */
export type CatalogArtifactTag = Message<"flyteidl2.core.CatalogArtifactTag"> & {
  /**
   * Artifact ID is generated name
   *
   * @generated from field: string artifact_id = 1;
   */
  artifactId: string;

  /**
   * Flyte computes the tag automatically, as the hash of the values
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message flyteidl2.core.CatalogArtifactTag.
 * Use `create(CatalogArtifactTagSchema)` to create a new message.
 */
export const CatalogArtifactTagSchema: GenMessage<CatalogArtifactTag> = /*@__PURE__*/
  messageDesc(file_flyteidl2_core_catalog, 0);

/**
 * Catalog artifact information with specific metadata
 *
 * @generated from message flyteidl2.core.CatalogMetadata
 */
export type CatalogMetadata = Message<"flyteidl2.core.CatalogMetadata"> & {
  /**
   * Dataset ID in the catalog
   *
   * @generated from field: flyteidl2.core.Identifier dataset_id = 1;
   */
  datasetId?: Identifier;

  /**
   * Artifact tag in the catalog
   *
   * @generated from field: flyteidl2.core.CatalogArtifactTag artifact_tag = 2;
   */
  artifactTag?: CatalogArtifactTag;

  /**
   * Optional: Source Execution identifier, if this dataset was generated by another execution in Flyte. This is a one-of field and will depend on the caching context
   *
   * @generated from oneof flyteidl2.core.CatalogMetadata.source_execution
   */
  sourceExecution: {
    /**
     * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
     *
     * @generated from field: flyteidl2.core.TaskExecutionIdentifier source_task_execution = 3;
     */
    value: TaskExecutionIdentifier;
    case: "sourceTaskExecution";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.core.CatalogMetadata.
 * Use `create(CatalogMetadataSchema)` to create a new message.
 */
export const CatalogMetadataSchema: GenMessage<CatalogMetadata> = /*@__PURE__*/
  messageDesc(file_flyteidl2_core_catalog, 1);

/**
 * @generated from message flyteidl2.core.CatalogReservation
 */
export type CatalogReservation = Message<"flyteidl2.core.CatalogReservation"> & {
};

/**
 * Describes the message flyteidl2.core.CatalogReservation.
 * Use `create(CatalogReservationSchema)` to create a new message.
 */
export const CatalogReservationSchema: GenMessage<CatalogReservation> = /*@__PURE__*/
  messageDesc(file_flyteidl2_core_catalog, 2);

/**
 * Indicates the status of a catalog reservation operation.
 *
 * @generated from enum flyteidl2.core.CatalogReservation.Status
 */
export enum CatalogReservation_Status {
  /**
   * Used to indicate that reservations are disabled
   *
   * @generated from enum value: RESERVATION_DISABLED = 0;
   */
  RESERVATION_DISABLED = 0,

  /**
   * Used to indicate that a reservation was successfully acquired or extended
   *
   * @generated from enum value: RESERVATION_ACQUIRED = 1;
   */
  RESERVATION_ACQUIRED = 1,

  /**
   * Used to indicate that an active reservation currently exists
   *
   * @generated from enum value: RESERVATION_EXISTS = 2;
   */
  RESERVATION_EXISTS = 2,

  /**
   * Used to indicate that the reservation has been successfully released
   *
   * @generated from enum value: RESERVATION_RELEASED = 3;
   */
  RESERVATION_RELEASED = 3,

  /**
   * Used to indicate that a reservation operation resulted in failure
   *
   * @generated from enum value: RESERVATION_FAILURE = 4;
   */
  RESERVATION_FAILURE = 4,
}

/**
 * Describes the enum flyteidl2.core.CatalogReservation.Status.
 */
export const CatalogReservation_StatusSchema: GenEnum<CatalogReservation_Status> = /*@__PURE__*/
  enumDesc(file_flyteidl2_core_catalog, 2, 0);

/**
 * Indicates the status of CatalogCaching. The reason why this is not embedded in TaskNodeMetadata is, that we may use for other types of nodes as well in the future
 *
 * @generated from enum flyteidl2.core.CatalogCacheStatus
 */
export enum CatalogCacheStatus {
  /**
   * Used to indicate that caching was disabled
   *
   * @generated from enum value: CACHE_DISABLED = 0;
   */
  CACHE_DISABLED = 0,

  /**
   * Used to indicate that the cache lookup resulted in no matches
   *
   * @generated from enum value: CACHE_MISS = 1;
   */
  CACHE_MISS = 1,

  /**
   * used to indicate that the associated artifact was a result of a previous execution
   *
   * @generated from enum value: CACHE_HIT = 2;
   */
  CACHE_HIT = 2,

  /**
   * used to indicate that the resultant artifact was added to the cache
   *
   * @generated from enum value: CACHE_POPULATED = 3;
   */
  CACHE_POPULATED = 3,

  /**
   * Used to indicate that cache lookup failed because of an error
   *
   * @generated from enum value: CACHE_LOOKUP_FAILURE = 4;
   */
  CACHE_LOOKUP_FAILURE = 4,

  /**
   * Used to indicate that cache lookup failed because of an error
   *
   * @generated from enum value: CACHE_PUT_FAILURE = 5;
   */
  CACHE_PUT_FAILURE = 5,

  /**
   * Used to indicate the cache lookup was skipped
   *
   * @generated from enum value: CACHE_SKIPPED = 6;
   */
  CACHE_SKIPPED = 6,

  /**
   * Used to indicate that the cache was evicted
   *
   * @generated from enum value: CACHE_EVICTED = 7;
   */
  CACHE_EVICTED = 7,
}

/**
 * Describes the enum flyteidl2.core.CatalogCacheStatus.
 */
export const CatalogCacheStatusSchema: GenEnum<CatalogCacheStatus> = /*@__PURE__*/
  enumDesc(file_flyteidl2_core_catalog, 0);

