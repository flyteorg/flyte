// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file flyteidl2/workflow/state_service.proto (package flyteidl2.workflow, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb.ts";
import type { ActionIdentifier } from "../common/identifier_pb.ts";
import { file_flyteidl2_common_identifier } from "../common/identifier_pb.ts";
import type { ExecutionError } from "../core/execution_pb.ts";
import { file_flyteidl2_core_execution } from "../core/execution_pb.ts";
import type { Phase } from "./run_definition_pb.ts";
import { file_flyteidl2_workflow_run_definition } from "./run_definition_pb.ts";
import type { Status } from "../../google/rpc/status_pb.ts";
import { file_google_rpc_status } from "../../google/rpc/status_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file flyteidl2/workflow/state_service.proto.
 */
export const file_flyteidl2_workflow_state_service: GenFile = /*@__PURE__*/
  fileDesc("CiZmbHl0ZWlkbDIvd29ya2Zsb3cvc3RhdGVfc2VydmljZS5wcm90bxISZmx5dGVpZGwyLndvcmtmbG93IpsBCgpQdXRSZXF1ZXN0Ej0KCWFjdGlvbl9pZBgBIAEoCzIiLmZseXRlaWRsMi5jb21tb24uQWN0aW9uSWRlbnRpZmllckIGukgDyAEBEh8KEnBhcmVudF9hY3Rpb25fbmFtZRgCIAEoCUgAiAEBEhYKBXN0YXRlGAMgASgJQge6SARyAhABQhUKE19wYXJlbnRfYWN0aW9uX25hbWUieAoLUHV0UmVzcG9uc2USPQoJYWN0aW9uX2lkGAEgASgLMiIuZmx5dGVpZGwyLmNvbW1vbi5BY3Rpb25JZGVudGlmaWVyQga6SAPIAQESKgoGc3RhdHVzGAIgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCBrpIA8gBASJLCgpHZXRSZXF1ZXN0Ej0KCWFjdGlvbl9pZBgBIAEoCzIiLmZseXRlaWRsMi5jb21tb24uQWN0aW9uSWRlbnRpZmllckIGukgDyAEBIpABCgtHZXRSZXNwb25zZRI9CglhY3Rpb25faWQYASABKAsyIi5mbHl0ZWlkbDIuY29tbW9uLkFjdGlvbklkZW50aWZpZXJCBrpIA8gBARIqCgZzdGF0dXMYAiABKAsyEi5nb29nbGUucnBjLlN0YXR1c0IGukgDyAEBEhYKBXN0YXRlGAMgASgJQge6SARyAhABIl8KDFdhdGNoUmVxdWVzdBI+ChBwYXJlbnRfYWN0aW9uX2lkGAEgASgLMiIuZmx5dGVpZGwyLmNvbW1vbi5BY3Rpb25JZGVudGlmaWVySABCDwoGZmlsdGVyEgW6SAIIASKUAQoNV2F0Y2hSZXNwb25zZRI5Cg1hY3Rpb25fdXBkYXRlGAEgASgLMiAuZmx5dGVpZGwyLndvcmtmbG93LkFjdGlvblVwZGF0ZUgAEj0KD2NvbnRyb2xfbWVzc2FnZRgCIAEoCzIiLmZseXRlaWRsMi53b3JrZmxvdy5Db250cm9sTWVzc2FnZUgAQgkKB21lc3NhZ2UiIgoOQ29udHJvbE1lc3NhZ2USEAoIc2VudGluZWwYASABKAgiyQEKDEFjdGlvblVwZGF0ZRI9CglhY3Rpb25faWQYASABKAsyIi5mbHl0ZWlkbDIuY29tbW9uLkFjdGlvbklkZW50aWZpZXJCBrpIA8gBARIoCgVwaGFzZRgCIAEoDjIZLmZseXRlaWRsMi53b3JrZmxvdy5QaGFzZRIyCgVlcnJvchgDIAEoCzIeLmZseXRlaWRsMi5jb3JlLkV4ZWN1dGlvbkVycm9ySACIAQESEgoKb3V0cHV0X3VyaRgEIAEoCUIICgZfZXJyb3Iy9AEKDFN0YXRlU2VydmljZRJICgNQdXQSHi5mbHl0ZWlkbDIud29ya2Zsb3cuUHV0UmVxdWVzdBofLmZseXRlaWRsMi53b3JrZmxvdy5QdXRSZXNwb25zZSIAEkgKA0dldBIeLmZseXRlaWRsMi53b3JrZmxvdy5HZXRSZXF1ZXN0Gh8uZmx5dGVpZGwyLndvcmtmbG93LkdldFJlc3BvbnNlIgASUAoFV2F0Y2gSIC5mbHl0ZWlkbDIud29ya2Zsb3cuV2F0Y2hSZXF1ZXN0GiEuZmx5dGVpZGwyLndvcmtmbG93LldhdGNoUmVzcG9uc2UiADABQs4BChZjb20uZmx5dGVpZGwyLndvcmtmbG93QhFTdGF0ZVNlcnZpY2VQcm90b0gCUAFaNmdpdGh1Yi5jb20vZmx5dGVvcmcvZmx5dGUvdjIvZ2VuL2dvL2ZseXRlaWRsMi93b3JrZmxvd6ICA0ZXWKoCEkZseXRlaWRsMi5Xb3JrZmxvd8oCEkZseXRlaWRsMlxXb3JrZmxvd+ICHkZseXRlaWRsMlxXb3JrZmxvd1xHUEJNZXRhZGF0YeoCE0ZseXRlaWRsMjo6V29ya2Zsb3diBnByb3RvMw", [file_buf_validate_validate, file_flyteidl2_common_identifier, file_flyteidl2_core_execution, file_flyteidl2_workflow_run_definition, file_google_rpc_status]);

/**
 * request message to put the state of an action.
 *
 * @generated from message flyteidl2.workflow.PutRequest
 */
export type PutRequest = Message<"flyteidl2.workflow.PutRequest"> & {
  /**
   * a unique identifier for the action.
   *
   * @generated from field: flyteidl2.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   * optional name of the parent action if this is a nested action.
   *
   * @generated from field: optional string parent_action_name = 2;
   */
  parentActionName?: string;

  /**
   * currently we will store state as a json serialized `NodeStatus` object. this will be required
   * to seamlessly integrate with existing FlytePropeller node execution logic. we can update this
   * to be a subset of fields in the future if there are necessary performance improvements.
   *
   * @generated from field: string state = 3;
   */
  state: string;
};

/**
 * Describes the message flyteidl2.workflow.PutRequest.
 * Use `create(PutRequestSchema)` to create a new message.
 */
export const PutRequestSchema: GenMessage<PutRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_state_service, 0);

/**
 * response message for putting the state of an action.
 *
 * @generated from message flyteidl2.workflow.PutResponse
 */
export type PutResponse = Message<"flyteidl2.workflow.PutResponse"> & {
  /**
   * a unique identifier for the action.
   *
   * @generated from field: flyteidl2.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   * The result.
   *
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;
};

/**
 * Describes the message flyteidl2.workflow.PutResponse.
 * Use `create(PutResponseSchema)` to create a new message.
 */
export const PutResponseSchema: GenMessage<PutResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_state_service, 1);

/**
 * request message to get the state of an action.
 *
 * @generated from message flyteidl2.workflow.GetRequest
 */
export type GetRequest = Message<"flyteidl2.workflow.GetRequest"> & {
  /**
   * a unique identifier for the action.
   *
   * @generated from field: flyteidl2.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;
};

/**
 * Describes the message flyteidl2.workflow.GetRequest.
 * Use `create(GetRequestSchema)` to create a new message.
 */
export const GetRequestSchema: GenMessage<GetRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_state_service, 2);

/**
 * response message for getting the state of an action.
 *
 * @generated from message flyteidl2.workflow.GetResponse
 */
export type GetResponse = Message<"flyteidl2.workflow.GetResponse"> & {
  /**
   * a unique identifier for the action.
   *
   * @generated from field: flyteidl2.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   *
   * The result.
   *
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;

  /**
   * a json serialized `NodeStatus` object.
   *
   * @generated from field: string state = 3;
   */
  state: string;
};

/**
 * Describes the message flyteidl2.workflow.GetResponse.
 * Use `create(GetResponseSchema)` to create a new message.
 */
export const GetResponseSchema: GenMessage<GetResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_state_service, 3);

/**
 * request message for watching updates to the state of actions.
 *
 * @generated from message flyteidl2.workflow.WatchRequest
 */
export type WatchRequest = Message<"flyteidl2.workflow.WatchRequest"> & {
  /**
   * criteria for filtering which actions to watch.
   *
   * @generated from oneof flyteidl2.workflow.WatchRequest.filter
   */
  filter: {
    /**
     * a unique identifier for the parent action to watch. this will result in updates for all child
     * actions.
     *
     * @generated from field: flyteidl2.common.ActionIdentifier parent_action_id = 1;
     */
    value: ActionIdentifier;
    case: "parentActionId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.workflow.WatchRequest.
 * Use `create(WatchRequestSchema)` to create a new message.
 */
export const WatchRequestSchema: GenMessage<WatchRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_state_service, 4);

/**
 * response message for watching updates to the state of actions.
 *
 * @generated from message flyteidl2.workflow.WatchResponse
 */
export type WatchResponse = Message<"flyteidl2.workflow.WatchResponse"> & {
  /**
   * an update to the state of a specific action.
   *
   * @generated from oneof flyteidl2.workflow.WatchResponse.message
   */
  message: {
    /**
     * @generated from field: flyteidl2.workflow.ActionUpdate action_update = 1;
     */
    value: ActionUpdate;
    case: "actionUpdate";
  } | {
    /**
     * @generated from field: flyteidl2.workflow.ControlMessage control_message = 2;
     */
    value: ControlMessage;
    case: "controlMessage";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.workflow.WatchResponse.
 * Use `create(WatchResponseSchema)` to create a new message.
 */
export const WatchResponseSchema: GenMessage<WatchResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_state_service, 5);

/**
 * @generated from message flyteidl2.workflow.ControlMessage
 */
export type ControlMessage = Message<"flyteidl2.workflow.ControlMessage"> & {
  /**
   * a sentinel value to indicate the end of a stream. this is used to disambiguate between a control message and a
   * regular message. When a watch begins the service will return the existing state of all actions, then a sentinel value,
   * before continuing on with ongoing updates. this sequence disambiguates the current state from new updates.
   *
   * @generated from field: bool sentinel = 1;
   */
  sentinel: boolean;
};

/**
 * Describes the message flyteidl2.workflow.ControlMessage.
 * Use `create(ControlMessageSchema)` to create a new message.
 */
export const ControlMessageSchema: GenMessage<ControlMessage> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_state_service, 6);

/**
 * message to represent an update to the state of an action.
 *
 * @generated from message flyteidl2.workflow.ActionUpdate
 */
export type ActionUpdate = Message<"flyteidl2.workflow.ActionUpdate"> & {
  /**
   * A unique identifier for the action. `nil` is used as a sentinel value; for example,
   *
   * @generated from field: flyteidl2.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   * the current phase of the action.
   *
   * @generated from field: flyteidl2.workflow.Phase phase = 2;
   */
  phase: Phase;

  /**
   * the error associated with the action (if exists).
   *
   * @generated from field: optional flyteidl2.core.ExecutionError error = 3;
   */
  error?: ExecutionError;

  /**
   * the output uri for the action
   *
   * @generated from field: string output_uri = 4;
   */
  outputUri: string;
};

/**
 * Describes the message flyteidl2.workflow.ActionUpdate.
 * Use `create(ActionUpdateSchema)` to create a new message.
 */
export const ActionUpdateSchema: GenMessage<ActionUpdate> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_state_service, 7);

/**
 * provides an interface for managing the state of actions.
 *
 * @generated from service flyteidl2.workflow.StateService
 */
export const StateService: GenService<{
  /**
   * put the state of an action.
   *
   * @generated from rpc flyteidl2.workflow.StateService.Put
   */
  put: {
    methodKind: "unary";
    input: typeof PutRequestSchema;
    output: typeof PutResponseSchema;
  },
  /**
   * get the state of an action.
   *
   * @generated from rpc flyteidl2.workflow.StateService.Get
   */
  get: {
    methodKind: "unary";
    input: typeof GetRequestSchema;
    output: typeof GetResponseSchema;
  },
  /**
   * watch for updates to the state of actions. this api guarantees at-least-once delivery semantics.
   *
   * @generated from rpc flyteidl2.workflow.StateService.Watch
   */
  watch: {
    methodKind: "server_streaming";
    input: typeof WatchRequestSchema;
    output: typeof WatchResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_flyteidl2_workflow_state_service, 0);

