// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file flyteidl2/workflow/queue_service.proto (package flyteidl2.workflow, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { ActionIdentifier, RunIdentifier } from "../common/identifier_pb.ts";
import { file_flyteidl2_common_identifier } from "../common/identifier_pb.ts";
import type { LiteralType } from "../core/types_pb.ts";
import { file_flyteidl2_core_types } from "../core/types_pb.ts";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb.ts";
import type { OutputReferences, Phase, RunSpec } from "./run_definition_pb.ts";
import { file_flyteidl2_workflow_run_definition } from "./run_definition_pb.ts";
import type { TaskIdentifier, TaskSpec, TraceSpec } from "../task/task_definition_pb.ts";
import { file_flyteidl2_task_task_definition } from "../task/task_definition_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file flyteidl2/workflow/queue_service.proto.
 */
export const file_flyteidl2_workflow_queue_service: GenFile = /*@__PURE__*/
  fileDesc("CiZmbHl0ZWlkbDIvd29ya2Zsb3cvcXVldWVfc2VydmljZS5wcm90bxISZmx5dGVpZGwyLndvcmtmbG93IsUDChRFbnF1ZXVlQWN0aW9uUmVxdWVzdBI9CglhY3Rpb25faWQYASABKAsyIi5mbHl0ZWlkbDIuY29tbW9uLkFjdGlvbklkZW50aWZpZXJCBrpIA8gBARIfChJwYXJlbnRfYWN0aW9uX25hbWUYAiABKAlIAYgBARItCghydW5fc3BlYxgDIAEoCzIbLmZseXRlaWRsMi53b3JrZmxvdy5SdW5TcGVjEhoKCWlucHV0X3VyaRgGIAEoCUIHukgEcgIQARIgCg9ydW5fb3V0cHV0X2Jhc2UYByABKAlCB7pIBHICEAESDQoFZ3JvdXAYCCABKAkSDwoHc3ViamVjdBgJIAEoCRIuCgR0YXNrGAogASgLMh4uZmx5dGVpZGwyLndvcmtmbG93LlRhc2tBY3Rpb25IABIwCgV0cmFjZRgLIAEoCzIfLmZseXRlaWRsMi53b3JrZmxvdy5UcmFjZUFjdGlvbkgAEjgKCWNvbmRpdGlvbhgMIAEoCzIjLmZseXRlaWRsMi53b3JrZmxvdy5Db25kaXRpb25BY3Rpb25IAEINCgRzcGVjEgW6SAIIAUIVChNfcGFyZW50X2FjdGlvbl9uYW1lIqoBCgpUYXNrQWN0aW9uEioKAmlkGAEgASgLMh4uZmx5dGVpZGwyLnRhc2suVGFza0lkZW50aWZpZXISLgoEc3BlYxgCIAEoCzIYLmZseXRlaWRsMi50YXNrLlRhc2tTcGVjQga6SAPIAQESLwoJY2FjaGVfa2V5GAMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEg8KB2NsdXN0ZXIYBCABKAkipgIKC1RyYWNlQWN0aW9uEhUKBG5hbWUYASABKAlCB7pIBHICEAESKAoFcGhhc2UYAiABKA4yGS5mbHl0ZWlkbDIud29ya2Zsb3cuUGhhc2USLgoKc3RhcnRfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASMQoIZW5kX3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wSACIAQESNQoHb3V0cHV0cxgFIAEoCzIkLmZseXRlaWRsMi53b3JrZmxvdy5PdXRwdXRSZWZlcmVuY2VzEi8KBHNwZWMYBiABKAsyGS5mbHl0ZWlkbDIudGFzay5UcmFjZVNwZWNCBrpIA8gBAUILCglfZW5kX3RpbWUi0wEKD0NvbmRpdGlvbkFjdGlvbhIVCgRuYW1lGAEgASgJQge6SARyAhABEhkKBnJ1bl9pZBgCIAEoCUIHukgEcgIQAUgAEhwKCWFjdGlvbl9pZBgDIAEoCUIHukgEcgIQAUgAEhAKBmdsb2JhbBgEIAEoCEgAEikKBHR5cGUYBiABKAsyGy5mbHl0ZWlkbDIuY29yZS5MaXRlcmFsVHlwZRIOCgZwcm9tcHQYByABKAkSEwoLZGVzY3JpcHRpb24YCCABKAlCDgoFc2NvcGUSBbpIAggBIhcKFUVucXVldWVBY3Rpb25SZXNwb25zZSJwChVBYm9ydFF1ZXVlZFJ1blJlcXVlc3QSNwoGcnVuX2lkGAEgASgLMh8uZmx5dGVpZGwyLmNvbW1vbi5SdW5JZGVudGlmaWVyQga6SAPIAQESEwoGcmVhc29uGAIgASgJSACIAQFCCQoHX3JlYXNvbiIYChZBYm9ydFF1ZXVlZFJ1blJlc3BvbnNlInkKGEFib3J0UXVldWVkQWN0aW9uUmVxdWVzdBI9CglhY3Rpb25faWQYASABKAsyIi5mbHl0ZWlkbDIuY29tbW9uLkFjdGlvbklkZW50aWZpZXJCBrpIA8gBARITCgZyZWFzb24YAiABKAlIAIgBAUIJCgdfcmVhc29uIhsKGUFib3J0UXVldWVkQWN0aW9uUmVzcG9uc2Uy1QIKDFF1ZXVlU2VydmljZRJmCg1FbnF1ZXVlQWN0aW9uEiguZmx5dGVpZGwyLndvcmtmbG93LkVucXVldWVBY3Rpb25SZXF1ZXN0GikuZmx5dGVpZGwyLndvcmtmbG93LkVucXVldWVBY3Rpb25SZXNwb25zZSIAEmkKDkFib3J0UXVldWVkUnVuEikuZmx5dGVpZGwyLndvcmtmbG93LkFib3J0UXVldWVkUnVuUmVxdWVzdBoqLmZseXRlaWRsMi53b3JrZmxvdy5BYm9ydFF1ZXVlZFJ1blJlc3BvbnNlIgAScgoRQWJvcnRRdWV1ZWRBY3Rpb24SLC5mbHl0ZWlkbDIud29ya2Zsb3cuQWJvcnRRdWV1ZWRBY3Rpb25SZXF1ZXN0Gi0uZmx5dGVpZGwyLndvcmtmbG93LkFib3J0UXVldWVkQWN0aW9uUmVzcG9uc2UiAELOAQoWY29tLmZseXRlaWRsMi53b3JrZmxvd0IRUXVldWVTZXJ2aWNlUHJvdG9IAlABWjZnaXRodWIuY29tL2ZseXRlb3JnL2ZseXRlL3YyL2dlbi9nby9mbHl0ZWlkbDIvd29ya2Zsb3eiAgNGV1iqAhJGbHl0ZWlkbDIuV29ya2Zsb3fKAhJGbHl0ZWlkbDJcV29ya2Zsb3fiAh5GbHl0ZWlkbDJcV29ya2Zsb3dcR1BCTWV0YWRhdGHqAhNGbHl0ZWlkbDI6OldvcmtmbG93YgZwcm90bzM", [file_flyteidl2_common_identifier, file_flyteidl2_core_types, file_google_protobuf_timestamp, file_google_protobuf_wrappers, file_buf_validate_validate, file_flyteidl2_workflow_run_definition, file_flyteidl2_task_task_definition]);

/**
 * request message for queuing an action.
 *
 * @generated from message flyteidl2.workflow.EnqueueActionRequest
 */
export type EnqueueActionRequest = Message<"flyteidl2.workflow.EnqueueActionRequest"> & {
  /**
   * the unique identifier for the action.
   *
   * @generated from field: flyteidl2.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   * an optional name for the parent action, if it exists. the remaining run metadata (ex. org,
   * project, domain) will be the same as the action_id defined above.
   *
   * @generated from field: optional string parent_action_name = 2;
   */
  parentActionName?: string;

  /**
   * Optional run spec passed in by the root action to be utilized by all downstream actions in the run.
   *
   * @generated from field: flyteidl2.workflow.RunSpec run_spec = 3;
   */
  runSpec?: RunSpec;

  /**
   * the path to the input data for this action.
   *
   * @generated from field: string input_uri = 6;
   */
  inputUri: string;

  /**
   * the run base path this action should write its output to.
   *
   * @generated from field: string run_output_base = 7;
   */
  runOutputBase: string;

  /**
   * group this action belongs to, if applicable.
   *
   * @generated from field: string group = 8;
   */
  group: string;

  /**
   * subject that created the run, if known.
   *
   * @generated from field: string subject = 9;
   */
  subject: string;

  /**
   * @generated from oneof flyteidl2.workflow.EnqueueActionRequest.spec
   */
  spec: {
    /**
     * @generated from field: flyteidl2.workflow.TaskAction task = 10;
     */
    value: TaskAction;
    case: "task";
  } | {
    /**
     * @generated from field: flyteidl2.workflow.TraceAction trace = 11;
     */
    value: TraceAction;
    case: "trace";
  } | {
    /**
     * @generated from field: flyteidl2.workflow.ConditionAction condition = 12;
     */
    value: ConditionAction;
    case: "condition";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.workflow.EnqueueActionRequest.
 * Use `create(EnqueueActionRequestSchema)` to create a new message.
 */
export const EnqueueActionRequestSchema: GenMessage<EnqueueActionRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_queue_service, 0);

/**
 * @generated from message flyteidl2.workflow.TaskAction
 */
export type TaskAction = Message<"flyteidl2.workflow.TaskAction"> & {
  /**
   * a unique identifier for the task this action is associated with, if applicable.
   *
   * @generated from field: flyteidl2.task.TaskIdentifier id = 1;
   */
  id?: TaskIdentifier;

  /**
   * the definition of the task to be executed.
   *
   * @generated from field: flyteidl2.task.TaskSpec spec = 2;
   */
  spec?: TaskSpec;

  /**
   * Enables caching when set and specifies the cache version to use.
   *
   * @generated from field: google.protobuf.StringValue cache_key = 3;
   */
  cacheKey?: string;

  /**
   * the specific cluster that this action should be executed on. if not set, the cluster from the
   * `RunSpec` will be used.
   *
   * @generated from field: string cluster = 4;
   */
  cluster: string;
};

/**
 * Describes the message flyteidl2.workflow.TaskAction.
 * Use `create(TaskActionSchema)` to create a new message.
 */
export const TaskActionSchema: GenMessage<TaskAction> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_queue_service, 1);

/**
 * TraceAction is used to define a trace action that can be used to track the execution of an action that's managed
 * by the local worker. This can be used to bring determinism to code that's otherwise not deterministic (e.g. current
 * time).
 *
 * @generated from message flyteidl2.workflow.TraceAction
 */
export type TraceAction = Message<"flyteidl2.workflow.TraceAction"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Last known phase.
   *
   * @generated from field: flyteidl2.workflow.Phase phase = 2;
   */
  phase: Phase;

  /**
   * Time the attempt started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  /**
   * Time the attempt ended, if applicable.
   *
   * @generated from field: optional google.protobuf.Timestamp end_time = 4;
   */
  endTime?: Timestamp;

  /**
   * Output references.
   *
   * @generated from field: flyteidl2.workflow.OutputReferences outputs = 5;
   */
  outputs?: OutputReferences;

  /**
   * Task spec for the trace, useful for the typed interface inside.
   *
   * @generated from field: flyteidl2.task.TraceSpec spec = 6;
   */
  spec?: TraceSpec;
};

/**
 * Describes the message flyteidl2.workflow.TraceAction.
 * Use `create(TraceActionSchema)` to create a new message.
 */
export const TraceActionSchema: GenMessage<TraceAction> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_queue_service, 2);

/**
 * ConditionAction is used to define a condition that can be evaluated at runtime. It can be used to
 * await a signal from an external system and can carry a value.
 *
 * @generated from message flyteidl2.workflow.ConditionAction
 */
export type ConditionAction = Message<"flyteidl2.workflow.ConditionAction"> & {
  /**
   * Name is the unique identifier for the action. It must be unique within the defined scope below.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof flyteidl2.workflow.ConditionAction.scope
   */
  scope: {
    /**
     * RunId is the unique identifier for the run this action is associated with.
     *
     * @generated from field: string run_id = 2;
     */
    value: string;
    case: "runId";
  } | {
    /**
     * ActionId is the unique identifier for the action this action is associated with.
     *
     * @generated from field: string action_id = 3;
     */
    value: string;
    case: "actionId";
  } | {
    /**
     * Global indicates the condition is global and can be used across all runs and actions.
     *
     * @generated from field: bool global = 4;
     */
    value: boolean;
    case: "global";
  } | { case: undefined; value?: undefined };

  /**
   * Type is the type of the value the condition is expected. This can be used to properly render
   * a UI element for the condition or validate when a value is received that it is of the expected
   * type.
   *
   * @generated from field: flyteidl2.core.LiteralType type = 6;
   */
  type?: LiteralType;

  /**
   * Prompt is the prompt that will be shown to the user when the condition is awaited.
   *
   * @generated from field: string prompt = 7;
   */
  prompt: string;

  /**
   * Description is a description of the condition. This can be used to provide additional
   * information to the user about the condition.
   *
   * @generated from field: string description = 8;
   */
  description: string;
};

/**
 * Describes the message flyteidl2.workflow.ConditionAction.
 * Use `create(ConditionActionSchema)` to create a new message.
 */
export const ConditionActionSchema: GenMessage<ConditionAction> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_queue_service, 3);

/**
 * response message for queuing an action.
 *
 * @generated from message flyteidl2.workflow.EnqueueActionResponse
 */
export type EnqueueActionResponse = Message<"flyteidl2.workflow.EnqueueActionResponse"> & {
};

/**
 * Describes the message flyteidl2.workflow.EnqueueActionResponse.
 * Use `create(EnqueueActionResponseSchema)` to create a new message.
 */
export const EnqueueActionResponseSchema: GenMessage<EnqueueActionResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_queue_service, 4);

/**
 * request message for aborting a run.
 *
 * @generated from message flyteidl2.workflow.AbortQueuedRunRequest
 */
export type AbortQueuedRunRequest = Message<"flyteidl2.workflow.AbortQueuedRunRequest"> & {
  /**
   * the unique identifier for the run to be aborted.
   *
   * @generated from field: flyteidl2.common.RunIdentifier run_id = 1;
   */
  runId?: RunIdentifier;

  /**
   * Reason for aborting the run, if applicable.
   *
   * @generated from field: optional string reason = 2;
   */
  reason?: string;
};

/**
 * Describes the message flyteidl2.workflow.AbortQueuedRunRequest.
 * Use `create(AbortQueuedRunRequestSchema)` to create a new message.
 */
export const AbortQueuedRunRequestSchema: GenMessage<AbortQueuedRunRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_queue_service, 5);

/**
 * response message for aborting a run.
 *
 * @generated from message flyteidl2.workflow.AbortQueuedRunResponse
 */
export type AbortQueuedRunResponse = Message<"flyteidl2.workflow.AbortQueuedRunResponse"> & {
};

/**
 * Describes the message flyteidl2.workflow.AbortQueuedRunResponse.
 * Use `create(AbortQueuedRunResponseSchema)` to create a new message.
 */
export const AbortQueuedRunResponseSchema: GenMessage<AbortQueuedRunResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_queue_service, 6);

/**
 * @generated from message flyteidl2.workflow.AbortQueuedActionRequest
 */
export type AbortQueuedActionRequest = Message<"flyteidl2.workflow.AbortQueuedActionRequest"> & {
  /**
   * ActionId is the unique identifier for the action to be aborted
   *
   * @generated from field: flyteidl2.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   * Reason for aborting the action, if applicable.
   *
   * @generated from field: optional string reason = 2;
   */
  reason?: string;
};

/**
 * Describes the message flyteidl2.workflow.AbortQueuedActionRequest.
 * Use `create(AbortQueuedActionRequestSchema)` to create a new message.
 */
export const AbortQueuedActionRequestSchema: GenMessage<AbortQueuedActionRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_queue_service, 7);

/**
 * @generated from message flyteidl2.workflow.AbortQueuedActionResponse
 */
export type AbortQueuedActionResponse = Message<"flyteidl2.workflow.AbortQueuedActionResponse"> & {
};

/**
 * Describes the message flyteidl2.workflow.AbortQueuedActionResponse.
 * Use `create(AbortQueuedActionResponseSchema)` to create a new message.
 */
export const AbortQueuedActionResponseSchema: GenMessage<AbortQueuedActionResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_queue_service, 8);

/**
 * provides an interface for managing execution of runs over a collection of workers.
 *
 * @generated from service flyteidl2.workflow.QueueService
 */
export const QueueService: GenService<{
  /**
   * queue a new action for execution.
   *
   * @generated from rpc flyteidl2.workflow.QueueService.EnqueueAction
   */
  enqueueAction: {
    methodKind: "unary";
    input: typeof EnqueueActionRequestSchema;
    output: typeof EnqueueActionResponseSchema;
  },
  /**
   * abort a queued run.
   *
   * @generated from rpc flyteidl2.workflow.QueueService.AbortQueuedRun
   */
  abortQueuedRun: {
    methodKind: "unary";
    input: typeof AbortQueuedRunRequestSchema;
    output: typeof AbortQueuedRunResponseSchema;
  },
  /**
   * AbortAction aborts a single action that was previously queued or is currently being processed by a worker.
   *
   * @generated from rpc flyteidl2.workflow.QueueService.AbortQueuedAction
   */
  abortQueuedAction: {
    methodKind: "unary";
    input: typeof AbortQueuedActionRequestSchema;
    output: typeof AbortQueuedActionResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_flyteidl2_workflow_queue_service, 0);

