// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file flyteidl2/workflow/run_definition.proto (package flyteidl2.workflow, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb.ts";
import type { ActionIdentifier, TriggerIdentifier } from "../common/identifier_pb.ts";
import { file_flyteidl2_common_identifier } from "../common/identifier_pb.ts";
import type { EnrichedIdentity } from "../common/identity_pb.ts";
import { file_flyteidl2_common_identity } from "../common/identity_pb.ts";
import type { CatalogCacheStatus } from "../core/catalog_pb.ts";
import { file_flyteidl2_core_catalog } from "../core/catalog_pb.ts";
import type { LogContext, TaskLog } from "../core/execution_pb.ts";
import { file_flyteidl2_core_execution } from "../core/execution_pb.ts";
import type { OutputReferences } from "../task/common_pb.ts";
import { file_flyteidl2_task_common } from "../task/common_pb.ts";
import type { RunSpec } from "../task/run_pb.ts";
import { file_flyteidl2_task_run } from "../task/run_pb.ts";
import type { TaskIdentifier, TaskSpec, TraceSpec } from "../task/task_definition_pb.ts";
import { file_flyteidl2_task_task_definition } from "../task/task_definition_pb.ts";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file flyteidl2/workflow/run_definition.proto.
 */
export const file_flyteidl2_workflow_run_definition: GenFile = /*@__PURE__*/
  fileDesc("CidmbHl0ZWlkbDIvd29ya2Zsb3cvcnVuX2RlZmluaXRpb24ucHJvdG8SEmZseXRlaWRsMi53b3JrZmxvdyIxCgNSdW4SKgoGYWN0aW9uGAEgASgLMhouZmx5dGVpZGwyLndvcmtmbG93LkFjdGlvbiJqCgpSdW5EZXRhaWxzEikKCHJ1bl9zcGVjGAEgASgLMhcuZmx5dGVpZGwyLnRhc2suUnVuU3BlYxIxCgZhY3Rpb24YAiABKAsyIS5mbHl0ZWlkbDIud29ya2Zsb3cuQWN0aW9uRGV0YWlscyJnChJUYXNrQWN0aW9uTWV0YWRhdGESKgoCaWQYASABKAsyHi5mbHl0ZWlkbDIudGFzay5UYXNrSWRlbnRpZmllchIRCgl0YXNrX3R5cGUYAiABKAkSEgoKc2hvcnRfbmFtZRgDIAEoCSIjChNUcmFjZUFjdGlvbk1ldGFkYXRhEgwKBG5hbWUYASABKAkiggEKF0NvbmRpdGlvbkFjdGlvbk1ldGFkYXRhEgwKBG5hbWUYASABKAkSGQoGcnVuX2lkGAIgASgJQge6SARyAhABSAASHAoJYWN0aW9uX2lkGAMgASgJQge6SARyAhABSAASEAoGZ2xvYmFsGAQgASgISABCDgoFc2NvcGUSBbpIAggBIpIDCg5BY3Rpb25NZXRhZGF0YRIOCgZwYXJlbnQYAyABKAkSDQoFZ3JvdXAYBSABKAkSNwoLZXhlY3V0ZWRfYnkYBiABKAsyIi5mbHl0ZWlkbDIuY29tbW9uLkVucmljaGVkSWRlbnRpdHkSNgoEdGFzaxgHIAEoCzImLmZseXRlaWRsMi53b3JrZmxvdy5UYXNrQWN0aW9uTWV0YWRhdGFIABI4CgV0cmFjZRgIIAEoCzInLmZseXRlaWRsMi53b3JrZmxvdy5UcmFjZUFjdGlvbk1ldGFkYXRhSAASQAoJY29uZGl0aW9uGAkgASgLMisuZmx5dGVpZGwyLndvcmtmbG93LkNvbmRpdGlvbkFjdGlvbk1ldGFkYXRhSAASMwoLYWN0aW9uX3R5cGUYCiABKA4yHi5mbHl0ZWlkbDIud29ya2Zsb3cuQWN0aW9uVHlwZRI3Cgp0cmlnZ2VyX2lkGAsgASgLMiMuZmx5dGVpZGwyLmNvbW1vbi5UcmlnZ2VySWRlbnRpZmllckIGCgRzcGVjIv0BCgxBY3Rpb25TdGF0dXMSKAoFcGhhc2UYASABKA4yGS5mbHl0ZWlkbDIud29ya2Zsb3cuUGhhc2USLgoKc3RhcnRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASMQoIZW5kX3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wSACIAQESGQoIYXR0ZW1wdHMYBCABKA1CB7pIBCoCIAASOAoMY2FjaGVfc3RhdHVzGAUgASgOMiIuZmx5dGVpZGwyLmNvcmUuQ2F0YWxvZ0NhY2hlU3RhdHVzQgsKCV9lbmRfdGltZSKgAQoGQWN0aW9uEi4KAmlkGAEgASgLMiIuZmx5dGVpZGwyLmNvbW1vbi5BY3Rpb25JZGVudGlmaWVyEjQKCG1ldGFkYXRhGAIgASgLMiIuZmx5dGVpZGwyLndvcmtmbG93LkFjdGlvbk1ldGFkYXRhEjAKBnN0YXR1cxgDIAEoCzIgLmZseXRlaWRsMi53b3JrZmxvdy5BY3Rpb25TdGF0dXMi6gEKDkVucmljaGVkQWN0aW9uEioKBmFjdGlvbhgBIAEoCzIaLmZseXRlaWRsMi53b3JrZmxvdy5BY3Rpb24SFAoMbWVldHNfZmlsdGVyGAIgASgIEloKFWNoaWxkcmVuX3BoYXNlX2NvdW50cxgDIAMoCzI7LmZseXRlaWRsMi53b3JrZmxvdy5FbnJpY2hlZEFjdGlvbi5DaGlsZHJlblBoYXNlQ291bnRzRW50cnkaOgoYQ2hpbGRyZW5QaGFzZUNvdW50c0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEijAEKCUVycm9ySW5mbxIPCgdtZXNzYWdlGAEgASgJEjAKBGtpbmQYAiABKA4yIi5mbHl0ZWlkbDIud29ya2Zsb3cuRXJyb3JJbmZvLktpbmQiPAoES2luZBIUChBLSU5EX1VOU1BFQ0lGSUVEEAASDQoJS0lORF9VU0VSEAESDwoLS0lORF9TWVNURU0QAiJTCglBYm9ydEluZm8SDgoGcmVhc29uGAEgASgJEjYKCmFib3J0ZWRfYnkYAiABKAsyIi5mbHl0ZWlkbDIuY29tbW9uLkVucmljaGVkSWRlbnRpdHkirgMKDUFjdGlvbkRldGFpbHMSLgoCaWQYASABKAsyIi5mbHl0ZWlkbDIuY29tbW9uLkFjdGlvbklkZW50aWZpZXISNAoIbWV0YWRhdGEYAiABKAsyIi5mbHl0ZWlkbDIud29ya2Zsb3cuQWN0aW9uTWV0YWRhdGESMAoGc3RhdHVzGAMgASgLMiAuZmx5dGVpZGwyLndvcmtmbG93LkFjdGlvblN0YXR1cxIzCgplcnJvcl9pbmZvGAQgASgLMh0uZmx5dGVpZGwyLndvcmtmbG93LkVycm9ySW5mb0gAEjMKCmFib3J0X2luZm8YBSABKAsyHS5mbHl0ZWlkbDIud29ya2Zsb3cuQWJvcnRJbmZvSAASKAoEdGFzaxgGIAEoCzIYLmZseXRlaWRsMi50YXNrLlRhc2tTcGVjSAESKgoFdHJhY2UYCCABKAsyGS5mbHl0ZWlkbDIudGFzay5UcmFjZVNwZWNIARIzCghhdHRlbXB0cxgHIAMoCzIhLmZseXRlaWRsMi53b3JrZmxvdy5BY3Rpb25BdHRlbXB0QggKBnJlc3VsdEIGCgRzcGVjIvYECg1BY3Rpb25BdHRlbXB0EigKBXBoYXNlGAEgASgOMhkuZmx5dGVpZGwyLndvcmtmbG93LlBoYXNlEi4KCnN0YXJ0X3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjEKCGVuZF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgAiAEBEjYKCmVycm9yX2luZm8YBCABKAsyHS5mbHl0ZWlkbDIud29ya2Zsb3cuRXJyb3JJbmZvSAGIAQESGAoHYXR0ZW1wdBgFIAEoDUIHukgEKgIgABIpCghsb2dfaW5mbxgGIAMoCzIXLmZseXRlaWRsMi5jb3JlLlRhc2tMb2cSMQoHb3V0cHV0cxgHIAEoCzIgLmZseXRlaWRsMi50YXNrLk91dHB1dFJlZmVyZW5jZXMSFgoObG9nc19hdmFpbGFibGUYCCABKAgSOAoMY2FjaGVfc3RhdHVzGAkgASgOMiIuZmx5dGVpZGwyLmNvcmUuQ2F0YWxvZ0NhY2hlU3RhdHVzEjgKDmNsdXN0ZXJfZXZlbnRzGAogAygLMiAuZmx5dGVpZGwyLndvcmtmbG93LkNsdXN0ZXJFdmVudBI+ChFwaGFzZV90cmFuc2l0aW9ucxgLIAMoCzIjLmZseXRlaWRsMi53b3JrZmxvdy5QaGFzZVRyYW5zaXRpb24SDwoHY2x1c3RlchgMIAEoCRIvCgtsb2dfY29udGV4dBgNIAEoCzIaLmZseXRlaWRsMi5jb3JlLkxvZ0NvbnRleHRCCwoJX2VuZF90aW1lQg0KC19lcnJvcl9pbmZvIlAKDENsdXN0ZXJFdmVudBIvCgtvY2N1cnJlZF9hdBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDwoHbWVzc2FnZRgCIAEoCSKrAQoPUGhhc2VUcmFuc2l0aW9uEigKBXBoYXNlGAEgASgOMhkuZmx5dGVpZGwyLndvcmtmbG93LlBoYXNlEi4KCnN0YXJ0X3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjEKCGVuZF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgAiAEBQgsKCV9lbmRfdGltZSLSBQoLQWN0aW9uRXZlbnQSNgoCaWQYASABKAsyIi5mbHl0ZWlkbDIuY29tbW9uLkFjdGlvbklkZW50aWZpZXJCBrpIA8gBARIYCgdhdHRlbXB0GAIgASgNQge6SAQqAiAAEigKBXBoYXNlGAMgASgOMhkuZmx5dGVpZGwyLndvcmtmbG93LlBoYXNlEg8KB3ZlcnNpb24YBCABKA0SMgoKc3RhcnRfdGltZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCAhgBEjAKDHVwZGF0ZWRfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASNQoIZW5kX3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgIYAUgAiAEBEjYKCmVycm9yX2luZm8YCCABKAsyHS5mbHl0ZWlkbDIud29ya2Zsb3cuRXJyb3JJbmZvSAGIAQESKQoIbG9nX2luZm8YCSADKAsyFy5mbHl0ZWlkbDIuY29yZS5UYXNrTG9nEi8KC2xvZ19jb250ZXh0GAogASgLMhouZmx5dGVpZGwyLmNvcmUuTG9nQ29udGV4dBIPCgdjbHVzdGVyGAsgASgJEjEKB291dHB1dHMYDCABKAsyIC5mbHl0ZWlkbDIudGFzay5PdXRwdXRSZWZlcmVuY2VzEjgKDGNhY2hlX3N0YXR1cxgNIAEoDjIiLmZseXRlaWRsMi5jb3JlLkNhdGFsb2dDYWNoZVN0YXR1cxI4Cg5jbHVzdGVyX2V2ZW50cxgOIAMoCzIgLmZseXRlaWRsMi53b3JrZmxvdy5DbHVzdGVyRXZlbnQSMQoNcmVwb3J0ZWRfdGltZRgPIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCCwoJX2VuZF90aW1lQg0KC19lcnJvcl9pbmZvItkCCglUYXNrR3JvdXASEQoJdGFza19uYW1lGAEgASgJEhgKEGVudmlyb25tZW50X25hbWUYAiABKAkSEgoKdG90YWxfcnVucxgDIAEoAxIzCg9sYXRlc3RfcnVuX3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjIKD3JlY2VudF9zdGF0dXNlcxgFIAMoDjIZLmZseXRlaWRsMi53b3JrZmxvdy5QaGFzZRIcChRhdmVyYWdlX2ZhaWx1cmVfcmF0ZRgGIAEoARIzChBhdmVyYWdlX2R1cmF0aW9uGAcgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjgKFGxhdGVzdF9maW5pc2hlZF90aW1lGAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIVCg1zaG91bGRfZGVsZXRlGAkgASgIKssBCgVQaGFzZRIVChFQSEFTRV9VTlNQRUNJRklFRBAAEhAKDFBIQVNFX1FVRVVFRBABEh8KG1BIQVNFX1dBSVRJTkdfRk9SX1JFU09VUkNFUxACEhYKElBIQVNFX0lOSVRJQUxJWklORxADEhEKDVBIQVNFX1JVTk5JTkcQBBITCg9QSEFTRV9TVUNDRUVERUQQBRIQCgxQSEFTRV9GQUlMRUQQBhIRCg1QSEFTRV9BQk9SVEVEEAcSEwoPUEhBU0VfVElNRURfT1VUEAgqcQoKQWN0aW9uVHlwZRIbChdBQ1RJT05fVFlQRV9VTlNQRUNJRklFRBAAEhQKEEFDVElPTl9UWVBFX1RBU0sQARIVChFBQ1RJT05fVFlQRV9UUkFDRRACEhkKFUFDVElPTl9UWVBFX0NPTkRJVElPThADQs8BChZjb20uZmx5dGVpZGwyLndvcmtmbG93QhJSdW5EZWZpbml0aW9uUHJvdG9IAlABWjZnaXRodWIuY29tL2ZseXRlb3JnL2ZseXRlL3YyL2dlbi9nby9mbHl0ZWlkbDIvd29ya2Zsb3eiAgNGV1iqAhJGbHl0ZWlkbDIuV29ya2Zsb3fKAhJGbHl0ZWlkbDJcV29ya2Zsb3fiAh5GbHl0ZWlkbDJcV29ya2Zsb3dcR1BCTWV0YWRhdGHqAhNGbHl0ZWlkbDI6OldvcmtmbG93YgZwcm90bzM", [file_buf_validate_validate, file_flyteidl2_common_identifier, file_flyteidl2_common_identity, file_flyteidl2_core_catalog, file_flyteidl2_core_execution, file_flyteidl2_task_common, file_flyteidl2_task_run, file_flyteidl2_task_task_definition, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * @generated from message flyteidl2.workflow.Run
 */
export type Run = Message<"flyteidl2.workflow.Run"> & {
  /**
   * Lightweight information about the root action.
   *
   * @generated from field: flyteidl2.workflow.Action action = 1;
   */
  action?: Action;
};

/**
 * Describes the message flyteidl2.workflow.Run.
 * Use `create(RunSchema)` to create a new message.
 */
export const RunSchema: GenMessage<Run> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 0);

/**
 * @generated from message flyteidl2.workflow.RunDetails
 */
export type RunDetails = Message<"flyteidl2.workflow.RunDetails"> & {
  /**
   * Run spec.
   *
   * @generated from field: flyteidl2.task.RunSpec run_spec = 1;
   */
  runSpec?: RunSpec;

  /**
   * Detailed information about the root action.
   *
   * @generated from field: flyteidl2.workflow.ActionDetails action = 2;
   */
  action?: ActionDetails;
};

/**
 * Describes the message flyteidl2.workflow.RunDetails.
 * Use `create(RunDetailsSchema)` to create a new message.
 */
export const RunDetailsSchema: GenMessage<RunDetails> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 1);

/**
 * @generated from message flyteidl2.workflow.TaskActionMetadata
 */
export type TaskActionMetadata = Message<"flyteidl2.workflow.TaskActionMetadata"> & {
  /**
   * Id of the task this action is associated with.
   *
   * @generated from field: flyteidl2.task.TaskIdentifier id = 1;
   */
  id?: TaskIdentifier;

  /**
   * Extensible task type.
   *
   * @generated from field: string task_type = 2;
   */
  taskType: string;

  /**
   * The short name for this task.
   *
   * @generated from field: string short_name = 3;
   */
  shortName: string;
};

/**
 * Describes the message flyteidl2.workflow.TaskActionMetadata.
 * Use `create(TaskActionMetadataSchema)` to create a new message.
 */
export const TaskActionMetadataSchema: GenMessage<TaskActionMetadata> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 2);

/**
 * @generated from message flyteidl2.workflow.TraceActionMetadata
 */
export type TraceActionMetadata = Message<"flyteidl2.workflow.TraceActionMetadata"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message flyteidl2.workflow.TraceActionMetadata.
 * Use `create(TraceActionMetadataSchema)` to create a new message.
 */
export const TraceActionMetadataSchema: GenMessage<TraceActionMetadata> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 3);

/**
 * @generated from message flyteidl2.workflow.ConditionActionMetadata
 */
export type ConditionActionMetadata = Message<"flyteidl2.workflow.ConditionActionMetadata"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof flyteidl2.workflow.ConditionActionMetadata.scope
   */
  scope: {
    /**
     * RunId is the unique identifier for the run this action is associated with.
     *
     * @generated from field: string run_id = 2;
     */
    value: string;
    case: "runId";
  } | {
    /**
     * ActionId is the unique identifier for the action this action is associated with.
     *
     * @generated from field: string action_id = 3;
     */
    value: string;
    case: "actionId";
  } | {
    /**
     * Global indicates the condition is global and can be used across all runs and actions.
     *
     * @generated from field: bool global = 4;
     */
    value: boolean;
    case: "global";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.workflow.ConditionActionMetadata.
 * Use `create(ConditionActionMetadataSchema)` to create a new message.
 */
export const ConditionActionMetadataSchema: GenMessage<ConditionActionMetadata> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 4);

/**
 * Static, lightweight metadata about an action.
 *
 * @generated from message flyteidl2.workflow.ActionMetadata
 */
export type ActionMetadata = Message<"flyteidl2.workflow.ActionMetadata"> & {
  /**
   * Parent action if not the root.
   *
   * @generated from field: string parent = 3;
   */
  parent: string;

  /**
   * Group this action belongs to, if applicable.
   *
   * @generated from field: string group = 5;
   */
  group: string;

  /**
   * Identity that executed this run.
   *
   * @generated from field: flyteidl2.common.EnrichedIdentity executed_by = 6;
   */
  executedBy?: EnrichedIdentity;

  /**
   * @generated from oneof flyteidl2.workflow.ActionMetadata.spec
   */
  spec: {
    /**
     * Task action.
     *
     * @generated from field: flyteidl2.workflow.TaskActionMetadata task = 7;
     */
    value: TaskActionMetadata;
    case: "task";
  } | {
    /**
     * Trace action.
     *
     * @generated from field: flyteidl2.workflow.TraceActionMetadata trace = 8;
     */
    value: TraceActionMetadata;
    case: "trace";
  } | {
    /**
     * Condition action.
     *
     * @generated from field: flyteidl2.workflow.ConditionActionMetadata condition = 9;
     */
    value: ConditionActionMetadata;
    case: "condition";
  } | { case: undefined; value?: undefined };

  /**
   * Action type.
   *
   * @generated from field: flyteidl2.workflow.ActionType action_type = 10;
   */
  actionType: ActionType;

  /**
   * If this run was initiated by a trigger, this will store the trigger identifier.
   *
   * @generated from field: flyteidl2.common.TriggerIdentifier trigger_id = 11;
   */
  triggerId?: TriggerIdentifier;
};

/**
 * Describes the message flyteidl2.workflow.ActionMetadata.
 * Use `create(ActionMetadataSchema)` to create a new message.
 */
export const ActionMetadataSchema: GenMessage<ActionMetadata> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 5);

/**
 * Lightweight status of an action. For more detailed status see ActionDetails.
 *
 * @generated from message flyteidl2.workflow.ActionStatus
 */
export type ActionStatus = Message<"flyteidl2.workflow.ActionStatus"> & {
  /**
   * Last known phase.
   *
   * @generated from field: flyteidl2.workflow.Phase phase = 1;
   */
  phase: Phase;

  /**
   * Time the action started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * Time the action ended, if applicable.
   *
   * @generated from field: optional google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  /**
   * Number of action attempts.
   *
   * @generated from field: uint32 attempts = 4;
   */
  attempts: number;

  /**
   * cache status of the action's latest attempt
   *
   * @generated from field: flyteidl2.core.CatalogCacheStatus cache_status = 5;
   */
  cacheStatus: CatalogCacheStatus;
};

/**
 * Describes the message flyteidl2.workflow.ActionStatus.
 * Use `create(ActionStatusSchema)` to create a new message.
 */
export const ActionStatusSchema: GenMessage<ActionStatus> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 6);

/**
 * Lightweight representation of an action.
 *
 * @generated from message flyteidl2.workflow.Action
 */
export type Action = Message<"flyteidl2.workflow.Action"> & {
  /**
   * Id for this action.
   *
   * @generated from field: flyteidl2.common.ActionIdentifier id = 1;
   */
  id?: ActionIdentifier;

  /**
   * Metadata for this action.
   *
   * @generated from field: flyteidl2.workflow.ActionMetadata metadata = 2;
   */
  metadata?: ActionMetadata;

  /**
   * Last known status.
   *
   * @generated from field: flyteidl2.workflow.ActionStatus status = 3;
   */
  status?: ActionStatus;
};

/**
 * Describes the message flyteidl2.workflow.Action.
 * Use `create(ActionSchema)` to create a new message.
 */
export const ActionSchema: GenMessage<Action> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 7);

/**
 * EnrichedAction is a wrapper around Action that contains additional information
 *
 * @generated from message flyteidl2.workflow.EnrichedAction
 */
export type EnrichedAction = Message<"flyteidl2.workflow.EnrichedAction"> & {
  /**
   * The action itself.
   *
   * @generated from field: flyteidl2.workflow.Action action = 1;
   */
  action?: Action;

  /**
   * Whether this action meets specified filters of the request or not.
   * If an action that was previously meeting the filter but no longer does, will be sent with this flag set to false
   *
   * @generated from field: bool meets_filter = 2;
   */
  meetsFilter: boolean;

  /**
   * Child phase info for this action (Map of phase to counts of children in given phase)
   *
   * @generated from field: map<int32, int32> children_phase_counts = 3;
   */
  childrenPhaseCounts: { [key: number]: number };
};

/**
 * Describes the message flyteidl2.workflow.EnrichedAction.
 * Use `create(EnrichedActionSchema)` to create a new message.
 */
export const EnrichedActionSchema: GenMessage<EnrichedAction> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 8);

/**
 * ErrorInfo captures details of an error.
 *
 * @generated from message flyteidl2.workflow.ErrorInfo
 */
export type ErrorInfo = Message<"flyteidl2.workflow.ErrorInfo"> & {
  /**
   * Error message.
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * Error kind.
   *
   * @generated from field: flyteidl2.workflow.ErrorInfo.Kind kind = 2;
   */
  kind: ErrorInfo_Kind;
};

/**
 * Describes the message flyteidl2.workflow.ErrorInfo.
 * Use `create(ErrorInfoSchema)` to create a new message.
 */
export const ErrorInfoSchema: GenMessage<ErrorInfo> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 9);

/**
 * @generated from enum flyteidl2.workflow.ErrorInfo.Kind
 */
export enum ErrorInfo_Kind {
  /**
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: KIND_USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: KIND_SYSTEM = 2;
   */
  SYSTEM = 2,
}

/**
 * Describes the enum flyteidl2.workflow.ErrorInfo.Kind.
 */
export const ErrorInfo_KindSchema: GenEnum<ErrorInfo_Kind> = /*@__PURE__*/
  enumDesc(file_flyteidl2_workflow_run_definition, 9, 0);

/**
 * AbortInfo captures details of an aborted run.
 *
 * @generated from message flyteidl2.workflow.AbortInfo
 */
export type AbortInfo = Message<"flyteidl2.workflow.AbortInfo"> & {
  /**
   * Reason provided for the abort.
   *
   * @generated from field: string reason = 1;
   */
  reason: string;

  /**
   * Identity that aborted the run.
   *
   * @generated from field: flyteidl2.common.EnrichedIdentity aborted_by = 2;
   */
  abortedBy?: EnrichedIdentity;
};

/**
 * Describes the message flyteidl2.workflow.AbortInfo.
 * Use `create(AbortInfoSchema)` to create a new message.
 */
export const AbortInfoSchema: GenMessage<AbortInfo> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 10);

/**
 * ActionDetails is the full details of an action.
 *
 * @generated from message flyteidl2.workflow.ActionDetails
 */
export type ActionDetails = Message<"flyteidl2.workflow.ActionDetails"> & {
  /**
   * Id for this action.
   *
   * @generated from field: flyteidl2.common.ActionIdentifier id = 1;
   */
  id?: ActionIdentifier;

  /**
   * Metadata for this action.
   *
   * @generated from field: flyteidl2.workflow.ActionMetadata metadata = 2;
   */
  metadata?: ActionMetadata;

  /**
   * Last known status.
   *
   * @generated from field: flyteidl2.workflow.ActionStatus status = 3;
   */
  status?: ActionStatus;

  /**
   * @generated from oneof flyteidl2.workflow.ActionDetails.result
   */
  result: {
    /**
     * Error info for the action, if failed.
     *
     * @generated from field: flyteidl2.workflow.ErrorInfo error_info = 4;
     */
    value: ErrorInfo;
    case: "errorInfo";
  } | {
    /**
     * Abort info for the action, if aborted.
     *
     * @generated from field: flyteidl2.workflow.AbortInfo abort_info = 5;
     */
    value: AbortInfo;
    case: "abortInfo";
  } | { case: undefined; value?: undefined };

  /**
   * Fully resolved spec of the action. Merges user submitted task spec with platform defaults.
   *
   * @generated from oneof flyteidl2.workflow.ActionDetails.spec
   */
  spec: {
    /**
     * @generated from field: flyteidl2.task.TaskSpec task = 6;
     */
    value: TaskSpec;
    case: "task";
  } | {
    /**
     * @generated from field: flyteidl2.task.TraceSpec trace = 8;
     */
    value: TraceSpec;
    case: "trace";
  } | { case: undefined; value?: undefined };

  /**
   * List of action attempts.
   *
   * @generated from field: repeated flyteidl2.workflow.ActionAttempt attempts = 7;
   */
  attempts: ActionAttempt[];
};

/**
 * Describes the message flyteidl2.workflow.ActionDetails.
 * Use `create(ActionDetailsSchema)` to create a new message.
 */
export const ActionDetailsSchema: GenMessage<ActionDetails> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 11);

/**
 * ActionAttempt is a single attempt of an action.
 *
 * @generated from message flyteidl2.workflow.ActionAttempt
 */
export type ActionAttempt = Message<"flyteidl2.workflow.ActionAttempt"> & {
  /**
   * Last known phase.
   *
   * @generated from field: flyteidl2.workflow.Phase phase = 1;
   */
  phase: Phase;

  /**
   * Time the attempt started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * Time the attempt ended, if applicable.
   *
   * @generated from field: optional google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  /**
   * Error info for the attempt, if failed.
   *
   * @generated from field: optional flyteidl2.workflow.ErrorInfo error_info = 4;
   */
  errorInfo?: ErrorInfo;

  /**
   * The attempt number, starting with 1.
   *
   * @generated from field: uint32 attempt = 5;
   */
  attempt: number;

  /**
   * Log references.
   *
   * @generated from field: repeated flyteidl2.core.TaskLog log_info = 6;
   */
  logInfo: TaskLog[];

  /**
   * Output references.
   *
   * @generated from field: flyteidl2.task.OutputReferences outputs = 7;
   */
  outputs?: OutputReferences;

  /**
   * Indicates whether logs are available for tailing. It doesn't necessarily indicate the logs are present, but that
   * we have the info we need to look them up.
   *
   * @generated from field: bool logs_available = 8;
   */
  logsAvailable: boolean;

  /**
   * cache status of the action attempt
   *
   * @generated from field: flyteidl2.core.CatalogCacheStatus cache_status = 9;
   */
  cacheStatus: CatalogCacheStatus;

  /**
   * Cluster events like k8s events in a human-readable form.
   *
   * @generated from field: repeated flyteidl2.workflow.ClusterEvent cluster_events = 10;
   */
  clusterEvents: ClusterEvent[];

  /**
   * History of phase transitions.
   *
   * @generated from field: repeated flyteidl2.workflow.PhaseTransition phase_transitions = 11;
   */
  phaseTransitions: PhaseTransition[];

  /**
   * The cluster this attempt is assigned to.
   *
   * @generated from field: string cluster = 12;
   */
  cluster: string;

  /**
   * Contains corresponding k8s pods and containers information for this action attempt.
   *
   * @generated from field: flyteidl2.core.LogContext log_context = 13;
   */
  logContext?: LogContext;
};

/**
 * Describes the message flyteidl2.workflow.ActionAttempt.
 * Use `create(ActionAttemptSchema)` to create a new message.
 */
export const ActionAttemptSchema: GenMessage<ActionAttempt> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 12);

/**
 * @generated from message flyteidl2.workflow.ClusterEvent
 */
export type ClusterEvent = Message<"flyteidl2.workflow.ClusterEvent"> & {
  /**
   * occurred_at is the timestamp indicating the instant that this reason happened.
   *
   * @generated from field: google.protobuf.Timestamp occurred_at = 1;
   */
  occurredAt?: Timestamp;

  /**
   * message is the explanation for the most recent phase transition or status update.
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message flyteidl2.workflow.ClusterEvent.
 * Use `create(ClusterEventSchema)` to create a new message.
 */
export const ClusterEventSchema: GenMessage<ClusterEvent> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 13);

/**
 * @generated from message flyteidl2.workflow.PhaseTransition
 */
export type PhaseTransition = Message<"flyteidl2.workflow.PhaseTransition"> & {
  /**
   * The phase.
   *
   * @generated from field: flyteidl2.workflow.Phase phase = 1;
   */
  phase: Phase;

  /**
   * Time this phase started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * Time this phase ended, if applicable. For terminal phases, start time will equal end time.
   *
   * @generated from field: optional google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;
};

/**
 * Describes the message flyteidl2.workflow.PhaseTransition.
 * Use `create(PhaseTransitionSchema)` to create a new message.
 */
export const PhaseTransitionSchema: GenMessage<PhaseTransition> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 14);

/**
 * Event payload for an action
 *
 * @generated from message flyteidl2.workflow.ActionEvent
 */
export type ActionEvent = Message<"flyteidl2.workflow.ActionEvent"> & {
  /**
   * The action id.
   *
   * @generated from field: flyteidl2.common.ActionIdentifier id = 1;
   */
  id?: ActionIdentifier;

  /**
   * The attempt number.
   *
   * @generated from field: uint32 attempt = 2;
   */
  attempt: number;

  /**
   * The phase for this attempt.
   *
   * @generated from field: flyteidl2.workflow.Phase phase = 3;
   */
  phase: Phase;

  /**
   * The version of this attempt and phase.
   *
   * @generated from field: uint32 version = 4;
   */
  version: number;

  /**
   * Time the attempt started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 5 [deprecated = true];
   * @deprecated
   */
  startTime?: Timestamp;

  /**
   * Timestamp when the event occurred, as recorded by the underlying platform (e.g. Kubernetes).
   *
   * @generated from field: google.protobuf.Timestamp updated_time = 6;
   */
  updatedTime?: Timestamp;

  /**
   * Time the attempt ended, if applicable.
   *
   * @generated from field: optional google.protobuf.Timestamp end_time = 7 [deprecated = true];
   * @deprecated
   */
  endTime?: Timestamp;

  /**
   * Error info for the attempt, if failed.
   *
   * @generated from field: optional flyteidl2.workflow.ErrorInfo error_info = 8;
   */
  errorInfo?: ErrorInfo;

  /**
   * Log references.
   *
   * @generated from field: repeated flyteidl2.core.TaskLog log_info = 9;
   */
  logInfo: TaskLog[];

  /**
   * Metadata to associate containers with logs.
   *
   * @generated from field: flyteidl2.core.LogContext log_context = 10;
   */
  logContext?: LogContext;

  /**
   * The cluster this attempt is running on.
   *
   * @generated from field: string cluster = 11;
   */
  cluster: string;

  /**
   * Output references.
   *
   * @generated from field: flyteidl2.task.OutputReferences outputs = 12;
   */
  outputs?: OutputReferences;

  /**
   * cache status of the action attempt
   *
   * @generated from field: flyteidl2.core.CatalogCacheStatus cache_status = 13;
   */
  cacheStatus: CatalogCacheStatus;

  /**
   * Cluster events like k8s events in a human-readable form.
   *
   * @generated from field: repeated flyteidl2.workflow.ClusterEvent cluster_events = 14;
   */
  clusterEvents: ClusterEvent[];

  /**
   * Timestamp when the event was observed and reported by the executor
   *
   * @generated from field: google.protobuf.Timestamp reported_time = 15;
   */
  reportedTime?: Timestamp;
};

/**
 * Describes the message flyteidl2.workflow.ActionEvent.
 * Use `create(ActionEventSchema)` to create a new message.
 */
export const ActionEventSchema: GenMessage<ActionEvent> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 15);

/**
 * TaskGroup represents a group of runs for a specific task.
 *
 * @generated from message flyteidl2.workflow.TaskGroup
 */
export type TaskGroup = Message<"flyteidl2.workflow.TaskGroup"> & {
  /**
   * Task name.
   *
   * @generated from field: string task_name = 1;
   */
  taskName: string;

  /**
   * Environment name.
   *
   * @generated from field: string environment_name = 2;
   */
  environmentName: string;

  /**
   * Total number of runs for this task.
   *
   * @generated from field: int64 total_runs = 3;
   */
  totalRuns: bigint;

  /**
   * Timestamp of the most recent run.
   *
   * @generated from field: google.protobuf.Timestamp latest_run_time = 4;
   */
  latestRunTime?: Timestamp;

  /**
   * Recent run statuses, ordered from newest to oldest. Number of statuses determined by request.
   *
   * @generated from field: repeated flyteidl2.workflow.Phase recent_statuses = 5;
   */
  recentStatuses: Phase[];

  /**
   * Average failure rate of runs in this group (0.0 to 1.0).
   * Computed as number of root actions with phase FAILED divided by total root actions.
   *
   * @generated from field: double average_failure_rate = 6;
   */
  averageFailureRate: number;

  /**
   * Average duration of runs in this group.
   *
   * @generated from field: google.protobuf.Duration average_duration = 7;
   */
  averageDuration?: Duration;

  /**
   * Timestamp of the most recent finished run (terminal phase).
   *
   * @generated from field: google.protobuf.Timestamp latest_finished_time = 8;
   */
  latestFinishedTime?: Timestamp;

  /**
   * @generated from field: bool should_delete = 9;
   */
  shouldDelete: boolean;
};

/**
 * Describes the message flyteidl2.workflow.TaskGroup.
 * Use `create(TaskGroupSchema)` to create a new message.
 */
export const TaskGroupSchema: GenMessage<TaskGroup> = /*@__PURE__*/
  messageDesc(file_flyteidl2_workflow_run_definition, 16);

/**
 * TODO: define phase transitions
 *
 * @generated from enum flyteidl2.workflow.Phase
 */
export enum Phase {
  /**
   * @generated from enum value: PHASE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PHASE_QUEUED = 1;
   */
  QUEUED = 1,

  /**
   * @generated from enum value: PHASE_WAITING_FOR_RESOURCES = 2;
   */
  WAITING_FOR_RESOURCES = 2,

  /**
   * @generated from enum value: PHASE_INITIALIZING = 3;
   */
  INITIALIZING = 3,

  /**
   * @generated from enum value: PHASE_RUNNING = 4;
   */
  RUNNING = 4,

  /**
   * @generated from enum value: PHASE_SUCCEEDED = 5;
   */
  SUCCEEDED = 5,

  /**
   * @generated from enum value: PHASE_FAILED = 6;
   */
  FAILED = 6,

  /**
   * @generated from enum value: PHASE_ABORTED = 7;
   */
  ABORTED = 7,

  /**
   * @generated from enum value: PHASE_TIMED_OUT = 8;
   */
  TIMED_OUT = 8,
}

/**
 * Describes the enum flyteidl2.workflow.Phase.
 */
export const PhaseSchema: GenEnum<Phase> = /*@__PURE__*/
  enumDesc(file_flyteidl2_workflow_run_definition, 0);

/**
 * @generated from enum flyteidl2.workflow.ActionType
 */
export enum ActionType {
  /**
   * @generated from enum value: ACTION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACTION_TYPE_TASK = 1;
   */
  TASK = 1,

  /**
   * @generated from enum value: ACTION_TYPE_TRACE = 2;
   */
  TRACE = 2,

  /**
   * @generated from enum value: ACTION_TYPE_CONDITION = 3;
   */
  CONDITION = 3,
}

/**
 * Describes the enum flyteidl2.workflow.ActionType.
 */
export const ActionTypeSchema: GenEnum<ActionType> = /*@__PURE__*/
  enumDesc(file_flyteidl2_workflow_run_definition, 1);

