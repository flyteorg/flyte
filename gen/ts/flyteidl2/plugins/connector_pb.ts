// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file flyteidl2/plugins/connector.proto (package flyteidl2.plugins, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { TaskExecution_Phase, TaskLog } from "../core/execution_pb.ts";
import { file_flyteidl2_core_execution } from "../core/execution_pb.ts";
import type { TaskExecutionIdentifier } from "../core/identifier_pb.ts";
import { file_flyteidl2_core_identifier } from "../core/identifier_pb.ts";
import type { ExecutionMetricResult } from "../core/metrics_pb.ts";
import { file_flyteidl2_core_metrics } from "../core/metrics_pb.ts";
import type { Connection, Identity } from "../core/security_pb.ts";
import { file_flyteidl2_core_security } from "../core/security_pb.ts";
import type { TaskTemplate } from "../core/tasks_pb.ts";
import { file_flyteidl2_core_tasks } from "../core/tasks_pb.ts";
import type { Inputs, Outputs } from "../task/common_pb.ts";
import { file_flyteidl2_task_common } from "../task/common_pb.ts";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file flyteidl2/plugins/connector.proto.
 */
export const file_flyteidl2_plugins_connector: GenFile = /*@__PURE__*/
  fileDesc("CiFmbHl0ZWlkbDIvcGx1Z2lucy9jb25uZWN0b3IucHJvdG8SEWZseXRlaWRsMi5wbHVnaW5zIqYFChVUYXNrRXhlY3V0aW9uTWV0YWRhdGESQgoRdGFza19leGVjdXRpb25faWQYASABKAsyJy5mbHl0ZWlkbDIuY29yZS5UYXNrRXhlY3V0aW9uSWRlbnRpZmllchIRCgluYW1lc3BhY2UYAiABKAkSRAoGbGFiZWxzGAMgAygLMjQuZmx5dGVpZGwyLnBsdWdpbnMuVGFza0V4ZWN1dGlvbk1ldGFkYXRhLkxhYmVsc0VudHJ5Ek4KC2Fubm90YXRpb25zGAQgAygLMjkuZmx5dGVpZGwyLnBsdWdpbnMuVGFza0V4ZWN1dGlvbk1ldGFkYXRhLkFubm90YXRpb25zRW50cnkSGwoTazhzX3NlcnZpY2VfYWNjb3VudBgFIAEoCRJhChVlbnZpcm9ubWVudF92YXJpYWJsZXMYBiADKAsyQi5mbHl0ZWlkbDIucGx1Z2lucy5UYXNrRXhlY3V0aW9uTWV0YWRhdGEuRW52aXJvbm1lbnRWYXJpYWJsZXNFbnRyeRIUCgxtYXhfYXR0ZW1wdHMYByABKAUSFQoNaW50ZXJydXB0aWJsZRgIIAEoCBInCh9pbnRlcnJ1cHRpYmxlX2ZhaWx1cmVfdGhyZXNob2xkGAkgASgFEioKCGlkZW50aXR5GAsgASgLMhguZmx5dGVpZGwyLmNvcmUuSWRlbnRpdHkaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARoyChBBbm5vdGF0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaOwoZRW52aXJvbm1lbnRWYXJpYWJsZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIv0BChFDcmVhdGVUYXNrUmVxdWVzdBImCgZpbnB1dHMYASABKAsyFi5mbHl0ZWlkbDIudGFzay5JbnB1dHMSLgoIdGVtcGxhdGUYAiABKAsyHC5mbHl0ZWlkbDIuY29yZS5UYXNrVGVtcGxhdGUSFQoNb3V0cHV0X3ByZWZpeBgDIAEoCRJJChd0YXNrX2V4ZWN1dGlvbl9tZXRhZGF0YRgEIAEoCzIoLmZseXRlaWRsMi5wbHVnaW5zLlRhc2tFeGVjdXRpb25NZXRhZGF0YRIuCgpjb25uZWN0aW9uGAUgASgLMhouZmx5dGVpZGwyLmNvcmUuQ29ubmVjdGlvbiIrChJDcmVhdGVUYXNrUmVzcG9uc2USFQoNcmVzb3VyY2VfbWV0YRgBIAEoDCL3AQoTQ3JlYXRlUmVxdWVzdEhlYWRlchIuCgh0ZW1wbGF0ZRgBIAEoCzIcLmZseXRlaWRsMi5jb3JlLlRhc2tUZW1wbGF0ZRIVCg1vdXRwdXRfcHJlZml4GAIgASgJEkkKF3Rhc2tfZXhlY3V0aW9uX21ldGFkYXRhGAMgASgLMiguZmx5dGVpZGwyLnBsdWdpbnMuVGFza0V4ZWN1dGlvbk1ldGFkYXRhEh4KFm1heF9kYXRhc2V0X3NpemVfYnl0ZXMYBCABKAMSLgoKY29ubmVjdGlvbhgFIAEoCzIaLmZseXRlaWRsMi5jb3JlLkNvbm5lY3Rpb24ipgEKDkdldFRhc2tSZXF1ZXN0EhUKDXJlc291cmNlX21ldGEYAiABKAwSNgoNdGFza19jYXRlZ29yeRgDIAEoCzIfLmZseXRlaWRsMi5wbHVnaW5zLlRhc2tDYXRlZ29yeRIVCg1vdXRwdXRfcHJlZml4GAQgASgJEi4KCmNvbm5lY3Rpb24YBSABKAsyGi5mbHl0ZWlkbDIuY29yZS5Db25uZWN0aW9uIkAKD0dldFRhc2tSZXNwb25zZRItCghyZXNvdXJjZRgBIAEoCzIbLmZseXRlaWRsMi5wbHVnaW5zLlJlc291cmNlItMBCghSZXNvdXJjZRIoCgdvdXRwdXRzGAIgASgLMhcuZmx5dGVpZGwyLnRhc2suT3V0cHV0cxIPCgdtZXNzYWdlGAMgASgJEioKCWxvZ19saW5rcxgEIAMoCzIXLmZseXRlaWRsMi5jb3JlLlRhc2tMb2cSMgoFcGhhc2UYBSABKA4yIy5mbHl0ZWlkbDIuY29yZS5UYXNrRXhlY3V0aW9uLlBoYXNlEiwKC2N1c3RvbV9pbmZvGAYgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdCKSAQoRRGVsZXRlVGFza1JlcXVlc3QSFQoNcmVzb3VyY2VfbWV0YRgCIAEoDBI2Cg10YXNrX2NhdGVnb3J5GAMgASgLMh8uZmx5dGVpZGwyLnBsdWdpbnMuVGFza0NhdGVnb3J5Ei4KCmNvbm5lY3Rpb24YBSABKAsyGi5mbHl0ZWlkbDIuY29yZS5Db25uZWN0aW9uIhQKEkRlbGV0ZVRhc2tSZXNwb25zZSJdCglDb25uZWN0b3ISDAoEbmFtZRgBIAEoCRJCChlzdXBwb3J0ZWRfdGFza19jYXRlZ29yaWVzGAQgAygLMh8uZmx5dGVpZGwyLnBsdWdpbnMuVGFza0NhdGVnb3J5Ii0KDFRhc2tDYXRlZ29yeRIMCgRuYW1lGAEgASgJEg8KB3ZlcnNpb24YAiABKAUiIwoTR2V0Q29ubmVjdG9yUmVxdWVzdBIMCgRuYW1lGAEgASgJIkcKFEdldENvbm5lY3RvclJlc3BvbnNlEi8KCWNvbm5lY3RvchgBIAEoCzIcLmZseXRlaWRsMi5wbHVnaW5zLkNvbm5lY3RvciIXChVMaXN0Q29ubmVjdG9yc1JlcXVlc3QiSgoWTGlzdENvbm5lY3RvcnNSZXNwb25zZRIwCgpjb25uZWN0b3JzGAEgAygLMhwuZmx5dGVpZGwyLnBsdWdpbnMuQ29ubmVjdG9yIv4BChVHZXRUYXNrTWV0cmljc1JlcXVlc3QSFQoNcmVzb3VyY2VfbWV0YRgCIAEoDBIPCgdxdWVyaWVzGAMgAygJEi4KCnN0YXJ0X3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiwKCGVuZF90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBInCgRzdGVwGAYgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjYKDXRhc2tfY2F0ZWdvcnkYByABKAsyHy5mbHl0ZWlkbDIucGx1Z2lucy5UYXNrQ2F0ZWdvcnkiUAoWR2V0VGFza01ldHJpY3NSZXNwb25zZRI2CgdyZXN1bHRzGAEgAygLMiUuZmx5dGVpZGwyLmNvcmUuRXhlY3V0aW9uTWV0cmljUmVzdWx0IoEBChJHZXRUYXNrTG9nc1JlcXVlc3QSFQoNcmVzb3VyY2VfbWV0YRgCIAEoDBINCgVsaW5lcxgDIAEoBBINCgV0b2tlbhgEIAEoCRI2Cg10YXNrX2NhdGVnb3J5GAUgASgLMh8uZmx5dGVpZGwyLnBsdWdpbnMuVGFza0NhdGVnb3J5IioKGUdldFRhc2tMb2dzUmVzcG9uc2VIZWFkZXISDQoFdG9rZW4YASABKAkiKgoXR2V0VGFza0xvZ3NSZXNwb25zZUJvZHkSDwoHcmVzdWx0cxgBIAMoCSKZAQoTR2V0VGFza0xvZ3NSZXNwb25zZRI+CgZoZWFkZXIYASABKAsyLC5mbHl0ZWlkbDIucGx1Z2lucy5HZXRUYXNrTG9nc1Jlc3BvbnNlSGVhZGVySAASOgoEYm9keRgCIAEoCzIqLmZseXRlaWRsMi5wbHVnaW5zLkdldFRhc2tMb2dzUmVzcG9uc2VCb2R5SABCBgoEcGFydELFAQoVY29tLmZseXRlaWRsMi5wbHVnaW5zQg5Db25uZWN0b3JQcm90b0gCUAFaNWdpdGh1Yi5jb20vZmx5dGVvcmcvZmx5dGUvdjIvZ2VuL2dvL2ZseXRlaWRsMi9wbHVnaW5zogIDRlBYqgIRRmx5dGVpZGwyLlBsdWdpbnPKAhFGbHl0ZWlkbDJcUGx1Z2luc+ICHUZseXRlaWRsMlxQbHVnaW5zXEdQQk1ldGFkYXRh6gISRmx5dGVpZGwyOjpQbHVnaW5zYgZwcm90bzM", [file_flyteidl2_core_execution, file_flyteidl2_core_identifier, file_flyteidl2_core_metrics, file_flyteidl2_core_security, file_flyteidl2_core_tasks, file_flyteidl2_task_common, file_google_protobuf_duration, file_google_protobuf_struct, file_google_protobuf_timestamp]);

/**
 * Represents a subset of runtime task execution metadata that are relevant to external plugins.
 *
 * ID of the task execution
 *
 * @generated from message flyteidl2.plugins.TaskExecutionMetadata
 */
export type TaskExecutionMetadata = Message<"flyteidl2.plugins.TaskExecutionMetadata"> & {
  /**
   * @generated from field: flyteidl2.core.TaskExecutionIdentifier task_execution_id = 1;
   */
  taskExecutionId?: TaskExecutionIdentifier;

  /**
   * k8s namespace where the task is executed in
   *
   * @generated from field: string namespace = 2;
   */
  namespace: string;

  /**
   * Labels attached to the task execution
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * Annotations attached to the task execution
   *
   * @generated from field: map<string, string> annotations = 4;
   */
  annotations: { [key: string]: string };

  /**
   * k8s service account associated with the task execution
   *
   * @generated from field: string k8s_service_account = 5;
   */
  k8sServiceAccount: string;

  /**
   * Environment variables attached to the task execution
   *
   * @generated from field: map<string, string> environment_variables = 6;
   */
  environmentVariables: { [key: string]: string };

  /**
   * Represents the maximum number of attempts allowed for a task.
   * If a task fails, it can be retried up to this maximum number of attempts.
   *
   * @generated from field: int32 max_attempts = 7;
   */
  maxAttempts: number;

  /**
   * Indicates whether the task execution can be interrupted.
   * If set to true, the task can be stopped before completion.
   *
   * @generated from field: bool interruptible = 8;
   */
  interruptible: boolean;

  /**
   * Specifies the threshold for failure count at which the interruptible property
   * will take effect. If the number of consecutive task failures exceeds this threshold,
   * interruptible behavior will be activated.
   *
   * @generated from field: int32 interruptible_failure_threshold = 9;
   */
  interruptibleFailureThreshold: number;

  /**
   * Identity of user running this task execution
   *
   * @generated from field: flyteidl2.core.Identity identity = 11;
   */
  identity?: Identity;
};

/**
 * Describes the message flyteidl2.plugins.TaskExecutionMetadata.
 * Use `create(TaskExecutionMetadataSchema)` to create a new message.
 */
export const TaskExecutionMetadataSchema: GenMessage<TaskExecutionMetadata> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 0);

/**
 * Represents a request structure to create task.
 *
 * @generated from message flyteidl2.plugins.CreateTaskRequest
 */
export type CreateTaskRequest = Message<"flyteidl2.plugins.CreateTaskRequest"> & {
  /**
   * The inputs required to start the execution. All required inputs must be
   * included in this map. If not required and not provided, defaults apply.
   * +optional
   *
   * @generated from field: flyteidl2.task.Inputs inputs = 1;
   */
  inputs?: Inputs;

  /**
   * Template of the task that encapsulates all the metadata of the task.
   *
   * @generated from field: flyteidl2.core.TaskTemplate template = 2;
   */
  template?: TaskTemplate;

  /**
   * Prefix for where task output data will be written. (e.g. s3://my-bucket/randomstring)
   *
   * @generated from field: string output_prefix = 3;
   */
  outputPrefix: string;

  /**
   * subset of runtime task execution metadata.
   *
   * @generated from field: flyteidl2.plugins.TaskExecutionMetadata task_execution_metadata = 4;
   */
  taskExecutionMetadata?: TaskExecutionMetadata;

  /**
   * Connection (secret and config) required by the connector.
   * Connector will use the secret and config in the taskTemplate if it's None.
   * +optional
   *
   * @generated from field: flyteidl2.core.Connection connection = 5;
   */
  connection?: Connection;
};

/**
 * Describes the message flyteidl2.plugins.CreateTaskRequest.
 * Use `create(CreateTaskRequestSchema)` to create a new message.
 */
export const CreateTaskRequestSchema: GenMessage<CreateTaskRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 1);

/**
 * Represents a create response structure.
 *
 * @generated from message flyteidl2.plugins.CreateTaskResponse
 */
export type CreateTaskResponse = Message<"flyteidl2.plugins.CreateTaskResponse"> & {
  /**
   * ResourceMeta is created by the connector. It could be a string (jobId) or a dict (more complex metadata).
   *
   * @generated from field: bytes resource_meta = 1;
   */
  resourceMeta: Uint8Array;
};

/**
 * Describes the message flyteidl2.plugins.CreateTaskResponse.
 * Use `create(CreateTaskResponseSchema)` to create a new message.
 */
export const CreateTaskResponseSchema: GenMessage<CreateTaskResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 2);

/**
 * @generated from message flyteidl2.plugins.CreateRequestHeader
 */
export type CreateRequestHeader = Message<"flyteidl2.plugins.CreateRequestHeader"> & {
  /**
   * Template of the task that encapsulates all the metadata of the task.
   *
   * @generated from field: flyteidl2.core.TaskTemplate template = 1;
   */
  template?: TaskTemplate;

  /**
   * Prefix for where task output data will be written. (e.g. s3://my-bucket/randomstring)
   *
   * @generated from field: string output_prefix = 2;
   */
  outputPrefix: string;

  /**
   * subset of runtime task execution metadata.
   *
   * @generated from field: flyteidl2.plugins.TaskExecutionMetadata task_execution_metadata = 3;
   */
  taskExecutionMetadata?: TaskExecutionMetadata;

  /**
   * MaxDatasetSizeBytes is the maximum size of the dataset that can be generated by the task.
   *
   * @generated from field: int64 max_dataset_size_bytes = 4;
   */
  maxDatasetSizeBytes: bigint;

  /**
   * Connection (secret and config) required by the connector.
   * Connector will use the secret and config in the taskTemplate if it's None.
   * +optional
   *
   * @generated from field: flyteidl2.core.Connection connection = 5;
   */
  connection?: Connection;
};

/**
 * Describes the message flyteidl2.plugins.CreateRequestHeader.
 * Use `create(CreateRequestHeaderSchema)` to create a new message.
 */
export const CreateRequestHeaderSchema: GenMessage<CreateRequestHeader> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 3);

/**
 * A message used to fetch a job resource from flyte connector server.
 *
 * @generated from message flyteidl2.plugins.GetTaskRequest
 */
export type GetTaskRequest = Message<"flyteidl2.plugins.GetTaskRequest"> & {
  /**
   * Metadata about the resource to be pass to the connector.
   *
   * @generated from field: bytes resource_meta = 2;
   */
  resourceMeta: Uint8Array;

  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: flyteidl2.plugins.TaskCategory task_category = 3;
   */
  taskCategory?: TaskCategory;

  /**
   * Prefix for where task output data will be written. (e.g. s3://my-bucket/randomstring)
   *
   * @generated from field: string output_prefix = 4;
   */
  outputPrefix: string;

  /**
   * Connection (secret and config) required by the connector.
   * Connector will use the secret and config in the taskTemplate if it's None.
   * +optional
   *
   * @generated from field: flyteidl2.core.Connection connection = 5;
   */
  connection?: Connection;
};

/**
 * Describes the message flyteidl2.plugins.GetTaskRequest.
 * Use `create(GetTaskRequestSchema)` to create a new message.
 */
export const GetTaskRequestSchema: GenMessage<GetTaskRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 4);

/**
 * Response to get an individual task resource.
 *
 * @generated from message flyteidl2.plugins.GetTaskResponse
 */
export type GetTaskResponse = Message<"flyteidl2.plugins.GetTaskResponse"> & {
  /**
   * @generated from field: flyteidl2.plugins.Resource resource = 1;
   */
  resource?: Resource;
};

/**
 * Describes the message flyteidl2.plugins.GetTaskResponse.
 * Use `create(GetTaskResponseSchema)` to create a new message.
 */
export const GetTaskResponseSchema: GenMessage<GetTaskResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 5);

/**
 * @generated from message flyteidl2.plugins.Resource
 */
export type Resource = Message<"flyteidl2.plugins.Resource"> & {
  /**
   * The outputs of the execution. It's typically used by sql task. connector service will create a
   * Structured dataset pointing to the query result table.
   * +optional
   *
   * @generated from field: flyteidl2.task.Outputs outputs = 2;
   */
  outputs?: Outputs;

  /**
   * A descriptive message for the current state. e.g. waiting for cluster.
   *
   * @generated from field: string message = 3;
   */
  message: string;

  /**
   * log information for the task execution.
   *
   * @generated from field: repeated flyteidl2.core.TaskLog log_links = 4;
   */
  logLinks: TaskLog[];

  /**
   * The phase of the execution is used to determine the phase of the plugin's execution.
   *
   * @generated from field: flyteidl2.core.TaskExecution.Phase phase = 5;
   */
  phase: TaskExecution_Phase;

  /**
   * Custom data specific to the connector.
   *
   * @generated from field: google.protobuf.Struct custom_info = 6;
   */
  customInfo?: JsonObject;
};

/**
 * Describes the message flyteidl2.plugins.Resource.
 * Use `create(ResourceSchema)` to create a new message.
 */
export const ResourceSchema: GenMessage<Resource> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 6);

/**
 * A message used to delete a task.
 *
 * @generated from message flyteidl2.plugins.DeleteTaskRequest
 */
export type DeleteTaskRequest = Message<"flyteidl2.plugins.DeleteTaskRequest"> & {
  /**
   * Metadata about the resource to be pass to the connector.
   *
   * @generated from field: bytes resource_meta = 2;
   */
  resourceMeta: Uint8Array;

  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: flyteidl2.plugins.TaskCategory task_category = 3;
   */
  taskCategory?: TaskCategory;

  /**
   * Connection (secret and config) required by the connector.
   * Connector will use the secret and config in the taskTemplate if it's None.
   * +optional
   *
   * @generated from field: flyteidl2.core.Connection connection = 5;
   */
  connection?: Connection;
};

/**
 * Describes the message flyteidl2.plugins.DeleteTaskRequest.
 * Use `create(DeleteTaskRequestSchema)` to create a new message.
 */
export const DeleteTaskRequestSchema: GenMessage<DeleteTaskRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 7);

/**
 * Response to delete a task.
 *
 * @generated from message flyteidl2.plugins.DeleteTaskResponse
 */
export type DeleteTaskResponse = Message<"flyteidl2.plugins.DeleteTaskResponse"> & {
};

/**
 * Describes the message flyteidl2.plugins.DeleteTaskResponse.
 * Use `create(DeleteTaskResponseSchema)` to create a new message.
 */
export const DeleteTaskResponseSchema: GenMessage<DeleteTaskResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 8);

/**
 * A message containing the connector metadata.
 *
 * @generated from message flyteidl2.plugins.Connector
 */
export type Connector = Message<"flyteidl2.plugins.Connector"> & {
  /**
   * Name is the developer-assigned name of the connector.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Supported_task_categories are the categories of the tasks that the connector can handle.
   *
   * @generated from field: repeated flyteidl2.plugins.TaskCategory supported_task_categories = 4;
   */
  supportedTaskCategories: TaskCategory[];
};

/**
 * Describes the message flyteidl2.plugins.Connector.
 * Use `create(ConnectorSchema)` to create a new message.
 */
export const ConnectorSchema: GenMessage<Connector> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 9);

/**
 * @generated from message flyteidl2.plugins.TaskCategory
 */
export type TaskCategory = Message<"flyteidl2.plugins.TaskCategory"> & {
  /**
   * The name of the task type.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The version of the task type.
   *
   * @generated from field: int32 version = 2;
   */
  version: number;
};

/**
 * Describes the message flyteidl2.plugins.TaskCategory.
 * Use `create(TaskCategorySchema)` to create a new message.
 */
export const TaskCategorySchema: GenMessage<TaskCategory> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 10);

/**
 * A request to get an connector.
 *
 * @generated from message flyteidl2.plugins.GetConnectorRequest
 */
export type GetConnectorRequest = Message<"flyteidl2.plugins.GetConnectorRequest"> & {
  /**
   * The name of the connector.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message flyteidl2.plugins.GetConnectorRequest.
 * Use `create(GetConnectorRequestSchema)` to create a new message.
 */
export const GetConnectorRequestSchema: GenMessage<GetConnectorRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 11);

/**
 * A response containing an connector.
 *
 * @generated from message flyteidl2.plugins.GetConnectorResponse
 */
export type GetConnectorResponse = Message<"flyteidl2.plugins.GetConnectorResponse"> & {
  /**
   * @generated from field: flyteidl2.plugins.Connector connector = 1;
   */
  connector?: Connector;
};

/**
 * Describes the message flyteidl2.plugins.GetConnectorResponse.
 * Use `create(GetConnectorResponseSchema)` to create a new message.
 */
export const GetConnectorResponseSchema: GenMessage<GetConnectorResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 12);

/**
 * A request to list all connectors.
 *
 * @generated from message flyteidl2.plugins.ListConnectorsRequest
 */
export type ListConnectorsRequest = Message<"flyteidl2.plugins.ListConnectorsRequest"> & {
};

/**
 * Describes the message flyteidl2.plugins.ListConnectorsRequest.
 * Use `create(ListConnectorsRequestSchema)` to create a new message.
 */
export const ListConnectorsRequestSchema: GenMessage<ListConnectorsRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 13);

/**
 * A response containing a list of connectors.
 *
 * @generated from message flyteidl2.plugins.ListConnectorsResponse
 */
export type ListConnectorsResponse = Message<"flyteidl2.plugins.ListConnectorsResponse"> & {
  /**
   * @generated from field: repeated flyteidl2.plugins.Connector connectors = 1;
   */
  connectors: Connector[];
};

/**
 * Describes the message flyteidl2.plugins.ListConnectorsResponse.
 * Use `create(ListConnectorsResponseSchema)` to create a new message.
 */
export const ListConnectorsResponseSchema: GenMessage<ListConnectorsResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 14);

/**
 * A request to get the metrics from a task execution.
 *
 * @generated from message flyteidl2.plugins.GetTaskMetricsRequest
 */
export type GetTaskMetricsRequest = Message<"flyteidl2.plugins.GetTaskMetricsRequest"> & {
  /**
   * Metadata is created by the connector. It could be a string (jobId) or a dict (more complex metadata).
   *
   * @generated from field: bytes resource_meta = 2;
   */
  resourceMeta: Uint8Array;

  /**
   * The metrics to query. If empty, will return a default set of metrics.
   * e.g. EXECUTION_METRIC_USED_CPU_AVG or EXECUTION_METRIC_USED_MEMORY_BYTES_AVG
   *
   * @generated from field: repeated string queries = 3;
   */
  queries: string[];

  /**
   * Start timestamp, inclusive.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * End timestamp, inclusive..
   *
   * @generated from field: google.protobuf.Timestamp end_time = 5;
   */
  endTime?: Timestamp;

  /**
   * Query resolution step width in duration format or float number of seconds.
   *
   * @generated from field: google.protobuf.Duration step = 6;
   */
  step?: Duration;

  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: flyteidl2.plugins.TaskCategory task_category = 7;
   */
  taskCategory?: TaskCategory;
};

/**
 * Describes the message flyteidl2.plugins.GetTaskMetricsRequest.
 * Use `create(GetTaskMetricsRequestSchema)` to create a new message.
 */
export const GetTaskMetricsRequestSchema: GenMessage<GetTaskMetricsRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 15);

/**
 * A response containing a list of metrics for a task execution.
 *
 * @generated from message flyteidl2.plugins.GetTaskMetricsResponse
 */
export type GetTaskMetricsResponse = Message<"flyteidl2.plugins.GetTaskMetricsResponse"> & {
  /**
   * The execution metric results.
   *
   * @generated from field: repeated flyteidl2.core.ExecutionMetricResult results = 1;
   */
  results: ExecutionMetricResult[];
};

/**
 * Describes the message flyteidl2.plugins.GetTaskMetricsResponse.
 * Use `create(GetTaskMetricsResponseSchema)` to create a new message.
 */
export const GetTaskMetricsResponseSchema: GenMessage<GetTaskMetricsResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 16);

/**
 * A request to get the log from a task execution.
 *
 * @generated from message flyteidl2.plugins.GetTaskLogsRequest
 */
export type GetTaskLogsRequest = Message<"flyteidl2.plugins.GetTaskLogsRequest"> & {
  /**
   * Metadata is created by the connector. It could be a string (jobId) or a dict (more complex metadata).
   *
   * @generated from field: bytes resource_meta = 2;
   */
  resourceMeta: Uint8Array;

  /**
   * Number of lines to return.
   *
   * @generated from field: uint64 lines = 3;
   */
  lines: bigint;

  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query. If there are no more results, this value will be empty.
   *
   * @generated from field: string token = 4;
   */
  token: string;

  /**
   * A predefined yet extensible Task type identifier.
   *
   * @generated from field: flyteidl2.plugins.TaskCategory task_category = 5;
   */
  taskCategory?: TaskCategory;
};

/**
 * Describes the message flyteidl2.plugins.GetTaskLogsRequest.
 * Use `create(GetTaskLogsRequestSchema)` to create a new message.
 */
export const GetTaskLogsRequestSchema: GenMessage<GetTaskLogsRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 17);

/**
 * @generated from message flyteidl2.plugins.GetTaskLogsResponseHeader
 */
export type GetTaskLogsResponseHeader = Message<"flyteidl2.plugins.GetTaskLogsResponseHeader"> & {
  /**
   * In the case of multiple pages of results, the server-provided token can be used to fetch the next page
   * in a query. If there are no more results, this value will be empty.
   *
   * @generated from field: string token = 1;
   */
  token: string;
};

/**
 * Describes the message flyteidl2.plugins.GetTaskLogsResponseHeader.
 * Use `create(GetTaskLogsResponseHeaderSchema)` to create a new message.
 */
export const GetTaskLogsResponseHeaderSchema: GenMessage<GetTaskLogsResponseHeader> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 18);

/**
 * @generated from message flyteidl2.plugins.GetTaskLogsResponseBody
 */
export type GetTaskLogsResponseBody = Message<"flyteidl2.plugins.GetTaskLogsResponseBody"> & {
  /**
   * The execution log results.
   *
   * @generated from field: repeated string results = 1;
   */
  results: string[];
};

/**
 * Describes the message flyteidl2.plugins.GetTaskLogsResponseBody.
 * Use `create(GetTaskLogsResponseBodySchema)` to create a new message.
 */
export const GetTaskLogsResponseBodySchema: GenMessage<GetTaskLogsResponseBody> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 19);

/**
 * A response containing the logs for a task execution.
 *
 * @generated from message flyteidl2.plugins.GetTaskLogsResponse
 */
export type GetTaskLogsResponse = Message<"flyteidl2.plugins.GetTaskLogsResponse"> & {
  /**
   * @generated from oneof flyteidl2.plugins.GetTaskLogsResponse.part
   */
  part: {
    /**
     * @generated from field: flyteidl2.plugins.GetTaskLogsResponseHeader header = 1;
     */
    value: GetTaskLogsResponseHeader;
    case: "header";
  } | {
    /**
     * @generated from field: flyteidl2.plugins.GetTaskLogsResponseBody body = 2;
     */
    value: GetTaskLogsResponseBody;
    case: "body";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.plugins.GetTaskLogsResponse.
 * Use `create(GetTaskLogsResponseSchema)` to create a new message.
 */
export const GetTaskLogsResponseSchema: GenMessage<GetTaskLogsResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_connector, 20);

