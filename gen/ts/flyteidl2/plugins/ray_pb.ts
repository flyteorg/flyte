// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file flyteidl2/plugins/ray.proto (package flyteidl2.plugins, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { K8sPod } from "../core/tasks_pb.ts";
import { file_flyteidl2_core_tasks } from "../core/tasks_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file flyteidl2/plugins/ray.proto.
 */
export const file_flyteidl2_plugins_ray: GenFile = /*@__PURE__*/
  fileDesc("ChtmbHl0ZWlkbDIvcGx1Z2lucy9yYXkucHJvdG8SEWZseXRlaWRsMi5wbHVnaW5zIrgBCgZSYXlKb2ISMgoLcmF5X2NsdXN0ZXIYASABKAsyHS5mbHl0ZWlkbDIucGx1Z2lucy5SYXlDbHVzdGVyEhcKC3J1bnRpbWVfZW52GAIgASgJQgIYARIjChtzaHV0ZG93bl9hZnRlcl9qb2JfZmluaXNoZXMYAyABKAgSIgoadHRsX3NlY29uZHNfYWZ0ZXJfZmluaXNoZWQYBCABKAUSGAoQcnVudGltZV9lbnZfeWFtbBgFIAEoCSKiAQoKUmF5Q2x1c3RlchI5Cg9oZWFkX2dyb3VwX3NwZWMYASABKAsyIC5mbHl0ZWlkbDIucGx1Z2lucy5IZWFkR3JvdXBTcGVjEj0KEXdvcmtlcl9ncm91cF9zcGVjGAIgAygLMiIuZmx5dGVpZGwyLnBsdWdpbnMuV29ya2VyR3JvdXBTcGVjEhoKEmVuYWJsZV9hdXRvc2NhbGluZxgDIAEoCCK/AQoNSGVhZEdyb3VwU3BlYxJOChByYXlfc3RhcnRfcGFyYW1zGAEgAygLMjQuZmx5dGVpZGwyLnBsdWdpbnMuSGVhZEdyb3VwU3BlYy5SYXlTdGFydFBhcmFtc0VudHJ5EicKB2s4c19wb2QYAiABKAsyFi5mbHl0ZWlkbDIuY29yZS5LOHNQb2QaNQoTUmF5U3RhcnRQYXJhbXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIpUCCg9Xb3JrZXJHcm91cFNwZWMSEgoKZ3JvdXBfbmFtZRgBIAEoCRIQCghyZXBsaWNhcxgCIAEoBRIUCgxtaW5fcmVwbGljYXMYAyABKAUSFAoMbWF4X3JlcGxpY2FzGAQgASgFElAKEHJheV9zdGFydF9wYXJhbXMYBSADKAsyNi5mbHl0ZWlkbDIucGx1Z2lucy5Xb3JrZXJHcm91cFNwZWMuUmF5U3RhcnRQYXJhbXNFbnRyeRInCgdrOHNfcG9kGAYgASgLMhYuZmx5dGVpZGwyLmNvcmUuSzhzUG9kGjUKE1JheVN0YXJ0UGFyYW1zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUK/AQoVY29tLmZseXRlaWRsMi5wbHVnaW5zQghSYXlQcm90b0gCUAFaNWdpdGh1Yi5jb20vZmx5dGVvcmcvZmx5dGUvdjIvZ2VuL2dvL2ZseXRlaWRsMi9wbHVnaW5zogIDRlBYqgIRRmx5dGVpZGwyLlBsdWdpbnPKAhFGbHl0ZWlkbDJcUGx1Z2luc+ICHUZseXRlaWRsMlxQbHVnaW5zXEdQQk1ldGFkYXRh6gISRmx5dGVpZGwyOjpQbHVnaW5zYgZwcm90bzM", [file_flyteidl2_core_tasks]);

/**
 * RayJobSpec defines the desired state of RayJob
 *
 * @generated from message flyteidl2.plugins.RayJob
 */
export type RayJob = Message<"flyteidl2.plugins.RayJob"> & {
  /**
   * RayClusterSpec is the cluster template to run the job
   *
   * @generated from field: flyteidl2.plugins.RayCluster ray_cluster = 1;
   */
  rayCluster?: RayCluster;

  /**
   * runtime_env is base64 encoded.
   * Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
   *
   * @generated from field: string runtime_env = 2 [deprecated = true];
   * @deprecated
   */
  runtimeEnv: string;

  /**
   * shutdown_after_job_finishes specifies whether the RayCluster should be deleted after the RayJob finishes.
   *
   * @generated from field: bool shutdown_after_job_finishes = 3;
   */
  shutdownAfterJobFinishes: boolean;

  /**
   * ttl_seconds_after_finished specifies the number of seconds after which the RayCluster will be deleted after the RayJob finishes.
   *
   * @generated from field: int32 ttl_seconds_after_finished = 4;
   */
  ttlSecondsAfterFinished: number;

  /**
   * RuntimeEnvYAML represents the runtime environment configuration
   * provided as a multi-line YAML string.
   *
   * @generated from field: string runtime_env_yaml = 5;
   */
  runtimeEnvYaml: string;
};

/**
 * Describes the message flyteidl2.plugins.RayJob.
 * Use `create(RayJobSchema)` to create a new message.
 */
export const RayJobSchema: GenMessage<RayJob> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_ray, 0);

/**
 * Define Ray cluster defines the desired state of RayCluster
 *
 * @generated from message flyteidl2.plugins.RayCluster
 */
export type RayCluster = Message<"flyteidl2.plugins.RayCluster"> & {
  /**
   * HeadGroupSpecs are the spec for the head pod
   *
   * @generated from field: flyteidl2.plugins.HeadGroupSpec head_group_spec = 1;
   */
  headGroupSpec?: HeadGroupSpec;

  /**
   * WorkerGroupSpecs are the specs for the worker pods
   *
   * @generated from field: repeated flyteidl2.plugins.WorkerGroupSpec worker_group_spec = 2;
   */
  workerGroupSpec: WorkerGroupSpec[];

  /**
   * Whether to enable autoscaling.
   *
   * @generated from field: bool enable_autoscaling = 3;
   */
  enableAutoscaling: boolean;
};

/**
 * Describes the message flyteidl2.plugins.RayCluster.
 * Use `create(RayClusterSchema)` to create a new message.
 */
export const RayClusterSchema: GenMessage<RayCluster> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_ray, 1);

/**
 * HeadGroupSpec are the spec for the head pod
 *
 * @generated from message flyteidl2.plugins.HeadGroupSpec
 */
export type HeadGroupSpec = Message<"flyteidl2.plugins.HeadGroupSpec"> & {
  /**
   * Optional. RayStartParams are the params of the start command: address, object-store-memory.
   * Refer to https://docs.ray.io/en/latest/ray-core/package-ref.html#ray-start
   *
   * @generated from field: map<string, string> ray_start_params = 1;
   */
  rayStartParams: { [key: string]: string };

  /**
   * Pod Spec for the ray head pod
   *
   * @generated from field: flyteidl2.core.K8sPod k8s_pod = 2;
   */
  k8sPod?: K8sPod;
};

/**
 * Describes the message flyteidl2.plugins.HeadGroupSpec.
 * Use `create(HeadGroupSpecSchema)` to create a new message.
 */
export const HeadGroupSpecSchema: GenMessage<HeadGroupSpec> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_ray, 2);

/**
 * WorkerGroupSpec are the specs for the worker pods
 *
 * @generated from message flyteidl2.plugins.WorkerGroupSpec
 */
export type WorkerGroupSpec = Message<"flyteidl2.plugins.WorkerGroupSpec"> & {
  /**
   * Required. RayCluster can have multiple worker groups, and it distinguishes them by name
   *
   * @generated from field: string group_name = 1;
   */
  groupName: string;

  /**
   * Required. Desired replicas of the worker group. Defaults to 1.
   *
   * @generated from field: int32 replicas = 2;
   */
  replicas: number;

  /**
   * Optional. Min replicas of the worker group. MinReplicas defaults to 1.
   *
   * @generated from field: int32 min_replicas = 3;
   */
  minReplicas: number;

  /**
   * Optional. Max replicas of the worker group. MaxReplicas defaults to maxInt32
   *
   * @generated from field: int32 max_replicas = 4;
   */
  maxReplicas: number;

  /**
   * Optional. RayStartParams are the params of the start command: address, object-store-memory.
   * Refer to https://docs.ray.io/en/latest/ray-core/package-ref.html#ray-start
   *
   * @generated from field: map<string, string> ray_start_params = 5;
   */
  rayStartParams: { [key: string]: string };

  /**
   * Pod Spec for ray worker pods
   *
   * @generated from field: flyteidl2.core.K8sPod k8s_pod = 6;
   */
  k8sPod?: K8sPod;
};

/**
 * Describes the message flyteidl2.plugins.WorkerGroupSpec.
 * Use `create(WorkerGroupSpecSchema)` to create a new message.
 */
export const WorkerGroupSpecSchema: GenMessage<WorkerGroupSpec> = /*@__PURE__*/
  messageDesc(file_flyteidl2_plugins_ray, 3);

