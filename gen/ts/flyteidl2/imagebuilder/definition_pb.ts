// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file flyteidl2/imagebuilder/definition.proto (package flyteidl2.imagebuilder, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb.ts";
import type { Secret } from "../core/security_pb.ts";
import { file_flyteidl2_core_security } from "../core/security_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file flyteidl2/imagebuilder/definition.proto.
 */
export const file_flyteidl2_imagebuilder_definition: GenFile = /*@__PURE__*/
  fileDesc("CidmbHl0ZWlkbDIvaW1hZ2VidWlsZGVyL2RlZmluaXRpb24ucHJvdG8SFmZseXRlaWRsMi5pbWFnZWJ1aWxkZXIiKAoPSW1hZ2VJZGVudGlmaWVyEhUKBG5hbWUYASABKAlCB7pIBHICEAEiSgoFSW1hZ2USMwoCaWQYASABKAsyJy5mbHl0ZWlkbDIuaW1hZ2VidWlsZGVyLkltYWdlSWRlbnRpZmllchIMCgRmcWluGAIgASgJIk4KC0FwdFBhY2thZ2VzEhAKCHBhY2thZ2VzGAEgAygJEi0KDXNlY3JldF9tb3VudHMYAiADKAsyFi5mbHl0ZWlkbDIuY29yZS5TZWNyZXQiWgoKUGlwT3B0aW9ucxIRCglpbmRleF91cmwYAiABKAkSGAoQZXh0cmFfaW5kZXhfdXJscxgDIAMoCRILCgNwcmUYBCABKAgSEgoKZXh0cmFfYXJncxgFIAEoCSKDAQoLUGlwUGFja2FnZXMSEAoIcGFja2FnZXMYASADKAkSMwoHb3B0aW9ucxgCIAEoCzIiLmZseXRlaWRsMi5pbWFnZWJ1aWxkZXIuUGlwT3B0aW9ucxItCg1zZWNyZXRfbW91bnRzGAMgAygLMhYuZmx5dGVpZGwyLmNvcmUuU2VjcmV0IoABCgxSZXF1aXJlbWVudHMSDAoEZmlsZRgBIAEoCRIzCgdvcHRpb25zGAIgASgLMiIuZmx5dGVpZGwyLmltYWdlYnVpbGRlci5QaXBPcHRpb25zEi0KDXNlY3JldF9tb3VudHMYAyADKAsyFi5mbHl0ZWlkbDIuY29yZS5TZWNyZXQifwoMUHl0aG9uV2hlZWxzEgsKA2RpchgBIAEoCRIzCgdvcHRpb25zGAIgASgLMiIuZmx5dGVpZGwyLmltYWdlYnVpbGRlci5QaXBPcHRpb25zEi0KDXNlY3JldF9tb3VudHMYAyADKAsyFi5mbHl0ZWlkbDIuY29yZS5TZWNyZXQikgEKCVVWUHJvamVjdBIRCglweXByb2plY3QYASABKAkSDgoGdXZsb2NrGAIgASgJEjMKB29wdGlvbnMYAyABKAsyIi5mbHl0ZWlkbDIuaW1hZ2VidWlsZGVyLlBpcE9wdGlvbnMSLQoNc2VjcmV0X21vdW50cxgEIAMoCzIWLmZseXRlaWRsMi5jb3JlLlNlY3JldCJGCghDb21tYW5kcxILCgNjbWQYAiADKAkSLQoNc2VjcmV0X21vdW50cxgDIAMoCzIWLmZseXRlaWRsMi5jb3JlLlNlY3JldCIaCgdXb3JrRGlyEg8KB3dvcmtkaXIYASABKAkiJgoKQ29weUNvbmZpZxILCgNzcmMYASABKAkSCwoDZHN0GAIgASgJIoABCgNFbnYSRAoNZW52X3ZhcmlhYmxlcxgBIAMoCzItLmZseXRlaWRsMi5pbWFnZWJ1aWxkZXIuRW52LkVudlZhcmlhYmxlc0VudHJ5GjMKEUVudlZhcmlhYmxlc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiegoNUG9ldHJ5UHJvamVjdBIRCglweXByb2plY3QYASABKAkSEwoLcG9ldHJ5X2xvY2sYAiABKAkSEgoKZXh0cmFfYXJncxgDIAEoCRItCg1zZWNyZXRfbW91bnRzGAQgAygLMhYuZmx5dGVpZGwyLmNvcmUuU2VjcmV0ItIECgVMYXllchI7CgxhcHRfcGFja2FnZXMYASABKAsyIy5mbHl0ZWlkbDIuaW1hZ2VidWlsZGVyLkFwdFBhY2thZ2VzSAASOwoMcGlwX3BhY2thZ2VzGAIgASgLMiMuZmx5dGVpZGwyLmltYWdlYnVpbGRlci5QaXBQYWNrYWdlc0gAEjQKCGNvbW1hbmRzGAMgASgLMiAuZmx5dGVpZGwyLmltYWdlYnVpbGRlci5Db21tYW5kc0gAEjwKDHJlcXVpcmVtZW50cxgEIAEoCzIkLmZseXRlaWRsMi5pbWFnZWJ1aWxkZXIuUmVxdWlyZW1lbnRzSAASPQoNcHl0aG9uX3doZWVscxgFIAEoCzIkLmZseXRlaWRsMi5pbWFnZWJ1aWxkZXIuUHl0aG9uV2hlZWxzSAASMgoHd29ya2RpchgGIAEoCzIfLmZseXRlaWRsMi5pbWFnZWJ1aWxkZXIuV29ya0RpckgAEjkKC2NvcHlfY29uZmlnGAcgASgLMiIuZmx5dGVpZGwyLmltYWdlYnVpbGRlci5Db3B5Q29uZmlnSAASNwoKdXZfcHJvamVjdBgIIAEoCzIhLmZseXRlaWRsMi5pbWFnZWJ1aWxkZXIuVVZQcm9qZWN0SAASKgoDZW52GAkgASgLMhsuZmx5dGVpZGwyLmltYWdlYnVpbGRlci5FbnZIABI/Cg5wb2V0cnlfcHJvamVjdBgKIAEoCzIlLmZseXRlaWRsMi5pbWFnZWJ1aWxkZXIuUG9ldHJ5UHJvamVjdEgAQgcKBWxheWVyIngKCUltYWdlU3BlYxISCgpiYXNlX2ltYWdlGAEgASgJEhYKDnB5dGhvbl92ZXJzaW9uGAIgASgJEi0KBmxheWVycxgDIAMoCzIdLmZseXRlaWRsMi5pbWFnZWJ1aWxkZXIuTGF5ZXISEAoIcGxhdGZvcm0YBCADKAlC5AEKGmNvbS5mbHl0ZWlkbDIuaW1hZ2VidWlsZGVyQg9EZWZpbml0aW9uUHJvdG9IAlABWjpnaXRodWIuY29tL2ZseXRlb3JnL2ZseXRlL3YyL2dlbi9nby9mbHl0ZWlkbDIvaW1hZ2VidWlsZGVyogIDRklYqgIWRmx5dGVpZGwyLkltYWdlYnVpbGRlcsoCFkZseXRlaWRsMlxJbWFnZWJ1aWxkZXLiAiJGbHl0ZWlkbDJcSW1hZ2VidWlsZGVyXEdQQk1ldGFkYXRh6gIXRmx5dGVpZGwyOjpJbWFnZWJ1aWxkZXJiBnByb3RvMw", [file_buf_validate_validate, file_flyteidl2_core_security]);

/**
 * ImageIdentifier is how to identify an image
 *
 * @generated from message flyteidl2.imagebuilder.ImageIdentifier
 */
export type ImageIdentifier = Message<"flyteidl2.imagebuilder.ImageIdentifier"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message flyteidl2.imagebuilder.ImageIdentifier.
 * Use `create(ImageIdentifierSchema)` to create a new message.
 */
export const ImageIdentifierSchema: GenMessage<ImageIdentifier> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 0);

/**
 * Simple container to surface if image exists
 *
 * @generated from message flyteidl2.imagebuilder.Image
 */
export type Image = Message<"flyteidl2.imagebuilder.Image"> & {
  /**
   * @generated from field: flyteidl2.imagebuilder.ImageIdentifier id = 1;
   */
  id?: ImageIdentifier;

  /**
   * Fully qualified, pullable, image name
   *
   * @generated from field: string fqin = 2;
   */
  fqin: string;
};

/**
 * Describes the message flyteidl2.imagebuilder.Image.
 * Use `create(ImageSchema)` to create a new message.
 */
export const ImageSchema: GenMessage<Image> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 1);

/**
 * AptPackages defines a list of apt packages to install in the image.
 *
 * @generated from message flyteidl2.imagebuilder.AptPackages
 */
export type AptPackages = Message<"flyteidl2.imagebuilder.AptPackages"> & {
  /**
   * List of apt packages to install
   *
   * @generated from field: repeated string packages = 1;
   */
  packages: string[];

  /**
   * @generated from field: repeated flyteidl2.core.Secret secret_mounts = 2;
   */
  secretMounts: Secret[];
};

/**
 * Describes the message flyteidl2.imagebuilder.AptPackages.
 * Use `create(AptPackagesSchema)` to create a new message.
 */
export const AptPackagesSchema: GenMessage<AptPackages> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 2);

/**
 * PipOptions defines options for pip packages to install in the image.
 *
 * @generated from message flyteidl2.imagebuilder.PipOptions
 */
export type PipOptions = Message<"flyteidl2.imagebuilder.PipOptions"> & {
  /**
   * Optional index URL for pip packages
   *
   * @generated from field: string index_url = 2;
   */
  indexUrl: string;

  /**
   * Optional list of extra index URLs for pip packages
   *
   * @generated from field: repeated string extra_index_urls = 3;
   */
  extraIndexUrls: string[];

  /**
   * Optional pre-release flag for pip packages
   *
   * @generated from field: bool pre = 4;
   */
  pre: boolean;

  /**
   * Optional extra arguments for pip install command
   *
   * @generated from field: string extra_args = 5;
   */
  extraArgs: string;
};

/**
 * Describes the message flyteidl2.imagebuilder.PipOptions.
 * Use `create(PipOptionsSchema)` to create a new message.
 */
export const PipOptionsSchema: GenMessage<PipOptions> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 3);

/**
 * PipPackages defines a list of pip packages to install in the image.
 *
 * @generated from message flyteidl2.imagebuilder.PipPackages
 */
export type PipPackages = Message<"flyteidl2.imagebuilder.PipPackages"> & {
  /**
   * List of pip packages to install
   *
   * @generated from field: repeated string packages = 1;
   */
  packages: string[];

  /**
   * Options for pip packages.
   *
   * @generated from field: flyteidl2.imagebuilder.PipOptions options = 2;
   */
  options?: PipOptions;

  /**
   * @generated from field: repeated flyteidl2.core.Secret secret_mounts = 3;
   */
  secretMounts: Secret[];
};

/**
 * Describes the message flyteidl2.imagebuilder.PipPackages.
 * Use `create(PipPackagesSchema)` to create a new message.
 */
export const PipPackagesSchema: GenMessage<PipPackages> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 4);

/**
 * Requirements defines a python requirements file to use in the image.
 *
 * @generated from message flyteidl2.imagebuilder.Requirements
 */
export type Requirements = Message<"flyteidl2.imagebuilder.Requirements"> & {
  /**
   * The requirements file to use.
   *
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * Options for pip packages.
   *
   * @generated from field: flyteidl2.imagebuilder.PipOptions options = 2;
   */
  options?: PipOptions;

  /**
   * @generated from field: repeated flyteidl2.core.Secret secret_mounts = 3;
   */
  secretMounts: Secret[];
};

/**
 * Describes the message flyteidl2.imagebuilder.Requirements.
 * Use `create(RequirementsSchema)` to create a new message.
 */
export const RequirementsSchema: GenMessage<Requirements> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 5);

/**
 * @generated from message flyteidl2.imagebuilder.PythonWheels
 */
export type PythonWheels = Message<"flyteidl2.imagebuilder.PythonWheels"> & {
  /**
   * The directory containing Python wheel files.
   *
   * @generated from field: string dir = 1;
   */
  dir: string;

  /**
   * Options for pip packages.
   *
   * @generated from field: flyteidl2.imagebuilder.PipOptions options = 2;
   */
  options?: PipOptions;

  /**
   * @generated from field: repeated flyteidl2.core.Secret secret_mounts = 3;
   */
  secretMounts: Secret[];
};

/**
 * Describes the message flyteidl2.imagebuilder.PythonWheels.
 * Use `create(PythonWheelsSchema)` to create a new message.
 */
export const PythonWheelsSchema: GenMessage<PythonWheels> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 6);

/**
 * UVProject defines a UV project configuration, which includes
 * a pyproject.toml file and a uvlock file.
 *
 * @generated from message flyteidl2.imagebuilder.UVProject
 */
export type UVProject = Message<"flyteidl2.imagebuilder.UVProject"> & {
  /**
   * @generated from field: string pyproject = 1;
   */
  pyproject: string;

  /**
   * @generated from field: string uvlock = 2;
   */
  uvlock: string;

  /**
   * Options for pip packages.
   *
   * @generated from field: flyteidl2.imagebuilder.PipOptions options = 3;
   */
  options?: PipOptions;

  /**
   * @generated from field: repeated flyteidl2.core.Secret secret_mounts = 4;
   */
  secretMounts: Secret[];
};

/**
 * Describes the message flyteidl2.imagebuilder.UVProject.
 * Use `create(UVProjectSchema)` to create a new message.
 */
export const UVProjectSchema: GenMessage<UVProject> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 7);

/**
 * Commands defines a list of commands to run in the image.
 *
 * @generated from message flyteidl2.imagebuilder.Commands
 */
export type Commands = Message<"flyteidl2.imagebuilder.Commands"> & {
  /**
   * The command to run.
   *
   * @generated from field: repeated string cmd = 2;
   */
  cmd: string[];

  /**
   * @generated from field: repeated flyteidl2.core.Secret secret_mounts = 3;
   */
  secretMounts: Secret[];
};

/**
 * Describes the message flyteidl2.imagebuilder.Commands.
 * Use `create(CommandsSchema)` to create a new message.
 */
export const CommandsSchema: GenMessage<Commands> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 8);

/**
 * WorkDir defines the working directory to set in the image.
 *
 * @generated from message flyteidl2.imagebuilder.WorkDir
 */
export type WorkDir = Message<"flyteidl2.imagebuilder.WorkDir"> & {
  /**
   * The working directory to use.
   *
   * @generated from field: string workdir = 1;
   */
  workdir: string;
};

/**
 * Describes the message flyteidl2.imagebuilder.WorkDir.
 * Use `create(WorkDirSchema)` to create a new message.
 */
export const WorkDirSchema: GenMessage<WorkDir> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 9);

/**
 * CopyConfig defines a configuration for copying files/directories into the image.
 *
 * @generated from message flyteidl2.imagebuilder.CopyConfig
 */
export type CopyConfig = Message<"flyteidl2.imagebuilder.CopyConfig"> & {
  /**
   * The source directory to copy from.
   *
   * @generated from field: string src = 1;
   */
  src: string;

  /**
   * The destination directory to copy to.
   *
   * @generated from field: string dst = 2;
   */
  dst: string;
};

/**
 * Describes the message flyteidl2.imagebuilder.CopyConfig.
 * Use `create(CopyConfigSchema)` to create a new message.
 */
export const CopyConfigSchema: GenMessage<CopyConfig> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 10);

/**
 * Env defines environment to set in the image.
 *
 * @generated from message flyteidl2.imagebuilder.Env
 */
export type Env = Message<"flyteidl2.imagebuilder.Env"> & {
  /**
   * Environment variables to set in the image.
   *
   * @generated from field: map<string, string> env_variables = 1;
   */
  envVariables: { [key: string]: string };
};

/**
 * Describes the message flyteidl2.imagebuilder.Env.
 * Use `create(EnvSchema)` to create a new message.
 */
export const EnvSchema: GenMessage<Env> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 11);

/**
 * @generated from message flyteidl2.imagebuilder.PoetryProject
 */
export type PoetryProject = Message<"flyteidl2.imagebuilder.PoetryProject"> & {
  /**
   * @generated from field: string pyproject = 1;
   */
  pyproject: string;

  /**
   * @generated from field: string poetry_lock = 2;
   */
  poetryLock: string;

  /**
   * Optional extra arguments for poetry install command
   *
   * @generated from field: string extra_args = 3;
   */
  extraArgs: string;

  /**
   * @generated from field: repeated flyteidl2.core.Secret secret_mounts = 4;
   */
  secretMounts: Secret[];
};

/**
 * Describes the message flyteidl2.imagebuilder.PoetryProject.
 * Use `create(PoetryProjectSchema)` to create a new message.
 */
export const PoetryProjectSchema: GenMessage<PoetryProject> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 12);

/**
 * Layer defines a layer in the image, which can be one of several types.
 *
 * @generated from message flyteidl2.imagebuilder.Layer
 */
export type Layer = Message<"flyteidl2.imagebuilder.Layer"> & {
  /**
   * @generated from oneof flyteidl2.imagebuilder.Layer.layer
   */
  layer: {
    /**
     * Apt packages to install.
     *
     * @generated from field: flyteidl2.imagebuilder.AptPackages apt_packages = 1;
     */
    value: AptPackages;
    case: "aptPackages";
  } | {
    /**
     * Python packages to install.
     *
     * @generated from field: flyteidl2.imagebuilder.PipPackages pip_packages = 2;
     */
    value: PipPackages;
    case: "pipPackages";
  } | {
    /**
     * Custom command to run.
     *
     * @generated from field: flyteidl2.imagebuilder.Commands commands = 3;
     */
    value: Commands;
    case: "commands";
  } | {
    /**
     * Requirements file to use.
     *
     * @generated from field: flyteidl2.imagebuilder.Requirements requirements = 4;
     */
    value: Requirements;
    case: "requirements";
  } | {
    /**
     * Python wheel file to use.
     *
     * @generated from field: flyteidl2.imagebuilder.PythonWheels python_wheels = 5;
     */
    value: PythonWheels;
    case: "pythonWheels";
  } | {
    /**
     * Working directory to set.
     *
     * @generated from field: flyteidl2.imagebuilder.WorkDir workdir = 6;
     */
    value: WorkDir;
    case: "workdir";
  } | {
    /**
     * Copy files/directories into the image.
     *
     * @generated from field: flyteidl2.imagebuilder.CopyConfig copy_config = 7;
     */
    value: CopyConfig;
    case: "copyConfig";
  } | {
    /**
     * UV project configuration.
     *
     * @generated from field: flyteidl2.imagebuilder.UVProject uv_project = 8;
     */
    value: UVProject;
    case: "uvProject";
  } | {
    /**
     * Environment variables to set.
     *
     * @generated from field: flyteidl2.imagebuilder.Env env = 9;
     */
    value: Env;
    case: "env";
  } | {
    /**
     * Poetry project configuration
     *
     * @generated from field: flyteidl2.imagebuilder.PoetryProject poetry_project = 10;
     */
    value: PoetryProject;
    case: "poetryProject";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.imagebuilder.Layer.
 * Use `create(LayerSchema)` to create a new message.
 */
export const LayerSchema: GenMessage<Layer> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 13);

/**
 * Image definition defined in the sdk.
 *
 * @generated from message flyteidl2.imagebuilder.ImageSpec
 */
export type ImageSpec = Message<"flyteidl2.imagebuilder.ImageSpec"> & {
  /**
   * Identifier for the base image.
   *
   * @generated from field: string base_image = 1;
   */
  baseImage: string;

  /**
   * python version to use in the image.
   *
   * @generated from field: string python_version = 2;
   */
  pythonVersion: string;

  /**
   * List of layers to apply to the image.
   *
   * @generated from field: repeated flyteidl2.imagebuilder.Layer layers = 3;
   */
  layers: Layer[];

  /**
   * List of platforms to build the image for.
   *
   * @generated from field: repeated string platform = 4;
   */
  platform: string[];
};

/**
 * Describes the message flyteidl2.imagebuilder.ImageSpec.
 * Use `create(ImageSpecSchema)` to create a new message.
 */
export const ImageSpecSchema: GenMessage<ImageSpec> = /*@__PURE__*/
  messageDesc(file_flyteidl2_imagebuilder_definition, 14);

