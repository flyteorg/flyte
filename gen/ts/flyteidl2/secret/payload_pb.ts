// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file flyteidl2/secret/payload.proto (package flyteidl2.secret, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Secret, SecretIdentifier, SecretSpec } from "./definition_pb.ts";
import { file_flyteidl2_secret_definition } from "./definition_pb.ts";
import { file_buf_validate_validate } from "../../buf/validate/validate_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file flyteidl2/secret/payload.proto.
 */
export const file_flyteidl2_secret_payload: GenFile = /*@__PURE__*/
  fileDesc("Ch5mbHl0ZWlkbDIvc2VjcmV0L3BheWxvYWQucHJvdG8SEGZseXRlaWRsMi5zZWNyZXQigAEKE0NyZWF0ZVNlY3JldFJlcXVlc3QSNgoCaWQYASABKAsyIi5mbHl0ZWlkbDIuc2VjcmV0LlNlY3JldElkZW50aWZpZXJCBrpIA8gBARIxCgtzZWNyZXRfc3BlYxgCIAEoCzIcLmZseXRlaWRsMi5zZWNyZXQuU2VjcmV0U3BlYyIWChRDcmVhdGVTZWNyZXRSZXNwb25zZSKAAQoTVXBkYXRlU2VjcmV0UmVxdWVzdBI2CgJpZBgBIAEoCzIiLmZseXRlaWRsMi5zZWNyZXQuU2VjcmV0SWRlbnRpZmllckIGukgDyAEBEjEKC3NlY3JldF9zcGVjGAIgASgLMhwuZmx5dGVpZGwyLnNlY3JldC5TZWNyZXRTcGVjIhYKFFVwZGF0ZVNlY3JldFJlc3BvbnNlIkoKEEdldFNlY3JldFJlcXVlc3QSNgoCaWQYASABKAsyIi5mbHl0ZWlkbDIuc2VjcmV0LlNlY3JldElkZW50aWZpZXJCBrpIA8gBASI9ChFHZXRTZWNyZXRSZXNwb25zZRIoCgZzZWNyZXQYASABKAsyGC5mbHl0ZWlkbDIuc2VjcmV0LlNlY3JldCJNChNEZWxldGVTZWNyZXRSZXF1ZXN0EjYKAmlkGAEgASgLMiIuZmx5dGVpZGwyLnNlY3JldC5TZWNyZXRJZGVudGlmaWVyQga6SAPIAQEiFgoURGVsZXRlU2VjcmV0UmVzcG9uc2Ui+gEKEkxpc3RTZWNyZXRzUmVxdWVzdBIUCgxvcmdhbml6YXRpb24YASABKAkSDgoGZG9tYWluGAIgASgJEg8KB3Byb2plY3QYAyABKAkSDQoFbGltaXQYBCABKAUSDQoFdG9rZW4YBSABKAkSVgoScGVyX2NsdXN0ZXJfdG9rZW5zGAYgAygLMjouZmx5dGVpZGwyLnNlY3JldC5MaXN0U2VjcmV0c1JlcXVlc3QuUGVyQ2x1c3RlclRva2Vuc0VudHJ5GjcKFVBlckNsdXN0ZXJUb2tlbnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIuEBChNMaXN0U2VjcmV0c1Jlc3BvbnNlEikKB3NlY3JldHMYASADKAsyGC5mbHl0ZWlkbDIuc2VjcmV0LlNlY3JldBINCgV0b2tlbhgCIAEoCRJXChJwZXJfY2x1c3Rlcl90b2tlbnMYAyADKAsyOy5mbHl0ZWlkbDIuc2VjcmV0Lkxpc3RTZWNyZXRzUmVzcG9uc2UuUGVyQ2x1c3RlclRva2Vuc0VudHJ5GjcKFVBlckNsdXN0ZXJUb2tlbnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBQr0BChRjb20uZmx5dGVpZGwyLnNlY3JldEIMUGF5bG9hZFByb3RvSAJQAVo0Z2l0aHViLmNvbS9mbHl0ZW9yZy9mbHl0ZS92Mi9nZW4vZ28vZmx5dGVpZGwyL3NlY3JldKICA0ZTWKoCEEZseXRlaWRsMi5TZWNyZXTKAhBGbHl0ZWlkbDJcU2VjcmV04gIcRmx5dGVpZGwyXFNlY3JldFxHUEJNZXRhZGF0YeoCEUZseXRlaWRsMjo6U2VjcmV0YgZwcm90bzM", [file_flyteidl2_secret_definition, file_buf_validate_validate]);

/**
 * CreateSecretProxyRequest contains the spec and identifier used for secret creation
 *
 * @generated from message flyteidl2.secret.CreateSecretRequest
 */
export type CreateSecretRequest = Message<"flyteidl2.secret.CreateSecretRequest"> & {
  /**
   * @generated from field: flyteidl2.secret.SecretIdentifier id = 1;
   */
  id?: SecretIdentifier;

  /**
   * @generated from field: flyteidl2.secret.SecretSpec secret_spec = 2;
   */
  secretSpec?: SecretSpec;
};

/**
 * Describes the message flyteidl2.secret.CreateSecretRequest.
 * Use `create(CreateSecretRequestSchema)` to create a new message.
 */
export const CreateSecretRequestSchema: GenMessage<CreateSecretRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_secret_payload, 0);

/**
 * CreateSecretResponse
 *
 * @generated from message flyteidl2.secret.CreateSecretResponse
 */
export type CreateSecretResponse = Message<"flyteidl2.secret.CreateSecretResponse"> & {
};

/**
 * Describes the message flyteidl2.secret.CreateSecretResponse.
 * Use `create(CreateSecretResponseSchema)` to create a new message.
 */
export const CreateSecretResponseSchema: GenMessage<CreateSecretResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_secret_payload, 1);

/**
 * UpdateSecretProxyRequest contains the spec and identifier used for secret updation
 *
 * @generated from message flyteidl2.secret.UpdateSecretRequest
 */
export type UpdateSecretRequest = Message<"flyteidl2.secret.UpdateSecretRequest"> & {
  /**
   * @generated from field: flyteidl2.secret.SecretIdentifier id = 1;
   */
  id?: SecretIdentifier;

  /**
   * @generated from field: flyteidl2.secret.SecretSpec secret_spec = 2;
   */
  secretSpec?: SecretSpec;
};

/**
 * Describes the message flyteidl2.secret.UpdateSecretRequest.
 * Use `create(UpdateSecretRequestSchema)` to create a new message.
 */
export const UpdateSecretRequestSchema: GenMessage<UpdateSecretRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_secret_payload, 2);

/**
 * UpdateSecretResponse returns an empty response if the secret is successfully updated
 *
 * @generated from message flyteidl2.secret.UpdateSecretResponse
 */
export type UpdateSecretResponse = Message<"flyteidl2.secret.UpdateSecretResponse"> & {
};

/**
 * Describes the message flyteidl2.secret.UpdateSecretResponse.
 * Use `create(UpdateSecretResponseSchema)` to create a new message.
 */
export const UpdateSecretResponseSchema: GenMessage<UpdateSecretResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_secret_payload, 3);

/**
 * GetSecretRequest contains the identifier used for looking up the secret
 *
 * @generated from message flyteidl2.secret.GetSecretRequest
 */
export type GetSecretRequest = Message<"flyteidl2.secret.GetSecretRequest"> & {
  /**
   * @generated from field: flyteidl2.secret.SecretIdentifier id = 1;
   */
  id?: SecretIdentifier;
};

/**
 * Describes the message flyteidl2.secret.GetSecretRequest.
 * Use `create(GetSecretRequestSchema)` to create a new message.
 */
export const GetSecretRequestSchema: GenMessage<GetSecretRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_secret_payload, 4);

/**
 * GetSecretProxyResponse returns the looked up secret from the secret service
 *
 * @generated from message flyteidl2.secret.GetSecretResponse
 */
export type GetSecretResponse = Message<"flyteidl2.secret.GetSecretResponse"> & {
  /**
   * @generated from field: flyteidl2.secret.Secret secret = 1;
   */
  secret?: Secret;
};

/**
 * Describes the message flyteidl2.secret.GetSecretResponse.
 * Use `create(GetSecretResponseSchema)` to create a new message.
 */
export const GetSecretResponseSchema: GenMessage<GetSecretResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_secret_payload, 5);

/**
 * DeleteSecretRequest contains the identifier used for looking up the secret for deletion
 *
 * @generated from message flyteidl2.secret.DeleteSecretRequest
 */
export type DeleteSecretRequest = Message<"flyteidl2.secret.DeleteSecretRequest"> & {
  /**
   * name to be used for looking up the secret
   *
   * @generated from field: flyteidl2.secret.SecretIdentifier id = 1;
   */
  id?: SecretIdentifier;
};

/**
 * Describes the message flyteidl2.secret.DeleteSecretRequest.
 * Use `create(DeleteSecretRequestSchema)` to create a new message.
 */
export const DeleteSecretRequestSchema: GenMessage<DeleteSecretRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_secret_payload, 6);

/**
 * DeleteSecretResponse is an empty response right now on successfully deleting the secret.
 *
 * @generated from message flyteidl2.secret.DeleteSecretResponse
 */
export type DeleteSecretResponse = Message<"flyteidl2.secret.DeleteSecretResponse"> & {
};

/**
 * Describes the message flyteidl2.secret.DeleteSecretResponse.
 * Use `create(DeleteSecretResponseSchema)` to create a new message.
 */
export const DeleteSecretResponseSchema: GenMessage<DeleteSecretResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_secret_payload, 7);

/**
 * ListSecretsRequest is used for listing all the secrets accessible to the user at the passed in scope.
 * With org scope, user is given all secrets at org, domain, project-domain level etc
 * And returns paginated results
 *
 * @generated from message flyteidl2.secret.ListSecretsRequest
 */
export type ListSecretsRequest = Message<"flyteidl2.secret.ListSecretsRequest"> & {
  /**
   * Only org scoped resources are supported right now
   *
   * @generated from field: string organization = 1;
   */
  organization: string;

  /**
   * domain scoped secret
   *
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * Project-domain scoped secret
   *
   * @generated from field: string project = 3;
   */
  project: string;

  /**
   * Max page results
   *
   * @generated from field: int32 limit = 4;
   */
  limit: number;

  /**
   * Leave this empty if you are getting the first set of results. The next_token would be set in the response that can be used to fetch the next set of results.
   *
   * @generated from field: string token = 5;
   */
  token: string;

  /**
   * Per cluster token. This allows the service to return paginated results per cluster.
   * Service collates the results from all clusters and returns the next token for each cluster.
   * The client can use the next token for each cluster to fetch the next page of results.
   * In multi cluster, inorder to page through next set of results, client needs to send this token in the next request
   *
   * @generated from field: map<string, string> per_cluster_tokens = 6;
   */
  perClusterTokens: { [key: string]: string };
};

/**
 * Describes the message flyteidl2.secret.ListSecretsRequest.
 * Use `create(ListSecretsRequestSchema)` to create a new message.
 */
export const ListSecretsRequestSchema: GenMessage<ListSecretsRequest> = /*@__PURE__*/
  messageDesc(file_flyteidl2_secret_payload, 8);

/**
 * ListSecretsResponse returns paginated results of the accessible secrets at the scope defined in the request.
 *
 * @generated from message flyteidl2.secret.ListSecretsResponse
 */
export type ListSecretsResponse = Message<"flyteidl2.secret.ListSecretsResponse"> & {
  /**
   * @generated from field: repeated flyteidl2.secret.Secret secrets = 1;
   */
  secrets: Secret[];

  /**
   * next token to use for fetching new page results.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * Per cluster token. This allows the service to return paginated results per cluster.
   * Service collates the results from all clusters and returns the next token for each cluster.
   * The client can use the next token for each cluster to fetch the next page of results.
   * In multi cluster, inorder to page through next set of results, client needs to send this token in the next request
   *
   * @generated from field: map<string, string> per_cluster_tokens = 3;
   */
  perClusterTokens: { [key: string]: string };
};

/**
 * Describes the message flyteidl2.secret.ListSecretsResponse.
 * Use `create(ListSecretsResponseSchema)` to create a new message.
 */
export const ListSecretsResponseSchema: GenMessage<ListSecretsResponse> = /*@__PURE__*/
  messageDesc(file_flyteidl2_secret_payload, 9);

