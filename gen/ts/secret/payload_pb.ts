// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file secret/payload.proto (package flyteidl.secret, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Secret, SecretIdentifier, SecretSpec } from "./definition_pb.ts";
import { file_secret_definition } from "./definition_pb.ts";
import { file_validate_validate } from "../validate/validate_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file secret/payload.proto.
 */
export const file_secret_payload: GenFile = /*@__PURE__*/
  fileDesc("ChRzZWNyZXQvcGF5bG9hZC5wcm90bxIPZmx5dGVpZGwuc2VjcmV0IoABChNDcmVhdGVTZWNyZXRSZXF1ZXN0EjcKAmlkGAEgASgLMiEuZmx5dGVpZGwuc2VjcmV0LlNlY3JldElkZW50aWZpZXJCCPpCBYoBAhABEjAKC3NlY3JldF9zcGVjGAIgASgLMhsuZmx5dGVpZGwuc2VjcmV0LlNlY3JldFNwZWMiFgoUQ3JlYXRlU2VjcmV0UmVzcG9uc2UigAEKE1VwZGF0ZVNlY3JldFJlcXVlc3QSNwoCaWQYASABKAsyIS5mbHl0ZWlkbC5zZWNyZXQuU2VjcmV0SWRlbnRpZmllckII+kIFigECEAESMAoLc2VjcmV0X3NwZWMYAiABKAsyGy5mbHl0ZWlkbC5zZWNyZXQuU2VjcmV0U3BlYyIWChRVcGRhdGVTZWNyZXRSZXNwb25zZSJLChBHZXRTZWNyZXRSZXF1ZXN0EjcKAmlkGAEgASgLMiEuZmx5dGVpZGwuc2VjcmV0LlNlY3JldElkZW50aWZpZXJCCPpCBYoBAhABIjwKEUdldFNlY3JldFJlc3BvbnNlEicKBnNlY3JldBgBIAEoCzIXLmZseXRlaWRsLnNlY3JldC5TZWNyZXQiTgoTRGVsZXRlU2VjcmV0UmVxdWVzdBI3CgJpZBgBIAEoCzIhLmZseXRlaWRsLnNlY3JldC5TZWNyZXRJZGVudGlmaWVyQgj6QgWKAQIQASIWChREZWxldGVTZWNyZXRSZXNwb25zZSL5AQoSTGlzdFNlY3JldHNSZXF1ZXN0EhQKDG9yZ2FuaXphdGlvbhgBIAEoCRIOCgZkb21haW4YAiABKAkSDwoHcHJvamVjdBgDIAEoCRINCgVsaW1pdBgEIAEoBRINCgV0b2tlbhgFIAEoCRJVChJwZXJfY2x1c3Rlcl90b2tlbnMYBiADKAsyOS5mbHl0ZWlkbC5zZWNyZXQuTGlzdFNlY3JldHNSZXF1ZXN0LlBlckNsdXN0ZXJUb2tlbnNFbnRyeRo3ChVQZXJDbHVzdGVyVG9rZW5zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASLfAQoTTGlzdFNlY3JldHNSZXNwb25zZRIoCgdzZWNyZXRzGAEgAygLMhcuZmx5dGVpZGwuc2VjcmV0LlNlY3JldBINCgV0b2tlbhgCIAEoCRJWChJwZXJfY2x1c3Rlcl90b2tlbnMYAyADKAsyOi5mbHl0ZWlkbC5zZWNyZXQuTGlzdFNlY3JldHNSZXNwb25zZS5QZXJDbHVzdGVyVG9rZW5zRW50cnkaNwoVUGVyQ2x1c3RlclRva2Vuc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFCrgEKE2NvbS5mbHl0ZWlkbC5zZWNyZXRCDFBheWxvYWRQcm90b0gCUAFaKmdpdGh1Yi5jb20vZmx5dGVvcmcvZmx5dGUvdjIvZ2VuL2dvL3NlY3JldKICA0ZTWKoCD0ZseXRlaWRsLlNlY3JldMoCD0ZseXRlaWRsXFNlY3JldOICG0ZseXRlaWRsXFNlY3JldFxHUEJNZXRhZGF0YeoCEEZseXRlaWRsOjpTZWNyZXRiBnByb3RvMw", [file_secret_definition, file_validate_validate]);

/**
 * CreateSecretProxyRequest contains the spec and identifier used for secret creation
 *
 * @generated from message flyteidl.secret.CreateSecretRequest
 */
export type CreateSecretRequest = Message<"flyteidl.secret.CreateSecretRequest"> & {
  /**
   * @generated from field: flyteidl.secret.SecretIdentifier id = 1;
   */
  id?: SecretIdentifier;

  /**
   * @generated from field: flyteidl.secret.SecretSpec secret_spec = 2;
   */
  secretSpec?: SecretSpec;
};

/**
 * Describes the message flyteidl.secret.CreateSecretRequest.
 * Use `create(CreateSecretRequestSchema)` to create a new message.
 */
export const CreateSecretRequestSchema: GenMessage<CreateSecretRequest> = /*@__PURE__*/
  messageDesc(file_secret_payload, 0);

/**
 * CreateSecretResponse
 *
 * @generated from message flyteidl.secret.CreateSecretResponse
 */
export type CreateSecretResponse = Message<"flyteidl.secret.CreateSecretResponse"> & {
};

/**
 * Describes the message flyteidl.secret.CreateSecretResponse.
 * Use `create(CreateSecretResponseSchema)` to create a new message.
 */
export const CreateSecretResponseSchema: GenMessage<CreateSecretResponse> = /*@__PURE__*/
  messageDesc(file_secret_payload, 1);

/**
 * UpdateSecretProxyRequest contains the spec and identifier used for secret updation
 *
 * @generated from message flyteidl.secret.UpdateSecretRequest
 */
export type UpdateSecretRequest = Message<"flyteidl.secret.UpdateSecretRequest"> & {
  /**
   * @generated from field: flyteidl.secret.SecretIdentifier id = 1;
   */
  id?: SecretIdentifier;

  /**
   * @generated from field: flyteidl.secret.SecretSpec secret_spec = 2;
   */
  secretSpec?: SecretSpec;
};

/**
 * Describes the message flyteidl.secret.UpdateSecretRequest.
 * Use `create(UpdateSecretRequestSchema)` to create a new message.
 */
export const UpdateSecretRequestSchema: GenMessage<UpdateSecretRequest> = /*@__PURE__*/
  messageDesc(file_secret_payload, 2);

/**
 * UpdateSecretResponse returns an empty response if the secret is successfully updated
 *
 * @generated from message flyteidl.secret.UpdateSecretResponse
 */
export type UpdateSecretResponse = Message<"flyteidl.secret.UpdateSecretResponse"> & {
};

/**
 * Describes the message flyteidl.secret.UpdateSecretResponse.
 * Use `create(UpdateSecretResponseSchema)` to create a new message.
 */
export const UpdateSecretResponseSchema: GenMessage<UpdateSecretResponse> = /*@__PURE__*/
  messageDesc(file_secret_payload, 3);

/**
 * GetSecretRequest contains the identifier used for looking up the secret
 *
 * @generated from message flyteidl.secret.GetSecretRequest
 */
export type GetSecretRequest = Message<"flyteidl.secret.GetSecretRequest"> & {
  /**
   * @generated from field: flyteidl.secret.SecretIdentifier id = 1;
   */
  id?: SecretIdentifier;
};

/**
 * Describes the message flyteidl.secret.GetSecretRequest.
 * Use `create(GetSecretRequestSchema)` to create a new message.
 */
export const GetSecretRequestSchema: GenMessage<GetSecretRequest> = /*@__PURE__*/
  messageDesc(file_secret_payload, 4);

/**
 * GetSecretProxyResponse returns the looked up secret from the secret service
 *
 * @generated from message flyteidl.secret.GetSecretResponse
 */
export type GetSecretResponse = Message<"flyteidl.secret.GetSecretResponse"> & {
  /**
   * @generated from field: flyteidl.secret.Secret secret = 1;
   */
  secret?: Secret;
};

/**
 * Describes the message flyteidl.secret.GetSecretResponse.
 * Use `create(GetSecretResponseSchema)` to create a new message.
 */
export const GetSecretResponseSchema: GenMessage<GetSecretResponse> = /*@__PURE__*/
  messageDesc(file_secret_payload, 5);

/**
 * DeleteSecretRequest contains the identifier used for looking up the secret for deletion
 *
 * @generated from message flyteidl.secret.DeleteSecretRequest
 */
export type DeleteSecretRequest = Message<"flyteidl.secret.DeleteSecretRequest"> & {
  /**
   * name to be used for looking up the secret
   *
   * @generated from field: flyteidl.secret.SecretIdentifier id = 1;
   */
  id?: SecretIdentifier;
};

/**
 * Describes the message flyteidl.secret.DeleteSecretRequest.
 * Use `create(DeleteSecretRequestSchema)` to create a new message.
 */
export const DeleteSecretRequestSchema: GenMessage<DeleteSecretRequest> = /*@__PURE__*/
  messageDesc(file_secret_payload, 6);

/**
 * DeleteSecretResponse is an empty response right now on successfully deleting the secret.
 *
 * @generated from message flyteidl.secret.DeleteSecretResponse
 */
export type DeleteSecretResponse = Message<"flyteidl.secret.DeleteSecretResponse"> & {
};

/**
 * Describes the message flyteidl.secret.DeleteSecretResponse.
 * Use `create(DeleteSecretResponseSchema)` to create a new message.
 */
export const DeleteSecretResponseSchema: GenMessage<DeleteSecretResponse> = /*@__PURE__*/
  messageDesc(file_secret_payload, 7);

/**
 * ListSecretsRequest is used for listing all the secrets accessible to the user at the passed in scope.
 * With org scope, user is given all secrets at org, domain, project-domain level etc
 * And returns paginated results
 *
 * @generated from message flyteidl.secret.ListSecretsRequest
 */
export type ListSecretsRequest = Message<"flyteidl.secret.ListSecretsRequest"> & {
  /**
   * Only org scoped resources are supported right now
   *
   * @generated from field: string organization = 1;
   */
  organization: string;

  /**
   * domain scoped secret
   *
   * @generated from field: string domain = 2;
   */
  domain: string;

  /**
   * Project-domain scoped secret
   *
   * @generated from field: string project = 3;
   */
  project: string;

  /**
   * Max page results
   *
   * @generated from field: int32 limit = 4;
   */
  limit: number;

  /**
   * Leave this empty if you are getting the first set of results. The next_token would be set in the response that can be used to fetch the next set of results.
   *
   * @generated from field: string token = 5;
   */
  token: string;

  /**
   * Per cluster token. This allows the service to return paginated results per cluster.
   * Service collates the results from all clusters and returns the next token for each cluster.
   * The client can use the next token for each cluster to fetch the next page of results.
   * In multi cluster, inorder to page through next set of results, client needs to send this token in the next request
   *
   * @generated from field: map<string, string> per_cluster_tokens = 6;
   */
  perClusterTokens: { [key: string]: string };
};

/**
 * Describes the message flyteidl.secret.ListSecretsRequest.
 * Use `create(ListSecretsRequestSchema)` to create a new message.
 */
export const ListSecretsRequestSchema: GenMessage<ListSecretsRequest> = /*@__PURE__*/
  messageDesc(file_secret_payload, 8);

/**
 * ListSecretsResponse returns paginated results of the accessible secrets at the scope defined in the request.
 *
 * @generated from message flyteidl.secret.ListSecretsResponse
 */
export type ListSecretsResponse = Message<"flyteidl.secret.ListSecretsResponse"> & {
  /**
   * @generated from field: repeated flyteidl.secret.Secret secrets = 1;
   */
  secrets: Secret[];

  /**
   * next token to use for fetching new page results.
   *
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * Per cluster token. This allows the service to return paginated results per cluster.
   * Service collates the results from all clusters and returns the next token for each cluster.
   * The client can use the next token for each cluster to fetch the next page of results.
   * In multi cluster, inorder to page through next set of results, client needs to send this token in the next request
   *
   * @generated from field: map<string, string> per_cluster_tokens = 3;
   */
  perClusterTokens: { [key: string]: string };
};

/**
 * Describes the message flyteidl.secret.ListSecretsResponse.
 * Use `create(ListSecretsResponseSchema)` to create a new message.
 */
export const ListSecretsResponseSchema: GenMessage<ListSecretsResponse> = /*@__PURE__*/
  messageDesc(file_secret_payload, 9);

