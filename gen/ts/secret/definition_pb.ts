// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file secret/definition.proto (package flyteidl.secret, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { ClusterIdentifier } from "../common/identifier_pb.ts";
import { file_common_identifier } from "../common/identifier_pb.ts";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_validate_validate } from "../validate/validate_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file secret/definition.proto.
 */
export const file_secret_definition: GenFile = /*@__PURE__*/
  fileDesc("ChdzZWNyZXQvZGVmaW5pdGlvbi5wcm90bxIPZmx5dGVpZGwuc2VjcmV0InUKClNlY3JldFNwZWMSFgoMc3RyaW5nX3ZhbHVlGAEgASgJSAASFgoMYmluYXJ5X3ZhbHVlGAIgASgMSAASKQoEdHlwZRgDIAEoDjIbLmZseXRlaWRsLnNlY3JldC5TZWNyZXRUeXBlQgwKBXZhbHVlEgP4QgEicgoQU2VjcmV0SWRlbnRpZmllchInCgRuYW1lGAEgASgJQhn6QhZyFBABMhBeWy1hLXpBLVowLTlfXSskEhQKDG9yZ2FuaXphdGlvbhgCIAEoCRIOCgZkb21haW4YAyABKAkSDwoHcHJvamVjdBgEIAEoCSKjAQoOU2VjcmV0TWV0YWRhdGESMAoMY3JlYXRlZF90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI0Cg1zZWNyZXRfc3RhdHVzGAIgASgLMh0uZmx5dGVpZGwuc2VjcmV0LlNlY3JldFN0YXR1cxIpCgR0eXBlGAMgASgOMhsuZmx5dGVpZGwuc2VjcmV0LlNlY3JldFR5cGUihAEKDFNlY3JldFN0YXR1cxI2Cg5vdmVyYWxsX3N0YXR1cxgBIAEoDjIeLmZseXRlaWRsLnNlY3JldC5PdmVyYWxsU3RhdHVzEjwKDmNsdXN0ZXJfc3RhdHVzGAIgAygLMiQuZmx5dGVpZGwuc2VjcmV0LkNsdXN0ZXJTZWNyZXRTdGF0dXMiigEKE0NsdXN0ZXJTZWNyZXRTdGF0dXMSMwoHY2x1c3RlchgBIAEoCzIiLmZseXRlaWRsLmNvbW1vbi5DbHVzdGVySWRlbnRpZmllchI+Cg9wcmVzZW5jZV9zdGF0dXMYAiABKA4yJS5mbHl0ZWlkbC5zZWNyZXQuU2VjcmV0UHJlc2VuY2VTdGF0dXMicQoGU2VjcmV0Ei0KAmlkGAEgASgLMiEuZmx5dGVpZGwuc2VjcmV0LlNlY3JldElkZW50aWZpZXISOAoPc2VjcmV0X21ldGFkYXRhGAIgASgLMh8uZmx5dGVpZGwuc2VjcmV0LlNlY3JldE1ldGFkYXRhKkgKClNlY3JldFR5cGUSFwoTU0VDUkVUX1RZUEVfR0VORVJJQxAAEiEKHVNFQ1JFVF9UWVBFX0lNQUdFX1BVTExfU0VDUkVUEAEqXgoNT3ZlcmFsbFN0YXR1cxIPCgtVTlNQRUNJRklFRBAAEhUKEVBBUlRJQUxMWV9QUkVTRU5UEAESEQoNRlVMTFlfUFJFU0VOVBACEhIKDlVOS05PV05fU1RBVFVTEAMqPQoUU2VjcmV0UHJlc2VuY2VTdGF0dXMSCwoHVU5LTk9XThAAEgsKB01JU1NJTkcQARILCgdQUkVTRU5UEAJCrgEKE2NvbS5mbHl0ZWlkbC5zZWNyZXRCD0RlZmluaXRpb25Qcm90b0gCUAFaJ2dpdGh1Yi5jb20vZmx5dGVvcmcvZmx5dGUvZ2VuL2dvL3NlY3JldKICA0ZTWKoCD0ZseXRlaWRsLlNlY3JldMoCD0ZseXRlaWRsXFNlY3JldOICG0ZseXRlaWRsXFNlY3JldFxHUEJNZXRhZGF0YeoCEEZseXRlaWRsOjpTZWNyZXRiBnByb3RvMw", [file_common_identifier, file_google_protobuf_timestamp, file_validate_validate]);

/**
 * SecretSpec contains information used for creating/updating the secret.
 * Mainly it contains the value of the secret
 * In future we could add meta info like tags, rotation config, whether stored secret has any binary format etc for storage/retrieval.
 *
 * @generated from message flyteidl.secret.SecretSpec
 */
export type SecretSpec = Message<"flyteidl.secret.SecretSpec"> & {
  /**
   * @generated from oneof flyteidl.secret.SecretSpec.value
   */
  value: {
    /**
     * @generated from field: string string_value = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * @generated from field: bytes binary_value = 2;
     */
    value: Uint8Array;
    case: "binaryValue";
  } | { case: undefined; value?: undefined };

  /**
   * The secret type
   *
   * @generated from field: flyteidl.secret.SecretType type = 3;
   */
  type: SecretType;
};

/**
 * Describes the message flyteidl.secret.SecretSpec.
 * Use `create(SecretSpecSchema)` to create a new message.
 */
export const SecretSpecSchema: GenMessage<SecretSpec> = /*@__PURE__*/
  messageDesc(file_secret_definition, 0);

/**
 * SecretIdentifier contains the uniquely identifiable way of storing or retrieving the secret
 * Name and scope combination are used for defining the format for storage and retrieval of the secret
 * For eg : for org scope secrets
 * storage format org:<org-name>:name:secret-name
 *
 * @generated from message flyteidl.secret.SecretIdentifier
 */
export type SecretIdentifier = Message<"flyteidl.secret.SecretIdentifier"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Only org scoped resources are supported right now
   *
   * @generated from field: string organization = 2;
   */
  organization: string;

  /**
   * domain scoped secret
   *
   * @generated from field: string domain = 3;
   */
  domain: string;

  /**
   * Project-domain scoped secret
   *
   * @generated from field: string project = 4;
   */
  project: string;
};

/**
 * Describes the message flyteidl.secret.SecretIdentifier.
 * Use `create(SecretIdentifierSchema)` to create a new message.
 */
export const SecretIdentifierSchema: GenMessage<SecretIdentifier> = /*@__PURE__*/
  messageDesc(file_secret_definition, 1);

/**
 * SecretMetadata contain meta info about the secret
 *
 * @generated from message flyteidl.secret.SecretMetadata
 */
export type SecretMetadata = Message<"flyteidl.secret.SecretMetadata"> & {
  /**
   * created_time of the secret.
   *
   * @generated from field: google.protobuf.Timestamp created_time = 1;
   */
  createdTime?: Timestamp;

  /**
   * secret_status reports the overall status of the secret across all the clusters.
   * This relies on number of clusters queried which relies on there enabled state.
   *
   * @generated from field: flyteidl.secret.SecretStatus secret_status = 2;
   */
  secretStatus?: SecretStatus;

  /**
   * The secret type
   *
   * @generated from field: flyteidl.secret.SecretType type = 3;
   */
  type: SecretType;
};

/**
 * Describes the message flyteidl.secret.SecretMetadata.
 * Use `create(SecretMetadataSchema)` to create a new message.
 */
export const SecretMetadataSchema: GenMessage<SecretMetadata> = /*@__PURE__*/
  messageDesc(file_secret_definition, 2);

/**
 * SecretStatus contains the status of the secret across all the clusters
 *
 * @generated from message flyteidl.secret.SecretStatus
 */
export type SecretStatus = Message<"flyteidl.secret.SecretStatus"> & {
  /**
   * overall_status reports the overall status of the secret across all the clusters.
   *
   * @generated from field: flyteidl.secret.OverallStatus overall_status = 1;
   */
  overallStatus: OverallStatus;

  /**
   * cluster_status reports the status of the secret in each cluster
   *
   * @generated from field: repeated flyteidl.secret.ClusterSecretStatus cluster_status = 2;
   */
  clusterStatus: ClusterSecretStatus[];
};

/**
 * Describes the message flyteidl.secret.SecretStatus.
 * Use `create(SecretStatusSchema)` to create a new message.
 */
export const SecretStatusSchema: GenMessage<SecretStatus> = /*@__PURE__*/
  messageDesc(file_secret_definition, 3);

/**
 * ClusterSecretStatus contains the status of the secret in a cluster
 *
 * @generated from message flyteidl.secret.ClusterSecretStatus
 */
export type ClusterSecretStatus = Message<"flyteidl.secret.ClusterSecretStatus"> & {
  /**
   * @generated from field: flyteidl.common.ClusterIdentifier cluster = 1;
   */
  cluster?: ClusterIdentifier;

  /**
   * presence_status reports the status of the secret in the cluster
   *
   * @generated from field: flyteidl.secret.SecretPresenceStatus presence_status = 2;
   */
  presenceStatus: SecretPresenceStatus;
};

/**
 * Describes the message flyteidl.secret.ClusterSecretStatus.
 * Use `create(ClusterSecretStatusSchema)` to create a new message.
 */
export const ClusterSecretStatusSchema: GenMessage<ClusterSecretStatus> = /*@__PURE__*/
  messageDesc(file_secret_definition, 4);

/**
 * Secret is the returned object for Get and List calls which returns the identifier of the secret along with
 * meta information in future about the creation data, update date, tags etc
 * This doesn't contain the value of the secret
 *
 * @generated from message flyteidl.secret.Secret
 */
export type Secret = Message<"flyteidl.secret.Secret"> & {
  /**
   * @generated from field: flyteidl.secret.SecretIdentifier id = 1;
   */
  id?: SecretIdentifier;

  /**
   * @generated from field: flyteidl.secret.SecretMetadata secret_metadata = 2;
   */
  secretMetadata?: SecretMetadata;
};

/**
 * Describes the message flyteidl.secret.Secret.
 * Use `create(SecretSchema)` to create a new message.
 */
export const SecretSchema: GenMessage<Secret> = /*@__PURE__*/
  messageDesc(file_secret_definition, 5);

/**
 * @generated from enum flyteidl.secret.SecretType
 */
export enum SecretType {
  /**
   * Default, unspecified secret type. Assumed to be generic and no type specific handling required.
   *
   * @generated from enum value: SECRET_TYPE_GENERIC = 0;
   */
  GENERIC = 0,

  /**
   * Secret used specifically for pulling images from a container registry.
   *
   * @generated from enum value: SECRET_TYPE_IMAGE_PULL_SECRET = 1;
   */
  IMAGE_PULL_SECRET = 1,
}

/**
 * Describes the enum flyteidl.secret.SecretType.
 */
export const SecretTypeSchema: GenEnum<SecretType> = /*@__PURE__*/
  enumDesc(file_secret_definition, 0);

/**
 * @generated from enum flyteidl.secret.OverallStatus
 */
export enum OverallStatus {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Exists in some cluster
   *
   * @generated from enum value: PARTIALLY_PRESENT = 1;
   */
  PARTIALLY_PRESENT = 1,

  /**
   * Exists in all enabled clusters
   *
   * @generated from enum value: FULLY_PRESENT = 2;
   */
  FULLY_PRESENT = 2,

  /**
   * Status is unknown
   *
   * @generated from enum value: UNKNOWN_STATUS = 3;
   */
  UNKNOWN_STATUS = 3,
}

/**
 * Describes the enum flyteidl.secret.OverallStatus.
 */
export const OverallStatusSchema: GenEnum<OverallStatus> = /*@__PURE__*/
  enumDesc(file_secret_definition, 1);

/**
 * @generated from enum flyteidl.secret.SecretPresenceStatus
 */
export enum SecretPresenceStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Secret is missing in the cluster
   *
   * @generated from enum value: MISSING = 1;
   */
  MISSING = 1,

  /**
   * Secret is present in the cluster
   *
   * @generated from enum value: PRESENT = 2;
   */
  PRESENT = 2,
}

/**
 * Describes the enum flyteidl.secret.SecretPresenceStatus.
 */
export const SecretPresenceStatusSchema: GenEnum<SecretPresenceStatus> = /*@__PURE__*/
  enumDesc(file_secret_definition, 2);

