// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file idl2/workflow/run_definition.proto (package flyteidl2.workflow, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { ActionIdentifier } from "../common/identifier_pb.ts";
import { file_idl2_common_identifier } from "../common/identifier_pb.ts";
import type { EnrichedIdentity } from "../common/identity_pb.ts";
import { file_idl2_common_identity } from "../common/identity_pb.ts";
import type { CatalogCacheStatus } from "../core/catalog_pb.ts";
import { file_idl2_core_catalog } from "../core/catalog_pb.ts";
import type { LogContext, TaskLog } from "../core/execution_pb.ts";
import { file_idl2_core_execution } from "../core/execution_pb.ts";
import type { KeyValuePair, Literal } from "../core/literals_pb.ts";
import { file_idl2_core_literals } from "../core/literals_pb.ts";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import { file_validate_validate } from "../../validate/validate_pb.ts";
import type { TaskIdentifier, TaskSpec } from "./task_definition_pb.ts";
import { file_idl2_workflow_task_definition } from "./task_definition_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file idl2/workflow/run_definition.proto.
 */
export const file_idl2_workflow_run_definition: GenFile = /*@__PURE__*/
  fileDesc("CiJpZGwyL3dvcmtmbG93L3J1bl9kZWZpbml0aW9uLnByb3RvEhJmbHl0ZWlkbDIud29ya2Zsb3cibwoGTGFiZWxzEjYKBnZhbHVlcxgBIAMoCzImLmZseXRlaWRsMi53b3JrZmxvdy5MYWJlbHMuVmFsdWVzRW50cnkaLQoLVmFsdWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJ5CgtBbm5vdGF0aW9ucxI7CgZ2YWx1ZXMYASADKAsyKy5mbHl0ZWlkbDIud29ya2Zsb3cuQW5ub3RhdGlvbnMuVmFsdWVzRW50cnkaLQoLVmFsdWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASI0CgRFbnZzEiwKBnZhbHVlcxgBIAMoCzIcLmZseXRlaWRsMi5jb3JlLktleVZhbHVlUGFpciLwAQoHUnVuU3BlYxIqCgZsYWJlbHMYASABKAsyGi5mbHl0ZWlkbDIud29ya2Zsb3cuTGFiZWxzEjQKC2Fubm90YXRpb25zGAIgASgLMh8uZmx5dGVpZGwyLndvcmtmbG93LkFubm90YXRpb25zEiYKBGVudnMYAyABKAsyGC5mbHl0ZWlkbDIud29ya2Zsb3cuRW52cxIxCg1pbnRlcnJ1cHRpYmxlGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRIXCg9vdmVyd3JpdGVfY2FjaGUYBSABKAgSDwoHY2x1c3RlchgGIAEoCSIxCgNSdW4SKgoGYWN0aW9uGAEgASgLMhouZmx5dGVpZGwyLndvcmtmbG93LkFjdGlvbiJuCgpSdW5EZXRhaWxzEi0KCHJ1bl9zcGVjGAEgASgLMhsuZmx5dGVpZGwyLndvcmtmbG93LlJ1blNwZWMSMQoGYWN0aW9uGAIgASgLMiEuZmx5dGVpZGwyLndvcmtmbG93LkFjdGlvbkRldGFpbHMiawoSVGFza0FjdGlvbk1ldGFkYXRhEi4KAmlkGAEgASgLMiIuZmx5dGVpZGwyLndvcmtmbG93LlRhc2tJZGVudGlmaWVyEhEKCXRhc2tfdHlwZRgCIAEoCRISCgpzaG9ydF9uYW1lGAMgASgJIiMKE1RyYWNlQWN0aW9uTWV0YWRhdGESDAoEbmFtZRgBIAEoCSKAAQoXQ29uZGl0aW9uQWN0aW9uTWV0YWRhdGESDAoEbmFtZRgBIAEoCRIZCgZydW5faWQYAiABKAlCB/pCBHICEAFIABIcCglhY3Rpb25faWQYAyABKAlCB/pCBHICEAFIABIQCgZnbG9iYWwYBCABKAhIAEIMCgVzY29wZRID+EIBIsICCg5BY3Rpb25NZXRhZGF0YRIOCgZwYXJlbnQYAyABKAkSDQoFZ3JvdXAYBSABKAkSNwoLZXhlY3V0ZWRfYnkYBiABKAsyIi5mbHl0ZWlkbDIuY29tbW9uLkVucmljaGVkSWRlbnRpdHkSQAoEdGFzaxgHIAEoCzImLmZseXRlaWRsMi53b3JrZmxvdy5UYXNrQWN0aW9uTWV0YWRhdGFCCPpCBYoBAhABSAASQgoFdHJhY2UYCCABKAsyJy5mbHl0ZWlkbDIud29ya2Zsb3cuVHJhY2VBY3Rpb25NZXRhZGF0YUII+kIFigECEAFIABJKCgljb25kaXRpb24YCSABKAsyKy5mbHl0ZWlkbDIud29ya2Zsb3cuQ29uZGl0aW9uQWN0aW9uTWV0YWRhdGFCCPpCBYoBAhABSABCBgoEc3BlYyL9AQoMQWN0aW9uU3RhdHVzEigKBXBoYXNlGAEgASgOMhkuZmx5dGVpZGwyLndvcmtmbG93LlBoYXNlEi4KCnN0YXJ0X3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjEKCGVuZF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgAiAEBEhkKCGF0dGVtcHRzGAQgASgNQgf6QgQqAiAAEjgKDGNhY2hlX3N0YXR1cxgFIAEoDjIiLmZseXRlaWRsMi5jb3JlLkNhdGFsb2dDYWNoZVN0YXR1c0ILCglfZW5kX3RpbWUioAEKBkFjdGlvbhIuCgJpZBgBIAEoCzIiLmZseXRlaWRsMi5jb21tb24uQWN0aW9uSWRlbnRpZmllchI0CghtZXRhZGF0YRgCIAEoCzIiLmZseXRlaWRsMi53b3JrZmxvdy5BY3Rpb25NZXRhZGF0YRIwCgZzdGF0dXMYAyABKAsyIC5mbHl0ZWlkbDIud29ya2Zsb3cuQWN0aW9uU3RhdHVzIuoBCg5FbnJpY2hlZEFjdGlvbhIqCgZhY3Rpb24YASABKAsyGi5mbHl0ZWlkbDIud29ya2Zsb3cuQWN0aW9uEhQKDG1lZXRzX2ZpbHRlchgCIAEoCBJaChVjaGlsZHJlbl9waGFzZV9jb3VudHMYAyADKAsyOy5mbHl0ZWlkbDIud29ya2Zsb3cuRW5yaWNoZWRBY3Rpb24uQ2hpbGRyZW5QaGFzZUNvdW50c0VudHJ5GjoKGENoaWxkcmVuUGhhc2VDb3VudHNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIowBCglFcnJvckluZm8SDwoHbWVzc2FnZRgBIAEoCRIwCgRraW5kGAIgASgOMiIuZmx5dGVpZGwyLndvcmtmbG93LkVycm9ySW5mby5LaW5kIjwKBEtpbmQSFAoQS0lORF9VTlNQRUNJRklFRBAAEg0KCUtJTkRfVVNFUhABEg8KC0tJTkRfU1lTVEVNEAIiUwoJQWJvcnRJbmZvEg4KBnJlYXNvbhgBIAEoCRI2CgphYm9ydGVkX2J5GAIgASgLMiIuZmx5dGVpZGwyLmNvbW1vbi5FbnJpY2hlZElkZW50aXR5IooDCg1BY3Rpb25EZXRhaWxzEi4KAmlkGAEgASgLMiIuZmx5dGVpZGwyLmNvbW1vbi5BY3Rpb25JZGVudGlmaWVyEjQKCG1ldGFkYXRhGAIgASgLMiIuZmx5dGVpZGwyLndvcmtmbG93LkFjdGlvbk1ldGFkYXRhEjAKBnN0YXR1cxgDIAEoCzIgLmZseXRlaWRsMi53b3JrZmxvdy5BY3Rpb25TdGF0dXMSMwoKZXJyb3JfaW5mbxgEIAEoCzIdLmZseXRlaWRsMi53b3JrZmxvdy5FcnJvckluZm9IABIzCgphYm9ydF9pbmZvGAUgASgLMh0uZmx5dGVpZGwyLndvcmtmbG93LkFib3J0SW5mb0gAEjgKEnJlc29sdmVkX3Rhc2tfc3BlYxgGIAEoCzIcLmZseXRlaWRsMi53b3JrZmxvdy5UYXNrU3BlYxIzCghhdHRlbXB0cxgHIAMoCzIhLmZseXRlaWRsMi53b3JrZmxvdy5BY3Rpb25BdHRlbXB0QggKBnJlc3VsdCL6BAoNQWN0aW9uQXR0ZW1wdBIoCgVwaGFzZRgBIAEoDjIZLmZseXRlaWRsMi53b3JrZmxvdy5QaGFzZRIuCgpzdGFydF90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIxCghlbmRfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAIgBARI2CgplcnJvcl9pbmZvGAQgASgLMh0uZmx5dGVpZGwyLndvcmtmbG93LkVycm9ySW5mb0gBiAEBEhgKB2F0dGVtcHQYBSABKA1CB/pCBCoCIAASKQoIbG9nX2luZm8YBiADKAsyFy5mbHl0ZWlkbDIuY29yZS5UYXNrTG9nEjUKB291dHB1dHMYByABKAsyJC5mbHl0ZWlkbDIud29ya2Zsb3cuT3V0cHV0UmVmZXJlbmNlcxIWCg5sb2dzX2F2YWlsYWJsZRgIIAEoCBI4CgxjYWNoZV9zdGF0dXMYCSABKA4yIi5mbHl0ZWlkbDIuY29yZS5DYXRhbG9nQ2FjaGVTdGF0dXMSOAoOY2x1c3Rlcl9ldmVudHMYCiADKAsyIC5mbHl0ZWlkbDIud29ya2Zsb3cuQ2x1c3RlckV2ZW50Ej4KEXBoYXNlX3RyYW5zaXRpb25zGAsgAygLMiMuZmx5dGVpZGwyLndvcmtmbG93LlBoYXNlVHJhbnNpdGlvbhIPCgdjbHVzdGVyGAwgASgJEi8KC2xvZ19jb250ZXh0GA0gASgLMhouZmx5dGVpZGwyLmNvcmUuTG9nQ29udGV4dEILCglfZW5kX3RpbWVCDQoLX2Vycm9yX2luZm8iUAoMQ2x1c3RlckV2ZW50Ei8KC29jY3VycmVkX2F0GAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIPCgdtZXNzYWdlGAIgASgJIqsBCg9QaGFzZVRyYW5zaXRpb24SKAoFcGhhc2UYASABKA4yGS5mbHl0ZWlkbDIud29ya2Zsb3cuUGhhc2USLgoKc3RhcnRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASMQoIZW5kX3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wSACIAQFCCwoJX2VuZF90aW1lItgFCgtBY3Rpb25FdmVudBI4CgJpZBgBIAEoCzIiLmZseXRlaWRsMi5jb21tb24uQWN0aW9uSWRlbnRpZmllckII+kIFigECEAESGAoHYXR0ZW1wdBgCIAEoDUIH+kIEKgIgABIoCgVwaGFzZRgDIAEoDjIZLmZseXRlaWRsMi53b3JrZmxvdy5QaGFzZRIPCgd2ZXJzaW9uGAQgASgNEjIKCnN0YXJ0X3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgIYARIwCgx1cGRhdGVkX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjUKCGVuZF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEICGAFIAIgBARI2CgplcnJvcl9pbmZvGAggASgLMh0uZmx5dGVpZGwyLndvcmtmbG93LkVycm9ySW5mb0gBiAEBEikKCGxvZ19pbmZvGAkgAygLMhcuZmx5dGVpZGwyLmNvcmUuVGFza0xvZxIvCgtsb2dfY29udGV4dBgKIAEoCzIaLmZseXRlaWRsMi5jb3JlLkxvZ0NvbnRleHQSDwoHY2x1c3RlchgLIAEoCRI1CgdvdXRwdXRzGAwgASgLMiQuZmx5dGVpZGwyLndvcmtmbG93Lk91dHB1dFJlZmVyZW5jZXMSOAoMY2FjaGVfc3RhdHVzGA0gASgOMiIuZmx5dGVpZGwyLmNvcmUuQ2F0YWxvZ0NhY2hlU3RhdHVzEjgKDmNsdXN0ZXJfZXZlbnRzGA4gAygLMiAuZmx5dGVpZGwyLndvcmtmbG93LkNsdXN0ZXJFdmVudBIxCg1yZXBvcnRlZF90aW1lGA8gASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEILCglfZW5kX3RpbWVCDQoLX2Vycm9yX2luZm8iRAoMTmFtZWRMaXRlcmFsEgwKBG5hbWUYASABKAkSJgoFdmFsdWUYAiABKAsyFy5mbHl0ZWlkbDIuY29yZS5MaXRlcmFsIjoKEE91dHB1dFJlZmVyZW5jZXMSEgoKb3V0cHV0X3VyaRgBIAEoCRISCgpyZXBvcnRfdXJpGAIgASgJImsKBklucHV0cxIyCghsaXRlcmFscxgBIAMoCzIgLmZseXRlaWRsMi53b3JrZmxvdy5OYW1lZExpdGVyYWwSLQoHY29udGV4dBgCIAMoCzIcLmZseXRlaWRsMi5jb3JlLktleVZhbHVlUGFpciI9CgdPdXRwdXRzEjIKCGxpdGVyYWxzGAEgAygLMiAuZmx5dGVpZGwyLndvcmtmbG93Lk5hbWVkTGl0ZXJhbCrLAQoFUGhhc2USFQoRUEhBU0VfVU5TUEVDSUZJRUQQABIQCgxQSEFTRV9RVUVVRUQQARIfChtQSEFTRV9XQUlUSU5HX0ZPUl9SRVNPVVJDRVMQAhIWChJQSEFTRV9JTklUSUFMSVpJTkcQAxIRCg1QSEFTRV9SVU5OSU5HEAQSEwoPUEhBU0VfU1VDQ0VFREVEEAUSEAoMUEhBU0VfRkFJTEVEEAYSEQoNUEhBU0VfQUJPUlRFRBAHEhMKD1BIQVNFX1RJTUVEX09VVBAIQsoBChZjb20uZmx5dGVpZGwyLndvcmtmbG93QhJSdW5EZWZpbml0aW9uUHJvdG9IAlABWjFnaXRodWIuY29tL2ZseXRlb3JnL2ZseXRlL3YyL2dlbi9nby9pZGwyL3dvcmtmbG93ogIDRldYqgISRmx5dGVpZGwyLldvcmtmbG93ygISRmx5dGVpZGwyXFdvcmtmbG934gIeRmx5dGVpZGwyXFdvcmtmbG93XEdQQk1ldGFkYXRh6gITRmx5dGVpZGwyOjpXb3JrZmxvd2IGcHJvdG8z", [file_idl2_common_identifier, file_idl2_common_identity, file_idl2_core_catalog, file_idl2_core_execution, file_idl2_core_literals, file_google_protobuf_timestamp, file_google_protobuf_wrappers, file_validate_validate, file_idl2_workflow_task_definition]);

/**
 * Label values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge labels defined at registration and execution time.
 *
 * @generated from message flyteidl2.workflow.Labels
 */
export type Labels = Message<"flyteidl2.workflow.Labels"> & {
  /**
   * Map of custom labels to be applied to the execution resource.
   *
   * @generated from field: map<string, string> values = 1;
   */
  values: { [key: string]: string };
};

/**
 * Describes the message flyteidl2.workflow.Labels.
 * Use `create(LabelsSchema)` to create a new message.
 */
export const LabelsSchema: GenMessage<Labels> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 0);

/**
 * Annotation values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge annotations defined at registration and execution time.
 *
 * @generated from message flyteidl2.workflow.Annotations
 */
export type Annotations = Message<"flyteidl2.workflow.Annotations"> & {
  /**
   * Map of custom annotations to be applied to the execution resource.
   *
   * @generated from field: map<string, string> values = 1;
   */
  values: { [key: string]: string };
};

/**
 * Describes the message flyteidl2.workflow.Annotations.
 * Use `create(AnnotationsSchema)` to create a new message.
 */
export const AnnotationsSchema: GenMessage<Annotations> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 1);

/**
 * Environment variable values to be applied to an execution resource.
 * In the future a mode (e.g. OVERRIDE, APPEND, etc) can be defined
 * to specify how to merge environment variables defined at registration and execution time.
 *
 * @generated from message flyteidl2.workflow.Envs
 */
export type Envs = Message<"flyteidl2.workflow.Envs"> & {
  /**
   * Map of custom environment variables to be applied to the execution resource.
   *
   * @generated from field: repeated flyteidl2.core.KeyValuePair values = 1;
   */
  values: KeyValuePair[];
};

/**
 * Describes the message flyteidl2.workflow.Envs.
 * Use `create(EnvsSchema)` to create a new message.
 */
export const EnvsSchema: GenMessage<Envs> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 2);

/**
 * @generated from message flyteidl2.workflow.RunSpec
 */
export type RunSpec = Message<"flyteidl2.workflow.RunSpec"> & {
  /**
   * Labels to apply to the run.
   *
   * @generated from field: flyteidl2.workflow.Labels labels = 1;
   */
  labels?: Labels;

  /**
   * Annotations to apply to the run.
   *
   * @generated from field: flyteidl2.workflow.Annotations annotations = 2;
   */
  annotations?: Annotations;

  /**
   * Envs to apply to the run.
   *
   * @generated from field: flyteidl2.workflow.Envs envs = 3;
   */
  envs?: Envs;

  /**
   * Explicit override for executing this run as interruptible or not. If not set, use the default.
   *
   * @generated from field: google.protobuf.BoolValue interruptible = 4;
   */
  interruptible?: boolean;

  /**
   * If true, recompute outputs for this run and overwrite any existing cache.
   *
   * @generated from field: bool overwrite_cache = 5;
   */
  overwriteCache: boolean;

  /**
   * the specific cluster that this action should be executed on. this value will be used as the
   * default for all actions in the run unless overridden.
   *
   * @generated from field: string cluster = 6;
   */
  cluster: string;
};

/**
 * Describes the message flyteidl2.workflow.RunSpec.
 * Use `create(RunSpecSchema)` to create a new message.
 */
export const RunSpecSchema: GenMessage<RunSpec> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 3);

/**
 * @generated from message flyteidl2.workflow.Run
 */
export type Run = Message<"flyteidl2.workflow.Run"> & {
  /**
   * Lightweight information about the root action.
   *
   * @generated from field: flyteidl2.workflow.Action action = 1;
   */
  action?: Action;
};

/**
 * Describes the message flyteidl2.workflow.Run.
 * Use `create(RunSchema)` to create a new message.
 */
export const RunSchema: GenMessage<Run> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 4);

/**
 * @generated from message flyteidl2.workflow.RunDetails
 */
export type RunDetails = Message<"flyteidl2.workflow.RunDetails"> & {
  /**
   * Run spec.
   *
   * @generated from field: flyteidl2.workflow.RunSpec run_spec = 1;
   */
  runSpec?: RunSpec;

  /**
   * Detailed information about the root action.
   *
   * @generated from field: flyteidl2.workflow.ActionDetails action = 2;
   */
  action?: ActionDetails;
};

/**
 * Describes the message flyteidl2.workflow.RunDetails.
 * Use `create(RunDetailsSchema)` to create a new message.
 */
export const RunDetailsSchema: GenMessage<RunDetails> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 5);

/**
 * @generated from message flyteidl2.workflow.TaskActionMetadata
 */
export type TaskActionMetadata = Message<"flyteidl2.workflow.TaskActionMetadata"> & {
  /**
   * Id of the task this action is associated with.
   *
   * @generated from field: flyteidl2.workflow.TaskIdentifier id = 1;
   */
  id?: TaskIdentifier;

  /**
   * Extensible task type.
   *
   * @generated from field: string task_type = 2;
   */
  taskType: string;

  /**
   * The short name for this task.
   *
   * @generated from field: string short_name = 3;
   */
  shortName: string;
};

/**
 * Describes the message flyteidl2.workflow.TaskActionMetadata.
 * Use `create(TaskActionMetadataSchema)` to create a new message.
 */
export const TaskActionMetadataSchema: GenMessage<TaskActionMetadata> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 6);

/**
 * @generated from message flyteidl2.workflow.TraceActionMetadata
 */
export type TraceActionMetadata = Message<"flyteidl2.workflow.TraceActionMetadata"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message flyteidl2.workflow.TraceActionMetadata.
 * Use `create(TraceActionMetadataSchema)` to create a new message.
 */
export const TraceActionMetadataSchema: GenMessage<TraceActionMetadata> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 7);

/**
 * @generated from message flyteidl2.workflow.ConditionActionMetadata
 */
export type ConditionActionMetadata = Message<"flyteidl2.workflow.ConditionActionMetadata"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof flyteidl2.workflow.ConditionActionMetadata.scope
   */
  scope: {
    /**
     * RunId is the unique identifier for the run this action is associated with.
     *
     * @generated from field: string run_id = 2;
     */
    value: string;
    case: "runId";
  } | {
    /**
     * ActionId is the unique identifier for the action this action is associated with.
     *
     * @generated from field: string action_id = 3;
     */
    value: string;
    case: "actionId";
  } | {
    /**
     * Global indicates the condition is global and can be used across all runs and actions.
     *
     * @generated from field: bool global = 4;
     */
    value: boolean;
    case: "global";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.workflow.ConditionActionMetadata.
 * Use `create(ConditionActionMetadataSchema)` to create a new message.
 */
export const ConditionActionMetadataSchema: GenMessage<ConditionActionMetadata> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 8);

/**
 * Static, lightweight metadata about an action.
 *
 * @generated from message flyteidl2.workflow.ActionMetadata
 */
export type ActionMetadata = Message<"flyteidl2.workflow.ActionMetadata"> & {
  /**
   * Parent action if not the root.
   *
   * @generated from field: string parent = 3;
   */
  parent: string;

  /**
   * Group this action belongs to, if applicable.
   *
   * @generated from field: string group = 5;
   */
  group: string;

  /**
   * Identity that executed this run.
   *
   * @generated from field: flyteidl2.common.EnrichedIdentity executed_by = 6;
   */
  executedBy?: EnrichedIdentity;

  /**
   * @generated from oneof flyteidl2.workflow.ActionMetadata.spec
   */
  spec: {
    /**
     * Task action.
     *
     * @generated from field: flyteidl2.workflow.TaskActionMetadata task = 7;
     */
    value: TaskActionMetadata;
    case: "task";
  } | {
    /**
     * Trace action.
     *
     * @generated from field: flyteidl2.workflow.TraceActionMetadata trace = 8;
     */
    value: TraceActionMetadata;
    case: "trace";
  } | {
    /**
     * Condition action.
     *
     * @generated from field: flyteidl2.workflow.ConditionActionMetadata condition = 9;
     */
    value: ConditionActionMetadata;
    case: "condition";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl2.workflow.ActionMetadata.
 * Use `create(ActionMetadataSchema)` to create a new message.
 */
export const ActionMetadataSchema: GenMessage<ActionMetadata> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 9);

/**
 * Lightweight status of an action. For more detailed status see ActionDetails.
 *
 * @generated from message flyteidl2.workflow.ActionStatus
 */
export type ActionStatus = Message<"flyteidl2.workflow.ActionStatus"> & {
  /**
   * Last known phase.
   *
   * @generated from field: flyteidl2.workflow.Phase phase = 1;
   */
  phase: Phase;

  /**
   * Time the action started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * Time the action ended, if applicable.
   *
   * @generated from field: optional google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  /**
   * Number of action attempts.
   *
   * @generated from field: uint32 attempts = 4;
   */
  attempts: number;

  /**
   * cache status of the action's latest attempt
   *
   * @generated from field: flyteidl2.core.CatalogCacheStatus cache_status = 5;
   */
  cacheStatus: CatalogCacheStatus;
};

/**
 * Describes the message flyteidl2.workflow.ActionStatus.
 * Use `create(ActionStatusSchema)` to create a new message.
 */
export const ActionStatusSchema: GenMessage<ActionStatus> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 10);

/**
 * Lightweight representation of an action.
 *
 * @generated from message flyteidl2.workflow.Action
 */
export type Action = Message<"flyteidl2.workflow.Action"> & {
  /**
   * Id for this action.
   *
   * @generated from field: flyteidl2.common.ActionIdentifier id = 1;
   */
  id?: ActionIdentifier;

  /**
   * Metadata for this action.
   *
   * @generated from field: flyteidl2.workflow.ActionMetadata metadata = 2;
   */
  metadata?: ActionMetadata;

  /**
   * Last known status.
   *
   * @generated from field: flyteidl2.workflow.ActionStatus status = 3;
   */
  status?: ActionStatus;
};

/**
 * Describes the message flyteidl2.workflow.Action.
 * Use `create(ActionSchema)` to create a new message.
 */
export const ActionSchema: GenMessage<Action> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 11);

/**
 * EnrichedAction is a wrapper around Action that contains additional information
 *
 * @generated from message flyteidl2.workflow.EnrichedAction
 */
export type EnrichedAction = Message<"flyteidl2.workflow.EnrichedAction"> & {
  /**
   * The action itself.
   *
   * @generated from field: flyteidl2.workflow.Action action = 1;
   */
  action?: Action;

  /**
   * Whether this action meets specified filters of the request or not.
   * If an action that was previously meeting the filter but no longer does, will be sent with this flag set to false
   *
   * @generated from field: bool meets_filter = 2;
   */
  meetsFilter: boolean;

  /**
   * Child phase info for this action (Map of phase to counts of children in given phase)
   *
   * @generated from field: map<int32, int32> children_phase_counts = 3;
   */
  childrenPhaseCounts: { [key: number]: number };
};

/**
 * Describes the message flyteidl2.workflow.EnrichedAction.
 * Use `create(EnrichedActionSchema)` to create a new message.
 */
export const EnrichedActionSchema: GenMessage<EnrichedAction> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 12);

/**
 * ErrorInfo captures details of an error.
 *
 * @generated from message flyteidl2.workflow.ErrorInfo
 */
export type ErrorInfo = Message<"flyteidl2.workflow.ErrorInfo"> & {
  /**
   * Error message.
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * Error kind.
   *
   * @generated from field: flyteidl2.workflow.ErrorInfo.Kind kind = 2;
   */
  kind: ErrorInfo_Kind;
};

/**
 * Describes the message flyteidl2.workflow.ErrorInfo.
 * Use `create(ErrorInfoSchema)` to create a new message.
 */
export const ErrorInfoSchema: GenMessage<ErrorInfo> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 13);

/**
 * @generated from enum flyteidl2.workflow.ErrorInfo.Kind
 */
export enum ErrorInfo_Kind {
  /**
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: KIND_USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: KIND_SYSTEM = 2;
   */
  SYSTEM = 2,
}

/**
 * Describes the enum flyteidl2.workflow.ErrorInfo.Kind.
 */
export const ErrorInfo_KindSchema: GenEnum<ErrorInfo_Kind> = /*@__PURE__*/
  enumDesc(file_idl2_workflow_run_definition, 13, 0);

/**
 * AbortInfo captures details of an aborted run.
 *
 * @generated from message flyteidl2.workflow.AbortInfo
 */
export type AbortInfo = Message<"flyteidl2.workflow.AbortInfo"> & {
  /**
   * Reason provided for the abort.
   *
   * @generated from field: string reason = 1;
   */
  reason: string;

  /**
   * Identity that aborted the run.
   *
   * @generated from field: flyteidl2.common.EnrichedIdentity aborted_by = 2;
   */
  abortedBy?: EnrichedIdentity;
};

/**
 * Describes the message flyteidl2.workflow.AbortInfo.
 * Use `create(AbortInfoSchema)` to create a new message.
 */
export const AbortInfoSchema: GenMessage<AbortInfo> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 14);

/**
 * ActionDetails is the full details of an action.
 *
 * @generated from message flyteidl2.workflow.ActionDetails
 */
export type ActionDetails = Message<"flyteidl2.workflow.ActionDetails"> & {
  /**
   * Id for this action.
   *
   * @generated from field: flyteidl2.common.ActionIdentifier id = 1;
   */
  id?: ActionIdentifier;

  /**
   * Metadata for this action.
   *
   * @generated from field: flyteidl2.workflow.ActionMetadata metadata = 2;
   */
  metadata?: ActionMetadata;

  /**
   * Last known status.
   *
   * @generated from field: flyteidl2.workflow.ActionStatus status = 3;
   */
  status?: ActionStatus;

  /**
   * @generated from oneof flyteidl2.workflow.ActionDetails.result
   */
  result: {
    /**
     * Error info for the action, if failed.
     *
     * @generated from field: flyteidl2.workflow.ErrorInfo error_info = 4;
     */
    value: ErrorInfo;
    case: "errorInfo";
  } | {
    /**
     * Abort info for the action, if aborted.
     *
     * @generated from field: flyteidl2.workflow.AbortInfo abort_info = 5;
     */
    value: AbortInfo;
    case: "abortInfo";
  } | { case: undefined; value?: undefined };

  /**
   * Fully resolved spec. Merges user submitted task spec with platform defaults.
   *
   * @generated from field: flyteidl2.workflow.TaskSpec resolved_task_spec = 6;
   */
  resolvedTaskSpec?: TaskSpec;

  /**
   * List of action attempts.
   *
   * @generated from field: repeated flyteidl2.workflow.ActionAttempt attempts = 7;
   */
  attempts: ActionAttempt[];
};

/**
 * Describes the message flyteidl2.workflow.ActionDetails.
 * Use `create(ActionDetailsSchema)` to create a new message.
 */
export const ActionDetailsSchema: GenMessage<ActionDetails> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 15);

/**
 * ActionAttempt is a single attempt of an action.
 *
 * @generated from message flyteidl2.workflow.ActionAttempt
 */
export type ActionAttempt = Message<"flyteidl2.workflow.ActionAttempt"> & {
  /**
   * Last known phase.
   *
   * @generated from field: flyteidl2.workflow.Phase phase = 1;
   */
  phase: Phase;

  /**
   * Time the attempt started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * Time the attempt ended, if applicable.
   *
   * @generated from field: optional google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  /**
   * Error info for the attempt, if failed.
   *
   * @generated from field: optional flyteidl2.workflow.ErrorInfo error_info = 4;
   */
  errorInfo?: ErrorInfo;

  /**
   * The attempt number, starting with 1.
   *
   * @generated from field: uint32 attempt = 5;
   */
  attempt: number;

  /**
   * Log references.
   *
   * @generated from field: repeated flyteidl2.core.TaskLog log_info = 6;
   */
  logInfo: TaskLog[];

  /**
   * Output references.
   *
   * @generated from field: flyteidl2.workflow.OutputReferences outputs = 7;
   */
  outputs?: OutputReferences;

  /**
   * Indicates whether logs are available for tailing. It doesn't necessarily indicate the logs are present, but that
   * we have the info we need to look them up.
   *
   * @generated from field: bool logs_available = 8;
   */
  logsAvailable: boolean;

  /**
   * cache status of the action attempt
   *
   * @generated from field: flyteidl2.core.CatalogCacheStatus cache_status = 9;
   */
  cacheStatus: CatalogCacheStatus;

  /**
   * Cluster events like k8s events in a human-readable form.
   *
   * @generated from field: repeated flyteidl2.workflow.ClusterEvent cluster_events = 10;
   */
  clusterEvents: ClusterEvent[];

  /**
   * History of phase transitions.
   *
   * @generated from field: repeated flyteidl2.workflow.PhaseTransition phase_transitions = 11;
   */
  phaseTransitions: PhaseTransition[];

  /**
   * The cluster this attempt is assigned to.
   *
   * @generated from field: string cluster = 12;
   */
  cluster: string;

  /**
   * Contains corresponding k8s pods and containers information for this action attempt.
   *
   * @generated from field: flyteidl2.core.LogContext log_context = 13;
   */
  logContext?: LogContext;
};

/**
 * Describes the message flyteidl2.workflow.ActionAttempt.
 * Use `create(ActionAttemptSchema)` to create a new message.
 */
export const ActionAttemptSchema: GenMessage<ActionAttempt> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 16);

/**
 * @generated from message flyteidl2.workflow.ClusterEvent
 */
export type ClusterEvent = Message<"flyteidl2.workflow.ClusterEvent"> & {
  /**
   * occurred_at is the timestamp indicating the instant that this reason happened.
   *
   * @generated from field: google.protobuf.Timestamp occurred_at = 1;
   */
  occurredAt?: Timestamp;

  /**
   * message is the explanation for the most recent phase transition or status update.
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message flyteidl2.workflow.ClusterEvent.
 * Use `create(ClusterEventSchema)` to create a new message.
 */
export const ClusterEventSchema: GenMessage<ClusterEvent> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 17);

/**
 * @generated from message flyteidl2.workflow.PhaseTransition
 */
export type PhaseTransition = Message<"flyteidl2.workflow.PhaseTransition"> & {
  /**
   * The phase.
   *
   * @generated from field: flyteidl2.workflow.Phase phase = 1;
   */
  phase: Phase;

  /**
   * Time this phase started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * Time this phase ended, if applicable. For terminal phases, start time will equal end time.
   *
   * @generated from field: optional google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;
};

/**
 * Describes the message flyteidl2.workflow.PhaseTransition.
 * Use `create(PhaseTransitionSchema)` to create a new message.
 */
export const PhaseTransitionSchema: GenMessage<PhaseTransition> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 18);

/**
 * Event payload for an action
 *
 * @generated from message flyteidl2.workflow.ActionEvent
 */
export type ActionEvent = Message<"flyteidl2.workflow.ActionEvent"> & {
  /**
   * The action id.
   *
   * @generated from field: flyteidl2.common.ActionIdentifier id = 1;
   */
  id?: ActionIdentifier;

  /**
   * The attempt number.
   *
   * @generated from field: uint32 attempt = 2;
   */
  attempt: number;

  /**
   * The phase for this attempt.
   *
   * @generated from field: flyteidl2.workflow.Phase phase = 3;
   */
  phase: Phase;

  /**
   * The version of this attempt and phase.
   *
   * @generated from field: uint32 version = 4;
   */
  version: number;

  /**
   * Time the attempt started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 5 [deprecated = true];
   * @deprecated
   */
  startTime?: Timestamp;

  /**
   * Timestamp when the event occurred, as recorded by the underlying platform (e.g. Kubernetes).
   *
   * @generated from field: google.protobuf.Timestamp updated_time = 6;
   */
  updatedTime?: Timestamp;

  /**
   * Time the attempt ended, if applicable.
   *
   * @generated from field: optional google.protobuf.Timestamp end_time = 7 [deprecated = true];
   * @deprecated
   */
  endTime?: Timestamp;

  /**
   * Error info for the attempt, if failed.
   *
   * @generated from field: optional flyteidl2.workflow.ErrorInfo error_info = 8;
   */
  errorInfo?: ErrorInfo;

  /**
   * Log references.
   *
   * @generated from field: repeated flyteidl2.core.TaskLog log_info = 9;
   */
  logInfo: TaskLog[];

  /**
   * Metadata to associate containers with logs.
   *
   * @generated from field: flyteidl2.core.LogContext log_context = 10;
   */
  logContext?: LogContext;

  /**
   * The cluster this attempt is running on.
   *
   * @generated from field: string cluster = 11;
   */
  cluster: string;

  /**
   * Output references.
   *
   * @generated from field: flyteidl2.workflow.OutputReferences outputs = 12;
   */
  outputs?: OutputReferences;

  /**
   * cache status of the action attempt
   *
   * @generated from field: flyteidl2.core.CatalogCacheStatus cache_status = 13;
   */
  cacheStatus: CatalogCacheStatus;

  /**
   * Cluster events like k8s events in a human-readable form.
   *
   * @generated from field: repeated flyteidl2.workflow.ClusterEvent cluster_events = 14;
   */
  clusterEvents: ClusterEvent[];

  /**
   * Timestamp when the event was observed and reported by the executor
   *
   * @generated from field: google.protobuf.Timestamp reported_time = 15;
   */
  reportedTime?: Timestamp;
};

/**
 * Describes the message flyteidl2.workflow.ActionEvent.
 * Use `create(ActionEventSchema)` to create a new message.
 */
export const ActionEventSchema: GenMessage<ActionEvent> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 19);

/**
 * Named literal value.
 *
 * @generated from message flyteidl2.workflow.NamedLiteral
 */
export type NamedLiteral = Message<"flyteidl2.workflow.NamedLiteral"> & {
  /**
   * Name of the literal.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Literal value.
   *
   * @generated from field: flyteidl2.core.Literal value = 2;
   */
  value?: Literal;
};

/**
 * Describes the message flyteidl2.workflow.NamedLiteral.
 * Use `create(NamedLiteralSchema)` to create a new message.
 */
export const NamedLiteralSchema: GenMessage<NamedLiteral> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 20);

/**
 * Output references.
 *
 * @generated from message flyteidl2.workflow.OutputReferences
 */
export type OutputReferences = Message<"flyteidl2.workflow.OutputReferences"> & {
  /**
   * The output uri.
   *
   * @generated from field: string output_uri = 1;
   */
  outputUri: string;

  /**
   * Native URI to HTML report
   *
   * @generated from field: string report_uri = 2;
   */
  reportUri: string;
};

/**
 * Describes the message flyteidl2.workflow.OutputReferences.
 * Use `create(OutputReferencesSchema)` to create a new message.
 */
export const OutputReferencesSchema: GenMessage<OutputReferences> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 21);

/**
 * Input payload for an action.
 *
 * @generated from message flyteidl2.workflow.Inputs
 */
export type Inputs = Message<"flyteidl2.workflow.Inputs"> & {
  /**
   * Ordered inputs.
   *
   * @generated from field: repeated flyteidl2.workflow.NamedLiteral literals = 1;
   */
  literals: NamedLiteral[];

  /**
   * Context for the action. If an action receives context, it'll automatically pass it to any actions it spawns.
   * Context will not be used for cache key computation.
   * Examples for context include:
   *  - User-provided metadata that is not part of the action's inputs.
   *  - Information about the environment the action is running in (e.g. cluster, region, etc.)
   *  - Tracing information about the action
   *
   * @generated from field: repeated flyteidl2.core.KeyValuePair context = 2;
   */
  context: KeyValuePair[];
};

/**
 * Describes the message flyteidl2.workflow.Inputs.
 * Use `create(InputsSchema)` to create a new message.
 */
export const InputsSchema: GenMessage<Inputs> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 22);

/**
 * Output payload for an action.
 *
 * @generated from message flyteidl2.workflow.Outputs
 */
export type Outputs = Message<"flyteidl2.workflow.Outputs"> & {
  /**
   * Ordered outputs.
   *
   * @generated from field: repeated flyteidl2.workflow.NamedLiteral literals = 1;
   */
  literals: NamedLiteral[];
};

/**
 * Describes the message flyteidl2.workflow.Outputs.
 * Use `create(OutputsSchema)` to create a new message.
 */
export const OutputsSchema: GenMessage<Outputs> = /*@__PURE__*/
  messageDesc(file_idl2_workflow_run_definition, 23);

/**
 * TODO: define phase transitions
 *
 * @generated from enum flyteidl2.workflow.Phase
 */
export enum Phase {
  /**
   * @generated from enum value: PHASE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PHASE_QUEUED = 1;
   */
  QUEUED = 1,

  /**
   * @generated from enum value: PHASE_WAITING_FOR_RESOURCES = 2;
   */
  WAITING_FOR_RESOURCES = 2,

  /**
   * @generated from enum value: PHASE_INITIALIZING = 3;
   */
  INITIALIZING = 3,

  /**
   * @generated from enum value: PHASE_RUNNING = 4;
   */
  RUNNING = 4,

  /**
   * @generated from enum value: PHASE_SUCCEEDED = 5;
   */
  SUCCEEDED = 5,

  /**
   * @generated from enum value: PHASE_FAILED = 6;
   */
  FAILED = 6,

  /**
   * @generated from enum value: PHASE_ABORTED = 7;
   */
  ABORTED = 7,

  /**
   * @generated from enum value: PHASE_TIMED_OUT = 8;
   */
  TIMED_OUT = 8,
}

/**
 * Describes the enum flyteidl2.workflow.Phase.
 */
export const PhaseSchema: GenEnum<Phase> = /*@__PURE__*/
  enumDesc(file_idl2_workflow_run_definition, 0);

