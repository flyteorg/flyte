// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file workflow/state_service.proto (package flyteidl.workflow, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { ActionIdentifier } from "../common/identifier_pb.ts";
import { file_common_identifier } from "../common/identifier_pb.ts";
import type { ExecutionError } from "../core/execution_pb.ts";
import { file_core_execution } from "../core/execution_pb.ts";
import type { Status } from "../google/rpc/status_pb.ts";
import { file_google_rpc_status } from "../google/rpc/status_pb.ts";
import { file_validate_validate } from "../validate/validate_pb.ts";
import type { Phase } from "./run_definition_pb.ts";
import { file_workflow_run_definition } from "./run_definition_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file workflow/state_service.proto.
 */
export const file_workflow_state_service: GenFile = /*@__PURE__*/
  fileDesc("Chx3b3JrZmxvdy9zdGF0ZV9zZXJ2aWNlLnByb3RvEhFmbHl0ZWlkbC53b3JrZmxvdyKcAQoKUHV0UmVxdWVzdBI+CglhY3Rpb25faWQYASABKAsyIS5mbHl0ZWlkbC5jb21tb24uQWN0aW9uSWRlbnRpZmllckII+kIFigECEAESHwoScGFyZW50X2FjdGlvbl9uYW1lGAIgASgJSACIAQESFgoFc3RhdGUYAyABKAlCB/pCBHICEAFCFQoTX3BhcmVudF9hY3Rpb25fbmFtZSJ7CgtQdXRSZXNwb25zZRI+CglhY3Rpb25faWQYASABKAsyIS5mbHl0ZWlkbC5jb21tb24uQWN0aW9uSWRlbnRpZmllckII+kIFigECEAESLAoGc3RhdHVzGAIgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCCPpCBYoBAhABIkwKCkdldFJlcXVlc3QSPgoJYWN0aW9uX2lkGAEgASgLMiEuZmx5dGVpZGwuY29tbW9uLkFjdGlvbklkZW50aWZpZXJCCPpCBYoBAhABIpMBCgtHZXRSZXNwb25zZRI+CglhY3Rpb25faWQYASABKAsyIS5mbHl0ZWlkbC5jb21tb24uQWN0aW9uSWRlbnRpZmllckII+kIFigECEAESLAoGc3RhdHVzGAIgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCCPpCBYoBAhABEhYKBXN0YXRlGAMgASgJQgf6QgRyAhABIlwKDFdhdGNoUmVxdWVzdBI9ChBwYXJlbnRfYWN0aW9uX2lkGAEgASgLMiEuZmx5dGVpZGwuY29tbW9uLkFjdGlvbklkZW50aWZpZXJIAEINCgZmaWx0ZXISA/hCASKSAQoNV2F0Y2hSZXNwb25zZRI4Cg1hY3Rpb25fdXBkYXRlGAEgASgLMh8uZmx5dGVpZGwud29ya2Zsb3cuQWN0aW9uVXBkYXRlSAASPAoPY29udHJvbF9tZXNzYWdlGAIgASgLMiEuZmx5dGVpZGwud29ya2Zsb3cuQ29udHJvbE1lc3NhZ2VIAEIJCgdtZXNzYWdlIiIKDkNvbnRyb2xNZXNzYWdlEhAKCHNlbnRpbmVsGAEgASgIIsgBCgxBY3Rpb25VcGRhdGUSPgoJYWN0aW9uX2lkGAEgASgLMiEuZmx5dGVpZGwuY29tbW9uLkFjdGlvbklkZW50aWZpZXJCCPpCBYoBAhABEicKBXBoYXNlGAIgASgOMhguZmx5dGVpZGwud29ya2Zsb3cuUGhhc2USMQoFZXJyb3IYAyABKAsyHS5mbHl0ZWlkbC5jb3JlLkV4ZWN1dGlvbkVycm9ySACIAQESEgoKb3V0cHV0X3VyaRgEIAEoCUIICgZfZXJyb3Iy9gEKDFN0YXRlU2VydmljZRJKCgNQdXQSHS5mbHl0ZWlkbC53b3JrZmxvdy5QdXRSZXF1ZXN0Gh4uZmx5dGVpZGwud29ya2Zsb3cuUHV0UmVzcG9uc2UiACgBMAESSgoDR2V0Eh0uZmx5dGVpZGwud29ya2Zsb3cuR2V0UmVxdWVzdBoeLmZseXRlaWRsLndvcmtmbG93LkdldFJlc3BvbnNlIgAoATABEk4KBVdhdGNoEh8uZmx5dGVpZGwud29ya2Zsb3cuV2F0Y2hSZXF1ZXN0GiAuZmx5dGVpZGwud29ya2Zsb3cuV2F0Y2hSZXNwb25zZSIAMAFCvwEKFWNvbS5mbHl0ZWlkbC53b3JrZmxvd0IRU3RhdGVTZXJ2aWNlUHJvdG9IAlABWixnaXRodWIuY29tL2ZseXRlb3JnL2ZseXRlL3YyL2dlbi9nby93b3JrZmxvd6ICA0ZXWKoCEUZseXRlaWRsLldvcmtmbG93ygIRRmx5dGVpZGxcV29ya2Zsb3fiAh1GbHl0ZWlkbFxXb3JrZmxvd1xHUEJNZXRhZGF0YeoCEkZseXRlaWRsOjpXb3JrZmxvd2IGcHJvdG8z", [file_common_identifier, file_core_execution, file_google_rpc_status, file_validate_validate, file_workflow_run_definition]);

/**
 * request message to put the state of an action.
 *
 * @generated from message flyteidl.workflow.PutRequest
 */
export type PutRequest = Message<"flyteidl.workflow.PutRequest"> & {
  /**
   * a unique identifier for the action.
   *
   * @generated from field: flyteidl.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   * optional name of the parent action if this is a nested action.
   *
   * @generated from field: optional string parent_action_name = 2;
   */
  parentActionName?: string;

  /**
   * currently we will store state as a json serialized `NodeStatus` object. this will be required
   * to seamlessly integrate with existing FlytePropeller node execution logic. we can update this
   * to be a subset of fields in the future if there are necessary performance improvements.
   *
   * @generated from field: string state = 3;
   */
  state: string;
};

/**
 * Describes the message flyteidl.workflow.PutRequest.
 * Use `create(PutRequestSchema)` to create a new message.
 */
export const PutRequestSchema: GenMessage<PutRequest> = /*@__PURE__*/
  messageDesc(file_workflow_state_service, 0);

/**
 * response message for putting the state of an action.
 *
 * @generated from message flyteidl.workflow.PutResponse
 */
export type PutResponse = Message<"flyteidl.workflow.PutResponse"> & {
  /**
   * a unique identifier for the action.
   *
   * @generated from field: flyteidl.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   * The result.
   *
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;
};

/**
 * Describes the message flyteidl.workflow.PutResponse.
 * Use `create(PutResponseSchema)` to create a new message.
 */
export const PutResponseSchema: GenMessage<PutResponse> = /*@__PURE__*/
  messageDesc(file_workflow_state_service, 1);

/**
 * request message to get the state of an action.
 *
 * @generated from message flyteidl.workflow.GetRequest
 */
export type GetRequest = Message<"flyteidl.workflow.GetRequest"> & {
  /**
   * a unique identifier for the action.
   *
   * @generated from field: flyteidl.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;
};

/**
 * Describes the message flyteidl.workflow.GetRequest.
 * Use `create(GetRequestSchema)` to create a new message.
 */
export const GetRequestSchema: GenMessage<GetRequest> = /*@__PURE__*/
  messageDesc(file_workflow_state_service, 2);

/**
 * response message for getting the state of an action.
 *
 * @generated from message flyteidl.workflow.GetResponse
 */
export type GetResponse = Message<"flyteidl.workflow.GetResponse"> & {
  /**
   * a unique identifier for the action.
   *
   * @generated from field: flyteidl.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   *
   * The result.
   *
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;

  /**
   * a json serialized `NodeStatus` object.
   *
   * @generated from field: string state = 3;
   */
  state: string;
};

/**
 * Describes the message flyteidl.workflow.GetResponse.
 * Use `create(GetResponseSchema)` to create a new message.
 */
export const GetResponseSchema: GenMessage<GetResponse> = /*@__PURE__*/
  messageDesc(file_workflow_state_service, 3);

/**
 * request message for watching updates to the state of actions.
 *
 * @generated from message flyteidl.workflow.WatchRequest
 */
export type WatchRequest = Message<"flyteidl.workflow.WatchRequest"> & {
  /**
   * criteria for filtering which actions to watch.
   *
   * @generated from oneof flyteidl.workflow.WatchRequest.filter
   */
  filter: {
    /**
     * a unique identifier for the parent action to watch. this will result in updates for all child
     * actions.
     *
     * @generated from field: flyteidl.common.ActionIdentifier parent_action_id = 1;
     */
    value: ActionIdentifier;
    case: "parentActionId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl.workflow.WatchRequest.
 * Use `create(WatchRequestSchema)` to create a new message.
 */
export const WatchRequestSchema: GenMessage<WatchRequest> = /*@__PURE__*/
  messageDesc(file_workflow_state_service, 4);

/**
 * response message for watching updates to the state of actions.
 *
 * @generated from message flyteidl.workflow.WatchResponse
 */
export type WatchResponse = Message<"flyteidl.workflow.WatchResponse"> & {
  /**
   * an update to the state of a specific action.
   *
   * @generated from oneof flyteidl.workflow.WatchResponse.message
   */
  message: {
    /**
     * @generated from field: flyteidl.workflow.ActionUpdate action_update = 1;
     */
    value: ActionUpdate;
    case: "actionUpdate";
  } | {
    /**
     * @generated from field: flyteidl.workflow.ControlMessage control_message = 2;
     */
    value: ControlMessage;
    case: "controlMessage";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl.workflow.WatchResponse.
 * Use `create(WatchResponseSchema)` to create a new message.
 */
export const WatchResponseSchema: GenMessage<WatchResponse> = /*@__PURE__*/
  messageDesc(file_workflow_state_service, 5);

/**
 * @generated from message flyteidl.workflow.ControlMessage
 */
export type ControlMessage = Message<"flyteidl.workflow.ControlMessage"> & {
  /**
   * a sentinel value to indicate the end of a stream. this is used to disambiguate between a control message and a
   * regular message. When a watch begins the service will return the existing state of all actions, then a sentinel value,
   * before continuing on with ongoing updates. this sequence disambiguates the current state from new updates.
   *
   * @generated from field: bool sentinel = 1;
   */
  sentinel: boolean;
};

/**
 * Describes the message flyteidl.workflow.ControlMessage.
 * Use `create(ControlMessageSchema)` to create a new message.
 */
export const ControlMessageSchema: GenMessage<ControlMessage> = /*@__PURE__*/
  messageDesc(file_workflow_state_service, 6);

/**
 * message to represent an update to the state of an action.
 *
 * @generated from message flyteidl.workflow.ActionUpdate
 */
export type ActionUpdate = Message<"flyteidl.workflow.ActionUpdate"> & {
  /**
   * A unique identifier for the action. `nil` is used as a sentinel value; for example,
   *
   * @generated from field: flyteidl.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   * the current phase of the action.
   *
   * @generated from field: flyteidl.workflow.Phase phase = 2;
   */
  phase: Phase;

  /**
   * the error associated with the action (if exists).
   *
   * @generated from field: optional flyteidl.core.ExecutionError error = 3;
   */
  error?: ExecutionError;

  /**
   * the output uri for the action
   *
   * @generated from field: string output_uri = 4;
   */
  outputUri: string;
};

/**
 * Describes the message flyteidl.workflow.ActionUpdate.
 * Use `create(ActionUpdateSchema)` to create a new message.
 */
export const ActionUpdateSchema: GenMessage<ActionUpdate> = /*@__PURE__*/
  messageDesc(file_workflow_state_service, 7);

/**
 * provides an interface for managing the state of actions.
 *
 * @generated from service flyteidl.workflow.StateService
 */
export const StateService: GenService<{
  /**
   * put the state of an action.
   *
   * @generated from rpc flyteidl.workflow.StateService.Put
   */
  put: {
    methodKind: "bidi_streaming";
    input: typeof PutRequestSchema;
    output: typeof PutResponseSchema;
  },
  /**
   * get the state of an action.
   *
   * @generated from rpc flyteidl.workflow.StateService.Get
   */
  get: {
    methodKind: "bidi_streaming";
    input: typeof GetRequestSchema;
    output: typeof GetResponseSchema;
  },
  /**
   * watch for updates to the state of actions. this api guarantees at-least-once delivery semantics.
   *
   * @generated from rpc flyteidl.workflow.StateService.Watch
   */
  watch: {
    methodKind: "server_streaming";
    input: typeof WatchRequestSchema;
    output: typeof WatchResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_workflow_state_service, 0);

