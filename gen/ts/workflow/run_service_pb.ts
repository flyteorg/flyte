// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file workflow/run_service.proto (package flyteidl.workflow, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { ActionIdentifier, ClusterIdentifier, ProjectIdentifier, RunIdentifier } from "../common/identifier_pb.ts";
import { file_common_identifier } from "../common/identifier_pb.ts";
import type { Filter, ListRequest } from "../common/list_pb.ts";
import { file_common_list } from "../common/list_pb.ts";
import { file_validate_validate } from "../validate/validate_pb.ts";
import type { Action, ActionDetails, ClusterEvent, EnrichedAction, Inputs, Outputs, Run, RunDetails, RunSpec } from "./run_definition_pb.ts";
import { file_workflow_run_definition } from "./run_definition_pb.ts";
import type { TaskIdentifier, TaskSpec } from "./task_definition_pb.ts";
import { file_workflow_task_definition } from "./task_definition_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file workflow/run_service.proto.
 */
export const file_workflow_run_service: GenFile = /*@__PURE__*/
  fileDesc("Chp3b3JrZmxvdy9ydW5fc2VydmljZS5wcm90bxIRZmx5dGVpZGwud29ya2Zsb3ci/wIKEENyZWF0ZVJ1blJlcXVlc3QSOgoGcnVuX2lkGAEgASgLMh4uZmx5dGVpZGwuY29tbW9uLlJ1bklkZW50aWZpZXJCCPpCBYoBAhABSAASQgoKcHJvamVjdF9pZBgGIAEoCzIiLmZseXRlaWRsLmNvbW1vbi5Qcm9qZWN0SWRlbnRpZmllckII+kIFigECEAFIABI+Cgd0YXNrX2lkGAIgASgLMiEuZmx5dGVpZGwud29ya2Zsb3cuVGFza0lkZW50aWZpZXJCCPpCBYoBAhABSAESOgoJdGFza19zcGVjGAMgASgLMhsuZmx5dGVpZGwud29ya2Zsb3cuVGFza1NwZWNCCPpCBYoBAhABSAESKQoGaW5wdXRzGAQgASgLMhkuZmx5dGVpZGwud29ya2Zsb3cuSW5wdXRzEiwKCHJ1bl9zcGVjGAUgASgLMhouZmx5dGVpZGwud29ya2Zsb3cuUnVuU3BlY0IJCgJpZBID+EIBQgsKBHRhc2sSA/hCASI4ChFDcmVhdGVSdW5SZXNwb25zZRIjCgNydW4YASABKAsyFi5mbHl0ZWlkbC53b3JrZmxvdy5SdW4iawoPQWJvcnRSdW5SZXF1ZXN0EjgKBnJ1bl9pZBgBIAEoCzIeLmZseXRlaWRsLmNvbW1vbi5SdW5JZGVudGlmaWVyQgj6QgWKAQIQARITCgZyZWFzb24YAiABKAlIAIgBAUIJCgdfcmVhc29uIhIKEEFib3J0UnVuUmVzcG9uc2UiUAoUR2V0UnVuRGV0YWlsc1JlcXVlc3QSOAoGcnVuX2lkGAEgASgLMh4uZmx5dGVpZGwuY29tbW9uLlJ1bklkZW50aWZpZXJCCPpCBYoBAhABIkcKFUdldFJ1bkRldGFpbHNSZXNwb25zZRIuCgdkZXRhaWxzGAEgASgLMh0uZmx5dGVpZGwud29ya2Zsb3cuUnVuRGV0YWlscyJSChZXYXRjaFJ1bkRldGFpbHNSZXF1ZXN0EjgKBnJ1bl9pZBgBIAEoCzIeLmZseXRlaWRsLmNvbW1vbi5SdW5JZGVudGlmaWVyQgj6QgWKAQIQASJJChdXYXRjaFJ1bkRldGFpbHNSZXNwb25zZRIuCgdkZXRhaWxzGAEgASgLMh0uZmx5dGVpZGwud29ya2Zsb3cuUnVuRGV0YWlscyJZChdHZXRBY3Rpb25EZXRhaWxzUmVxdWVzdBI+CglhY3Rpb25faWQYASABKAsyIS5mbHl0ZWlkbC5jb21tb24uQWN0aW9uSWRlbnRpZmllckII+kIFigECEAEiTQoYR2V0QWN0aW9uRGV0YWlsc1Jlc3BvbnNlEjEKB2RldGFpbHMYASABKAsyIC5mbHl0ZWlkbC53b3JrZmxvdy5BY3Rpb25EZXRhaWxzIlsKGVdhdGNoQWN0aW9uRGV0YWlsc1JlcXVlc3QSPgoJYWN0aW9uX2lkGAEgASgLMiEuZmx5dGVpZGwuY29tbW9uLkFjdGlvbklkZW50aWZpZXJCCPpCBYoBAhABIk8KGldhdGNoQWN0aW9uRGV0YWlsc1Jlc3BvbnNlEjEKB2RldGFpbHMYASABKAsyIC5mbHl0ZWlkbC53b3JrZmxvdy5BY3Rpb25EZXRhaWxzIlYKFEdldEFjdGlvbkRhdGFSZXF1ZXN0Ej4KCWFjdGlvbl9pZBgBIAEoCzIhLmZseXRlaWRsLmNvbW1vbi5BY3Rpb25JZGVudGlmaWVyQgj6QgWKAQIQASJvChVHZXRBY3Rpb25EYXRhUmVzcG9uc2USKQoGaW5wdXRzGAEgASgLMhkuZmx5dGVpZGwud29ya2Zsb3cuSW5wdXRzEisKB291dHB1dHMYAiABKAsyGi5mbHl0ZWlkbC53b3JrZmxvdy5PdXRwdXRzIrkBCg9MaXN0UnVuc1JlcXVlc3QSLQoHcmVxdWVzdBgBIAEoCzIcLmZseXRlaWRsLmNvbW1vbi5MaXN0UmVxdWVzdBIWCgNvcmcYAiABKAlCB/pCBHICEAFIABJCCgpwcm9qZWN0X2lkGAQgASgLMiIuZmx5dGVpZGwuY29tbW9uLlByb2plY3RJZGVudGlmaWVyQgj6QgWKAQIQAUgAQg8KCHNjb3BlX2J5EgP4QgFKBAgDEARKBAgFEAYiRwoQTGlzdFJ1bnNSZXNwb25zZRIkCgRydW5zGAEgAygLMhYuZmx5dGVpZGwud29ya2Zsb3cuUnVuEg0KBXRva2VuGAIgASgJIoECChBXYXRjaFJ1bnNSZXF1ZXN0EhYKA29yZxgCIAEoCUIH+kIEcgIQAUgAEkIKCmNsdXN0ZXJfaWQYAyABKAsyIi5mbHl0ZWlkbC5jb21tb24uQ2x1c3RlcklkZW50aWZpZXJCCPpCBYoBAhABSAASQgoKcHJvamVjdF9pZBgEIAEoCzIiLmZseXRlaWRsLmNvbW1vbi5Qcm9qZWN0SWRlbnRpZmllckII+kIFigECEAFIABI+Cgd0YXNrX2lkGAUgASgLMiEuZmx5dGVpZGwud29ya2Zsb3cuVGFza0lkZW50aWZpZXJCCPpCBYoBAhABSABCDQoGdGFyZ2V0EgP4QgEiOQoRV2F0Y2hSdW5zUmVzcG9uc2USJAoEcnVucxgBIAMoCzIWLmZseXRlaWRsLndvcmtmbG93LlJ1biJ9ChJMaXN0QWN0aW9uc1JlcXVlc3QSLQoHcmVxdWVzdBgBIAEoCzIcLmZseXRlaWRsLmNvbW1vbi5MaXN0UmVxdWVzdBI4CgZydW5faWQYAiABKAsyHi5mbHl0ZWlkbC5jb21tb24uUnVuSWRlbnRpZmllckII+kIFigECEAEiUAoTTGlzdEFjdGlvbnNSZXNwb25zZRIqCgdhY3Rpb25zGAEgAygLMhkuZmx5dGVpZGwud29ya2Zsb3cuQWN0aW9uEg0KBXRva2VuGAIgASgJIngKE1dhdGNoQWN0aW9uc1JlcXVlc3QSOAoGcnVuX2lkGAEgASgLMh4uZmx5dGVpZGwuY29tbW9uLlJ1bklkZW50aWZpZXJCCPpCBYoBAhABEicKBmZpbHRlchgCIAMoCzIXLmZseXRlaWRsLmNvbW1vbi5GaWx0ZXIiUwoUV2F0Y2hBY3Rpb25zUmVzcG9uc2USOwoQZW5yaWNoZWRfYWN0aW9ucxgBIAMoCzIhLmZseXRlaWRsLndvcmtmbG93LkVucmljaGVkQWN0aW9uIm4KGVdhdGNoQ2x1c3RlckV2ZW50c1JlcXVlc3QSNwoCaWQYASABKAsyIS5mbHl0ZWlkbC5jb21tb24uQWN0aW9uSWRlbnRpZmllckII+kIFigECEAESGAoHYXR0ZW1wdBgCIAEoDUIH+kIEKgIgACJVChpXYXRjaENsdXN0ZXJFdmVudHNSZXNwb25zZRI3Cg5jbHVzdGVyX2V2ZW50cxgBIAMoCzIfLmZseXRlaWRsLndvcmtmbG93LkNsdXN0ZXJFdmVudCJkChJBYm9ydEFjdGlvblJlcXVlc3QSPgoJYWN0aW9uX2lkGAEgASgLMiEuZmx5dGVpZGwuY29tbW9uLkFjdGlvbklkZW50aWZpZXJCCPpCBYoBAhABEg4KBnJlYXNvbhgCIAEoCSIVChNBYm9ydEFjdGlvblJlc3BvbnNlMrsKCgpSdW5TZXJ2aWNlElgKCUNyZWF0ZVJ1bhIjLmZseXRlaWRsLndvcmtmbG93LkNyZWF0ZVJ1blJlcXVlc3QaJC5mbHl0ZWlkbC53b3JrZmxvdy5DcmVhdGVSdW5SZXNwb25zZSIAElUKCEFib3J0UnVuEiIuZmx5dGVpZGwud29ya2Zsb3cuQWJvcnRSdW5SZXF1ZXN0GiMuZmx5dGVpZGwud29ya2Zsb3cuQWJvcnRSdW5SZXNwb25zZSIAEmcKDUdldFJ1bkRldGFpbHMSJy5mbHl0ZWlkbC53b3JrZmxvdy5HZXRSdW5EZXRhaWxzUmVxdWVzdBooLmZseXRlaWRsLndvcmtmbG93LkdldFJ1bkRldGFpbHNSZXNwb25zZSIDkAIBEmwKD1dhdGNoUnVuRGV0YWlscxIpLmZseXRlaWRsLndvcmtmbG93LldhdGNoUnVuRGV0YWlsc1JlcXVlc3QaKi5mbHl0ZWlkbC53b3JrZmxvdy5XYXRjaFJ1bkRldGFpbHNSZXNwb25zZSIAMAEScAoQR2V0QWN0aW9uRGV0YWlscxIqLmZseXRlaWRsLndvcmtmbG93LkdldEFjdGlvbkRldGFpbHNSZXF1ZXN0GisuZmx5dGVpZGwud29ya2Zsb3cuR2V0QWN0aW9uRGV0YWlsc1Jlc3BvbnNlIgOQAgESdQoSV2F0Y2hBY3Rpb25EZXRhaWxzEiwuZmx5dGVpZGwud29ya2Zsb3cuV2F0Y2hBY3Rpb25EZXRhaWxzUmVxdWVzdBotLmZseXRlaWRsLndvcmtmbG93LldhdGNoQWN0aW9uRGV0YWlsc1Jlc3BvbnNlIgAwARJnCg1HZXRBY3Rpb25EYXRhEicuZmx5dGVpZGwud29ya2Zsb3cuR2V0QWN0aW9uRGF0YVJlcXVlc3QaKC5mbHl0ZWlkbC53b3JrZmxvdy5HZXRBY3Rpb25EYXRhUmVzcG9uc2UiA5ACARJYCghMaXN0UnVucxIiLmZseXRlaWRsLndvcmtmbG93Lkxpc3RSdW5zUmVxdWVzdBojLmZseXRlaWRsLndvcmtmbG93Lkxpc3RSdW5zUmVzcG9uc2UiA5ACARJaCglXYXRjaFJ1bnMSIy5mbHl0ZWlkbC53b3JrZmxvdy5XYXRjaFJ1bnNSZXF1ZXN0GiQuZmx5dGVpZGwud29ya2Zsb3cuV2F0Y2hSdW5zUmVzcG9uc2UiADABEmEKC0xpc3RBY3Rpb25zEiUuZmx5dGVpZGwud29ya2Zsb3cuTGlzdEFjdGlvbnNSZXF1ZXN0GiYuZmx5dGVpZGwud29ya2Zsb3cuTGlzdEFjdGlvbnNSZXNwb25zZSIDkAIBEmMKDFdhdGNoQWN0aW9ucxImLmZseXRlaWRsLndvcmtmbG93LldhdGNoQWN0aW9uc1JlcXVlc3QaJy5mbHl0ZWlkbC53b3JrZmxvdy5XYXRjaEFjdGlvbnNSZXNwb25zZSIAMAESdQoSV2F0Y2hDbHVzdGVyRXZlbnRzEiwuZmx5dGVpZGwud29ya2Zsb3cuV2F0Y2hDbHVzdGVyRXZlbnRzUmVxdWVzdBotLmZseXRlaWRsLndvcmtmbG93LldhdGNoQ2x1c3RlckV2ZW50c1Jlc3BvbnNlIgAwARJeCgtBYm9ydEFjdGlvbhIlLmZseXRlaWRsLndvcmtmbG93LkFib3J0QWN0aW9uUmVxdWVzdBomLmZseXRlaWRsLndvcmtmbG93LkFib3J0QWN0aW9uUmVzcG9uc2UiAEK6AQoVY29tLmZseXRlaWRsLndvcmtmbG93Qg9SdW5TZXJ2aWNlUHJvdG9IAlABWilnaXRodWIuY29tL2ZseXRlb3JnL2ZseXRlL2dlbi9nby93b3JrZmxvd6ICA0ZXWKoCEUZseXRlaWRsLldvcmtmbG93ygIRRmx5dGVpZGxcV29ya2Zsb3fiAh1GbHl0ZWlkbFxXb3JrZmxvd1xHUEJNZXRhZGF0YeoCEkZseXRlaWRsOjpXb3JrZmxvd2IGcHJvdG8z", [file_common_identifier, file_common_list, file_validate_validate, file_workflow_run_definition, file_workflow_task_definition]);

/**
 * Request message for creating a run.
 *
 * @generated from message flyteidl.workflow.CreateRunRequest
 */
export type CreateRunRequest = Message<"flyteidl.workflow.CreateRunRequest"> & {
  /**
   * @generated from oneof flyteidl.workflow.CreateRunRequest.id
   */
  id: {
    /**
     * The user provided run id.
     *
     * @generated from field: flyteidl.common.RunIdentifier run_id = 1;
     */
    value: RunIdentifier;
    case: "runId";
  } | {
    /**
     * The project id for this run. Run name will be generated.
     *
     * @generated from field: flyteidl.common.ProjectIdentifier project_id = 6;
     */
    value: ProjectIdentifier;
    case: "projectId";
  } | { case: undefined; value?: undefined };

  /**
   * The task to run.
   *
   * @generated from oneof flyteidl.workflow.CreateRunRequest.task
   */
  task: {
    /**
     * The task id to use.
     *
     * @generated from field: flyteidl.workflow.TaskIdentifier task_id = 2;
     */
    value: TaskIdentifier;
    case: "taskId";
  } | {
    /**
     * The task spec to use.
     *
     * @generated from field: flyteidl.workflow.TaskSpec task_spec = 3;
     */
    value: TaskSpec;
    case: "taskSpec";
  } | { case: undefined; value?: undefined };

  /**
   * Inputs to use.
   *
   * @generated from field: flyteidl.workflow.Inputs inputs = 4;
   */
  inputs?: Inputs;

  /**
   * The run spec to use.
   *
   * @generated from field: flyteidl.workflow.RunSpec run_spec = 5;
   */
  runSpec?: RunSpec;
};

/**
 * Describes the message flyteidl.workflow.CreateRunRequest.
 * Use `create(CreateRunRequestSchema)` to create a new message.
 */
export const CreateRunRequestSchema: GenMessage<CreateRunRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 0);

/**
 * Response message for creating a run.
 *
 * @generated from message flyteidl.workflow.CreateRunResponse
 */
export type CreateRunResponse = Message<"flyteidl.workflow.CreateRunResponse"> & {
  /**
   * @generated from field: flyteidl.workflow.Run run = 1;
   */
  run?: Run;
};

/**
 * Describes the message flyteidl.workflow.CreateRunResponse.
 * Use `create(CreateRunResponseSchema)` to create a new message.
 */
export const CreateRunResponseSchema: GenMessage<CreateRunResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 1);

/**
 * Request message for aborting a run.
 *
 * @generated from message flyteidl.workflow.AbortRunRequest
 */
export type AbortRunRequest = Message<"flyteidl.workflow.AbortRunRequest"> & {
  /**
   * Run to abort.
   *
   * @generated from field: flyteidl.common.RunIdentifier run_id = 1;
   */
  runId?: RunIdentifier;

  /**
   * Reason for aborting the run. if applicable.
   *
   * @generated from field: optional string reason = 2;
   */
  reason?: string;
};

/**
 * Describes the message flyteidl.workflow.AbortRunRequest.
 * Use `create(AbortRunRequestSchema)` to create a new message.
 */
export const AbortRunRequestSchema: GenMessage<AbortRunRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 2);

/**
 * Response message for aborting a run.
 *
 * @generated from message flyteidl.workflow.AbortRunResponse
 */
export type AbortRunResponse = Message<"flyteidl.workflow.AbortRunResponse"> & {
};

/**
 * Describes the message flyteidl.workflow.AbortRunResponse.
 * Use `create(AbortRunResponseSchema)` to create a new message.
 */
export const AbortRunResponseSchema: GenMessage<AbortRunResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 3);

/**
 * Request message for getting detailed information about a run.
 *
 * @generated from message flyteidl.workflow.GetRunDetailsRequest
 */
export type GetRunDetailsRequest = Message<"flyteidl.workflow.GetRunDetailsRequest"> & {
  /**
   * Run to query.
   *
   * @generated from field: flyteidl.common.RunIdentifier run_id = 1;
   */
  runId?: RunIdentifier;
};

/**
 * Describes the message flyteidl.workflow.GetRunDetailsRequest.
 * Use `create(GetRunDetailsRequestSchema)` to create a new message.
 */
export const GetRunDetailsRequestSchema: GenMessage<GetRunDetailsRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 4);

/**
 * Response message for getting detailed information about a run.
 *
 * @generated from message flyteidl.workflow.GetRunDetailsResponse
 */
export type GetRunDetailsResponse = Message<"flyteidl.workflow.GetRunDetailsResponse"> & {
  /**
   * Detailed information about the run.
   *
   * @generated from field: flyteidl.workflow.RunDetails details = 1;
   */
  details?: RunDetails;
};

/**
 * Describes the message flyteidl.workflow.GetRunDetailsResponse.
 * Use `create(GetRunDetailsResponseSchema)` to create a new message.
 */
export const GetRunDetailsResponseSchema: GenMessage<GetRunDetailsResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 5);

/**
 * Request message for watching detailed information about a run.
 *
 * @generated from message flyteidl.workflow.WatchRunDetailsRequest
 */
export type WatchRunDetailsRequest = Message<"flyteidl.workflow.WatchRunDetailsRequest"> & {
  /**
   * Run to query.
   *
   * @generated from field: flyteidl.common.RunIdentifier run_id = 1;
   */
  runId?: RunIdentifier;
};

/**
 * Describes the message flyteidl.workflow.WatchRunDetailsRequest.
 * Use `create(WatchRunDetailsRequestSchema)` to create a new message.
 */
export const WatchRunDetailsRequestSchema: GenMessage<WatchRunDetailsRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 6);

/**
 * Response message for watching detailed information about a run.
 *
 * @generated from message flyteidl.workflow.WatchRunDetailsResponse
 */
export type WatchRunDetailsResponse = Message<"flyteidl.workflow.WatchRunDetailsResponse"> & {
  /**
   * Detailed information about the run.
   *
   * @generated from field: flyteidl.workflow.RunDetails details = 1;
   */
  details?: RunDetails;
};

/**
 * Describes the message flyteidl.workflow.WatchRunDetailsResponse.
 * Use `create(WatchRunDetailsResponseSchema)` to create a new message.
 */
export const WatchRunDetailsResponseSchema: GenMessage<WatchRunDetailsResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 7);

/**
 * Request message for getting detailed information about an action.
 *
 * @generated from message flyteidl.workflow.GetActionDetailsRequest
 */
export type GetActionDetailsRequest = Message<"flyteidl.workflow.GetActionDetailsRequest"> & {
  /**
   * Action to query.
   *
   * @generated from field: flyteidl.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;
};

/**
 * Describes the message flyteidl.workflow.GetActionDetailsRequest.
 * Use `create(GetActionDetailsRequestSchema)` to create a new message.
 */
export const GetActionDetailsRequestSchema: GenMessage<GetActionDetailsRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 8);

/**
 * Response message for getting detailed information about an action.
 *
 * @generated from message flyteidl.workflow.GetActionDetailsResponse
 */
export type GetActionDetailsResponse = Message<"flyteidl.workflow.GetActionDetailsResponse"> & {
  /**
   * Detailed information about the action.
   *
   * @generated from field: flyteidl.workflow.ActionDetails details = 1;
   */
  details?: ActionDetails;
};

/**
 * Describes the message flyteidl.workflow.GetActionDetailsResponse.
 * Use `create(GetActionDetailsResponseSchema)` to create a new message.
 */
export const GetActionDetailsResponseSchema: GenMessage<GetActionDetailsResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 9);

/**
 * Request message for watching detailed information about an action.
 *
 * @generated from message flyteidl.workflow.WatchActionDetailsRequest
 */
export type WatchActionDetailsRequest = Message<"flyteidl.workflow.WatchActionDetailsRequest"> & {
  /**
   * Action to query.
   *
   * @generated from field: flyteidl.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;
};

/**
 * Describes the message flyteidl.workflow.WatchActionDetailsRequest.
 * Use `create(WatchActionDetailsRequestSchema)` to create a new message.
 */
export const WatchActionDetailsRequestSchema: GenMessage<WatchActionDetailsRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 10);

/**
 * Response message for watching detailed information about an action.
 *
 * @generated from message flyteidl.workflow.WatchActionDetailsResponse
 */
export type WatchActionDetailsResponse = Message<"flyteidl.workflow.WatchActionDetailsResponse"> & {
  /**
   * Detailed information about the action.
   *
   * @generated from field: flyteidl.workflow.ActionDetails details = 1;
   */
  details?: ActionDetails;
};

/**
 * Describes the message flyteidl.workflow.WatchActionDetailsResponse.
 * Use `create(WatchActionDetailsResponseSchema)` to create a new message.
 */
export const WatchActionDetailsResponseSchema: GenMessage<WatchActionDetailsResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 11);

/**
 * Request message for querying action data.
 *
 * @generated from message flyteidl.workflow.GetActionDataRequest
 */
export type GetActionDataRequest = Message<"flyteidl.workflow.GetActionDataRequest"> & {
  /**
   * Action to query.
   *
   * @generated from field: flyteidl.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;
};

/**
 * Describes the message flyteidl.workflow.GetActionDataRequest.
 * Use `create(GetActionDataRequestSchema)` to create a new message.
 */
export const GetActionDataRequestSchema: GenMessage<GetActionDataRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 12);

/**
 * Response message for querying action data.
 *
 * @generated from message flyteidl.workflow.GetActionDataResponse
 */
export type GetActionDataResponse = Message<"flyteidl.workflow.GetActionDataResponse"> & {
  /**
   * Inputs for the action.
   *
   * @generated from field: flyteidl.workflow.Inputs inputs = 1;
   */
  inputs?: Inputs;

  /**
   * Outputs for the action.
   *
   * @generated from field: flyteidl.workflow.Outputs outputs = 2;
   */
  outputs?: Outputs;
};

/**
 * Describes the message flyteidl.workflow.GetActionDataResponse.
 * Use `create(GetActionDataResponseSchema)` to create a new message.
 */
export const GetActionDataResponseSchema: GenMessage<GetActionDataResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 13);

/**
 * Request message for listing runs.
 *
 * @generated from message flyteidl.workflow.ListRunsRequest
 */
export type ListRunsRequest = Message<"flyteidl.workflow.ListRunsRequest"> & {
  /**
   * Common list request parameters.
   *
   * @generated from field: flyteidl.common.ListRequest request = 1;
   */
  request?: ListRequest;

  /**
   * @generated from oneof flyteidl.workflow.ListRunsRequest.scope_by
   */
  scopeBy: {
    /**
     * Organization name for filtering runs.
     *
     * @generated from field: string org = 2;
     */
    value: string;
    case: "org";
  } | {
    /**
     * Project identifier for filtering runs.
     *
     * @generated from field: flyteidl.common.ProjectIdentifier project_id = 4;
     */
    value: ProjectIdentifier;
    case: "projectId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl.workflow.ListRunsRequest.
 * Use `create(ListRunsRequestSchema)` to create a new message.
 */
export const ListRunsRequestSchema: GenMessage<ListRunsRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 14);

/**
 * Response message for listing runs.
 *
 * @generated from message flyteidl.workflow.ListRunsResponse
 */
export type ListRunsResponse = Message<"flyteidl.workflow.ListRunsResponse"> & {
  /**
   * List of runs matching the filter criteria.
   *
   * @generated from field: repeated flyteidl.workflow.Run runs = 1;
   */
  runs: Run[];

  /**
   * Token for fetching the next page of results, if any.
   *
   * @generated from field: string token = 2;
   */
  token: string;
};

/**
 * Describes the message flyteidl.workflow.ListRunsResponse.
 * Use `create(ListRunsResponseSchema)` to create a new message.
 */
export const ListRunsResponseSchema: GenMessage<ListRunsResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 15);

/**
 * Request message for watching runs.
 *
 * @generated from message flyteidl.workflow.WatchRunsRequest
 */
export type WatchRunsRequest = Message<"flyteidl.workflow.WatchRunsRequest"> & {
  /**
   * @generated from oneof flyteidl.workflow.WatchRunsRequest.target
   */
  target: {
    /**
     * Organization name for filtering runs.
     *
     * @generated from field: string org = 2;
     */
    value: string;
    case: "org";
  } | {
    /**
     * Cluster identifier for filtering runs.
     *
     * @generated from field: flyteidl.common.ClusterIdentifier cluster_id = 3;
     */
    value: ClusterIdentifier;
    case: "clusterId";
  } | {
    /**
     * Project identifier for filtering runs.
     *
     * @generated from field: flyteidl.common.ProjectIdentifier project_id = 4;
     */
    value: ProjectIdentifier;
    case: "projectId";
  } | {
    /**
     * Task identifier for filtering runs.
     *
     * @generated from field: flyteidl.workflow.TaskIdentifier task_id = 5;
     */
    value: TaskIdentifier;
    case: "taskId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl.workflow.WatchRunsRequest.
 * Use `create(WatchRunsRequestSchema)` to create a new message.
 */
export const WatchRunsRequestSchema: GenMessage<WatchRunsRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 16);

/**
 * Response message for watching runs.
 *
 * @generated from message flyteidl.workflow.WatchRunsResponse
 */
export type WatchRunsResponse = Message<"flyteidl.workflow.WatchRunsResponse"> & {
  /**
   * New or updated runs matching the filter criteria.
   *
   * @generated from field: repeated flyteidl.workflow.Run runs = 1;
   */
  runs: Run[];
};

/**
 * Describes the message flyteidl.workflow.WatchRunsResponse.
 * Use `create(WatchRunsResponseSchema)` to create a new message.
 */
export const WatchRunsResponseSchema: GenMessage<WatchRunsResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 17);

/**
 * Request message for listing actions.
 *
 * @generated from message flyteidl.workflow.ListActionsRequest
 */
export type ListActionsRequest = Message<"flyteidl.workflow.ListActionsRequest"> & {
  /**
   * Common list request parameters.
   *
   * @generated from field: flyteidl.common.ListRequest request = 1;
   */
  request?: ListRequest;

  /**
   * Run identifier for filtering actions.
   *
   * @generated from field: flyteidl.common.RunIdentifier run_id = 2;
   */
  runId?: RunIdentifier;
};

/**
 * Describes the message flyteidl.workflow.ListActionsRequest.
 * Use `create(ListActionsRequestSchema)` to create a new message.
 */
export const ListActionsRequestSchema: GenMessage<ListActionsRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 18);

/**
 * Response message for listing actions.
 *
 * @generated from message flyteidl.workflow.ListActionsResponse
 */
export type ListActionsResponse = Message<"flyteidl.workflow.ListActionsResponse"> & {
  /**
   * List of actions matching the filter criteria.
   *
   * @generated from field: repeated flyteidl.workflow.Action actions = 1;
   */
  actions: Action[];

  /**
   * Token for fetching the next page of results, if any.
   *
   * @generated from field: string token = 2;
   */
  token: string;
};

/**
 * Describes the message flyteidl.workflow.ListActionsResponse.
 * Use `create(ListActionsResponseSchema)` to create a new message.
 */
export const ListActionsResponseSchema: GenMessage<ListActionsResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 19);

/**
 * Request message for watching actions.
 *
 * @generated from message flyteidl.workflow.WatchActionsRequest
 */
export type WatchActionsRequest = Message<"flyteidl.workflow.WatchActionsRequest"> & {
  /**
   * Run identifier for filtering actions.
   *
   * @generated from field: flyteidl.common.RunIdentifier run_id = 1;
   */
  runId?: RunIdentifier;

  /**
   * Optional filter(s) criteria for actions.
   * Valid filter fields include:
   * - NAME (must use function CONTAINS_CASE_INSENSITIVE): the value is whatever string to match to. This will cast all strings to lowercase and match.
   * - PHASE (must use function VALUE_IN): the value is the stringified integer of the enum of the phase and you can pass multiple phases (i.e. ["1", "4"])
   *
   * @generated from field: repeated flyteidl.common.Filter filter = 2;
   */
  filter: Filter[];
};

/**
 * Describes the message flyteidl.workflow.WatchActionsRequest.
 * Use `create(WatchActionsRequestSchema)` to create a new message.
 */
export const WatchActionsRequestSchema: GenMessage<WatchActionsRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 20);

/**
 * Response message for watching actions, comes with enriched action metadata.
 *
 * @generated from message flyteidl.workflow.WatchActionsResponse
 */
export type WatchActionsResponse = Message<"flyteidl.workflow.WatchActionsResponse"> & {
  /**
   * New or updated actions matching the filter criteria. Enriched with children status counts
   *
   * @generated from field: repeated flyteidl.workflow.EnrichedAction enriched_actions = 1;
   */
  enrichedActions: EnrichedAction[];
};

/**
 * Describes the message flyteidl.workflow.WatchActionsResponse.
 * Use `create(WatchActionsResponseSchema)` to create a new message.
 */
export const WatchActionsResponseSchema: GenMessage<WatchActionsResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 21);

/**
 * @generated from message flyteidl.workflow.WatchClusterEventsRequest
 */
export type WatchClusterEventsRequest = Message<"flyteidl.workflow.WatchClusterEventsRequest"> & {
  /**
   * @generated from field: flyteidl.common.ActionIdentifier id = 1;
   */
  id?: ActionIdentifier;

  /**
   * @generated from field: uint32 attempt = 2;
   */
  attempt: number;
};

/**
 * Describes the message flyteidl.workflow.WatchClusterEventsRequest.
 * Use `create(WatchClusterEventsRequestSchema)` to create a new message.
 */
export const WatchClusterEventsRequestSchema: GenMessage<WatchClusterEventsRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 22);

/**
 * @generated from message flyteidl.workflow.WatchClusterEventsResponse
 */
export type WatchClusterEventsResponse = Message<"flyteidl.workflow.WatchClusterEventsResponse"> & {
  /**
   * @generated from field: repeated flyteidl.workflow.ClusterEvent cluster_events = 1;
   */
  clusterEvents: ClusterEvent[];
};

/**
 * Describes the message flyteidl.workflow.WatchClusterEventsResponse.
 * Use `create(WatchClusterEventsResponseSchema)` to create a new message.
 */
export const WatchClusterEventsResponseSchema: GenMessage<WatchClusterEventsResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 23);

/**
 * @generated from message flyteidl.workflow.AbortActionRequest
 */
export type AbortActionRequest = Message<"flyteidl.workflow.AbortActionRequest"> & {
  /**
   * Action to abort.
   *
   * @generated from field: flyteidl.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   * Optional reason for aborting the action.
   *
   * @generated from field: string reason = 2;
   */
  reason: string;
};

/**
 * Describes the message flyteidl.workflow.AbortActionRequest.
 * Use `create(AbortActionRequestSchema)` to create a new message.
 */
export const AbortActionRequestSchema: GenMessage<AbortActionRequest> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 24);

/**
 * @generated from message flyteidl.workflow.AbortActionResponse
 */
export type AbortActionResponse = Message<"flyteidl.workflow.AbortActionResponse"> & {
};

/**
 * Describes the message flyteidl.workflow.AbortActionResponse.
 * Use `create(AbortActionResponseSchema)` to create a new message.
 */
export const AbortActionResponseSchema: GenMessage<AbortActionResponse> = /*@__PURE__*/
  messageDesc(file_workflow_run_service, 25);

/**
 * RunService provides an interface for managing runs.
 *
 * @generated from service flyteidl.workflow.RunService
 */
export const RunService: GenService<{
  /**
   * Create a new run of the given task.
   *
   * @generated from rpc flyteidl.workflow.RunService.CreateRun
   */
  createRun: {
    methodKind: "unary";
    input: typeof CreateRunRequestSchema;
    output: typeof CreateRunResponseSchema;
  },
  /**
   * Abort a run.
   *
   * @generated from rpc flyteidl.workflow.RunService.AbortRun
   */
  abortRun: {
    methodKind: "unary";
    input: typeof AbortRunRequestSchema;
    output: typeof AbortRunResponseSchema;
  },
  /**
   * Get detailed information about a run.
   *
   * @generated from rpc flyteidl.workflow.RunService.GetRunDetails
   */
  getRunDetails: {
    methodKind: "unary";
    input: typeof GetRunDetailsRequestSchema;
    output: typeof GetRunDetailsResponseSchema;
  },
  /**
   * Stream detailed information updates about a run. The call will terminate when the run reaches a terminal phase.
   *
   * @generated from rpc flyteidl.workflow.RunService.WatchRunDetails
   */
  watchRunDetails: {
    methodKind: "server_streaming";
    input: typeof WatchRunDetailsRequestSchema;
    output: typeof WatchRunDetailsResponseSchema;
  },
  /**
   * Get detailed information about an action.
   *
   * @generated from rpc flyteidl.workflow.RunService.GetActionDetails
   */
  getActionDetails: {
    methodKind: "unary";
    input: typeof GetActionDetailsRequestSchema;
    output: typeof GetActionDetailsResponseSchema;
  },
  /**
   * Stream detailed information updates about an action. The call will terminate when the action reaches a terminal phase.
   *
   * @generated from rpc flyteidl.workflow.RunService.WatchActionDetails
   */
  watchActionDetails: {
    methodKind: "server_streaming";
    input: typeof WatchActionDetailsRequestSchema;
    output: typeof WatchActionDetailsResponseSchema;
  },
  /**
   * Get input and output for an action.
   *
   * @generated from rpc flyteidl.workflow.RunService.GetActionData
   */
  getActionData: {
    methodKind: "unary";
    input: typeof GetActionDataRequestSchema;
    output: typeof GetActionDataResponseSchema;
  },
  /**
   * List runs based on the provided filter criteria.
   *
   * @generated from rpc flyteidl.workflow.RunService.ListRuns
   */
  listRuns: {
    methodKind: "unary";
    input: typeof ListRunsRequestSchema;
    output: typeof ListRunsResponseSchema;
  },
  /**
   * Stream updates for runs based on the provided filter criteria. Responses may include newly discovered
   * runs or updates to existing ones from the point of invocation.
   *
   * @generated from rpc flyteidl.workflow.RunService.WatchRuns
   */
  watchRuns: {
    methodKind: "server_streaming";
    input: typeof WatchRunsRequestSchema;
    output: typeof WatchRunsResponseSchema;
  },
  /**
   * List all actions for a given run.
   *
   * @generated from rpc flyteidl.workflow.RunService.ListActions
   */
  listActions: {
    methodKind: "unary";
    input: typeof ListActionsRequestSchema;
    output: typeof ListActionsResponseSchema;
  },
  /**
   * Stream updates for actions given a run. Responses may include newly discovered nested runs or updates
   * to  existing ones from the point of invocation.
   *
   * @generated from rpc flyteidl.workflow.RunService.WatchActions
   */
  watchActions: {
    methodKind: "server_streaming";
    input: typeof WatchActionsRequestSchema;
    output: typeof WatchActionsResponseSchema;
  },
  /**
   * Stream of k8s cluster events in human readable form
   *
   * @generated from rpc flyteidl.workflow.RunService.WatchClusterEvents
   */
  watchClusterEvents: {
    methodKind: "server_streaming";
    input: typeof WatchClusterEventsRequestSchema;
    output: typeof WatchClusterEventsResponseSchema;
  },
  /**
   * AbortAction aborts a single action that was previously created or is currently being processed by a worker.
   *
   * @generated from rpc flyteidl.workflow.RunService.AbortAction
   */
  abortAction: {
    methodKind: "unary";
    input: typeof AbortActionRequestSchema;
    output: typeof AbortActionResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_workflow_run_service, 0);

