// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file workflow/queue_service.proto (package flyteidl.workflow, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { ActionIdentifier, RunIdentifier } from "../common/identifier_pb.ts";
import { file_common_identifier } from "../common/identifier_pb.ts";
import type { LiteralType } from "../core/types_pb.ts";
import { file_core_types } from "../core/types_pb.ts";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import { file_validate_validate } from "../validate/validate_pb.ts";
import type { OutputReferences, Phase, RunSpec } from "./run_definition_pb.ts";
import { file_workflow_run_definition } from "./run_definition_pb.ts";
import type { TaskIdentifier, TaskSpec } from "./task_definition_pb.ts";
import { file_workflow_task_definition } from "./task_definition_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file workflow/queue_service.proto.
 */
export const file_workflow_queue_service: GenFile = /*@__PURE__*/
  fileDesc("Chx3b3JrZmxvdy9xdWV1ZV9zZXJ2aWNlLnByb3RvEhFmbHl0ZWlkbC53b3JrZmxvdyJiChBXb3JrZXJJZGVudGlmaWVyEh0KDG9yZ2FuaXphdGlvbhgBIAEoCUIH+kIEcgIQARIYCgdjbHVzdGVyGAIgASgJQgf6QgRyAhABEhUKBG5hbWUYAyABKAlCB/pCBHICEAEi2QMKFEVucXVldWVBY3Rpb25SZXF1ZXN0Ej4KCWFjdGlvbl9pZBgBIAEoCzIhLmZseXRlaWRsLmNvbW1vbi5BY3Rpb25JZGVudGlmaWVyQgj6QgWKAQIQARIfChJwYXJlbnRfYWN0aW9uX25hbWUYAiABKAlIAYgBARIsCghydW5fc3BlYxgDIAEoCzIaLmZseXRlaWRsLndvcmtmbG93LlJ1blNwZWMSGgoJaW5wdXRfdXJpGAYgASgJQgf6QgRyAhABEiAKD3J1bl9vdXRwdXRfYmFzZRgHIAEoCUIH+kIEcgIQARINCgVncm91cBgIIAEoCRIPCgdzdWJqZWN0GAkgASgJEjcKBHRhc2sYCiABKAsyHS5mbHl0ZWlkbC53b3JrZmxvdy5UYXNrQWN0aW9uQgj6QgWKAQIQAUgAEjkKBXRyYWNlGAsgASgLMh4uZmx5dGVpZGwud29ya2Zsb3cuVHJhY2VBY3Rpb25CCPpCBYoBAhABSAASQQoJY29uZGl0aW9uGAwgASgLMiIuZmx5dGVpZGwud29ya2Zsb3cuQ29uZGl0aW9uQWN0aW9uQgj6QgWKAQIQAUgAQgYKBHNwZWNCFQoTX3BhcmVudF9hY3Rpb25fbmFtZSKyAQoKVGFza0FjdGlvbhItCgJpZBgBIAEoCzIhLmZseXRlaWRsLndvcmtmbG93LlRhc2tJZGVudGlmaWVyEjMKBHNwZWMYAiABKAsyGy5mbHl0ZWlkbC53b3JrZmxvdy5UYXNrU3BlY0II+kIFigECEAESLwoJY2FjaGVfa2V5GAMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEg8KB2NsdXN0ZXIYBCABKAki8wEKC1RyYWNlQWN0aW9uEhUKBG5hbWUYASABKAlCB/pCBHICEAESJwoFcGhhc2UYAiABKA4yGC5mbHl0ZWlkbC53b3JrZmxvdy5QaGFzZRIuCgpzdGFydF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIxCghlbmRfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAIgBARI0CgdvdXRwdXRzGAUgASgLMiMuZmx5dGVpZGwud29ya2Zsb3cuT3V0cHV0UmVmZXJlbmNlc0ILCglfZW5kX3RpbWUi0AEKD0NvbmRpdGlvbkFjdGlvbhIVCgRuYW1lGAEgASgJQgf6QgRyAhABEhkKBnJ1bl9pZBgCIAEoCUIH+kIEcgIQAUgAEhwKCWFjdGlvbl9pZBgDIAEoCUIH+kIEcgIQAUgAEhAKBmdsb2JhbBgEIAEoCEgAEigKBHR5cGUYBiABKAsyGi5mbHl0ZWlkbC5jb3JlLkxpdGVyYWxUeXBlEg4KBnByb21wdBgHIAEoCRITCgtkZXNjcmlwdGlvbhgIIAEoCUIMCgVzY29wZRID+EIBIhcKFUVucXVldWVBY3Rpb25SZXNwb25zZSJRChVBYm9ydFF1ZXVlZFJ1blJlcXVlc3QSOAoGcnVuX2lkGAEgASgLMh4uZmx5dGVpZGwuY29tbW9uLlJ1bklkZW50aWZpZXJCCPpCBYoBAhABIhgKFkFib3J0UXVldWVkUnVuUmVzcG9uc2Uy3QEKDFF1ZXVlU2VydmljZRJkCg1FbnF1ZXVlQWN0aW9uEicuZmx5dGVpZGwud29ya2Zsb3cuRW5xdWV1ZUFjdGlvblJlcXVlc3QaKC5mbHl0ZWlkbC53b3JrZmxvdy5FbnF1ZXVlQWN0aW9uUmVzcG9uc2UiABJnCg5BYm9ydFF1ZXVlZFJ1bhIoLmZseXRlaWRsLndvcmtmbG93LkFib3J0UXVldWVkUnVuUmVxdWVzdBopLmZseXRlaWRsLndvcmtmbG93LkFib3J0UXVldWVkUnVuUmVzcG9uc2UiAEK8AQoVY29tLmZseXRlaWRsLndvcmtmbG93QhFRdWV1ZVNlcnZpY2VQcm90b0gCUAFaKWdpdGh1Yi5jb20vZmx5dGVvcmcvZmx5dGUvZ2VuL2dvL3dvcmtmbG93ogIDRldYqgIRRmx5dGVpZGwuV29ya2Zsb3fKAhFGbHl0ZWlkbFxXb3JrZmxvd+ICHUZseXRlaWRsXFdvcmtmbG93XEdQQk1ldGFkYXRh6gISRmx5dGVpZGw6OldvcmtmbG93YgZwcm90bzM", [file_common_identifier, file_core_types, file_google_protobuf_timestamp, file_google_protobuf_wrappers, file_validate_validate, file_workflow_run_definition, file_workflow_task_definition]);

/**
 * @generated from message flyteidl.workflow.WorkerIdentifier
 */
export type WorkerIdentifier = Message<"flyteidl.workflow.WorkerIdentifier"> & {
  /**
   * the organization that this worker is associated with.
   *
   * @generated from field: string organization = 1;
   */
  organization: string;

  /**
   * the cluster this worker is part of.
   *
   * @generated from field: string cluster = 2;
   */
  cluster: string;

  /**
   * the name for the worker, when combined with organization, and cluster this will form a unique
   * identifier for the worker.
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message flyteidl.workflow.WorkerIdentifier.
 * Use `create(WorkerIdentifierSchema)` to create a new message.
 */
export const WorkerIdentifierSchema: GenMessage<WorkerIdentifier> = /*@__PURE__*/
  messageDesc(file_workflow_queue_service, 0);

/**
 * request message for queuing an action.
 *
 * @generated from message flyteidl.workflow.EnqueueActionRequest
 */
export type EnqueueActionRequest = Message<"flyteidl.workflow.EnqueueActionRequest"> & {
  /**
   * the unique identifier for the action.
   *
   * @generated from field: flyteidl.common.ActionIdentifier action_id = 1;
   */
  actionId?: ActionIdentifier;

  /**
   * an optional name for the parent action, if it exists. the remaining run metadata (ex. org,
   * project, domain) will be the same as the action_id defined above.
   *
   * @generated from field: optional string parent_action_name = 2;
   */
  parentActionName?: string;

  /**
   * Optional run spec passed in by the root action to be utilized by all downstream actions in the run.
   *
   * @generated from field: flyteidl.workflow.RunSpec run_spec = 3;
   */
  runSpec?: RunSpec;

  /**
   * the path to the input data for this action.
   *
   * @generated from field: string input_uri = 6;
   */
  inputUri: string;

  /**
   * the run base path this action should write its output to.
   *
   * @generated from field: string run_output_base = 7;
   */
  runOutputBase: string;

  /**
   * group this action belongs to, if applicable.
   *
   * @generated from field: string group = 8;
   */
  group: string;

  /**
   * subject that created the run, if known.
   *
   * @generated from field: string subject = 9;
   */
  subject: string;

  /**
   * @generated from oneof flyteidl.workflow.EnqueueActionRequest.spec
   */
  spec: {
    /**
     * TODO(haytham): Uncomment when we update all code paths to use this.
     * option (validate.required) = true;
     *
     * @generated from field: flyteidl.workflow.TaskAction task = 10;
     */
    value: TaskAction;
    case: "task";
  } | {
    /**
     * @generated from field: flyteidl.workflow.TraceAction trace = 11;
     */
    value: TraceAction;
    case: "trace";
  } | {
    /**
     * @generated from field: flyteidl.workflow.ConditionAction condition = 12;
     */
    value: ConditionAction;
    case: "condition";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl.workflow.EnqueueActionRequest.
 * Use `create(EnqueueActionRequestSchema)` to create a new message.
 */
export const EnqueueActionRequestSchema: GenMessage<EnqueueActionRequest> = /*@__PURE__*/
  messageDesc(file_workflow_queue_service, 1);

/**
 * @generated from message flyteidl.workflow.TaskAction
 */
export type TaskAction = Message<"flyteidl.workflow.TaskAction"> & {
  /**
   * a unique identifier for the task this action is associated with, if applicable.
   *
   * @generated from field: flyteidl.workflow.TaskIdentifier id = 1;
   */
  id?: TaskIdentifier;

  /**
   * the definition of the task to be executed.
   *
   * @generated from field: flyteidl.workflow.TaskSpec spec = 2;
   */
  spec?: TaskSpec;

  /**
   * Enables caching when set and specifies the cache version to use.
   *
   * @generated from field: google.protobuf.StringValue cache_key = 3;
   */
  cacheKey?: string;

  /**
   * the specific cluster that this action should be executed on. if not set, the cluster from the
   * `RunSpec` will be used.
   *
   * @generated from field: string cluster = 4;
   */
  cluster: string;
};

/**
 * Describes the message flyteidl.workflow.TaskAction.
 * Use `create(TaskActionSchema)` to create a new message.
 */
export const TaskActionSchema: GenMessage<TaskAction> = /*@__PURE__*/
  messageDesc(file_workflow_queue_service, 2);

/**
 * TraceAction is used to define a trace action that can be used to track the execution of an action that's managed
 * by the local worker. This can be used to bring determinism to code that's otherwise not deterministic (e.g. current
 * time).
 *
 * @generated from message flyteidl.workflow.TraceAction
 */
export type TraceAction = Message<"flyteidl.workflow.TraceAction"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Last known phase.
   *
   * @generated from field: flyteidl.workflow.Phase phase = 2;
   */
  phase: Phase;

  /**
   * Time the attempt started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  /**
   * Time the attempt ended, if applicable.
   *
   * @generated from field: optional google.protobuf.Timestamp end_time = 4;
   */
  endTime?: Timestamp;

  /**
   * Output references.
   *
   * @generated from field: flyteidl.workflow.OutputReferences outputs = 5;
   */
  outputs?: OutputReferences;
};

/**
 * Describes the message flyteidl.workflow.TraceAction.
 * Use `create(TraceActionSchema)` to create a new message.
 */
export const TraceActionSchema: GenMessage<TraceAction> = /*@__PURE__*/
  messageDesc(file_workflow_queue_service, 3);

/**
 * ConditionAction is used to define a condition that can be evaluated at runtime. It can be used to
 * await a signal from an external system and can carry a value.
 *
 * @generated from message flyteidl.workflow.ConditionAction
 */
export type ConditionAction = Message<"flyteidl.workflow.ConditionAction"> & {
  /**
   * Name is the unique identifier for the action. It must be unique within the defined scope below.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof flyteidl.workflow.ConditionAction.scope
   */
  scope: {
    /**
     * RunId is the unique identifier for the run this action is associated with.
     *
     * @generated from field: string run_id = 2;
     */
    value: string;
    case: "runId";
  } | {
    /**
     * ActionId is the unique identifier for the action this action is associated with.
     *
     * @generated from field: string action_id = 3;
     */
    value: string;
    case: "actionId";
  } | {
    /**
     * Global indicates the condition is global and can be used across all runs and actions.
     *
     * @generated from field: bool global = 4;
     */
    value: boolean;
    case: "global";
  } | { case: undefined; value?: undefined };

  /**
   * Type is the type of the value the condition is expected. This can be used to properly render
   * a UI element for the condition or validate when a value is received that it is of the expected
   * type.
   *
   * @generated from field: flyteidl.core.LiteralType type = 6;
   */
  type?: LiteralType;

  /**
   * Prompt is the prompt that will be shown to the user when the condition is awaited.
   *
   * @generated from field: string prompt = 7;
   */
  prompt: string;

  /**
   * Description is a description of the condition. This can be used to provide additional
   * information to the user about the condition.
   *
   * @generated from field: string description = 8;
   */
  description: string;
};

/**
 * Describes the message flyteidl.workflow.ConditionAction.
 * Use `create(ConditionActionSchema)` to create a new message.
 */
export const ConditionActionSchema: GenMessage<ConditionAction> = /*@__PURE__*/
  messageDesc(file_workflow_queue_service, 4);

/**
 * response message for queuing an action.
 *
 * @generated from message flyteidl.workflow.EnqueueActionResponse
 */
export type EnqueueActionResponse = Message<"flyteidl.workflow.EnqueueActionResponse"> & {
};

/**
 * Describes the message flyteidl.workflow.EnqueueActionResponse.
 * Use `create(EnqueueActionResponseSchema)` to create a new message.
 */
export const EnqueueActionResponseSchema: GenMessage<EnqueueActionResponse> = /*@__PURE__*/
  messageDesc(file_workflow_queue_service, 5);

/**
 * request message for aborting a run.
 *
 * @generated from message flyteidl.workflow.AbortQueuedRunRequest
 */
export type AbortQueuedRunRequest = Message<"flyteidl.workflow.AbortQueuedRunRequest"> & {
  /**
   * the unique identifier for the run to be aborted.
   *
   * @generated from field: flyteidl.common.RunIdentifier run_id = 1;
   */
  runId?: RunIdentifier;
};

/**
 * Describes the message flyteidl.workflow.AbortQueuedRunRequest.
 * Use `create(AbortQueuedRunRequestSchema)` to create a new message.
 */
export const AbortQueuedRunRequestSchema: GenMessage<AbortQueuedRunRequest> = /*@__PURE__*/
  messageDesc(file_workflow_queue_service, 6);

/**
 * response message for aborting a run.
 *
 * @generated from message flyteidl.workflow.AbortQueuedRunResponse
 */
export type AbortQueuedRunResponse = Message<"flyteidl.workflow.AbortQueuedRunResponse"> & {
};

/**
 * Describes the message flyteidl.workflow.AbortQueuedRunResponse.
 * Use `create(AbortQueuedRunResponseSchema)` to create a new message.
 */
export const AbortQueuedRunResponseSchema: GenMessage<AbortQueuedRunResponse> = /*@__PURE__*/
  messageDesc(file_workflow_queue_service, 7);

/**
 * provides an interface for managing execution of runs over a collection of workers.
 *
 * @generated from service flyteidl.workflow.QueueService
 */
export const QueueService: GenService<{
  /**
   * queue a new action for execution.
   *
   * @generated from rpc flyteidl.workflow.QueueService.EnqueueAction
   */
  enqueueAction: {
    methodKind: "unary";
    input: typeof EnqueueActionRequestSchema;
    output: typeof EnqueueActionResponseSchema;
  },
  /**
   * abort a queued run.
   *
   * @generated from rpc flyteidl.workflow.QueueService.AbortQueuedRun
   */
  abortQueuedRun: {
    methodKind: "unary";
    input: typeof AbortQueuedRunRequestSchema;
    output: typeof AbortQueuedRunResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_workflow_queue_service, 0);

