// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file core/interface.proto (package flyteidl.core, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { LiteralType } from "./types_pb.ts";
import { file_core_types } from "./types_pb.ts";
import type { Literal } from "./literals_pb.ts";
import { file_core_literals } from "./literals_pb.ts";
import type { ArtifactID, ArtifactQuery, ArtifactTag } from "./artifact_id_pb.ts";
import { file_core_artifact_id } from "./artifact_id_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file core/interface.proto.
 */
export const file_core_interface: GenFile = /*@__PURE__*/
  fileDesc("ChRjb3JlL2ludGVyZmFjZS5wcm90bxINZmx5dGVpZGwuY29yZSKzAQoIVmFyaWFibGUSKAoEdHlwZRgBIAEoCzIaLmZseXRlaWRsLmNvcmUuTGl0ZXJhbFR5cGUSEwoLZGVzY3JpcHRpb24YAiABKAkSNgoTYXJ0aWZhY3RfcGFydGlhbF9pZBgDIAEoCzIZLmZseXRlaWRsLmNvcmUuQXJ0aWZhY3RJRBIwCgxhcnRpZmFjdF90YWcYBCABKAsyGi5mbHl0ZWlkbC5jb3JlLkFydGlmYWN0VGFnIpYBCgtWYXJpYWJsZU1hcBI8Cgl2YXJpYWJsZXMYASADKAsyKS5mbHl0ZWlkbC5jb3JlLlZhcmlhYmxlTWFwLlZhcmlhYmxlc0VudHJ5GkkKDlZhcmlhYmxlc0VudHJ5EgsKA2tleRgBIAEoCRImCgV2YWx1ZRgCIAEoCzIXLmZseXRlaWRsLmNvcmUuVmFyaWFibGU6AjgBImkKDlR5cGVkSW50ZXJmYWNlEioKBmlucHV0cxgBIAEoCzIaLmZseXRlaWRsLmNvcmUuVmFyaWFibGVNYXASKwoHb3V0cHV0cxgCIAEoCzIaLmZseXRlaWRsLmNvcmUuVmFyaWFibGVNYXAi5gEKCVBhcmFtZXRlchIkCgN2YXIYASABKAsyFy5mbHl0ZWlkbC5jb3JlLlZhcmlhYmxlEikKB2RlZmF1bHQYAiABKAsyFi5mbHl0ZWlkbC5jb3JlLkxpdGVyYWxIABISCghyZXF1aXJlZBgDIAEoCEgAEjYKDmFydGlmYWN0X3F1ZXJ5GAQgASgLMhwuZmx5dGVpZGwuY29yZS5BcnRpZmFjdFF1ZXJ5SAASMAoLYXJ0aWZhY3RfaWQYBSABKAsyGS5mbHl0ZWlkbC5jb3JlLkFydGlmYWN0SURIAEIKCghiZWhhdmlvciKcAQoMUGFyYW1ldGVyTWFwEj8KCnBhcmFtZXRlcnMYASADKAsyKy5mbHl0ZWlkbC5jb3JlLlBhcmFtZXRlck1hcC5QYXJhbWV0ZXJzRW50cnkaSwoPUGFyYW1ldGVyc0VudHJ5EgsKA2tleRgBIAEoCRInCgV2YWx1ZRgCIAEoCzIYLmZseXRlaWRsLmNvcmUuUGFyYW1ldGVyOgI4AUKhAQoRY29tLmZseXRlaWRsLmNvcmVCDkludGVyZmFjZVByb3RvSAJQAVolZ2l0aHViLmNvbS9mbHl0ZW9yZy9mbHl0ZS9nZW4vZ28vY29yZaICA0ZDWKoCDUZseXRlaWRsLkNvcmXKAg1GbHl0ZWlkbFxDb3Jl4gIZRmx5dGVpZGxcQ29yZVxHUEJNZXRhZGF0YeoCDkZseXRlaWRsOjpDb3JlYgZwcm90bzM", [file_core_types, file_core_literals, file_core_artifact_id]);

/**
 * Defines a strongly typed variable.
 *
 * @generated from message flyteidl.core.Variable
 */
export type Variable = Message<"flyteidl.core.Variable"> & {
  /**
   * Variable literal type.
   *
   * @generated from field: flyteidl.core.LiteralType type = 1;
   */
  type?: LiteralType;

  /**
   * +optional string describing input variable
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * +optional This object allows the user to specify how Artifacts are created.
   * name, tag, partitions can be specified. The other fields (version and project/domain) are ignored.
   *
   * @generated from field: flyteidl.core.ArtifactID artifact_partial_id = 3;
   */
  artifactPartialId?: ArtifactID;

  /**
   * @generated from field: flyteidl.core.ArtifactTag artifact_tag = 4;
   */
  artifactTag?: ArtifactTag;
};

/**
 * Describes the message flyteidl.core.Variable.
 * Use `create(VariableSchema)` to create a new message.
 */
export const VariableSchema: GenMessage<Variable> = /*@__PURE__*/
  messageDesc(file_core_interface, 0);

/**
 * A map of Variables
 *
 * @generated from message flyteidl.core.VariableMap
 */
export type VariableMap = Message<"flyteidl.core.VariableMap"> & {
  /**
   * Defines a map of variable names to variables.
   *
   * @generated from field: map<string, flyteidl.core.Variable> variables = 1;
   */
  variables: { [key: string]: Variable };
};

/**
 * Describes the message flyteidl.core.VariableMap.
 * Use `create(VariableMapSchema)` to create a new message.
 */
export const VariableMapSchema: GenMessage<VariableMap> = /*@__PURE__*/
  messageDesc(file_core_interface, 1);

/**
 * Defines strongly typed inputs and outputs.
 *
 * @generated from message flyteidl.core.TypedInterface
 */
export type TypedInterface = Message<"flyteidl.core.TypedInterface"> & {
  /**
   * @generated from field: flyteidl.core.VariableMap inputs = 1;
   */
  inputs?: VariableMap;

  /**
   * @generated from field: flyteidl.core.VariableMap outputs = 2;
   */
  outputs?: VariableMap;
};

/**
 * Describes the message flyteidl.core.TypedInterface.
 * Use `create(TypedInterfaceSchema)` to create a new message.
 */
export const TypedInterfaceSchema: GenMessage<TypedInterface> = /*@__PURE__*/
  messageDesc(file_core_interface, 2);

/**
 * A parameter is used as input to a launch plan and has
 * the special ability to have a default value or mark itself as required.
 *
 * @generated from message flyteidl.core.Parameter
 */
export type Parameter = Message<"flyteidl.core.Parameter"> & {
  /**
   * +required Variable. Defines the type of the variable backing this parameter.
   *
   * @generated from field: flyteidl.core.Variable var = 1;
   */
  var?: Variable;

  /**
   * +optional
   *
   * @generated from oneof flyteidl.core.Parameter.behavior
   */
  behavior: {
    /**
     * Defines a default value that has to match the variable type defined.
     *
     * @generated from field: flyteidl.core.Literal default = 2;
     */
    value: Literal;
    case: "default";
  } | {
    /**
     * +optional, is this value required to be filled.
     *
     * @generated from field: bool required = 3;
     */
    value: boolean;
    case: "required";
  } | {
    /**
     * This is an execution time search basically that should result in exactly one Artifact with a Type that
     * matches the type of the variable.
     *
     * @generated from field: flyteidl.core.ArtifactQuery artifact_query = 4;
     */
    value: ArtifactQuery;
    case: "artifactQuery";
  } | {
    /**
     * @generated from field: flyteidl.core.ArtifactID artifact_id = 5;
     */
    value: ArtifactID;
    case: "artifactId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message flyteidl.core.Parameter.
 * Use `create(ParameterSchema)` to create a new message.
 */
export const ParameterSchema: GenMessage<Parameter> = /*@__PURE__*/
  messageDesc(file_core_interface, 3);

/**
 * A map of Parameters.
 *
 * @generated from message flyteidl.core.ParameterMap
 */
export type ParameterMap = Message<"flyteidl.core.ParameterMap"> & {
  /**
   * Defines a map of parameter names to parameters.
   *
   * @generated from field: map<string, flyteidl.core.Parameter> parameters = 1;
   */
  parameters: { [key: string]: Parameter };
};

/**
 * Describes the message flyteidl.core.ParameterMap.
 * Use `create(ParameterMapSchema)` to create a new message.
 */
export const ParameterMapSchema: GenMessage<ParameterMap> = /*@__PURE__*/
  messageDesc(file_core_interface, 4);

