---
# Source: flyte-binary/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-flyte-binary
  namespace: "flyte"
  labels:
    helm.sh/chart: flyte-binary-v0.1.10
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
---
# Source: flyte-binary/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-flyte-binary-config-secret
  namespace: "flyte"
  labels:
    helm.sh/chart: flyte-binary-v0.1.10
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
type: Opaque
stringData:
---
# Source: flyte-binary/templates/cluster-resource-templates.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-flyte-binary-cluster-resource-templates
  namespace: "flyte"
  labels:
    helm.sh/chart: flyte-binary-v0.1.10
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
data:
  namespace.yaml: |
    apiVersion: v1
    kind: Namespace
    metadata:
      name: '{{ namespace }}'
---
# Source: flyte-binary/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-flyte-binary-config
  namespace: "flyte"
  labels:
    helm.sh/chart: flyte-binary-v0.1.10
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
data:
  000-core.yaml: |
    admin:
      endpoint: localhost:8089
      insecure: true
    catalog-cache:
      endpoint: localhost:8081
      insecure: true
      type: datacatalog
    cluster_resources:
      standaloneDeployment: false
      templatePath: /etc/flyte/cluster-resource-templates
    logger:
      show-source: true
      level: 1
    propeller:
      create-flyteworkflow-crd: true
    webhook:
      certDir: /var/run/flyte/certs
      localCert: true
      secretName: flyte-flyte-binary-webhook-secret
      serviceName: flyte-flyte-binary-webhook
      servicePort: 443
    flyte:
      admin:
        disableClusterResourceManager: false
        disableScheduler: false
        disabled: false
        seedProjects:
        - flytesnacks
      dataCatalog:
        disabled: false
      propeller:
        disableWebhook: false
        disabled: false
  001-plugins.yaml: |
    tasks:
      task-plugins:
        default-for-task-types:
          container: container
          container_array: k8s-array
          sidecar: sidecar
        enabled-plugins:
        - container
        - sidecar
        - k8s-array
        - agent-service
    plugins:
      logs:
        kubernetes-enabled: false
        cloudwatch-enabled: false
        stackdriver-enabled: false
      k8s:
        co-pilot:
          image: "cr.flyte.org/flyteorg/flytecopilot:v1.13.1-rc0"
      k8s-array:
        logs:
          config:
            kubernetes-enabled: false
            cloudwatch-enabled: false
            stackdriver-enabled: false
  002-database.yaml: |
    database:
      postgres:
        username: postgres
        host: 127.0.0.1
        port: 5432
        dbname: flyte
        options: "sslmode=disable"
  003-storage.yaml: |
    propeller:
      rawoutput-prefix: s3://my-organization-flyte-container/data
    storage:
      type: stow
      stow:
        kind: s3
        config:
          region: us-east-1
          disable_ssl: false
          v2_signing: false
          auth_type: iam
      container: my-organization-flyte-container
---
# Source: flyte-binary/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyte-flyte-binary-cluster-role
  namespace: "flyte"
  labels:
    helm.sh/chart: flyte-binary-v0.1.10
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
rules:
  - apiGroups:
    - ""
    resources:
    - namespaces
    - resourcequotas
    - secrets
    - serviceaccounts
    verbs:
    - create
    - get
    - list
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - events
    verbs:
    - create
    - delete
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - podtemplates
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - flyte.lyft.com
    resources:
    - flyteworkflows
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - post
    - update
    - watch
  - apiGroups:
    - apiextensions.k8s.io
    resources:
    - customresourcedefinitions
    verbs:
    - create
    - get
    - list
  - apiGroups:
    - admissionregistration.k8s.io
    resources:
    - mutatingwebhookconfigurations
    verbs:
    - create
    - get
    - list
    - patch
    - update
---
# Source: flyte-binary/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-flyte-binary-cluster-role-binding
  namespace: "flyte"
  labels:
    helm.sh/chart: flyte-binary-v0.1.10
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-flyte-binary-cluster-role
subjects:
  - kind: ServiceAccount
    name: flyte-flyte-binary
    namespace: "flyte"
---
# Source: flyte-binary/templates/service/grpc.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyte-flyte-binary-grpc
  namespace: "flyte"
  labels:
    helm.sh/chart: flyte-binary-v0.1.10
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 8089
      targetPort: grpc
      nodePort: null
  selector:
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/component: flyte-binary
---
# Source: flyte-binary/templates/service/http.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyte-flyte-binary-http
  namespace: "flyte"
  labels:
    helm.sh/chart: flyte-binary-v0.1.10
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8088
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/component: flyte-binary
---
# Source: flyte-binary/templates/service/webhook.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyte-flyte-binary-webhook
  namespace: "flyte"
  labels:
    helm.sh/chart: flyte-binary-v0.1.10
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: webhook
      port: 443
      targetPort: webhook
  selector:
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/component: flyte-binary
---
# Source: flyte-binary/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyte-flyte-binary
  namespace: "flyte"
  labels:
    helm.sh/chart: flyte-binary-v0.1.10
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flyte
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: flyte-binary
      app.kubernetes.io/instance: flyte
      app.kubernetes.io/component: flyte-binary
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flyte-binary
        app.kubernetes.io/instance: flyte
        app.kubernetes.io/component: flyte-binary
      annotations:
        checksum/configuration: 58c26a7a95c9edce075726e132dac345f0aafb69dea2b21f6445dc2615ee61fe
        checksum/configuration-secret: d5d93f4e67780b21593dc3799f0f6682aab0765e708e4020939975d14d44f929
        checksum/cluster-resource-templates: 7dfa59f3d447e9c099b8f8ffad3af466fecbc9cf9f8c97295d9634254a55d4ae
    spec:
      serviceAccountName: flyte-flyte-binary
      initContainers:
        - name: wait-for-db
          image: "postgres:15-alpine"
          imagePullPolicy: "IfNotPresent"
          command:
            - sh
            - -ec
          args:
            - |
              until pg_isready \
                -h 127.0.0.1 \
                -p 5432 \
                -U postgres
              do
                echo waiting for database
                sleep 0.1
              done
      containers:
        - name: flyte
          image: "cr.flyte.org/flyteorg/flyte-binary:latest"
          imagePullPolicy: "IfNotPresent"
          args:
            - start
            - --config
            - /etc/flyte/config.d/*.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 8088
            - name: grpc
              containerPort: 8089
            - name: webhook
              containerPort: 9443
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: http
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: http
            initialDelaySeconds: 30
          volumeMounts:
            - name: cluster-resource-templates
              mountPath: /etc/flyte/cluster-resource-templates
            - name: config
              mountPath: /etc/flyte/config.d
            - name: state
              mountPath: /var/run/flyte
      volumes:
        - name: cluster-resource-templates
          projected:
            sources:
            - configMap:
                name: flyte-flyte-binary-cluster-resource-templates
        - name: config
          projected:
            sources:
            - configMap:
                name: flyte-flyte-binary-config
            - secret:
                name: flyte-flyte-binary-config-secret
        - name: state
          emptyDir: {}
