---
# Source: flyte-core/templates/admin/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyteadmin
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    iam.gke.io/gcp-service-account: gsa-flyteadmin@<PROJECT-ID>.iam.gserviceaccount.com
---
# Source: flyte-core/templates/datacatalog/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: datacatalog
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    iam.gke.io/gcp-service-account: gsa-datacatalog@<PROJECT-ID>.iam.gserviceaccount.com
---
# Source: flyte-core/templates/flytescheduler/sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytescheduler
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytescheduler
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
---
# Source: flyte-core/templates/admin/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-admin-secrets
  namespace: flyte
type: Opaque
data:
  token_rsa_key.pem: |
    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBb01oR05BalNNcDZBdmNOOEdNS1Bjb05nS0dYeFl1eVNRUUNqNkIrdFVyNk0rTmtHCllETmRoYU93aXZ6b2Evc2k3QVdmTC9MYmRzVjdNaTlVbkQySlJxNzR2U2VLeFlwZzBZblh5b0tjQVd4QXpSVjgKL3U5Y1V6czd2cXZIUFpoa2s2TUdvZWYvNi8zd01Fb2p0WWZRbWF2bkV2SDZqMnpXRGMrTzFCRk9DMStBUXlJVwpsMzBxWUlwTU9HVVlHeXN4b1VOTEZhdVhzeHAwdEJEeWpZc0xGMU5zZzJSdUJ0bWlLcDJpaTlmbkxBc0FHN2FlCklRNnppamdkQTRkK0V1RmZvS0xVZnI4YlQrbks1Y1Zaa3RvZ0pEYnlDeHZ5YnRwemtLOHNHNFd0aWNHWjZlMkcKTmxYamRZMk9zVkRCSWpjWTNFNVRzTEI4cmcyU0JjcGo0amJXR2N0MTd1aElLb3VtbTFIK3pjRm92VlloTjMyeAo4dnBacmg0c0t3NDlNakowMGVUY2hxVFBQY1NsdzdJWWY1b1EvYzJrNnp3WkV5bXVybzNiTnFudFhpeEtqVTFtCmU4M3ZDQzlPUyt3ekhZQVRHQytNczRtRE50TWlLV2pYd1pLZm0zWEI1UlQ4OEl2S2tnL3o2RXNjcENyRk9WT0oKbUVLMVRNQVUxenR1NG5TeEVWVXNYOGp4K2FXdlhrN2YwMG1ZK09TNXA3YmpDTnNnZWRJbm9RMFE5a1JoS0U1dwpHWjU3dUFmdGVQOXpndnNiRnNDNTRCWkt3RXM3aVhzQXVQcjg1c1FUQVA5eW9SOEhEcmhMaGtzY1Fna2FuUzdnCmhqcFZpc0dMMEFJTGhnc2t2NThUcGd0RUdObnAzUy9qR1o4a1M0SFJtV0pYVGZSc2p5UXFSeGhGRkRrQ0F3RUEKQVFLQ0FnRUFtQW5xd1FmYVpUMlhkbHJsL2EvMTRBNjFubDRRTGtDUmFPQ0hIbGplR0pIU1V2cysyVGVaWjJkTAo2WktRNHBOZ0NacWpWcjhyb3h2SmpNSlBHMVBoZlRLMlNvQ2E3SVFYVys0aVhnQzJMMjVEdE90dUFORXVHQks2ClEyckRCTThYeExoejdDU3IwR2lZZWNHU0ZQWXlYeTY4V3lEeGxERVNGWXRCZis1QlErWHlMd21NSFlLaDBSclcKU3JubVdzSzBzczhrc0lCTCtuUzVDUkhCbS9GdzhvVFQ1MGZQOTdCVGRrTU1VM3M5d2x0QXBmUkJnZmNaOWtscgp2a3VnLzQrWlV4akhJbmZyQnQySkhWQktqT0N4WmkyREl0Z3huM3Y1cmtiSHlkcldLSjhud1pyM3dHZmxxT0xNCm5ZWkVxK3M0R2hRRGRlRGVkZVNsUWM2S04zOHRZMFZKMHRIYmJ4T1pvTEdnNFdQVnlObWc4MW9HYVlMNUx4RXoKR25RVzZrTUlNTlRhNEw0MjVEM1hlN1hERlhySWlnbmlqbXlVNGs5NzZSdkdNVFA2Qnk4TW1vbEtrbHYyRWQ0OApuU2EwWE1kRy94RkZvN21IY09iTFV6UUJTQVUwbmNWOUp2WXFYWGdCdXRubzdCR2U4RW9ZbHFaNGpGVTFzZjRGCmJ1TWFMVUtjQ2RrWXhaVzErdUdINEdzTGZBUWhwSGpjSjJ2OGtCOExqRHlTOS9xcjhOTzNrZGM3SjRXdExjNlQKM2hkQlNjalkwUTdtNE9KWkNLY1dScksrdDNpR0VmazFGQlA2UVNGZ1ZQcEhuZ3VDdTdVYlQyZGlTa05WWE1nTgoyWGZkRXprYXZsaFg3S2ZnRStBc3lxR29NMFM3OGFXSUJacW9LdkhwL1FYc3JsWGlrWVVDZ2dFQkFNN21INllpCjhZU0dnT09PZEZRM3QvRHZCY2VPK2xkZnNLbXB2Mkk4REFpVnpIM0dFWTNBbG5QK1F2TUhYQWtab0lIRDBETFIKVXdtMTdvdUFMM2NVWlpGb045RW9QUy9iVVZjUUF6Q1BTanZUNmRXbmF1OHE4R1BIcW9HS09IU3V1c3F2QW8vdgowNlp3Nll3Q2xBcS9qMFJLYWNUTGJLVzJ5b1ZWZ1lsSU9CU0p1LzRkSU9MekhmSXB4NWo3Ump5SjJ2cmFUTzNNClZUNEhrUlBlTlhrYWxJUUtodU9FbjRtQUpvZEQybVJ5VEdaNTdSbzZXMVVZV1I4QTJWQUF3YWxNb0dTZkVZM2gKUldlWlBiVWJNZzl1QkpDenFOd3lEcFRSb1Z3YzdzSzE4RUFCajBQalNvTEoyVm54T0p4YnRkYXJLU0VyQ3B2TQo0TGFRWGovQ3pEdnFvUDhDZ2dFQkFNYndaWEN3eUgzUVRHcmpXeEJDYStORkZhV09jZXFPakFabzRwNU9IUDlaCnhQSHNDaDh2SU5kUkFFT2NFZmNoUVlUWmFyY2MxZkpSR3ljMXFTU2RxZ0x4Mi90QytkRDRvUXVIbXRITXV4dGEKUFo4cG9lSENDUGVjdG9QNnFybytySFJBK3ByMHBzOTM2SzlxbjI4M0tDZHF1Zkx2Y3FiMEdCT1pCcHJUL21PcQo4YUkyblNRdTBKRUo1VE5sWmswZ0lpVkZjRTU2TjQ3amUrUXFhWE83Nkdub1NpTmRsNVMzclJqNHg3Q3l3N0YvCldBNnJjRDZCaUlFQ3ZzVTI1NzZ2dzhhR2NMV2hVTEp0d3VRSUZ0cENrS0lFSGpYN1ZNbTdXTlBxK05YcjZPdnUKcU0xNHF2SHVOS1NjOUt2VzZhZkV2VVBsczNlSUFPb1ZRQnMrQW1wd0VzY0NnZ0VBTmV2VG84REhvUHBNN1FGYgpYL2VGZ00xS2ZFL08vcVo1ckQ0Skd0ajdhZUZnZ2diMDNEU3RBVjNxcE52dUtKRDlPOVNFbGpubm9rZy8reXRWCk0zdWxYTmdFZEFaQXJCQkVpcVFwc0tZbmVxQW4rUDdBNThRUkVuQWZCOU8yRXZMV3k2d0F4dktCL29hKzF6WjAKenJoTjVrWmVlbU5wMVdabU1ZbXZVTS81amFDMzFlcFJmOVJNb2FneDFMVG9BUzhNV3dRNXVGL2dkMklSZFZRYwpLNHU1MlEvRlI5WnduYTFBWFZCWndvUG5WVzNCVld5UUVRVmZkSzBMOWNXOHN4cTlVbndDWHkrdW51bFpJN0lLCndlcXlWZVA4eGlabGxuTnIwazNZQy9iT3ZsK3BycysxdzVCSGpTRkkxN2N2Rk50V3hNWXE1Wi9ua0t6ZlkwNnAKVzVReWtRS0NBUUVBaU5YVmtGdW9yQkZZWHJVZmIrR2YvK1VHN0tjNzU5QkF0Qy8wb0ZxdVMxMWR2K0ZSWFAyMwpveUtPQWZNWjBGaEpqcTFWWDdvdjFzcSsySXRxV2tzd0kzSmtrMEVRUUJLa0F5QTA5MVhRNVJGL0RUay9wZDhtCjk5b05HRjZVakNLTDBETFpyVGZXZlNISEpORTc5TzJGYXdkWCs2ZUR2eDVxYVNCNmtJaDhrK1dDNnNhUjg4OVgKbWt1cUlWMy9yZEVLYTRTRnFSVWJuZWNPMG5QeHNLOXhQMWVObHlITEgzbnZVQnZlanNXSElWR3NLZnIxNjZpQgpVZXVuZUZNNXQ4bUI2YzJUUFB0R1hGUnZGeFlSVWZNek5KMk1naWpydXc1b0hPdWtXTkE1bC83Q2tRSU00dmVyCnNnWmJyTTdZVEpOZ2M1Rk5qa3c0Qk1xMUc0ZmRkWVM5QlFLQ0FRQXZNVWFBbGdQQVQydmJLck43RWlldzg4Sm8KOUpBRWNVaGYxL0lMcTBzQmg0UC9FVytqZHQ1YXZyZlFzdnFiNExTY1lMUFphV0ZWVWFJcEJ4aE5nRFM0UkV4Ngp4ci9FSWptZm9lOU5rVlJPWjJYYlN3enFNY0psLzNIejZkdnNxWW1GcDNneWw0SzRDakFWdDFyZU1STXJ3dUJKCjBEWWRSQWJtalI3TjRlOEwvSGxSRTROek9KYks1Q1Badi81S1gveGdid0txRDZjY3A3V2RFaXZ2S29kVTlwbWUKNG54VlAzWGtQTzltWWdOUDd5dWhYY21QNC91K2UzaEFUb2QrWTg0VmlhMVRUbGgyeTRuQ2M1TWxHWlhMK3BDSgowTEYvUGxWdUZJOG03RE92Y2ZzY3U0Z3FUZDZCL3NzQkpiMEYwMktnTkhaM2NkREZHRVNzZ0sxcmEwMWkKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
stringData:
  cookie_hash_key: "224C3Ib4Ot7syRdB4Sow85SP+0qFy4ajoblBfrg2jZ6ZbGNWjN4qovT5ISlAUbVH4Jjcjc5QmTH3JgRLRRVZqA"
  cookie_block_key: "8y9sMLhYYEBE8x3kNIm4u0NSM38pXjwBKYOhRywl9Fg"
  claim_symmetric_key: "OSQU5zyXmgCd8tNCreYxec0w5Y2H8Lfyt+7jSlkG9HE"
---
# Source: flyte-core/templates/common/secret-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-secret-auth
  namespace: flyte
type: Opaque
stringData:
  client_secret: foobar
---
# Source: flyte-core/templates/common/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: db-pass
stringData:
  pass.txt: '<DBPASSWORD>'
type: Opaque
---
# Source: flyte-core/templates/admin/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-admin-clusters-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  clusters.yaml: |
    clusters:
      clusterConfigs: []
      labelClusterMap: {}
---
# Source: flyte-core/templates/admin/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-admin-base-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  db.yaml: | 
    database:
      dbname: flyteadmin
      host: '<CLOUD-SQL-IP>'
      passwordPath: /etc/db/pass.txt
      port: 5432
      username: flyteadmin
  domain.yaml: | 
    domains:
    - id: development
      name: development
    - id: staging
      name: staging
    - id: production
      name: production
  server.yaml: | 
    auth:
      appAuth:
        thirdPartyConfig:
          flyteClient:
            clientId: flytectl
            redirectUri: http://localhost:53593/callback
            scopes:
            - offline
            - all
      authorizedUris:
      - https://localhost:30081
      - http://flyteadmin:80
      - http://flyteadmin.flyte.svc.cluster.local:80
      userAuth:
        openId:
          baseUrl: https://accounts.google.com
          clientId: 657465813211-6eog7ek7li5k7i7fvgv2921075063hpe.apps.googleusercontent.com
          scopes:
          - profile
          - openid
    flyteadmin:
      eventVersion: 2
      metadataStoragePrefix:
      - metadata
      - admin
      metricsScope: 'flyte:'
      profilerPort: 10254
      roleNameKey: iam.amazonaws.com/role
      testing:
        host: http://flyteadmin
    server:
      grpc:
        port: 8089
      httpPort: 8088
      security:
        allowCors: true
        allowedHeaders:
        - Content-Type
        allowedOrigins:
        - '*'
        secure: false
        useAuth: false
  remoteData.yaml: | 
    remoteData:
      scheme: gcs
      signedUrls:
        durationMinutes: 3
  namespace_config.yaml: | 
    namespace_mapping:
      template: '{{ domain }}'
  storage.yaml: | 
    storage:
      type: stow
      stow:
        kind: google
        config:
          json: ""
          project_id: <PROJECT-ID>
          scopes: https://www.googleapis.com/auth/cloud-platform
      container: "<METADATA_BUCKET_NAME>"
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
  task_resource_defaults.yaml: | 
    task_resources:
      defaults:
        cpu: 500m
        memory: 500Mi
        storage: 500Mi
      limits:
        cpu: 2
        gpu: 1
        memory: 1Gi
        storage: 2000Mi
  cluster_resources.yaml: | 
    cluster_resources:
      customData:
      - production:
        - projectQuotaCpu:
            value: "5"
        - projectQuotaMemory:
            value: 4000Mi
        - gsa:
            value: gsa-production@<PROJECT-ID>.iam.gserviceaccount.com
      - staging:
        - projectQuotaCpu:
            value: "2"
        - projectQuotaMemory:
            value: 3000Mi
        - gsa:
            value: gsa-staging@<PROJECT-ID>.iam.gserviceaccount.com
      - development:
        - projectQuotaCpu:
            value: "2"
        - projectQuotaMemory:
            value: 3000Mi
        - gsa:
            value: gsa-development@<PROJECT-ID>.iam.gserviceaccount.com
      refreshInterval: 5m
      standaloneDeployment: false
      templatePath: /etc/flyte/clusterresource/templates
---
# Source: flyte-core/templates/clusterresourcesync/cluster_resource_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clusterresource-template
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  aa_namespace.yaml: | 
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
    spec:
      finalizers:
      - kubernetes
    
  aab_default_service_account.yaml: | 
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: default
      namespace: {{ namespace }}
      annotations:
        # Needed for gcp workload identity to function
        # https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
        iam.gke.io/gcp-service-account: {{ gsa }}
    
  ab_project_resource_quota.yaml: | 
    apiVersion: v1
    kind: ResourceQuota
    metadata:
      name: project-quota
      namespace: {{ namespace }}
    spec:
      hard:
        limits.cpu: {{ projectQuotaCpu }}
        limits.memory: {{ projectQuotaMemory }}
---
# Source: flyte-core/templates/clusterresourcesync/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-clusterresourcesync-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  cluster_resources.yaml: | 
    cluster_resources:
      customData:
      - production:
        - projectQuotaCpu:
            value: "5"
        - projectQuotaMemory:
            value: 4000Mi
        - gsa:
            value: gsa-production@<PROJECT-ID>.iam.gserviceaccount.com
      - staging:
        - projectQuotaCpu:
            value: "2"
        - projectQuotaMemory:
            value: 3000Mi
        - gsa:
            value: gsa-staging@<PROJECT-ID>.iam.gserviceaccount.com
      - development:
        - projectQuotaCpu:
            value: "2"
        - projectQuotaMemory:
            value: 3000Mi
        - gsa:
            value: gsa-development@<PROJECT-ID>.iam.gserviceaccount.com
      refreshInterval: 5m
      standaloneDeployment: false
      templatePath: /etc/flyte/clusterresource/templates
  db.yaml: | 
    database:
      dbname: flyteadmin
      host: '<CLOUD-SQL-IP>'
      passwordPath: /etc/db/pass.txt
      port: 5432
      username: flyteadmin
  domain.yaml: | 
    domains:
    - id: development
      name: development
    - id: staging
      name: staging
    - id: production
      name: production
  namespace_config.yaml: | 
    namespace_mapping:
      template: '{{ domain }}'
  clusters.yaml: |
    clusters:
      clusterConfigs: []
      labelClusterMap: {}
---
# Source: flyte-core/templates/console/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-console-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data: 
  BASE_URL: /console
  CONFIG_DIR: /etc/flyte/config
---
# Source: flyte-core/templates/datacatalog/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: datacatalog-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  db.yaml: | 
    database:
      dbname: flyteadmin
      host: '<CLOUD-SQL-IP>'
      passwordPath: /etc/db/pass.txt
      port: 5432
      username: flyteadmin
  server.yaml: | 
    application:
      grpcPort: 8089
      grpcServerReflection: true
      httpPort: 8080
    datacatalog:
      heartbeat-grace-period-multiplier: 3
      max-reservation-heartbeat: 30s
      metrics-scope: datacatalog
      profiler-port: 10254
      storage-prefix: metadata/datacatalog
  storage.yaml: | 
    storage:
      type: stow
      stow:
        kind: google
        config:
          json: ""
          project_id: <PROJECT-ID>
          scopes: https://www.googleapis.com/auth/cloud-platform
      container: "<METADATA_BUCKET_NAME>"
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
---
# Source: flyte-core/templates/flytescheduler/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-scheduler-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytescheduler
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  admin.yaml: | 
    admin:
      clientId: 'flytepropeller'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: flyteadmin:81
      insecure: true
    event:
      capacity: 1000
      rate: 500
      type: admin
  db.yaml: | 
    database:
      dbname: flyteadmin
      host: '<CLOUD-SQL-IP>'
      passwordPath: /etc/db/pass.txt
      port: 5432
      username: flyteadmin
  server.yaml: | 
    scheduler:
      metricsScope: 'flyte:'
      profilerPort: 10254
---
# Source: flyte-core/templates/admin/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyte-flyteadmin
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: 
  - ""
  - flyte.lyft.com
  - rbac.authorization.k8s.io
  resources: 
  - configmaps
  - flyteworkflows
  - namespaces
  - pods
  - resourcequotas
  - roles
  - rolebindings
  - secrets
  - services
  - serviceaccounts
  - spark-role
  - limitranges
  verbs: 
  - '*'
---
# Source: flyte-core/templates/admin/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-flyteadmin-binding
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-flyteadmin
subjects:
- kind: ServiceAccount
  name: flyteadmin
  namespace: flyte
---
# Source: flyte-core/templates/admin/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyteadmin
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    cloud.google.com/app-protocols: '{"grpc":"HTTP2"}'
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      appProtocol: TCP
      targetPort: 8088
    - name: grpc
      port: 81
      protocol: TCP
      # intentionally set to TCP instead of grpc
      appProtocol: TCP
      targetPort: 8089
    - name: redoc
      protocol: TCP
      appProtocol: TCP
      port: 87
      targetPort: 8087
    - name: http-metrics
      protocol: TCP
      appProtocol: TCP
      port: 10254
  selector: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
---
# Source: flyte-core/templates/console/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyteconsole
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    appProtocol: TCP
    targetPort: 8080
  selector: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
---
# Source: flyte-core/templates/datacatalog/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: datacatalog
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    cloud.google.com/app-protocols: '{"grpc":"HTTP2"}'
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  type: NodePort
  ports:
  - name: http
    port: 88
    protocol: TCP
    targetPort: 8088
  - name: grpc
    port: 89
    protocol: TCP
    targetPort: 8089
  selector: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
---
# Source: flyte-core/templates/admin/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyteadmin
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteadmin
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "0705f122f2535babec96a6083827c3e6d27e6e9b0e460b4d07292c858079ac7"
      labels: 
        app.kubernetes.io/name: flyteadmin
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext: 
        fsGroup: 65534
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions:
          type: spc_t
      initContainers:
        - command:
          - flyteadmin
          - --config
          - /etc/flyte/config/*.yaml
          - migrate
          - run
          image: "cr.flyte.org/flyteorg/flyteadmin:v1.13.0"
          imagePullPolicy: "IfNotPresent"
          name: run-migrations
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          volumeMounts:
          - mountPath: /etc/db
            name: db-pass
          - mountPath: /etc/flyte/config
            name: base-config-volume
        - command:
          - flyteadmin
          - --config
          - /etc/flyte/config/*.yaml
          - migrate
          - seed-projects
          - flytesnacks
          - flytetester
          - flyteexamples
          image: "cr.flyte.org/flyteorg/flyteadmin:v1.13.0"
          imagePullPolicy: "IfNotPresent"
          name: seed-projects
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          volumeMounts:
          - mountPath: /etc/db
            name: db-pass
          - mountPath: /etc/flyte/config
            name: base-config-volume
        - command:
          - flyteadmin
          - --config
          - /etc/flyte/config/*.yaml
          - clusterresource
          - sync
          image: "cr.flyte.org/flyteorg/flyteadmin:v1.13.0"
          imagePullPolicy: "IfNotPresent"
          name: sync-cluster-resources
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          volumeMounts:
          - mountPath: /etc/db
            name: db-pass
          - mountPath: /etc/flyte/clusterresource/templates
            name: resource-templates
          - mountPath: /etc/flyte/config
            name: clusters-config-volume
          - mountPath: /etc/secrets/
            name: admin-secrets
      containers:
      - command:
        - flyteadmin
        - --config
        - /etc/flyte/config/*.yaml
        - serve
        image: "cr.flyte.org/flyteorg/flyteadmin:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: flyteadmin
        ports:
        - containerPort: 8088
        - containerPort: 8089
        - containerPort: 10254
        readinessProbe:
          exec:
            command: [ "sh", "-c", "reply=$(curl -s -o /dev/null -w %{http_code} http://127.0.0.1:8088/healthcheck); if [ \"$reply\" -lt 200 -o \"$reply\" -ge 400 ]; then exit 1; fi;","grpc_health_probe", "-addr=:8089"]
          initialDelaySeconds: 15
        livenessProbe:
          exec:
            command: [ "sh", "-c", "reply=$(curl -s -o /dev/null -w %{http_code} http://127.0.0.1:8088/healthcheck); if [ \"$reply\" -lt 200 -o \"$reply\" -ge 400 ]; then exit 1; fi;","grpc_health_probe", "-addr=:8089"]
          initialDelaySeconds: 20
          periodSeconds: 5
        resources:
          limits:
            cpu: 250m
            ephemeral-storage: 2Gi
            memory: 500Mi
          requests:
            cpu: 500m
            ephemeral-storage: 2Gi
            memory: 1G
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
        - mountPath: /etc/db
          name: db-pass
        - mountPath: /srv/flyte
          name: shared-data
        - mountPath: /etc/flyte/config
          name: clusters-config-volume
        - mountPath: /etc/secrets/
          name: admin-secrets
      serviceAccountName: flyteadmin
      volumes:
      - name: db-pass
        secret:
          secretName: db-pass
      - emptyDir: {}
        name: shared-data
      - emptyDir: {}
        name: scratch
      - configMap:
          name: flyte-admin-base-config
        name: base-config-volume
      - projected:
          sources:
            - configMap:
                name: flyte-admin-base-config
            - configMap:
                name: flyte-admin-clusters-config
        name: clusters-config-volume
      - configMap:
          name: clusterresource-template
        name: resource-templates
      - name: admin-secrets
        secret:
          secretName: flyte-admin-secrets
      affinity: 
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: flyteadmin
            topologyKey: kubernetes.io/hostname
---
# Source: flyte-core/templates/clusterresourcesync/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: syncresources
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteclusterresourcesync
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteclusterresourcesync
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "dc18f5d54e0770c574e6b0693724047e22063030259104eebb554398d63209f"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "10254"
      labels: 
        app.kubernetes.io/name: flyteclusterresourcesync
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - command:
            - flyteadmin
            - --config
            - /etc/flyte/config/*.yaml
            - clusterresource
            - run
          image: "cr.flyte.org/flyteorg/flyteadmin:v1.13.0"
          imagePullPolicy: "IfNotPresent"
          name: sync-cluster-resources
          volumeMounts:
          - mountPath: /etc/db
            name: db-pass
          - mountPath: /etc/flyte/clusterresource/templates
            name: resource-templates
          - mountPath: /etc/flyte/config
            name: config-volume
      serviceAccountName: flyteadmin
      volumes:
        - name: db-pass
          secret:
            secretName: db-pass
        - configMap:
            name: clusterresource-template
          name: resource-templates
        - configMap:
            name: flyte-clusterresourcesync-config
          name: config-volume
---
# Source: flyte-core/templates/console/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyteconsole
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteconsole
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "2f930e1732c47d0849f79f9a8d06262ec97597a217bbf2337ae4f2938402ee0"
      labels: 
        app.kubernetes.io/name: flyteconsole
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext: 
        fsGroupChangePolicy: OnRootMismatch
        runAsNonRoot: true
        runAsUser: 1000
        seLinuxOptions:
          type: spc_t
      containers:
      - image: "cr.flyte.org/flyteorg/flyteconsole:v1.15.1"
        imagePullPolicy: "IfNotPresent"
        name: flyteconsole
        envFrom:
        - configMapRef:
            name: flyte-console-config
        ports:
        - containerPort: 8080
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        resources: 
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 10m
            memory: 50Mi
        volumeMounts:
        - mountPath: /srv/flyte
          name: shared-data
      volumes:
      - emptyDir: {}
        name: shared-data
      affinity: 
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: flyteconsole
            topologyKey: kubernetes.io/hostname
---
# Source: flyte-core/templates/datacatalog/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datacatalog
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: datacatalog
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "905a2a911a85dbf8d4f1dc3be24b9c4fd7bb46481db0e174274d6aea6129b4c"
      labels: 
        app.kubernetes.io/name: datacatalog
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext: 
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions:
          type: spc_t
      initContainers:
      - command:
        - datacatalog
        - --config
        - /etc/datacatalog/config/*.yaml
        - migrate
        - run
        image: "cr.flyte.org/flyteorg/datacatalog:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: run-migrations
        volumeMounts:
        - mountPath: /etc/db
          name: db-pass
        - mountPath: /etc/datacatalog/config
          name: config-volume
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
      containers:
      - command:
        - datacatalog
        - --config
        - /etc/datacatalog/config/*.yaml
        - serve
        image: "cr.flyte.org/flyteorg/datacatalog:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: datacatalog
        ports:
        - containerPort: 8080
        - containerPort: 8089
        - containerPort: 10254
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        resources:
          limits:
            cpu: 500m
            ephemeral-storage: 2Gi
            memory: 500Mi
          requests:
            cpu: 50m
            ephemeral-storage: 2Gi
            memory: 200Mi
        volumeMounts:
        - mountPath: /etc/db
          name: db-pass
        - mountPath: /etc/datacatalog/config
          name: config-volume
      serviceAccountName: datacatalog
      volumes:
      - name: db-pass
        secret:
          secretName: db-pass
      - emptyDir: {}
        name: shared-data
      - configMap:
          name: datacatalog-config
        name: config-volume
      affinity: 
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: datacatalog
            topologyKey: kubernetes.io/hostname
---
# Source: flyte-core/templates/flytescheduler/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flytescheduler
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytescheduler
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flytescheduler
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "0705f122f2535babec96a6083827c3e6d27e6e9b0e460b4d07292c858079ac7"
      labels: 
        app.kubernetes.io/name: flytescheduler
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext: 
        fsGroup: 65534
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions:
          type: spc_t
      initContainers:
      - command:
        - flytescheduler
        - precheck
        - --config
        - /etc/flyte/config/*.yaml
        image: "cr.flyte.org/flyteorg/flytescheduler:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: flytescheduler-check
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
        - mountPath: /etc/db
          name: db-pass
        - mountPath: /etc/flyte/config
          name: config-volume
        - name: auth
          mountPath: /etc/secrets/
      containers:
      - command:
        - flytescheduler
        - run
        - --config
        - /etc/flyte/config/*.yaml
        image: "cr.flyte.org/flyteorg/flytescheduler:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: flytescheduler
        ports:
          - containerPort: 10254
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        resources:
          limits:
            cpu: 250m
            ephemeral-storage: 100Mi
            memory: 500Mi
          requests:
            cpu: 10m
            ephemeral-storage: 50Mi
            memory: 50Mi
        volumeMounts:
        - mountPath: /etc/db
          name: db-pass
        - mountPath: /etc/flyte/config
          name: config-volume
        - name: auth
          mountPath: /etc/secrets/
      serviceAccountName: flytescheduler
      volumes:
      - name: db-pass
        secret:
          secretName: db-pass
      - emptyDir: {}
        name: shared-data
      - configMap:
          name: flyte-scheduler-config
        name: config-volume
      - name: auth
        secret:
          secretName: flyte-secret-auth
---
# Source: flyte-core/templates/common/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flyte-core
  namespace: flyte
  annotations: 
    cert-manager.io/issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/app-root: /console
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: 
  rules:
    - http:
        paths:
          # This is useful only for frontend development
          # NOTE: If you change this, you must update the BASE_URL value in flyteconsole.yaml
          - path: /console
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteconsole
                port:
                  number: 80
          - path: /console/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteconsole
                port:
                  number: 80
          - path: /api
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /api/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /healthcheck
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /v1/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /.well-known
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /.well-known/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /login
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /login/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /logout
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /logout/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /callback
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /callback/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /me
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /config
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /config/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /oauth2
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /oauth2/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
      host: '<HOSTNAME>'
  tls:
    - secretName: flyte-flyte-tls
      hosts:
        - '<HOSTNAME>'
  
# Certain ingress controllers like nginx cannot serve HTTP 1 and GRPC with a single ingress because GRPC can only
# enabled on the ingress object, not on backend services (GRPC annotation is set on the ingress, not on the services).
---
# Source: flyte-core/templates/common/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flyte-core-grpc
  namespace: flyte
  annotations: 
    cert-manager.io/issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/app-root: /console
    nginx.ingress.kubernetes.io/backend-protocol: GRPC
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: 
  rules:
    - host: '<HOSTNAME>'
      http:
        paths:
          #
          
          # NOTE: Port 81 in flyteadmin is the GRPC server port for FlyteAdmin.
          - path: /flyteidl.service.SignalService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.SignalService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AdminService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AdminService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.DataProxyService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.DataProxyService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AuthMetadataService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AuthMetadataService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.IdentityService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.IdentityService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /grpc.health.v1.Health
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /grpc.health.v1.Health/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
  tls:
    - secretName: flyte-flyte-tls
      hosts:
        - '<HOSTNAME>'
