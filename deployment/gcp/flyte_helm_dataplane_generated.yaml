---
# Source: flyte-core/templates/admin/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyteadmin
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    iam.gke.io/gcp-service-account: gsa-flyteadmin@<PROJECT-ID>.iam.gserviceaccount.com
---
# Source: flyte-core/templates/propeller/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytepropeller
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    iam.gke.io/gcp-service-account: gsa-flytepropeller@<PROJECT-ID>.iam.gserviceaccount.com
---
# Source: flyte-core/templates/propeller/webhook.yaml
# Create a Service Account for webhook
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-pod-webhook
  namespace: flyte
---
# Source: flyte-core/templates/common/secret-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-secret-auth
  namespace: flyte
type: Opaque
stringData:
  client_secret: foobar
---
# Source: flyte-core/templates/common/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: db-pass
stringData:
  pass.txt: '<DBPASSWORD>'
type: Opaque
---
# Source: flyte-core/templates/propeller/webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-pod-webhook
  namespace: flyte
type: Opaque
data:
  # ca issued cert
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURlekNDQW1PZ0F3SUJBZ0lRVDcyZlNtZzZKODZ5NzNnVTZhdXRlakFOQmdrcWhraUc5dzBCQVFzRkFEQVQKTVJFd0R3WURWUVFERXdobWJIbDBaUzFqWVRBZ0Z3MHlOREEzTVRJeE56UXpNamxhR0E4eU1USXpNRFl4T1RFMwpORE15T1Zvd0pqRWtNQ0lHQTFVRUF4TWJabXg1ZEdVdGNHOWtMWGRsWW1odmIyc3VabXg1ZEdVdWMzWmpNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE0UmJJMXF0eHZpYkRSa01yRVpqd0hodUUKaTVMR3A3UjNaNTdaUWhDTDc1Tm9qQmZXV1JDOVRNeUgrclZiTHNtb1JRTHZyK2R3QUJQcHZoVCswdzVUcmpicAozWmNGdVhIS1dpUGZ4eVE2UkVsZUwrcG96MUdGd0RmdWo3QTF2STRwemo1eVBjakpLTmpFUGJTYStQQ2JQSjh0CmNSejdub0ppSlJBK2U5Y1YrV3drR0JJVW9jMjBaUzVZZkdNY3l3dDNzem9uVVBXNFdCK2N6NTQwQmZCU0V0S0EKWTdTeGFXblA5REJwOUVQdm9LV0c2TmcwM3M2UDJGNC9VTHdWUFEzWkJZb2Fxb2Z0eGtOcUR4Vi9zMnREazZlQgo4b01PMDl0WCtXQ3owQWU5dHAybG00NXFJTGpNU2FYU1d2WmxibXEwckMxSG9rWGxZaVNNcUJaOGdtbEVzd0lECkFRQUJvNEcxTUlHeU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlFnbm9ZUCtFa01ETk04eTcyUApvOFRKZU9USlRqQlNCZ05WSFJFRVN6QkpnaEZtYkhsMFpTMXdiMlF0ZDJWaWFHOXZhNElYWm14NWRHVXRjRzlrCkxYZGxZbWh2YjJzdVpteDVkR1dDRzJac2VYUmxMWEJ2WkMxM1pXSm9iMjlyTG1ac2VYUmxMbk4yWXpBTkJna3EKaGtpRzl3MEJBUXNGQUFPQ0FRRUFkSTh3WWd5MGl5aTRUaDBwWlVKVStaNlhsZU5FT3NHeXNGc0YwUm1WcjhsTwpSZVJFa0RJYkF1NStQVTB1TDZENTk3N0QwalR2NFA2TGFTU3ZtRWJpK202SmNjVE43ajRRUlcxZHFCd25GOEE5CmZCbVN2UzBSaTBRWWpIMDQwYVh6aUxIMWR6M2pRNWg2alk3M0FPN3pXbDJwRlhBU3RseVY3MHRVcDJ3RlU2M2gKYWQ0cEVDN0FidGdtYm5pMVZLdnFXeUlCVjZ6U3pPd0hnbjBRbVp4Q2M5NlJ6dDZYQUR1dzlIWGNXcCtBMnY2RgpXZDZFd2VoalNnbWYvNi9yT0VuQWo2L2xxemVRRE5XSXNreU5XS1k2NlVlNlRMYnE3R3ppckJsekZNQ0VLTlphCnU1TWJMWERCQlpEQ3Bldm83L3F3MnI0bmkrNW10dDVsdFc5VENDOTRFUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  # private key for cert
  tls.key: |
    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNFJiSTFxdHh2aWJEUmtNckVaandIaHVFaTVMR3A3UjNaNTdaUWhDTDc1Tm9qQmZXCldSQzlUTXlIK3JWYkxzbW9SUUx2citkd0FCUHB2aFQrMHc1VHJqYnAzWmNGdVhIS1dpUGZ4eVE2UkVsZUwrcG8KejFHRndEZnVqN0Exdkk0cHpqNXlQY2pKS05qRVBiU2ErUENiUEo4dGNSejdub0ppSlJBK2U5Y1YrV3drR0JJVQpvYzIwWlM1WWZHTWN5d3Qzc3pvblVQVzRXQitjejU0MEJmQlNFdEtBWTdTeGFXblA5REJwOUVQdm9LV0c2TmcwCjNzNlAyRjQvVUx3VlBRM1pCWW9hcW9mdHhrTnFEeFYvczJ0RGs2ZUI4b01PMDl0WCtXQ3owQWU5dHAybG00NXEKSUxqTVNhWFNXdlpsYm1xMHJDMUhva1hsWWlTTXFCWjhnbWxFc3dJREFRQUJBb0lCQUZUUTJCY0QvVlV3bUE2Rwp5dGpUcjA4NUFVWHlwY2FWMnhTQnA4NGNIQTdIbGZLTUhPbnN3OWdIamdtcmd0TnJpMnVOd3JHZTNQWTZpcTVrCmpPME1qZjJzbFkwNUZpQWR2Nmtkc1hvQnJhOERrbWt0eEJheTJscG0rUTdOMEVIZnMrTVNac3ZmTitXYllMNzcKcWhXNTNGVUlpZ0FBY3RQMHYzVEYzVFdmQTVtN01CQTlkQi9hZUdLR1F5Uzk3WTE4Z1ZxK1dja3grK203ZGtwYgpxOGxIUG9SbzUvQkxVRCtrbVBJMVAvWTdnTkZycUxqUGtrY1NXMWRUWmpzZjRYamc4VWpTZmpNb2xGbzBpN3EyCnB3UjVnRkt3RmEzeUVrRzFFU0tFRWljcDRzbmUyRU9zR2lzYVZmdU5NMW9wekZOMWR6QXBKS0ViOVhYWUhGR0kKS2pzZkYvRUNnWUVBNkIrVEhpdXo0eG5rQlhDQUJvSzQyd2s2WDNYN0M1WCs3blJFTWszaXRqWTBubDlFYlFMVwpaNUZsakJOdm91RWpMWENFY0g2RTh6cDE0QXp6QzFMYml6dUxFTFRvcWpFRHFuMGtQS3FqUHFldjFuNWUrT1FYClFxUEQ2YmZFcU1HS1ZsSU5Maml5SVZaKzNRVmN6ZXdHOFV1WVNVTmhndWh2NUxFbHpTYVpCR2tDZ1lFQStEMzYKSDMwWGtNaWFtRzNleFlOV29zUnZ5NWVPM01kYjNPOXRPWU1IUVoxb2NLc1Rzd2c0eHloLzc2UXc1SUR1cFlONgpmc3pSWXpYcCtTRCtpSzIwTHdZWHpkNWZWc3RYb2lNUnJqdVBzSjZoSGNPeUlxWHV2alZrTG5zekFRUEhaUWZXCi9MTXBoTnFzejZ0Um1odlF6U2dmYmY2RThlMjk5cWtDcWJTNUxMc0NnWUVBcWt2bjhqMmIxeVI2anFjUHRqY1gKaWRNR1dWekVWcWF3QnArVUhOZlpXVmNCV2FPSkh2VHkrYjdKSW5CcitiSjB6WFI4SmRBY21CbXV1emFrNVF6Zgo5eEV6SUltcEhKdWpGZVNEdm1KdUs1eDR1OE93eDZjSGphTjZLekRnZmZLb0hGWk1Sem5mTGVnNFlNejdYalFvCmo4U25NRERZREdPZEc4bi9jcmc3a09rQ2dZQmM5OWtVc2VTQmRKOXhOclNYZy9pT1BNTWhuRUVFcmlUWk9WSE8KbUNPL2p4UHVIaVBpaU5HNnhKQWxUM2lBRzBsRTgxaU01R2dHbjhwZ1l0cndsUjFGL3lJckYzemRKSXBOVHBUdwppNTNrcDRQdmdiclUvdy9LYkhSNGMrdEdGZ1EyOGhpeHl1ZGh1Z08rUW9ydEREM0dsNkF0c1lSWWxwRHVMNTJ2CnNOOG93UUtCZ1FDUUZITFNQTzV3U2RLQWRGVHB0eHkzVit3NXdOK3hPWHZVQjBreEEra0Nvc1FSREZhNXlWek4KeEk4Mm1PVlZicXhsNkIwNk5ibU1hTGRsV2xiNDI2VStXUW5JTEdSdDZDNzJoTzNkcVhYSVR0U0Z4NHRLTzFwYQoxSlh2TDVYMy85N0xManUwMlhQMHdoRHc0RG83Vkp6VVpkT0xMSzkveUNLek9YMVdMZjBzVnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  # ca cert since the CA is generated here
  ca.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVk5YbTdkai9CancvM1JxbzNsTmRYekFOQmdrcWhraUc5dzBCQVFzRkFEQVQKTVJFd0R3WURWUVFERXdobWJIbDBaUzFqWVRBZ0Z3MHlOREEzTVRJeE56UXpNamxhR0E4eU1USXpNRFl4T1RFMwpORE15T1Zvd0V6RVJNQThHQTFVRUF4TUlabXg1ZEdVdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRREZZK2hpeEFNVkpoWHFETTNzSjl6T0lhbGs0R3NSNHkzNVZnaXdLOTJKMUljYjRLQXgKV284cDNLTG03OGRSVzN1OFdONDBrcHlzSkNPeUpIcjRCM00zWWFCS3hsaHBPSHdxTmZhS2ltQjRlY3JDd1RQNgpiOUcwcVVMRlRXR2tmOGcwM2Mrbzl5VUlGR3J5dGVTVFFhOEt6SEczYnFHSk85VFRFQzluUWFGVTNNekRwajkxCmRrRFQvT1FNU0c4bFFKK1hJUkpIM3cyM1YyU0tvMjVBUVRMOWdPTE1iQnhEY09SeTFacmF6cFNadG1xdUFFOTAKOVdaVWxGbEN4S3E3Z0hFdExFZFBwYnp6dWV0WmFEekk4ZWdwNHlBN2dVSytqbnZjb2xjZXpLRlFUbTZPY0tmRgozZ2huVnlrOXdBTDJqc2wwMlhYb09vclZrU0pYcTRFUTZWZzVBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVJSjZHRC9oSkRBelRQTXU5ajZQRXlYamt5VTR3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKY3hNNTh1ZTh3WTVaOHZCcnBZRmJveXdTVUJBK25EMFA5WEFxOU8xdjE0TVZCaDVGQzNiYkxXCmE2cm1NeHlhSlZySUxpTysrRmNCKzRHYlRqQXdSZEhrSXAxWlNaVnlLcmJGRTIvczhxVDFQd0RsenFnR3oxNjUKTXlybjFDRTFQaFRlcG9MOFhsOVcrRzBHTThybXVPRC9ud1ZHSGJLZzJINXMrZUoweENXaXVqOXIzVUlycHNFbQpFUXVDeTQrVEFyMGdwWkIyeTVsSEwzOC9NYVdURWxTbWRjQnJlRjlmWDNsRm1DTkV0R1h5ME9DSk42SEhpOXJ2CjRZZDd0d3o2UXRYUCs0VmZ4SjI2UUE3VHJtWTV6QXM5WElzK3N1YWJCaTFENXhGalpOMXJwOUx6WEYrOHVoSGoKdUgyaTloUjVpTzQ0RGZucnp4c0FGUm5ubXJkbjFVOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: flyte-core/templates/propeller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-propeller-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  admin.yaml: | 
    admin:
      clientId: 'flytepropeller'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: flyteadmin:81
      insecure: true
    event:
      capacity: 1000
      rate: 500
      type: admin
  catalog.yaml: | 
    catalog-cache:
      endpoint: datacatalog:89
      insecure: true
      type: datacatalog
  copilot.yaml: | 
    plugins:
      k8s:
        co-pilot:
          image: cr.flyte.org/flyteorg/flytecopilot:v1.13.0
          name: flyte-copilot-
          start-timeout: 30s
  core.yaml: | 
    manager:
      pod-application: flytepropeller
      pod-template-container-name: flytepropeller
      pod-template-name: flytepropeller-template
    propeller:
      downstream-eval-duration: 30s
      enable-admin-launcher: true
      gc-interval: 12h
      kube-client-config:
        burst: 25
        qps: 100
        timeout: 30s
      leader-election:
        enabled: true
        lease-duration: 15s
        lock-config-map:
          name: propeller-leader
          namespace: flyte
        renew-deadline: 10s
        retry-period: 2s
      limit-namespace: all
      max-workflow-retries: 50
      metadata-prefix: metadata/propeller
      metrics-prefix: flyte
      prof-port: 10254
      queue:
        batch-size: -1
        batching-interval: 2s
        queue:
          base-delay: 5s
          capacity: 1000
          max-delay: 120s
          rate: 100
          type: maxof
        sub-queue:
          capacity: 1000
          rate: 100
          type: bucket
        type: batch
      rawoutput-prefix: gs://<RAW_DATA_BUCKET_NAME>/
      workers: 40
      workflow-reeval-duration: 30s
    webhook:
      certDir: /etc/webhook/certs
      serviceName: flyte-pod-webhook
  enabled_plugins.yaml: | 
    tasks:
      task-plugins:
        default-for-task-types:
          container: container
          container_array: k8s-array
          sidecar: sidecar
        enabled-plugins:
        - container
        - sidecar
        - k8s-array
        - agent-service
  k8s.yaml: | 
    plugins:
      k8s:
        default-cpus: 100m
        default-env-vars: []
        default-memory: 100Mi
  resource_manager.yaml: | 
    propeller:
      resourcemanager:
        type: noop
  storage.yaml: | 
    storage:
      type: stow
      stow:
        kind: google
        config:
          json: ""
          project_id: <PROJECT-ID>
          scopes: https://www.googleapis.com/auth/cloud-platform
      container: "<METADATA_BUCKET_NAME>"
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
  cache.yaml: |
    cache:
      max_size_mbs: 1024
      target_gc_percent: 70
  task_logs.yaml: | 
    plugins:
      k8s-array:
        logs:
          config:
            stackdriver-enabled: true
            stackdriver-logresourcename: k8s_container
      logs:
        cloudwatch-enabled: false
        kubernetes-enabled: false
        stackdriver-enabled: true
        stackdriver-logresourcename: k8s_container
---
# Source: flyte-core/templates/propeller/crds/flyteworkflow.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: flyteworkflows.flyte.lyft.com
spec:
  group: flyte.lyft.com
  names:
    kind: FlyteWorkflow
    plural: flyteworkflows
    shortNames:
      - fly
    singular: flyteworkflow
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          x-kubernetes-preserve-unknown-fields: true
          properties:
---
# Source: flyte-core/templates/admin/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyte-flyteadmin
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: 
  - ""
  - flyte.lyft.com
  - rbac.authorization.k8s.io
  resources: 
  - configmaps
  - flyteworkflows
  - namespaces
  - pods
  - resourcequotas
  - roles
  - rolebindings
  - secrets
  - services
  - serviceaccounts
  - spark-role
  - limitranges
  verbs: 
  - '*'
---
# Source: flyte-core/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyte-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
rules:
# Allow RO access to PODS
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
# Allow Event recording access
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - delete
  - patch
# Allow Access All plugin objects
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
# Allow Access to CRD
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
# Allow Access to all resources under flyte.lyft.com
- apiGroups:
  - flyte.lyft.com
  resources:
  - flyteworkflows
  - flyteworkflows/finalizers
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
  - post
  - deletecollection
---
# Source: flyte-core/templates/propeller/webhook.yaml
# Create a ClusterRole for the webhook
# https://kubernetes.io/docs/admin/authorization/rbac/
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: flyte-flyte-pod-webhook
  namespace: flyte
rules:
  - apiGroups:
      - "*"
    resources:
      - mutatingwebhookconfigurations
      - secrets
      - pods
      - replicasets/finalizers
    verbs:
      - get
      - create
      - update
      - patch
---
# Source: flyte-core/templates/admin/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-flyteadmin-binding
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-flyteadmin
subjects:
- kind: ServiceAccount
  name: flyteadmin
  namespace: flyte
---
# Source: flyte-core/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-flytepropeller
subjects:
- kind: ServiceAccount
  name: flytepropeller
  namespace: flyte
---
# Source: flyte-core/templates/propeller/webhook.yaml
# Create a binding from Role -> ServiceAccount
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: flyte-flyte-pod-webhook
  namespace: flyte
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-flyte-pod-webhook
subjects:
  - kind: ServiceAccount
    name: flyte-pod-webhook
    namespace: flyte
---
# Source: flyte-core/templates/propeller/webhook.yaml
# Service
apiVersion: v1
kind: Service
metadata:
  name: flyte-pod-webhook
  namespace: flyte
  annotations: 
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  selector:
    app: flyte-pod-webhook
  ports:
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9443
---
# Source: flyte-core/templates/propeller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: flyte
  name: flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flytepropeller
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "e63d877e1ff27d18ac7c4af4c6e4ca6106fc337a13ce00d9beb8efed8548493"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "10254"
      labels: 
        app.kubernetes.io/name: flytepropeller
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext: 
        fsGroup: 65534
        fsGroupChangePolicy: Always
        runAsUser: 1001
      containers:
      - command:
        - flytepropeller
        - --config
        - /etc/flyte/config/*.yaml
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: "cr.flyte.org/flyteorg/flytepropeller:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: flytepropeller
        ports:
        - containerPort: 10254
        resources:
          limits:
            cpu: 500m
            ephemeral-storage: 2Gi
            memory: 1Gi
          requests:
            cpu: 50m
            ephemeral-storage: 2Gi
            memory: 1Gi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/flyte/config
        - name: auth
          mountPath: /etc/secrets/
        terminationMessagePolicy: "FallbackToLogsOnError"
      serviceAccountName: flytepropeller
      volumes:
      - configMap:
          name: flyte-propeller-config
        name: config-volume
      - name: auth
        secret:
          secretName: flyte-secret-auth
      affinity: 
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: flytepropeller
            topologyKey: kubernetes.io/hostname
---
# Source: flyte-core/templates/propeller/webhook.yaml
# Create the actual deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyte-pod-webhook
  namespace: flyte
  labels:
    app: flyte-pod-webhook
spec:
  selector:
    matchLabels:
      app: flyte-pod-webhook
  template:
    metadata:
      labels:
        app: flyte-pod-webhook
        app.kubernetes.io/name: flyte-pod-webhook
        app.kubernetes.io/version: v1.13.0
      annotations:
        configChecksum: "e63d877e1ff27d18ac7c4af4c6e4ca6106fc337a13ce00d9beb8efed8548493"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "10254"
    spec:
      securityContext: 
        fsGroup: 65534
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions:
          type: spc_t
      serviceAccountName: flyte-pod-webhook
      containers:
        - name: webhook
          image: "cr.flyte.org/flyteorg/flytepropeller:v1.13.0"
          imagePullPolicy: "IfNotPresent"
          command:
            - flytepropeller
          args:
            - webhook
            - --config
            - /etc/flyte/config/*.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - containerPort: 9443
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          resources:
            requests:
              cpu: 200m
              ephemeral-storage: 500Mi
              memory: 500Mi
          volumeMounts:
            - name: config-volume
              mountPath: /etc/flyte/config
              readOnly: true
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: flyte-propeller-config
        - name: webhook-certs
          secret:
            secretName: flyte-pod-webhook
---
# Source: flyte-core/templates/common/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flyte-core
  namespace: flyte
  annotations: 
    cert-manager.io/issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/app-root: /console
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: 
  rules:
    - http:
        paths:
          # This is useful only for frontend development
          # NOTE: If you change this, you must update the BASE_URL value in flyteconsole.yaml
          - path: /console
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteconsole
                port:
                  number: 80
          - path: /console/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteconsole
                port:
                  number: 80
          - path: /api
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /api/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /healthcheck
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /v1/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /.well-known
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /.well-known/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /login
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /login/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /logout
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /logout/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /callback
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /callback/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /me
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /config
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /config/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /oauth2
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /oauth2/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
      host: '<HOSTNAME>'
  tls:
    - secretName: flyte-flyte-tls
      hosts:
        - '<HOSTNAME>'
  
# Certain ingress controllers like nginx cannot serve HTTP 1 and GRPC with a single ingress because GRPC can only
# enabled on the ingress object, not on backend services (GRPC annotation is set on the ingress, not on the services).
---
# Source: flyte-core/templates/common/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flyte-core-grpc
  namespace: flyte
  annotations: 
    cert-manager.io/issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/app-root: /console
    nginx.ingress.kubernetes.io/backend-protocol: GRPC
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: 
  rules:
    - host: '<HOSTNAME>'
      http:
        paths:
          #
          
          # NOTE: Port 81 in flyteadmin is the GRPC server port for FlyteAdmin.
          - path: /flyteidl.service.SignalService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.SignalService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AdminService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AdminService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.DataProxyService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.DataProxyService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AuthMetadataService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AuthMetadataService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.IdentityService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.IdentityService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /grpc.health.v1.Health
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /grpc.health.v1.Health/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
  tls:
    - secretName: flyte-flyte-tls
      hosts:
        - '<HOSTNAME>'
