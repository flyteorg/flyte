---
# Source: flyte-core/templates/admin/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyteadmin
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    iam.gke.io/gcp-service-account: gsa-flyteadmin@<PROJECT-ID>.iam.gserviceaccount.com
---
# Source: flyte-core/templates/datacatalog/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: datacatalog
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    iam.gke.io/gcp-service-account: gsa-datacatalog@<PROJECT-ID>.iam.gserviceaccount.com
---
# Source: flyte-core/templates/flytescheduler/sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytescheduler
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytescheduler
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
---
# Source: flyte-core/templates/propeller/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flytepropeller
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    iam.gke.io/gcp-service-account: gsa-flytepropeller@<PROJECT-ID>.iam.gserviceaccount.com
---
# Source: flyte-core/templates/propeller/webhook.yaml
# Create a Service Account for webhook
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte-pod-webhook
  namespace: flyte
---
# Source: flyte-core/templates/admin/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-admin-secrets
  namespace: flyte
type: Opaque
stringData:
---
# Source: flyte-core/templates/common/secret-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-secret-auth
  namespace: flyte
type: Opaque
stringData:
  client_secret: foobar
---
# Source: flyte-core/templates/common/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: db-pass
stringData:
  pass.txt: '<DBPASSWORD>'
type: Opaque
---
# Source: flyte-core/templates/propeller/webhook.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-pod-webhook
  namespace: flyte
type: Opaque
data:
  # ca issued cert
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURlekNDQW1PZ0F3SUJBZ0lRSlVCMTJ5ZWY4NFpndWhORzB0RjN0akFOQmdrcWhraUc5dzBCQVFzRkFEQVQKTVJFd0R3WURWUVFERXdobWJIbDBaUzFqWVRBZ0Z3MHlOREEzTVRJeE56UXpNamRhR0E4eU1USXpNRFl4T1RFMwpORE15TjFvd0pqRWtNQ0lHQTFVRUF4TWJabXg1ZEdVdGNHOWtMWGRsWW1odmIyc3VabXg1ZEdVdWMzWmpNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF1aWF5UmdaNXdDM2RhaTU4YVBoczR2cnoKQzU5QnhmWmRPb0QyOWtyZVpxL3FTWXNRRW4xRDczOTNCaGE0VlhKSmoxM2cwVndUL1JYUFZvRzAwNDJSNkJjaQpyTnJuTmlqOGgvVlZFQm0rT1daN3psN1BQWXM0cFE0RmlZbmtRUzI4THJwT3ZpTHhDN21ZdEtyWnZiL0VWVEdCCmpSdXFKTVRnNjVvNHFmSEs5N3VBWUpOUHdpWTBOSWxnc0lUeEhqdmxaa1pyY21wS2JOd3loWmY3UUpQNkZONnkKa0dITzdOYWNnSW01M29qMEJqK0NFMHJ1bzFvY1YxTG1sa1ovV3Z5NHp4eEJzUjF5Z2RETi9vZlB4cC9JWVJGMQpwbkNmQVZBOTlSK0hqV3hMN3BGckV4d3owbDlKbWo0QXRhYlJoek40eFd3WGdDaFpMOEJZSE1zSzhnVFpMd0lECkFRQUJvNEcxTUlHeU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlFCTnIzYi9sMWQwT1FLTnJRcApVdUErOEwzZ1JUQlNCZ05WSFJFRVN6QkpnaEZtYkhsMFpTMXdiMlF0ZDJWaWFHOXZhNElYWm14NWRHVXRjRzlrCkxYZGxZbWh2YjJzdVpteDVkR1dDRzJac2VYUmxMWEJ2WkMxM1pXSm9iMjlyTG1ac2VYUmxMbk4yWXpBTkJna3EKaGtpRzl3MEJBUXNGQUFPQ0FRRUFnQlVqUEFzYkR2dUpyWFowV2drUDRhb0NSaUlhUkRmL3RkUWZqTmE5Zy8xcgo3ZG5TRVJNYVlXQ3lMZ3Jxa0VramU0MENSdjFSaWpJM05QZlFpTHFzSXZ6YlNEY2pwRlJxWFhrZnZqeW5IYU1OClpLNWEydVRqSVlSbmtVYWZGNFFGdy9VNUFjeGJkcVJBRXdEWW5DTDhrVkpUQkFEaTR2V2ZGbzhhMUlSQUkzTk0KV0pZVVRCdUVBVThQSEJiYndvVVI5Umw0U0JsZVBFSjVNR0FZRStKa0ZNUGdiSFZlQlZMZHNqTGllOHozK1hqUQpOajFSR1RFOVB3WUFITzJBaU5wRGFhRVY3NjhhMnFVSEZNUjFGMEJhd1MwRGlabHFQNmJKM3N6YWhaYUpzTnV5CmpxR0ZWdmx5NmRBWmQ1QWlwWEZjaWE3aWZYM0ZRTTNhTFZlZWVHYmhPUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  # private key for cert
  tls.key: |
    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdWlheVJnWjV3QzNkYWk1OGFQaHM0dnJ6QzU5QnhmWmRPb0QyOWtyZVpxL3FTWXNRCkVuMUQ3MzkzQmhhNFZYSkpqMTNnMFZ3VC9SWFBWb0cwMDQyUjZCY2lyTnJuTmlqOGgvVlZFQm0rT1daN3psN1AKUFlzNHBRNEZpWW5rUVMyOExycE92aUx4QzdtWXRLclp2Yi9FVlRHQmpSdXFKTVRnNjVvNHFmSEs5N3VBWUpOUAp3aVkwTklsZ3NJVHhIanZsWmtacmNtcEtiTnd5aFpmN1FKUDZGTjZ5a0dITzdOYWNnSW01M29qMEJqK0NFMHJ1Cm8xb2NWMUxtbGtaL1d2eTR6eHhCc1IxeWdkRE4vb2ZQeHAvSVlSRjFwbkNmQVZBOTlSK0hqV3hMN3BGckV4d3oKMGw5Sm1qNEF0YWJSaHpONHhXd1hnQ2haTDhCWUhNc0s4Z1RaTHdJREFRQUJBb0lCQUhpSnVDU1o2dHFqbUYwNgpUcnNXS2tQc0pkZGZ2NUoxampiazdZWGNReGtSVGs5aTZmeGUrcytwcFNQZk1HdTcvcUFFTlNDOFZBRXN6ejUvCjdOeVVMbWV3RzNiOHBIMHdteDFhb2tNenVEYXBBd0JGNmtJNjFXb2pvemhGZnZVcHJWSkF0OTVzOTlNVTBpb2kKKzYzZjhEME9Pb3BwNEluQXByaEkrK29udExzbXB4c1QzM2RtNGFyVEN2elkyS0c3QU5sa1ZFMU9IVnhjeHAxUgpPYXpEZ1IzdGROL0FSaWgyZGpkUzdCK2lQVmF1YS9VN0JlZTFSMTA4aG10SXAvSzFOVVpROFhZNkdpMWJjTnYxClM2WUJ2b3BpVkxjdGVHLzE1NDNpRjFab1hkZThZTHJuR2FaSW8vRi8wRkNPTnpGcDFheVpIUTNicGhTemVVSEkKUXhmVVI2RUNnWUVBMWRUbDJScXlKc0ZmTnBDTlp0cmh5UmkxWFpwLzNrdDJoZEhMOWFwNHMyNndHcDlhSkY1Uwo2Y1VqVXU2ellsTWVVcmtkNlB5VUVhOUhab0g4UFRYSWlzaWdPYXQyMUk5akNrTlp5NFN2OVNSQzV2bVFhTEVHCi9md1daTzIybWNNL1k5MjhlTEZhMW1TeUxqR0xGcE5Ob0psRDJaVVNjRXpmNmxkbFJqazBNWEVDZ1lFQTN0eGYKeEp3dXZUQ0pyWVRRRXFFeUFORVJRSUdlWXBXT3YvYWt6SG9kWTFmUGlvTVJ0RzcxL0R1ak1Fa0wyWGZ3d2lxbQo5S0t1dHEvMXowTTcrL0Y1ZFBDZGo2ZTNRSW1VcDVUTTNDbjNxZit2eDNBU3kvaDV0S1JmUU9STS9TVnM1TnVmCnRVSE80dWZUUmFTL01Bb0piZkFrTThRTkh1cSs1b3V3RWpicVpKOENnWUF0U2xlWW9WL2tkNGFzTHZmVU5qNG0KY3RaUFNoOFZQVlNRU1h4eXZ6V3JnNkZITWtOTWVySURFNTlFdkl4QUlpekZCcktBRzZkZEM0d0srVE1zMzh4bgpJTkZYQmFzNG9Gb3czVTBTbnpzSnFER0hiSXFhc2d3eUZZZkV2dGl6UHJpWmRXaXJBNTJpMVZjc0U1QkxLczRCCld4VVU2ODhvL0E5ZE9qK1lIUnVoOFFLQmdIY0ZxUnYrOGJOV3plRGZFcVV3YzkwZHl5SHhWOTU4MDIxUVUzbGwKS25iWStkMlczSWpKemhQMDRkV3kzV0k2ZlZtbG45NzlWMlA0RzhhaXVORjRpSTVjeHpsbXNDY0drMTdneUh3NAo2YTFnQWNmNDRnRVBaaWlFdE42YVQwZlBpaFc3K2RLN0g3dnRaZGRIQWxpc3M1YUViMEU2VG11Wm9YVE5XNjZPCnA2WXZBb0dCQUxuUEd4eEJTT1VCTjJPOEczcjBaY0ZxNEo3Z0VKb0k3ZjdqdEQvU3NJUU9MZVBZT3UwSWhYcjkKK3ZPRGU0bFd0aHR6aFdvRHhwVUhBUnBtYjZYa1hWYVIrdzdsREJlSCtHWXh2bExvZm1FYXovN0pmVnRIT2dMZQp6SEVKbGVEM2hyYjdIMENFZ20xV0p0M2xRYVNrb09WZWhxMU1jZVRLaWtRZURYd3J0OWxXCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  # ca cert since the CA is generated here
  ca.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRWmFpcmgwYWg1MmtxekpCYVJudEhJekFOQmdrcWhraUc5dzBCQVFzRkFEQVQKTVJFd0R3WURWUVFERXdobWJIbDBaUzFqWVRBZ0Z3MHlOREEzTVRJeE56UXpNamRhR0E4eU1USXpNRFl4T1RFMwpORE15TjFvd0V6RVJNQThHQTFVRUF4TUlabXg1ZEdVdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGJ2MmtoUlN4cTV6dTR5dSs4TFdXOXVtc3Q0WXNyTEFRL3Z4aUpaZTdJbENYbXRWZnEKYUlnWHB2bXRiTmZDaXZQbER0S2U1eGtyRVNZUFJIbFUvSDFwcjZiUUFlY29VTkVNaHhUQnhFY1F2aEdScFpFTgp3bUUwbnJsU3pHSjZuZzRUY1Mxc0lpRHJGWUZSTkdRR1lOWTFEZWhVZkFGajV5MFdjWUFhaUszQXJXZXZVOTNiCm44MHQ4c0NoYlJZNStscFAzU251amd1L3ZqNW9mK1pzMXRHa3lhTEJtL3ZEdm9lQ2lXTnJLUDZqTkJKdXR0ZlUKQVlvOHMvN3RVUmFTM1ErRUhESUZuQ0w3WkZBVzQ0TDIyWS9xazRYcEx4cVN3cVU0UTJIeHFQQUJld2hJTnBTbQovaU5qaXZGWk1rVXcvdGVEeWhtMXVIeDkwZVBpVGxKQnpvWmJBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVBVGE5Mi81ZFhkRGtDamEwS1ZMZ1B2Qzk0RVV3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKMHlmR1Mrak9teTltU09Kb1lCUmFrNzhDZjd2czBhS3U3OUNCY2Nvb212Rno3cGRBcUVuVzV3Cm9wdFlIZ0ZaK3p2dXlLQWU0dGtIQlA4NkVXUTFaQ2Njcnp5Z3Q4bWRqOEJCQlJCQXAyeUNzU3NhU2oxN29JRGYKSm81MVRPZTVhTUM5NnNGa3RrazJRY2R0OExweTZ3Yy9jMHQwaCtiV2VXTnVEaHNJNnQ0TXhHbXlZaDBmWVVLZgp1dVhIazRYYllKMjAzNTlCSGhjcGZnYUtLYXV4QlpHeU42d3hDL25ISG1SaUR2dUp6dHJiN2habEUxdHJ3d2ZICkFJcEFYTURKU0NxNUlGNTNURS90ajJBMzhsVXorWXR3Y2p2aSt0ZXNVYzlsbEtXTmtOTjIwTkFRTjNLTkIyU0sKd0FMS2tnNThKd3pucFVlVlJYczV2N0xVeWxTTE96RT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: flyte-core/templates/admin/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-admin-clusters-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  clusters.yaml: |
    clusters:
      clusterConfigs: []
      labelClusterMap: {}
---
# Source: flyte-core/templates/admin/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-admin-base-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  db.yaml: | 
    database:
      dbname: flyteadmin
      host: '<CLOUD-SQL-IP>'
      passwordPath: /etc/db/pass.txt
      port: 5432
      username: flyteadmin
  domain.yaml: | 
    domains:
    - id: development
      name: development
    - id: staging
      name: staging
    - id: production
      name: production
  server.yaml: | 
    auth:
      appAuth:
        thirdPartyConfig:
          flyteClient:
            clientId: flytectl
            redirectUri: http://localhost:53593/callback
            scopes:
            - offline
            - all
      authorizedUris:
      - https://localhost:30081
      - http://flyteadmin:80
      - http://flyteadmin.flyte.svc.cluster.local:80
      userAuth:
        openId:
          baseUrl: https://accounts.google.com
          clientId: 657465813211-6eog7ek7li5k7i7fvgv2921075063hpe.apps.googleusercontent.com
          scopes:
          - profile
          - openid
    flyteadmin:
      eventVersion: 2
      metadataStoragePrefix:
      - metadata
      - admin
      metricsScope: 'flyte:'
      profilerPort: 10254
      roleNameKey: iam.amazonaws.com/role
      testing:
        host: http://flyteadmin
    server:
      grpc:
        port: 8089
      httpPort: 8088
      security:
        allowCors: true
        allowedHeaders:
        - Content-Type
        allowedOrigins:
        - '*'
        secure: false
        useAuth: false
  remoteData.yaml: | 
    remoteData:
      scheme: gcs
      signedUrls:
        durationMinutes: 3
  namespace_config.yaml: | 
    namespace_mapping:
      template: '{{ domain }}'
  storage.yaml: | 
    storage:
      type: stow
      stow:
        kind: google
        config:
          json: ""
          project_id: <PROJECT-ID>
          scopes: https://www.googleapis.com/auth/cloud-platform
      container: "<METADATA_BUCKET_NAME>"
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
  task_resource_defaults.yaml: | 
    task_resources:
      defaults:
        cpu: 500m
        memory: 500Mi
        storage: 500Mi
      limits:
        cpu: 2
        gpu: 1
        memory: 1Gi
        storage: 2000Mi
  cluster_resources.yaml: | 
    cluster_resources:
      customData:
      - production:
        - projectQuotaCpu:
            value: "5"
        - projectQuotaMemory:
            value: 4000Mi
        - gsa:
            value: gsa-production@<PROJECT-ID>.iam.gserviceaccount.com
      - staging:
        - projectQuotaCpu:
            value: "2"
        - projectQuotaMemory:
            value: 3000Mi
        - gsa:
            value: gsa-staging@<PROJECT-ID>.iam.gserviceaccount.com
      - development:
        - projectQuotaCpu:
            value: "2"
        - projectQuotaMemory:
            value: 3000Mi
        - gsa:
            value: gsa-development@<PROJECT-ID>.iam.gserviceaccount.com
      refreshInterval: 5m
      standaloneDeployment: false
      templatePath: /etc/flyte/clusterresource/templates
---
# Source: flyte-core/templates/clusterresourcesync/cluster_resource_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: clusterresource-template
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  aa_namespace.yaml: | 
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
    spec:
      finalizers:
      - kubernetes
    
  aab_default_service_account.yaml: | 
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: default
      namespace: {{ namespace }}
      annotations:
        # Needed for gcp workload identity to function
        # https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
        iam.gke.io/gcp-service-account: {{ gsa }}
    
  ab_project_resource_quota.yaml: | 
    apiVersion: v1
    kind: ResourceQuota
    metadata:
      name: project-quota
      namespace: {{ namespace }}
    spec:
      hard:
        limits.cpu: {{ projectQuotaCpu }}
        limits.memory: {{ projectQuotaMemory }}
---
# Source: flyte-core/templates/clusterresourcesync/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-clusterresourcesync-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  cluster_resources.yaml: | 
    cluster_resources:
      customData:
      - production:
        - projectQuotaCpu:
            value: "5"
        - projectQuotaMemory:
            value: 4000Mi
        - gsa:
            value: gsa-production@<PROJECT-ID>.iam.gserviceaccount.com
      - staging:
        - projectQuotaCpu:
            value: "2"
        - projectQuotaMemory:
            value: 3000Mi
        - gsa:
            value: gsa-staging@<PROJECT-ID>.iam.gserviceaccount.com
      - development:
        - projectQuotaCpu:
            value: "2"
        - projectQuotaMemory:
            value: 3000Mi
        - gsa:
            value: gsa-development@<PROJECT-ID>.iam.gserviceaccount.com
      refreshInterval: 5m
      standaloneDeployment: false
      templatePath: /etc/flyte/clusterresource/templates
  db.yaml: | 
    database:
      dbname: flyteadmin
      host: '<CLOUD-SQL-IP>'
      passwordPath: /etc/db/pass.txt
      port: 5432
      username: flyteadmin
  domain.yaml: | 
    domains:
    - id: development
      name: development
    - id: staging
      name: staging
    - id: production
      name: production
  namespace_config.yaml: | 
    namespace_mapping:
      template: '{{ domain }}'
  clusters.yaml: |
    clusters:
      clusterConfigs: []
      labelClusterMap: {}
---
# Source: flyte-core/templates/console/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-console-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data: 
  BASE_URL: /console
  CONFIG_DIR: /etc/flyte/config
---
# Source: flyte-core/templates/datacatalog/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: datacatalog-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  db.yaml: | 
    database:
      dbname: flyteadmin
      host: '<CLOUD-SQL-IP>'
      passwordPath: /etc/db/pass.txt
      port: 5432
      username: flyteadmin
  server.yaml: | 
    application:
      grpcPort: 8089
      grpcServerReflection: true
      httpPort: 8080
    datacatalog:
      heartbeat-grace-period-multiplier: 3
      max-reservation-heartbeat: 30s
      metrics-scope: datacatalog
      profiler-port: 10254
      storage-prefix: metadata/datacatalog
  storage.yaml: | 
    storage:
      type: stow
      stow:
        kind: google
        config:
          json: ""
          project_id: <PROJECT-ID>
          scopes: https://www.googleapis.com/auth/cloud-platform
      container: "<METADATA_BUCKET_NAME>"
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
---
# Source: flyte-core/templates/flytescheduler/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-scheduler-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytescheduler
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  admin.yaml: | 
    admin:
      clientId: 'flytepropeller'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: flyteadmin:81
      insecure: true
    event:
      capacity: 1000
      rate: 500
      type: admin
  db.yaml: | 
    database:
      dbname: flyteadmin
      host: '<CLOUD-SQL-IP>'
      passwordPath: /etc/db/pass.txt
      port: 5432
      username: flyteadmin
  server.yaml: | 
    scheduler:
      metricsScope: 'flyte:'
      profilerPort: 10254
---
# Source: flyte-core/templates/propeller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-propeller-config
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
data:
  admin.yaml: | 
    admin:
      clientId: 'flytepropeller'
      clientSecretLocation: /etc/secrets/client_secret
      endpoint: flyteadmin:81
      insecure: true
    event:
      capacity: 1000
      rate: 500
      type: admin
  catalog.yaml: | 
    catalog-cache:
      endpoint: datacatalog:89
      insecure: true
      type: datacatalog
  copilot.yaml: | 
    plugins:
      k8s:
        co-pilot:
          image: cr.flyte.org/flyteorg/flytecopilot:v1.13.0
          name: flyte-copilot-
          start-timeout: 30s
  core.yaml: | 
    manager:
      pod-application: flytepropeller
      pod-template-container-name: flytepropeller
      pod-template-name: flytepropeller-template
    propeller:
      downstream-eval-duration: 30s
      enable-admin-launcher: true
      gc-interval: 12h
      kube-client-config:
        burst: 25
        qps: 100
        timeout: 30s
      leader-election:
        enabled: true
        lease-duration: 15s
        lock-config-map:
          name: propeller-leader
          namespace: flyte
        renew-deadline: 10s
        retry-period: 2s
      limit-namespace: all
      max-workflow-retries: 50
      metadata-prefix: metadata/propeller
      metrics-prefix: flyte
      prof-port: 10254
      queue:
        batch-size: -1
        batching-interval: 2s
        queue:
          base-delay: 5s
          capacity: 1000
          max-delay: 120s
          rate: 100
          type: maxof
        sub-queue:
          capacity: 1000
          rate: 100
          type: bucket
        type: batch
      rawoutput-prefix: gs://<RAW_DATA_BUCKET_NAME>/
      workers: 40
      workflow-reeval-duration: 30s
    webhook:
      certDir: /etc/webhook/certs
      serviceName: flyte-pod-webhook
  enabled_plugins.yaml: | 
    tasks:
      task-plugins:
        default-for-task-types:
          container: container
          container_array: k8s-array
          sidecar: sidecar
        enabled-plugins:
        - container
        - sidecar
        - k8s-array
        - agent-service
  k8s.yaml: | 
    plugins:
      k8s:
        default-cpus: 100m
        default-env-vars: []
        default-memory: 100Mi
  resource_manager.yaml: | 
    propeller:
      resourcemanager:
        type: noop
  storage.yaml: | 
    storage:
      type: stow
      stow:
        kind: google
        config:
          json: ""
          project_id: <PROJECT-ID>
          scopes: https://www.googleapis.com/auth/cloud-platform
      container: "<METADATA_BUCKET_NAME>"
      enable-multicontainer: false
      limits:
        maxDownloadMBs: 10
  cache.yaml: |
    cache:
      max_size_mbs: 1024
      target_gc_percent: 70
  task_logs.yaml: | 
    plugins:
      k8s-array:
        logs:
          config:
            stackdriver-enabled: true
            stackdriver-logresourcename: k8s_container
      logs:
        cloudwatch-enabled: false
        kubernetes-enabled: false
        stackdriver-enabled: true
        stackdriver-logresourcename: k8s_container
---
# Source: flyte-core/templates/propeller/crds/flyteworkflow.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: flyteworkflows.flyte.lyft.com
spec:
  group: flyte.lyft.com
  names:
    kind: FlyteWorkflow
    plural: flyteworkflows
    shortNames:
      - fly
    singular: flyteworkflow
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          x-kubernetes-preserve-unknown-fields: true
          properties:
---
# Source: flyte-core/templates/admin/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyte-flyteadmin
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups: 
  - ""
  - flyte.lyft.com
  - rbac.authorization.k8s.io
  resources: 
  - configmaps
  - flyteworkflows
  - namespaces
  - pods
  - resourcequotas
  - roles
  - rolebindings
  - secrets
  - services
  - serviceaccounts
  - spark-role
  - limitranges
  verbs: 
  - '*'
---
# Source: flyte-core/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyte-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
rules:
# Allow RO access to PODS
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
# Allow Event recording access
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - delete
  - patch
# Allow Access All plugin objects
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
# Allow Access to CRD
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
# Allow Access to all resources under flyte.lyft.com
- apiGroups:
  - flyte.lyft.com
  resources:
  - flyteworkflows
  - flyteworkflows/finalizers
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
  - post
  - deletecollection
---
# Source: flyte-core/templates/propeller/webhook.yaml
# Create a ClusterRole for the webhook
# https://kubernetes.io/docs/admin/authorization/rbac/
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: flyte-flyte-pod-webhook
  namespace: flyte
rules:
  - apiGroups:
      - "*"
    resources:
      - mutatingwebhookconfigurations
      - secrets
      - pods
      - replicasets/finalizers
    verbs:
      - get
      - create
      - update
      - patch
---
# Source: flyte-core/templates/admin/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-flyteadmin-binding
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-flyteadmin
subjects:
- kind: ServiceAccount
  name: flyteadmin
  namespace: flyte
---
# Source: flyte-core/templates/propeller/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-flytepropeller
subjects:
- kind: ServiceAccount
  name: flytepropeller
  namespace: flyte
---
# Source: flyte-core/templates/propeller/webhook.yaml
# Create a binding from Role -> ServiceAccount
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: flyte-flyte-pod-webhook
  namespace: flyte
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-flyte-pod-webhook
subjects:
  - kind: ServiceAccount
    name: flyte-pod-webhook
    namespace: flyte
---
# Source: flyte-core/templates/admin/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyteadmin
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    cloud.google.com/app-protocols: '{"grpc":"HTTP2"}'
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      appProtocol: TCP
      targetPort: 8088
    - name: grpc
      port: 81
      protocol: TCP
      # intentionally set to TCP instead of grpc
      appProtocol: TCP
      targetPort: 8089
    - name: redoc
      protocol: TCP
      appProtocol: TCP
      port: 87
      targetPort: 8087
    - name: http-metrics
      protocol: TCP
      appProtocol: TCP
      port: 10254
  selector: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
---
# Source: flyte-core/templates/console/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyteconsole
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    appProtocol: TCP
    targetPort: 8080
  selector: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
---
# Source: flyte-core/templates/datacatalog/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: datacatalog
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
  annotations: 
    cloud.google.com/app-protocols: '{"grpc":"HTTP2"}'
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  type: NodePort
  ports:
  - name: http
    port: 88
    protocol: TCP
    targetPort: 8088
  - name: grpc
    port: 89
    protocol: TCP
    targetPort: 8089
  selector: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
---
# Source: flyte-core/templates/propeller/webhook.yaml
# Service
apiVersion: v1
kind: Service
metadata:
  name: flyte-pod-webhook
  namespace: flyte
  annotations: 
    projectcontour.io/upstream-protocol.h2c: grpc
spec:
  selector:
    app: flyte-pod-webhook
  ports:
    - name: https
      protocol: TCP
      port: 443
      targetPort: 9443
---
# Source: flyte-core/templates/admin/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyteadmin
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteadmin
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteadmin
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "0705f122f2535babec96a6083827c3e6d27e6e9b0e460b4d07292c858079ac7"
      labels: 
        app.kubernetes.io/name: flyteadmin
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext: 
        fsGroup: 65534
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions:
          type: spc_t
      initContainers:
        - command:
          - flyteadmin
          - --config
          - /etc/flyte/config/*.yaml
          - migrate
          - run
          image: "cr.flyte.org/flyteorg/flyteadmin:v1.13.0"
          imagePullPolicy: "IfNotPresent"
          name: run-migrations
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          volumeMounts:
          - mountPath: /etc/db
            name: db-pass
          - mountPath: /etc/flyte/config
            name: base-config-volume
        - command:
          - flyteadmin
          - --config
          - /etc/flyte/config/*.yaml
          - migrate
          - seed-projects
          - flytesnacks
          - flytetester
          - flyteexamples
          image: "cr.flyte.org/flyteorg/flyteadmin:v1.13.0"
          imagePullPolicy: "IfNotPresent"
          name: seed-projects
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          volumeMounts:
          - mountPath: /etc/db
            name: db-pass
          - mountPath: /etc/flyte/config
            name: base-config-volume
        - command:
          - flyteadmin
          - --config
          - /etc/flyte/config/*.yaml
          - clusterresource
          - sync
          image: "cr.flyte.org/flyteorg/flyteadmin:v1.13.0"
          imagePullPolicy: "IfNotPresent"
          name: sync-cluster-resources
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          volumeMounts:
          - mountPath: /etc/db
            name: db-pass
          - mountPath: /etc/flyte/clusterresource/templates
            name: resource-templates
          - mountPath: /etc/flyte/config
            name: clusters-config-volume
          - mountPath: /etc/secrets/
            name: admin-secrets
        - name: generate-secrets
          image: "cr.flyte.org/flyteorg/flyteadmin:v1.13.0"
          imagePullPolicy: "IfNotPresent"
          command: ["/bin/sh", "-c"]
          args:
            [
                "flyteadmin --config=/etc/flyte/config/*.yaml secrets init --localPath /etc/scratch/secrets && flyteadmin --config=/etc/flyte/config/*.yaml secrets create --name flyte-admin-secrets --fromPath /etc/scratch/secrets",
            ]
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - mountPath: /etc/flyte/config
              name: base-config-volume
            - mountPath: /etc/scratch
              name: scratch
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      containers:
      - command:
        - flyteadmin
        - --config
        - /etc/flyte/config/*.yaml
        - serve
        image: "cr.flyte.org/flyteorg/flyteadmin:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: flyteadmin
        ports:
        - containerPort: 8088
        - containerPort: 8089
        - containerPort: 10254
        readinessProbe:
          exec:
            command: [ "sh", "-c", "reply=$(curl -s -o /dev/null -w %{http_code} http://127.0.0.1:8088/healthcheck); if [ \"$reply\" -lt 200 -o \"$reply\" -ge 400 ]; then exit 1; fi;","grpc_health_probe", "-addr=:8089"]
          initialDelaySeconds: 15
        livenessProbe:
          exec:
            command: [ "sh", "-c", "reply=$(curl -s -o /dev/null -w %{http_code} http://127.0.0.1:8088/healthcheck); if [ \"$reply\" -lt 200 -o \"$reply\" -ge 400 ]; then exit 1; fi;","grpc_health_probe", "-addr=:8089"]
          initialDelaySeconds: 20
          periodSeconds: 5
        resources:
          limits:
            cpu: 250m
            ephemeral-storage: 2Gi
            memory: 500Mi
          requests:
            cpu: 500m
            ephemeral-storage: 2Gi
            memory: 1G
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
        - mountPath: /etc/db
          name: db-pass
        - mountPath: /srv/flyte
          name: shared-data
        - mountPath: /etc/flyte/config
          name: clusters-config-volume
        - mountPath: /etc/secrets/
          name: admin-secrets
      serviceAccountName: flyteadmin
      volumes:
      - name: db-pass
        secret:
          secretName: db-pass
      - emptyDir: {}
        name: shared-data
      - emptyDir: {}
        name: scratch
      - configMap:
          name: flyte-admin-base-config
        name: base-config-volume
      - projected:
          sources:
            - configMap:
                name: flyte-admin-base-config
            - configMap:
                name: flyte-admin-clusters-config
        name: clusters-config-volume
      - configMap:
          name: clusterresource-template
        name: resource-templates
      - name: admin-secrets
        secret:
          secretName: flyte-admin-secrets
      affinity: 
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: flyteadmin
            topologyKey: kubernetes.io/hostname
---
# Source: flyte-core/templates/clusterresourcesync/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: syncresources
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteclusterresourcesync
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteclusterresourcesync
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "dc18f5d54e0770c574e6b0693724047e22063030259104eebb554398d63209f"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "10254"
      labels: 
        app.kubernetes.io/name: flyteclusterresourcesync
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      containers:
        - command:
            - flyteadmin
            - --config
            - /etc/flyte/config/*.yaml
            - clusterresource
            - run
          image: "cr.flyte.org/flyteorg/flyteadmin:v1.13.0"
          imagePullPolicy: "IfNotPresent"
          name: sync-cluster-resources
          volumeMounts:
          - mountPath: /etc/db
            name: db-pass
          - mountPath: /etc/flyte/clusterresource/templates
            name: resource-templates
          - mountPath: /etc/flyte/config
            name: config-volume
      serviceAccountName: flyteadmin
      volumes:
        - name: db-pass
          secret:
            secretName: db-pass
        - configMap:
            name: clusterresource-template
          name: resource-templates
        - configMap:
            name: flyte-clusterresourcesync-config
          name: config-volume
---
# Source: flyte-core/templates/console/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyteconsole
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flyteconsole
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flyteconsole
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "2f930e1732c47d0849f79f9a8d06262ec97597a217bbf2337ae4f2938402ee0"
      labels: 
        app.kubernetes.io/name: flyteconsole
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext: 
        fsGroupChangePolicy: OnRootMismatch
        runAsNonRoot: true
        runAsUser: 1000
        seLinuxOptions:
          type: spc_t
      containers:
      - image: "cr.flyte.org/flyteorg/flyteconsole:v1.15.1"
        imagePullPolicy: "IfNotPresent"
        name: flyteconsole
        envFrom:
        - configMapRef:
            name: flyte-console-config
        ports:
        - containerPort: 8080
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        resources: 
          limits:
            cpu: 250m
            memory: 250Mi
          requests:
            cpu: 10m
            memory: 50Mi
        volumeMounts:
        - mountPath: /srv/flyte
          name: shared-data
      volumes:
      - emptyDir: {}
        name: shared-data
      affinity: 
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: flyteconsole
            topologyKey: kubernetes.io/hostname
---
# Source: flyte-core/templates/datacatalog/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datacatalog
  namespace: flyte
  labels: 
    app.kubernetes.io/name: datacatalog
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: datacatalog
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "905a2a911a85dbf8d4f1dc3be24b9c4fd7bb46481db0e174274d6aea6129b4c"
      labels: 
        app.kubernetes.io/name: datacatalog
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext: 
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions:
          type: spc_t
      initContainers:
      - command:
        - datacatalog
        - --config
        - /etc/datacatalog/config/*.yaml
        - migrate
        - run
        image: "cr.flyte.org/flyteorg/datacatalog:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: run-migrations
        volumeMounts:
        - mountPath: /etc/db
          name: db-pass
        - mountPath: /etc/datacatalog/config
          name: config-volume
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
      containers:
      - command:
        - datacatalog
        - --config
        - /etc/datacatalog/config/*.yaml
        - serve
        image: "cr.flyte.org/flyteorg/datacatalog:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: datacatalog
        ports:
        - containerPort: 8080
        - containerPort: 8089
        - containerPort: 10254
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        resources:
          limits:
            cpu: 500m
            ephemeral-storage: 2Gi
            memory: 500Mi
          requests:
            cpu: 50m
            ephemeral-storage: 2Gi
            memory: 200Mi
        volumeMounts:
        - mountPath: /etc/db
          name: db-pass
        - mountPath: /etc/datacatalog/config
          name: config-volume
      serviceAccountName: datacatalog
      volumes:
      - name: db-pass
        secret:
          secretName: db-pass
      - emptyDir: {}
        name: shared-data
      - configMap:
          name: datacatalog-config
        name: config-volume
      affinity: 
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: datacatalog
            topologyKey: kubernetes.io/hostname
---
# Source: flyte-core/templates/flytescheduler/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flytescheduler
  namespace: flyte
  labels: 
    app.kubernetes.io/name: flytescheduler
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flytescheduler
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "0705f122f2535babec96a6083827c3e6d27e6e9b0e460b4d07292c858079ac7"
      labels: 
        app.kubernetes.io/name: flytescheduler
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext: 
        fsGroup: 65534
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions:
          type: spc_t
      initContainers:
      - command:
        - flytescheduler
        - precheck
        - --config
        - /etc/flyte/config/*.yaml
        image: "cr.flyte.org/flyteorg/flytescheduler:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: flytescheduler-check
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
        - mountPath: /etc/db
          name: db-pass
        - mountPath: /etc/flyte/config
          name: config-volume
        - name: auth
          mountPath: /etc/secrets/
      containers:
      - command:
        - flytescheduler
        - run
        - --config
        - /etc/flyte/config/*.yaml
        image: "cr.flyte.org/flyteorg/flytescheduler:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: flytescheduler
        ports:
          - containerPort: 10254
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        resources:
          limits:
            cpu: 250m
            ephemeral-storage: 100Mi
            memory: 500Mi
          requests:
            cpu: 10m
            ephemeral-storage: 50Mi
            memory: 50Mi
        volumeMounts:
        - mountPath: /etc/db
          name: db-pass
        - mountPath: /etc/flyte/config
          name: config-volume
        - name: auth
          mountPath: /etc/secrets/
      serviceAccountName: flytescheduler
      volumes:
      - name: db-pass
        secret:
          secretName: db-pass
      - emptyDir: {}
        name: shared-data
      - configMap:
          name: flyte-scheduler-config
        name: config-volume
      - name: auth
        secret:
          secretName: flyte-secret-auth
---
# Source: flyte-core/templates/propeller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: flyte
  name: flytepropeller
  labels: 
    app.kubernetes.io/name: flytepropeller
    app.kubernetes.io/instance: flyte
    helm.sh/chart: flyte-core-v0.1.10
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels: 
      app.kubernetes.io/name: flytepropeller
      app.kubernetes.io/instance: flyte
  template:
    metadata:
      annotations:
        configChecksum: "e63d877e1ff27d18ac7c4af4c6e4ca6106fc337a13ce00d9beb8efed8548493"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "10254"
      labels: 
        app.kubernetes.io/name: flytepropeller
        app.kubernetes.io/instance: flyte
        helm.sh/chart: flyte-core-v0.1.10
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext: 
        fsGroup: 65534
        fsGroupChangePolicy: Always
        runAsUser: 1001
      containers:
      - command:
        - flytepropeller
        - --config
        - /etc/flyte/config/*.yaml
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: "cr.flyte.org/flyteorg/flytepropeller:v1.13.0"
        imagePullPolicy: "IfNotPresent"
        name: flytepropeller
        ports:
        - containerPort: 10254
        resources:
          limits:
            cpu: 500m
            ephemeral-storage: 2Gi
            memory: 1Gi
          requests:
            cpu: 50m
            ephemeral-storage: 2Gi
            memory: 1Gi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/flyte/config
        - name: auth
          mountPath: /etc/secrets/
        terminationMessagePolicy: "FallbackToLogsOnError"
      serviceAccountName: flytepropeller
      volumes:
      - configMap:
          name: flyte-propeller-config
        name: config-volume
      - name: auth
        secret:
          secretName: flyte-secret-auth
      affinity: 
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/name: flytepropeller
            topologyKey: kubernetes.io/hostname
---
# Source: flyte-core/templates/propeller/webhook.yaml
# Create the actual deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flyte-pod-webhook
  namespace: flyte
  labels:
    app: flyte-pod-webhook
spec:
  selector:
    matchLabels:
      app: flyte-pod-webhook
  template:
    metadata:
      labels:
        app: flyte-pod-webhook
        app.kubernetes.io/name: flyte-pod-webhook
        app.kubernetes.io/version: v1.13.0
      annotations:
        configChecksum: "e63d877e1ff27d18ac7c4af4c6e4ca6106fc337a13ce00d9beb8efed8548493"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "10254"
    spec:
      securityContext: 
        fsGroup: 65534
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions:
          type: spc_t
      serviceAccountName: flyte-pod-webhook
      containers:
        - name: webhook
          image: "cr.flyte.org/flyteorg/flytepropeller:v1.13.0"
          imagePullPolicy: "IfNotPresent"
          command:
            - flytepropeller
          args:
            - webhook
            - --config
            - /etc/flyte/config/*.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - containerPort: 9443
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          resources:
            requests:
              cpu: 200m
              ephemeral-storage: 500Mi
              memory: 500Mi
          volumeMounts:
            - name: config-volume
              mountPath: /etc/flyte/config
              readOnly: true
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: flyte-propeller-config
        - name: webhook-certs
          secret:
            secretName: flyte-pod-webhook
---
# Source: flyte-core/templates/common/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flyte-core
  namespace: flyte
  annotations: 
    cert-manager.io/issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/app-root: /console
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: 
  rules:
    - http:
        paths:
          # This is useful only for frontend development
          # NOTE: If you change this, you must update the BASE_URL value in flyteconsole.yaml
          - path: /console
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteconsole
                port:
                  number: 80
          - path: /console/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteconsole
                port:
                  number: 80
          - path: /api
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /api/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /healthcheck
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /v1/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /.well-known
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /.well-known/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /login
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /login/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /logout
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /logout/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /callback
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /callback/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /me
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /config
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /config/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /oauth2
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
          - path: /oauth2/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 80
      host: '<HOSTNAME>'
  tls:
    - secretName: flyte-flyte-tls
      hosts:
        - '<HOSTNAME>'
  
# Certain ingress controllers like nginx cannot serve HTTP 1 and GRPC with a single ingress because GRPC can only
# enabled on the ingress object, not on backend services (GRPC annotation is set on the ingress, not on the services).
---
# Source: flyte-core/templates/common/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flyte-core-grpc
  namespace: flyte
  annotations: 
    cert-manager.io/issuer: letsencrypt-production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/app-root: /console
    nginx.ingress.kubernetes.io/backend-protocol: GRPC
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: 
  rules:
    - host: '<HOSTNAME>'
      http:
        paths:
          #
          
          # NOTE: Port 81 in flyteadmin is the GRPC server port for FlyteAdmin.
          - path: /flyteidl.service.SignalService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.SignalService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AdminService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AdminService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.DataProxyService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.DataProxyService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AuthMetadataService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.AuthMetadataService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.IdentityService
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /flyteidl.service.IdentityService/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /grpc.health.v1.Health
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
          - path: /grpc.health.v1.Health/*
            pathType: ImplementationSpecific
            backend:
              service:
                name: flyteadmin
                port:
                  number: 81
  tls:
    - secretName: flyte-flyte-tls
      hosts:
        - '<HOSTNAME>'
