######################
Protocol Documentation
######################




.. _ref_flyteidl/datacatalog/datacatalog.proto:

flyteidl/datacatalog/datacatalog.proto
==================================================================





.. _ref_datacatalog.AddTagRequest:

AddTagRequest
------------------------------------------------------------------

Request message for tagging an Artifact.



.. csv-table:: AddTagRequest type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "tag", ":ref:`ref_datacatalog.Tag`", "", ""







.. _ref_datacatalog.AddTagResponse:

AddTagResponse
------------------------------------------------------------------

Response message for tagging an Artifact.








.. _ref_datacatalog.Artifact:

Artifact
------------------------------------------------------------------

Artifact message. It is composed of several string fields.



.. csv-table:: Artifact type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "id", ":ref:`ref_string`", "", "The unique ID of the artifact"
   "dataset", ":ref:`ref_datacatalog.DatasetID`", "", "The Dataset that the artifact belongs to"
   "data", ":ref:`ref_datacatalog.ArtifactData`", "repeated", "A list of data that is associated with the artifact"
   "metadata", ":ref:`ref_datacatalog.Metadata`", "", "Free-form metadata associated with the artifact"
   "partitions", ":ref:`ref_datacatalog.Partition`", "repeated", ""
   "tags", ":ref:`ref_datacatalog.Tag`", "repeated", ""
   "created_at", ":ref:`ref_google.protobuf.Timestamp`", "", "creation timestamp of artifact, autogenerated by service"







.. _ref_datacatalog.ArtifactData:

ArtifactData
------------------------------------------------------------------

ArtifactData that belongs to an artifact



.. csv-table:: ArtifactData type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "name", ":ref:`ref_string`", "", ""
   "value", ":ref:`ref_flyteidl.core.Literal`", "", ""







.. _ref_datacatalog.ArtifactPropertyFilter:

ArtifactPropertyFilter
------------------------------------------------------------------

Artifact properties we can filter by



.. csv-table:: ArtifactPropertyFilter type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "artifact_id", ":ref:`ref_string`", "", ""







.. _ref_datacatalog.CreateArtifactRequest:

CreateArtifactRequest
------------------------------------------------------------------

Request message for creating an Artifact and its associated artifact Data.



.. csv-table:: CreateArtifactRequest type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "artifact", ":ref:`ref_datacatalog.Artifact`", "", ""







.. _ref_datacatalog.CreateArtifactResponse:

CreateArtifactResponse
------------------------------------------------------------------

Response message for creating an Artifact.








.. _ref_datacatalog.CreateDatasetRequest:

CreateDatasetRequest
------------------------------------------------------------------

Request message for creating a Dataset.



.. csv-table:: CreateDatasetRequest type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "dataset", ":ref:`ref_datacatalog.Dataset`", "", ""







.. _ref_datacatalog.CreateDatasetResponse:

CreateDatasetResponse
------------------------------------------------------------------

Response message for creating a Dataset








.. _ref_datacatalog.Dataset:

Dataset
------------------------------------------------------------------

Dataset message. It is uniquely identified by DatasetID.



.. csv-table:: Dataset type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "id", ":ref:`ref_datacatalog.DatasetID`", "", ""
   "metadata", ":ref:`ref_datacatalog.Metadata`", "", ""
   "partitionKeys", ":ref:`ref_string`", "repeated", ""







.. _ref_datacatalog.DatasetID:

DatasetID
------------------------------------------------------------------

DatasetID message that is composed of several string fields.



.. csv-table:: DatasetID type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "project", ":ref:`ref_string`", "", "The name of the project"
   "name", ":ref:`ref_string`", "", "The name of the dataset"
   "domain", ":ref:`ref_string`", "", "The domain (eg. environment)"
   "version", ":ref:`ref_string`", "", "Version of the data schema"
   "UUID", ":ref:`ref_string`", "", "UUID for the dataset (if set the above fields are optional)"







.. _ref_datacatalog.DatasetPropertyFilter:

DatasetPropertyFilter
------------------------------------------------------------------

Dataset properties we can filter by



.. csv-table:: DatasetPropertyFilter type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "project", ":ref:`ref_string`", "", ""
   "name", ":ref:`ref_string`", "", ""
   "domain", ":ref:`ref_string`", "", ""
   "version", ":ref:`ref_string`", "", ""







.. _ref_datacatalog.FilterExpression:

FilterExpression
------------------------------------------------------------------

Filter expression that is composed of a combination of single filters



.. csv-table:: FilterExpression type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "filters", ":ref:`ref_datacatalog.SinglePropertyFilter`", "repeated", ""







.. _ref_datacatalog.GetArtifactRequest:

GetArtifactRequest
------------------------------------------------------------------

Request message for retrieving an Artifact. Retrieve an artifact based on a query handle that
can be one of artifact_id or tag. The result returned will include the artifact data and metadata
associated with the artifact.



.. csv-table:: GetArtifactRequest type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "dataset", ":ref:`ref_datacatalog.DatasetID`", "", ""
   "artifact_id", ":ref:`ref_string`", "", ""
   "tag_name", ":ref:`ref_string`", "", ""







.. _ref_datacatalog.GetArtifactResponse:

GetArtifactResponse
------------------------------------------------------------------

Response message for retrieving an Artifact. The result returned will include the artifact data
and metadata associated with the artifact.



.. csv-table:: GetArtifactResponse type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "artifact", ":ref:`ref_datacatalog.Artifact`", "", ""







.. _ref_datacatalog.GetDatasetRequest:

GetDatasetRequest
------------------------------------------------------------------

Request message for retrieving a Dataset. The Dataset is retrieved by it's unique identifier
which is a combination of several fields.



.. csv-table:: GetDatasetRequest type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "dataset", ":ref:`ref_datacatalog.DatasetID`", "", ""







.. _ref_datacatalog.GetDatasetResponse:

GetDatasetResponse
------------------------------------------------------------------

Response message for retrieving a Dataset. The response will include the metadata for the
Dataset.



.. csv-table:: GetDatasetResponse type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "dataset", ":ref:`ref_datacatalog.Dataset`", "", ""







.. _ref_datacatalog.GetOrExtendReservationRequest:

GetOrExtendReservationRequest
------------------------------------------------------------------

Try to acquire or extend an artifact reservation. If an active reservation exists, retrieve that instance.



.. csv-table:: GetOrExtendReservationRequest type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "reservation_id", ":ref:`ref_datacatalog.ReservationID`", "", ""
   "owner_id", ":ref:`ref_string`", "", ""
   "heartbeat_interval", ":ref:`ref_google.protobuf.Duration`", "", "Requested reservation extension heartbeat interval"







.. _ref_datacatalog.GetOrExtendReservationResponse:

GetOrExtendReservationResponse
------------------------------------------------------------------

Response including either a newly minted reservation or the existing reservation



.. csv-table:: GetOrExtendReservationResponse type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "reservation", ":ref:`ref_datacatalog.Reservation`", "", ""







.. _ref_datacatalog.KeyValuePair:

KeyValuePair
------------------------------------------------------------------





.. csv-table:: KeyValuePair type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "key", ":ref:`ref_string`", "", ""
   "value", ":ref:`ref_string`", "", ""







.. _ref_datacatalog.ListArtifactsRequest:

ListArtifactsRequest
------------------------------------------------------------------

List the artifacts that belong to the Dataset, optionally filtered using filtered expression.



.. csv-table:: ListArtifactsRequest type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "dataset", ":ref:`ref_datacatalog.DatasetID`", "", "Use a datasetID for which you want to retrieve the artifacts"
   "filter", ":ref:`ref_datacatalog.FilterExpression`", "", "Apply the filter expression to this query"
   "pagination", ":ref:`ref_datacatalog.PaginationOptions`", "", "Pagination options to get a page of artifacts"







.. _ref_datacatalog.ListArtifactsResponse:

ListArtifactsResponse
------------------------------------------------------------------

Response to list artifacts



.. csv-table:: ListArtifactsResponse type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "artifacts", ":ref:`ref_datacatalog.Artifact`", "repeated", "The list of artifacts"
   "next_token", ":ref:`ref_string`", "", "Token to use to request the next page, pass this into the next requests PaginationOptions"







.. _ref_datacatalog.ListDatasetsRequest:

ListDatasetsRequest
------------------------------------------------------------------

List the datasets for the given query



.. csv-table:: ListDatasetsRequest type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "filter", ":ref:`ref_datacatalog.FilterExpression`", "", "Apply the filter expression to this query"
   "pagination", ":ref:`ref_datacatalog.PaginationOptions`", "", "Pagination options to get a page of datasets"







.. _ref_datacatalog.ListDatasetsResponse:

ListDatasetsResponse
------------------------------------------------------------------

List the datasets response with token for next pagination



.. csv-table:: ListDatasetsResponse type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "datasets", ":ref:`ref_datacatalog.Dataset`", "repeated", "The list of datasets"
   "next_token", ":ref:`ref_string`", "", "Token to use to request the next page, pass this into the next requests PaginationOptions"







.. _ref_datacatalog.Metadata:

Metadata
------------------------------------------------------------------

Metadata representation for artifacts and datasets



.. csv-table:: Metadata type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "key_map", ":ref:`ref_datacatalog.Metadata.KeyMapEntry`", "repeated", "key map is a dictionary of key/val strings that represent metadata"







.. _ref_datacatalog.Metadata.KeyMapEntry:

Metadata.KeyMapEntry
------------------------------------------------------------------





.. csv-table:: Metadata.KeyMapEntry type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "key", ":ref:`ref_string`", "", ""
   "value", ":ref:`ref_string`", "", ""







.. _ref_datacatalog.PaginationOptions:

PaginationOptions
------------------------------------------------------------------

Pagination options for making list requests



.. csv-table:: PaginationOptions type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "limit", ":ref:`ref_uint32`", "", "the max number of results to return"
   "token", ":ref:`ref_string`", "", "the token to pass to fetch the next page"
   "sortKey", ":ref:`ref_datacatalog.PaginationOptions.SortKey`", "", "the property that we want to sort the results by"
   "sortOrder", ":ref:`ref_datacatalog.PaginationOptions.SortOrder`", "", "the sort order of the results"







.. _ref_datacatalog.Partition:

Partition
------------------------------------------------------------------

An artifact could have multiple partitions and each partition can have an arbitrary string key/value pair



.. csv-table:: Partition type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "key", ":ref:`ref_string`", "", ""
   "value", ":ref:`ref_string`", "", ""







.. _ref_datacatalog.PartitionPropertyFilter:

PartitionPropertyFilter
------------------------------------------------------------------

Partition properties we can filter by



.. csv-table:: PartitionPropertyFilter type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "key_val", ":ref:`ref_datacatalog.KeyValuePair`", "", ""







.. _ref_datacatalog.ReleaseReservationRequest:

ReleaseReservationRequest
------------------------------------------------------------------

Request to release reservation



.. csv-table:: ReleaseReservationRequest type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "reservation_id", ":ref:`ref_datacatalog.ReservationID`", "", ""
   "owner_id", ":ref:`ref_string`", "", ""







.. _ref_datacatalog.ReleaseReservationResponse:

ReleaseReservationResponse
------------------------------------------------------------------

Response to release reservation








.. _ref_datacatalog.Reservation:

Reservation
------------------------------------------------------------------

A reservation including owner, heartbeat interval, expiration timestamp, and various metadata.



.. csv-table:: Reservation type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "reservation_id", ":ref:`ref_datacatalog.ReservationID`", "", ""
   "owner_id", ":ref:`ref_string`", "", ""
   "heartbeat_interval", ":ref:`ref_google.protobuf.Duration`", "", "Recommended heartbeat interval to extend reservation"
   "expires_at", ":ref:`ref_google.protobuf.Timestamp`", "", "Expiration timestamp of this reservation"
   "metadata", ":ref:`ref_datacatalog.Metadata`", "", ""







.. _ref_datacatalog.ReservationID:

ReservationID
------------------------------------------------------------------

ReservationID message that is composed of several string fields.



.. csv-table:: ReservationID type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "dataset_id", ":ref:`ref_datacatalog.DatasetID`", "", ""
   "tag_name", ":ref:`ref_string`", "", ""







.. _ref_datacatalog.SinglePropertyFilter:

SinglePropertyFilter
------------------------------------------------------------------

A single property to filter on.



.. csv-table:: SinglePropertyFilter type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "tag_filter", ":ref:`ref_datacatalog.TagPropertyFilter`", "", ""
   "partition_filter", ":ref:`ref_datacatalog.PartitionPropertyFilter`", "", ""
   "artifact_filter", ":ref:`ref_datacatalog.ArtifactPropertyFilter`", "", ""
   "dataset_filter", ":ref:`ref_datacatalog.DatasetPropertyFilter`", "", ""
   "operator", ":ref:`ref_datacatalog.SinglePropertyFilter.ComparisonOperator`", "", "field 10 in case we add more entities to query"







.. _ref_datacatalog.Tag:

Tag
------------------------------------------------------------------

Tag message that is unique to a Dataset. It is associated to a single artifact and
can be retrieved by name later.



.. csv-table:: Tag type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "name", ":ref:`ref_string`", "", "Name of tag"
   "artifact_id", ":ref:`ref_string`", "", "The tagged artifact"
   "dataset", ":ref:`ref_datacatalog.DatasetID`", "", "The Dataset that this tag belongs to"







.. _ref_datacatalog.TagPropertyFilter:

TagPropertyFilter
------------------------------------------------------------------

Tag properties we can filter by



.. csv-table:: TagPropertyFilter type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "tag_name", ":ref:`ref_string`", "", ""







.. _ref_datacatalog.UpdateArtifactRequest:

UpdateArtifactRequest
------------------------------------------------------------------

Request message for updating an Artifact and overwriting its associated ArtifactData.



.. csv-table:: UpdateArtifactRequest type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "dataset", ":ref:`ref_datacatalog.DatasetID`", "", "ID of dataset the artifact is associated with"
   "artifact_id", ":ref:`ref_string`", "", ""
   "tag_name", ":ref:`ref_string`", "", ""
   "data", ":ref:`ref_datacatalog.ArtifactData`", "repeated", "List of data to overwrite stored artifact data with. Must contain ALL data for updated Artifact as any missing ArtifactData entries will be removed from the underlying blob storage and database."







.. _ref_datacatalog.UpdateArtifactResponse:

UpdateArtifactResponse
------------------------------------------------------------------

Response message for updating an Artifact.



.. csv-table:: UpdateArtifactResponse type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "artifact_id", ":ref:`ref_string`", "", "The unique ID of the artifact updated"






..
   end messages



.. _ref_datacatalog.PaginationOptions.SortKey:

PaginationOptions.SortKey
------------------------------------------------------------------



.. csv-table:: Enum PaginationOptions.SortKey values
   :header: "Name", "Number", "Description"
   :widths: auto

   "CREATION_TIME", "0", ""



.. _ref_datacatalog.PaginationOptions.SortOrder:

PaginationOptions.SortOrder
------------------------------------------------------------------



.. csv-table:: Enum PaginationOptions.SortOrder values
   :header: "Name", "Number", "Description"
   :widths: auto

   "DESCENDING", "0", ""
   "ASCENDING", "1", ""



.. _ref_datacatalog.SinglePropertyFilter.ComparisonOperator:

SinglePropertyFilter.ComparisonOperator
------------------------------------------------------------------

as use-cases come up we can add more operators, ex: gte, like, not eq etc.

.. csv-table:: Enum SinglePropertyFilter.ComparisonOperator values
   :header: "Name", "Number", "Description"
   :widths: auto

   "EQUALS", "0", ""


..
   end enums


..
   end HasExtensions



.. _ref_datacatalog.DataCatalog:

DataCatalog
------------------------------------------------------------------

Data Catalog service definition
Data Catalog is a service for indexing parameterized, strongly-typed data artifacts across revisions.
Artifacts are associated with a Dataset, and can be tagged for retrieval.

.. csv-table:: DataCatalog service methods
   :header: "Method Name", "Request Type", "Response Type", "Description"
   :widths: auto

   "CreateDataset", ":ref:`ref_datacatalog.CreateDatasetRequest`", ":ref:`ref_datacatalog.CreateDatasetResponse`", "Create a new Dataset. Datasets are unique based on the DatasetID. Datasets are logical groupings of artifacts. Each dataset can have one or more artifacts"
   "GetDataset", ":ref:`ref_datacatalog.GetDatasetRequest`", ":ref:`ref_datacatalog.GetDatasetResponse`", "Get a Dataset by the DatasetID. This returns the Dataset with the associated metadata."
   "CreateArtifact", ":ref:`ref_datacatalog.CreateArtifactRequest`", ":ref:`ref_datacatalog.CreateArtifactResponse`", "Create an artifact and the artifact data associated with it. An artifact can be a hive partition or arbitrary files or data values"
   "GetArtifact", ":ref:`ref_datacatalog.GetArtifactRequest`", ":ref:`ref_datacatalog.GetArtifactResponse`", "Retrieve an artifact by an identifying handle. This returns an artifact along with the artifact data."
   "AddTag", ":ref:`ref_datacatalog.AddTagRequest`", ":ref:`ref_datacatalog.AddTagResponse`", "Associate a tag with an artifact. Tags are unique within a Dataset."
   "ListArtifacts", ":ref:`ref_datacatalog.ListArtifactsRequest`", ":ref:`ref_datacatalog.ListArtifactsResponse`", "Return a paginated list of artifacts"
   "ListDatasets", ":ref:`ref_datacatalog.ListDatasetsRequest`", ":ref:`ref_datacatalog.ListDatasetsResponse`", "Return a paginated list of datasets"
   "UpdateArtifact", ":ref:`ref_datacatalog.UpdateArtifactRequest`", ":ref:`ref_datacatalog.UpdateArtifactResponse`", "Updates an existing artifact, overwriting the stored artifact data in the underlying blob storage."
   "GetOrExtendReservation", ":ref:`ref_datacatalog.GetOrExtendReservationRequest`", ":ref:`ref_datacatalog.GetOrExtendReservationResponse`", "Attempts to get or extend a reservation for the corresponding artifact. If one already exists (ie. another entity owns the reservation) then that reservation is retrieved. Once you acquire a reservation, you need to periodically extend the reservation with an identical call. If the reservation is not extended before the defined expiration, it may be acquired by another task. Note: We may have multiple concurrent tasks with the same signature and the same input that try to populate the same artifact at the same time. Thus with reservation, only one task can run at a time, until the reservation expires. Note: If task A does not extend the reservation in time and the reservation expires, another task B may take over the reservation, resulting in two tasks A and B running in parallel. So a third task C may get the Artifact from A or B, whichever writes last."
   "ReleaseReservation", ":ref:`ref_datacatalog.ReleaseReservationRequest`", ":ref:`ref_datacatalog.ReleaseReservationResponse`", "Release the reservation when the task holding the spot fails so that the other tasks can grab the spot."

..
   end services




.. _ref_google/protobuf/timestamp.proto:

google/protobuf/timestamp.proto
==================================================================





.. _ref_google.protobuf.Timestamp:

Timestamp
------------------------------------------------------------------

A Timestamp represents a point in time independent of any time zone or local
calendar, encoded as a count of seconds and fractions of seconds at
nanosecond resolution. The count is relative to an epoch at UTC midnight on
January 1, 1970, in the proleptic Gregorian calendar which extends the
Gregorian calendar backwards to year one.

All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
second table is needed for interpretation, using a [24-hour linear
smear](https://developers.google.com/time/smear).

The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
restricting to that range, we ensure that we can convert to and from [RFC
3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

# Examples

Example 1: Compute Timestamp from POSIX `time()`.

    Timestamp timestamp;
    timestamp.set_seconds(time(NULL));
    timestamp.set_nanos(0);

Example 2: Compute Timestamp from POSIX `gettimeofday()`.

    struct timeval tv;
    gettimeofday(&tv, NULL);

    Timestamp timestamp;
    timestamp.set_seconds(tv.tv_sec);
    timestamp.set_nanos(tv.tv_usec * 1000);

Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

    FILETIME ft;
    GetSystemTimeAsFileTime(&ft);
    UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

    // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
    // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
    Timestamp timestamp;
    timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
    timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

    long millis = System.currentTimeMillis();

    Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
        .setNanos((int) ((millis % 1000) * 1000000)).build();

Example 5: Compute Timestamp from Java `Instant.now()`.

    Instant now = Instant.now();

    Timestamp timestamp =
        Timestamp.newBuilder().setSeconds(now.getEpochSecond())
            .setNanos(now.getNano()).build();

Example 6: Compute Timestamp from current time in Python.

    timestamp = Timestamp()
    timestamp.GetCurrentTime()

# JSON Mapping

In JSON format, the Timestamp type is encoded as a string in the
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
where {year} is always expressed using four digits while {month}, {day},
{hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
is required. A proto3 JSON serializer should always use UTC (as indicated by
"Z") when printing the Timestamp type and a proto3 JSON parser should be
able to accept both UTC and other timezones (as indicated by an offset).

For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
01:30 UTC on January 15, 2017.

In JavaScript, one can convert a Date object to this format using the
standard
[toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
method. In Python, a standard `datetime.datetime` object can be converted
to this format using
[`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
the Joda Time's [`ISODateTimeFormat.dateTime()`](
http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D
) to obtain a formatter capable of generating timestamps in this format.



.. csv-table:: Timestamp type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "seconds", ":ref:`ref_int64`", "", "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive."
   "nanos", ":ref:`ref_int32`", "", "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive."






..
   end messages


..
   end enums


..
   end HasExtensions


..
   end services




.. _ref_google/protobuf/duration.proto:

google/protobuf/duration.proto
==================================================================





.. _ref_google.protobuf.Duration:

Duration
------------------------------------------------------------------

A Duration represents a signed, fixed-length span of time represented
as a count of seconds and fractions of seconds at nanosecond
resolution. It is independent of any calendar and concepts like "day"
or "month". It is related to Timestamp in that the difference between
two Timestamp values is a Duration and it can be added or subtracted
from a Timestamp. Range is approximately +-10,000 years.

# Examples

Example 1: Compute Duration from two Timestamps in pseudo code.

    Timestamp start = ...;
    Timestamp end = ...;
    Duration duration = ...;

    duration.seconds = end.seconds - start.seconds;
    duration.nanos = end.nanos - start.nanos;

    if (duration.seconds < 0 && duration.nanos > 0) {
      duration.seconds += 1;
      duration.nanos -= 1000000000;
    } else if (duration.seconds > 0 && duration.nanos < 0) {
      duration.seconds -= 1;
      duration.nanos += 1000000000;
    }

Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.

    Timestamp start = ...;
    Duration duration = ...;
    Timestamp end = ...;

    end.seconds = start.seconds + duration.seconds;
    end.nanos = start.nanos + duration.nanos;

    if (end.nanos < 0) {
      end.seconds -= 1;
      end.nanos += 1000000000;
    } else if (end.nanos >= 1000000000) {
      end.seconds += 1;
      end.nanos -= 1000000000;
    }

Example 3: Compute Duration from datetime.timedelta in Python.

    td = datetime.timedelta(days=3, minutes=10)
    duration = Duration()
    duration.FromTimedelta(td)

# JSON Mapping

In JSON format, the Duration type is encoded as a string rather than an
object, where the string ends in the suffix "s" (indicating seconds) and
is preceded by the number of seconds, with nanoseconds expressed as
fractional seconds. For example, 3 seconds with 0 nanoseconds should be
encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
be expressed in JSON format as "3.000000001s", and 3 seconds and 1
microsecond should be expressed in JSON format as "3.000001s".



.. csv-table:: Duration type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "seconds", ":ref:`ref_int64`", "", "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
   "nanos", ":ref:`ref_int32`", "", "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive."






..
   end messages


..
   end enums


..
   end HasExtensions


..
   end services




.. _ref_google/protobuf/struct.proto:

google/protobuf/struct.proto
==================================================================





.. _ref_google.protobuf.ListValue:

ListValue
------------------------------------------------------------------

`ListValue` is a wrapper around a repeated field of values.

The JSON representation for `ListValue` is JSON array.



.. csv-table:: ListValue type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "values", ":ref:`ref_google.protobuf.Value`", "repeated", "Repeated field of dynamically typed values."







.. _ref_google.protobuf.Struct:

Struct
------------------------------------------------------------------

`Struct` represents a structured data value, consisting of fields
which map to dynamically typed values. In some languages, `Struct`
might be supported by a native representation. For example, in
scripting languages like JS a struct is represented as an
object. The details of that representation are described together
with the proto support for the language.

The JSON representation for `Struct` is JSON object.



.. csv-table:: Struct type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "fields", ":ref:`ref_google.protobuf.Struct.FieldsEntry`", "repeated", "Unordered map of dynamically typed values."







.. _ref_google.protobuf.Struct.FieldsEntry:

Struct.FieldsEntry
------------------------------------------------------------------





.. csv-table:: Struct.FieldsEntry type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "key", ":ref:`ref_string`", "", ""
   "value", ":ref:`ref_google.protobuf.Value`", "", ""







.. _ref_google.protobuf.Value:

Value
------------------------------------------------------------------

`Value` represents a dynamically typed value which can be either
null, a number, a string, a boolean, a recursive struct value, or a
list of values. A producer of value is expected to set one of these
variants. Absence of any variant indicates an error.

The JSON representation for `Value` is JSON value.



.. csv-table:: Value type fields
   :header: "Field", "Type", "Label", "Description"
   :widths: auto

   "null_value", ":ref:`ref_google.protobuf.NullValue`", "", "Represents a null value."
   "number_value", ":ref:`ref_double`", "", "Represents a double value."
   "string_value", ":ref:`ref_string`", "", "Represents a string value."
   "bool_value", ":ref:`ref_bool`", "", "Represents a boolean value."
   "struct_value", ":ref:`ref_google.protobuf.Struct`", "", "Represents a structured value."
   "list_value", ":ref:`ref_google.protobuf.ListValue`", "", "Represents a repeated `Value`."






..
   end messages



.. _ref_google.protobuf.NullValue:

NullValue
------------------------------------------------------------------

`NullValue` is a singleton enumeration to represent the null value for the
`Value` type union.

 The JSON representation for `NullValue` is JSON `null`.

.. csv-table:: Enum NullValue values
   :header: "Name", "Number", "Description"
   :widths: auto

   "NULL_VALUE", "0", "Null value."


..
   end enums


..
   end HasExtensions


..
   end services


