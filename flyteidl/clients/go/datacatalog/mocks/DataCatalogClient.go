// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	datacatalog "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/datacatalog"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// DataCatalogClient is an autogenerated mock type for the DataCatalogClient type
type DataCatalogClient struct {
	mock.Mock
}

type DataCatalogClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DataCatalogClient) EXPECT() *DataCatalogClient_Expecter {
	return &DataCatalogClient_Expecter{mock: &_m.Mock}
}

// AddTag provides a mock function with given fields: ctx, in, opts
func (_m *DataCatalogClient) AddTag(ctx context.Context, in *datacatalog.AddTagRequest, opts ...grpc.CallOption) (*datacatalog.AddTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTag")
	}

	var r0 *datacatalog.AddTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.AddTagRequest, ...grpc.CallOption) (*datacatalog.AddTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.AddTagRequest, ...grpc.CallOption) *datacatalog.AddTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.AddTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.AddTagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataCatalogClient_AddTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTag'
type DataCatalogClient_AddTag_Call struct {
	*mock.Call
}

// AddTag is a helper method to define mock.On call
//   - ctx context.Context
//   - in *datacatalog.AddTagRequest
//   - opts ...grpc.CallOption
func (_e *DataCatalogClient_Expecter) AddTag(ctx interface{}, in interface{}, opts ...interface{}) *DataCatalogClient_AddTag_Call {
	return &DataCatalogClient_AddTag_Call{Call: _e.mock.On("AddTag",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataCatalogClient_AddTag_Call) Run(run func(ctx context.Context, in *datacatalog.AddTagRequest, opts ...grpc.CallOption)) *DataCatalogClient_AddTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*datacatalog.AddTagRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataCatalogClient_AddTag_Call) Return(_a0 *datacatalog.AddTagResponse, _a1 error) *DataCatalogClient_AddTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataCatalogClient_AddTag_Call) RunAndReturn(run func(context.Context, *datacatalog.AddTagRequest, ...grpc.CallOption) (*datacatalog.AddTagResponse, error)) *DataCatalogClient_AddTag_Call {
	_c.Call.Return(run)
	return _c
}

// CreateArtifact provides a mock function with given fields: ctx, in, opts
func (_m *DataCatalogClient) CreateArtifact(ctx context.Context, in *datacatalog.CreateArtifactRequest, opts ...grpc.CallOption) (*datacatalog.CreateArtifactResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateArtifact")
	}

	var r0 *datacatalog.CreateArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.CreateArtifactRequest, ...grpc.CallOption) (*datacatalog.CreateArtifactResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.CreateArtifactRequest, ...grpc.CallOption) *datacatalog.CreateArtifactResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.CreateArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.CreateArtifactRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataCatalogClient_CreateArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArtifact'
type DataCatalogClient_CreateArtifact_Call struct {
	*mock.Call
}

// CreateArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - in *datacatalog.CreateArtifactRequest
//   - opts ...grpc.CallOption
func (_e *DataCatalogClient_Expecter) CreateArtifact(ctx interface{}, in interface{}, opts ...interface{}) *DataCatalogClient_CreateArtifact_Call {
	return &DataCatalogClient_CreateArtifact_Call{Call: _e.mock.On("CreateArtifact",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataCatalogClient_CreateArtifact_Call) Run(run func(ctx context.Context, in *datacatalog.CreateArtifactRequest, opts ...grpc.CallOption)) *DataCatalogClient_CreateArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*datacatalog.CreateArtifactRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataCatalogClient_CreateArtifact_Call) Return(_a0 *datacatalog.CreateArtifactResponse, _a1 error) *DataCatalogClient_CreateArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataCatalogClient_CreateArtifact_Call) RunAndReturn(run func(context.Context, *datacatalog.CreateArtifactRequest, ...grpc.CallOption) (*datacatalog.CreateArtifactResponse, error)) *DataCatalogClient_CreateArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDataset provides a mock function with given fields: ctx, in, opts
func (_m *DataCatalogClient) CreateDataset(ctx context.Context, in *datacatalog.CreateDatasetRequest, opts ...grpc.CallOption) (*datacatalog.CreateDatasetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataset")
	}

	var r0 *datacatalog.CreateDatasetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.CreateDatasetRequest, ...grpc.CallOption) (*datacatalog.CreateDatasetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.CreateDatasetRequest, ...grpc.CallOption) *datacatalog.CreateDatasetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.CreateDatasetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.CreateDatasetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataCatalogClient_CreateDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDataset'
type DataCatalogClient_CreateDataset_Call struct {
	*mock.Call
}

// CreateDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - in *datacatalog.CreateDatasetRequest
//   - opts ...grpc.CallOption
func (_e *DataCatalogClient_Expecter) CreateDataset(ctx interface{}, in interface{}, opts ...interface{}) *DataCatalogClient_CreateDataset_Call {
	return &DataCatalogClient_CreateDataset_Call{Call: _e.mock.On("CreateDataset",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataCatalogClient_CreateDataset_Call) Run(run func(ctx context.Context, in *datacatalog.CreateDatasetRequest, opts ...grpc.CallOption)) *DataCatalogClient_CreateDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*datacatalog.CreateDatasetRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataCatalogClient_CreateDataset_Call) Return(_a0 *datacatalog.CreateDatasetResponse, _a1 error) *DataCatalogClient_CreateDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataCatalogClient_CreateDataset_Call) RunAndReturn(run func(context.Context, *datacatalog.CreateDatasetRequest, ...grpc.CallOption) (*datacatalog.CreateDatasetResponse, error)) *DataCatalogClient_CreateDataset_Call {
	_c.Call.Return(run)
	return _c
}

// GetArtifact provides a mock function with given fields: ctx, in, opts
func (_m *DataCatalogClient) GetArtifact(ctx context.Context, in *datacatalog.GetArtifactRequest, opts ...grpc.CallOption) (*datacatalog.GetArtifactResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArtifact")
	}

	var r0 *datacatalog.GetArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.GetArtifactRequest, ...grpc.CallOption) (*datacatalog.GetArtifactResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.GetArtifactRequest, ...grpc.CallOption) *datacatalog.GetArtifactResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.GetArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.GetArtifactRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataCatalogClient_GetArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArtifact'
type DataCatalogClient_GetArtifact_Call struct {
	*mock.Call
}

// GetArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - in *datacatalog.GetArtifactRequest
//   - opts ...grpc.CallOption
func (_e *DataCatalogClient_Expecter) GetArtifact(ctx interface{}, in interface{}, opts ...interface{}) *DataCatalogClient_GetArtifact_Call {
	return &DataCatalogClient_GetArtifact_Call{Call: _e.mock.On("GetArtifact",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataCatalogClient_GetArtifact_Call) Run(run func(ctx context.Context, in *datacatalog.GetArtifactRequest, opts ...grpc.CallOption)) *DataCatalogClient_GetArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*datacatalog.GetArtifactRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataCatalogClient_GetArtifact_Call) Return(_a0 *datacatalog.GetArtifactResponse, _a1 error) *DataCatalogClient_GetArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataCatalogClient_GetArtifact_Call) RunAndReturn(run func(context.Context, *datacatalog.GetArtifactRequest, ...grpc.CallOption) (*datacatalog.GetArtifactResponse, error)) *DataCatalogClient_GetArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataset provides a mock function with given fields: ctx, in, opts
func (_m *DataCatalogClient) GetDataset(ctx context.Context, in *datacatalog.GetDatasetRequest, opts ...grpc.CallOption) (*datacatalog.GetDatasetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataset")
	}

	var r0 *datacatalog.GetDatasetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.GetDatasetRequest, ...grpc.CallOption) (*datacatalog.GetDatasetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.GetDatasetRequest, ...grpc.CallOption) *datacatalog.GetDatasetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.GetDatasetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.GetDatasetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataCatalogClient_GetDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataset'
type DataCatalogClient_GetDataset_Call struct {
	*mock.Call
}

// GetDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - in *datacatalog.GetDatasetRequest
//   - opts ...grpc.CallOption
func (_e *DataCatalogClient_Expecter) GetDataset(ctx interface{}, in interface{}, opts ...interface{}) *DataCatalogClient_GetDataset_Call {
	return &DataCatalogClient_GetDataset_Call{Call: _e.mock.On("GetDataset",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataCatalogClient_GetDataset_Call) Run(run func(ctx context.Context, in *datacatalog.GetDatasetRequest, opts ...grpc.CallOption)) *DataCatalogClient_GetDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*datacatalog.GetDatasetRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataCatalogClient_GetDataset_Call) Return(_a0 *datacatalog.GetDatasetResponse, _a1 error) *DataCatalogClient_GetDataset_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataCatalogClient_GetDataset_Call) RunAndReturn(run func(context.Context, *datacatalog.GetDatasetRequest, ...grpc.CallOption) (*datacatalog.GetDatasetResponse, error)) *DataCatalogClient_GetDataset_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrExtendReservation provides a mock function with given fields: ctx, in, opts
func (_m *DataCatalogClient) GetOrExtendReservation(ctx context.Context, in *datacatalog.GetOrExtendReservationRequest, opts ...grpc.CallOption) (*datacatalog.GetOrExtendReservationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrExtendReservation")
	}

	var r0 *datacatalog.GetOrExtendReservationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.GetOrExtendReservationRequest, ...grpc.CallOption) (*datacatalog.GetOrExtendReservationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.GetOrExtendReservationRequest, ...grpc.CallOption) *datacatalog.GetOrExtendReservationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.GetOrExtendReservationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.GetOrExtendReservationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataCatalogClient_GetOrExtendReservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrExtendReservation'
type DataCatalogClient_GetOrExtendReservation_Call struct {
	*mock.Call
}

// GetOrExtendReservation is a helper method to define mock.On call
//   - ctx context.Context
//   - in *datacatalog.GetOrExtendReservationRequest
//   - opts ...grpc.CallOption
func (_e *DataCatalogClient_Expecter) GetOrExtendReservation(ctx interface{}, in interface{}, opts ...interface{}) *DataCatalogClient_GetOrExtendReservation_Call {
	return &DataCatalogClient_GetOrExtendReservation_Call{Call: _e.mock.On("GetOrExtendReservation",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataCatalogClient_GetOrExtendReservation_Call) Run(run func(ctx context.Context, in *datacatalog.GetOrExtendReservationRequest, opts ...grpc.CallOption)) *DataCatalogClient_GetOrExtendReservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*datacatalog.GetOrExtendReservationRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataCatalogClient_GetOrExtendReservation_Call) Return(_a0 *datacatalog.GetOrExtendReservationResponse, _a1 error) *DataCatalogClient_GetOrExtendReservation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataCatalogClient_GetOrExtendReservation_Call) RunAndReturn(run func(context.Context, *datacatalog.GetOrExtendReservationRequest, ...grpc.CallOption) (*datacatalog.GetOrExtendReservationResponse, error)) *DataCatalogClient_GetOrExtendReservation_Call {
	_c.Call.Return(run)
	return _c
}

// ListArtifacts provides a mock function with given fields: ctx, in, opts
func (_m *DataCatalogClient) ListArtifacts(ctx context.Context, in *datacatalog.ListArtifactsRequest, opts ...grpc.CallOption) (*datacatalog.ListArtifactsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListArtifacts")
	}

	var r0 *datacatalog.ListArtifactsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.ListArtifactsRequest, ...grpc.CallOption) (*datacatalog.ListArtifactsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.ListArtifactsRequest, ...grpc.CallOption) *datacatalog.ListArtifactsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.ListArtifactsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.ListArtifactsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataCatalogClient_ListArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListArtifacts'
type DataCatalogClient_ListArtifacts_Call struct {
	*mock.Call
}

// ListArtifacts is a helper method to define mock.On call
//   - ctx context.Context
//   - in *datacatalog.ListArtifactsRequest
//   - opts ...grpc.CallOption
func (_e *DataCatalogClient_Expecter) ListArtifacts(ctx interface{}, in interface{}, opts ...interface{}) *DataCatalogClient_ListArtifacts_Call {
	return &DataCatalogClient_ListArtifacts_Call{Call: _e.mock.On("ListArtifacts",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataCatalogClient_ListArtifacts_Call) Run(run func(ctx context.Context, in *datacatalog.ListArtifactsRequest, opts ...grpc.CallOption)) *DataCatalogClient_ListArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*datacatalog.ListArtifactsRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataCatalogClient_ListArtifacts_Call) Return(_a0 *datacatalog.ListArtifactsResponse, _a1 error) *DataCatalogClient_ListArtifacts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataCatalogClient_ListArtifacts_Call) RunAndReturn(run func(context.Context, *datacatalog.ListArtifactsRequest, ...grpc.CallOption) (*datacatalog.ListArtifactsResponse, error)) *DataCatalogClient_ListArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatasets provides a mock function with given fields: ctx, in, opts
func (_m *DataCatalogClient) ListDatasets(ctx context.Context, in *datacatalog.ListDatasetsRequest, opts ...grpc.CallOption) (*datacatalog.ListDatasetsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatasets")
	}

	var r0 *datacatalog.ListDatasetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.ListDatasetsRequest, ...grpc.CallOption) (*datacatalog.ListDatasetsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.ListDatasetsRequest, ...grpc.CallOption) *datacatalog.ListDatasetsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.ListDatasetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.ListDatasetsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataCatalogClient_ListDatasets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatasets'
type DataCatalogClient_ListDatasets_Call struct {
	*mock.Call
}

// ListDatasets is a helper method to define mock.On call
//   - ctx context.Context
//   - in *datacatalog.ListDatasetsRequest
//   - opts ...grpc.CallOption
func (_e *DataCatalogClient_Expecter) ListDatasets(ctx interface{}, in interface{}, opts ...interface{}) *DataCatalogClient_ListDatasets_Call {
	return &DataCatalogClient_ListDatasets_Call{Call: _e.mock.On("ListDatasets",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataCatalogClient_ListDatasets_Call) Run(run func(ctx context.Context, in *datacatalog.ListDatasetsRequest, opts ...grpc.CallOption)) *DataCatalogClient_ListDatasets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*datacatalog.ListDatasetsRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataCatalogClient_ListDatasets_Call) Return(_a0 *datacatalog.ListDatasetsResponse, _a1 error) *DataCatalogClient_ListDatasets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataCatalogClient_ListDatasets_Call) RunAndReturn(run func(context.Context, *datacatalog.ListDatasetsRequest, ...grpc.CallOption) (*datacatalog.ListDatasetsResponse, error)) *DataCatalogClient_ListDatasets_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseReservation provides a mock function with given fields: ctx, in, opts
func (_m *DataCatalogClient) ReleaseReservation(ctx context.Context, in *datacatalog.ReleaseReservationRequest, opts ...grpc.CallOption) (*datacatalog.ReleaseReservationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseReservation")
	}

	var r0 *datacatalog.ReleaseReservationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.ReleaseReservationRequest, ...grpc.CallOption) (*datacatalog.ReleaseReservationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.ReleaseReservationRequest, ...grpc.CallOption) *datacatalog.ReleaseReservationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.ReleaseReservationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.ReleaseReservationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataCatalogClient_ReleaseReservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseReservation'
type DataCatalogClient_ReleaseReservation_Call struct {
	*mock.Call
}

// ReleaseReservation is a helper method to define mock.On call
//   - ctx context.Context
//   - in *datacatalog.ReleaseReservationRequest
//   - opts ...grpc.CallOption
func (_e *DataCatalogClient_Expecter) ReleaseReservation(ctx interface{}, in interface{}, opts ...interface{}) *DataCatalogClient_ReleaseReservation_Call {
	return &DataCatalogClient_ReleaseReservation_Call{Call: _e.mock.On("ReleaseReservation",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataCatalogClient_ReleaseReservation_Call) Run(run func(ctx context.Context, in *datacatalog.ReleaseReservationRequest, opts ...grpc.CallOption)) *DataCatalogClient_ReleaseReservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*datacatalog.ReleaseReservationRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataCatalogClient_ReleaseReservation_Call) Return(_a0 *datacatalog.ReleaseReservationResponse, _a1 error) *DataCatalogClient_ReleaseReservation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataCatalogClient_ReleaseReservation_Call) RunAndReturn(run func(context.Context, *datacatalog.ReleaseReservationRequest, ...grpc.CallOption) (*datacatalog.ReleaseReservationResponse, error)) *DataCatalogClient_ReleaseReservation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateArtifact provides a mock function with given fields: ctx, in, opts
func (_m *DataCatalogClient) UpdateArtifact(ctx context.Context, in *datacatalog.UpdateArtifactRequest, opts ...grpc.CallOption) (*datacatalog.UpdateArtifactResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArtifact")
	}

	var r0 *datacatalog.UpdateArtifactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.UpdateArtifactRequest, ...grpc.CallOption) (*datacatalog.UpdateArtifactResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.UpdateArtifactRequest, ...grpc.CallOption) *datacatalog.UpdateArtifactResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.UpdateArtifactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.UpdateArtifactRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataCatalogClient_UpdateArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateArtifact'
type DataCatalogClient_UpdateArtifact_Call struct {
	*mock.Call
}

// UpdateArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - in *datacatalog.UpdateArtifactRequest
//   - opts ...grpc.CallOption
func (_e *DataCatalogClient_Expecter) UpdateArtifact(ctx interface{}, in interface{}, opts ...interface{}) *DataCatalogClient_UpdateArtifact_Call {
	return &DataCatalogClient_UpdateArtifact_Call{Call: _e.mock.On("UpdateArtifact",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *DataCatalogClient_UpdateArtifact_Call) Run(run func(ctx context.Context, in *datacatalog.UpdateArtifactRequest, opts ...grpc.CallOption)) *DataCatalogClient_UpdateArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*datacatalog.UpdateArtifactRequest), variadicArgs...)
	})
	return _c
}

func (_c *DataCatalogClient_UpdateArtifact_Call) Return(_a0 *datacatalog.UpdateArtifactResponse, _a1 error) *DataCatalogClient_UpdateArtifact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataCatalogClient_UpdateArtifact_Call) RunAndReturn(run func(context.Context, *datacatalog.UpdateArtifactRequest, ...grpc.CallOption) (*datacatalog.UpdateArtifactResponse, error)) *DataCatalogClient_UpdateArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataCatalogClient creates a new instance of DataCatalogClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataCatalogClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataCatalogClient {
	mock := &DataCatalogClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
