// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cacheservice "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/cacheservice"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// CacheServiceClient is an autogenerated mock type for the CacheServiceClient type
type CacheServiceClient struct {
	mock.Mock
}

type CacheServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheServiceClient) EXPECT() *CacheServiceClient_Expecter {
	return &CacheServiceClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *CacheServiceClient) Delete(ctx context.Context, in *cacheservice.DeleteCacheRequest, opts ...grpc.CallOption) (*cacheservice.DeleteCacheResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *cacheservice.DeleteCacheResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.DeleteCacheRequest, ...grpc.CallOption) (*cacheservice.DeleteCacheResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.DeleteCacheRequest, ...grpc.CallOption) *cacheservice.DeleteCacheResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cacheservice.DeleteCacheResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cacheservice.DeleteCacheRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CacheServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cacheservice.DeleteCacheRequest
//   - opts ...grpc.CallOption
func (_e *CacheServiceClient_Expecter) Delete(ctx interface{}, in interface{}, opts ...interface{}) *CacheServiceClient_Delete_Call {
	return &CacheServiceClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CacheServiceClient_Delete_Call) Run(run func(ctx context.Context, in *cacheservice.DeleteCacheRequest, opts ...grpc.CallOption)) *CacheServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cacheservice.DeleteCacheRequest), variadicArgs...)
	})
	return _c
}

func (_c *CacheServiceClient_Delete_Call) Return(_a0 *cacheservice.DeleteCacheResponse, _a1 error) *CacheServiceClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheServiceClient_Delete_Call) RunAndReturn(run func(context.Context, *cacheservice.DeleteCacheRequest, ...grpc.CallOption) (*cacheservice.DeleteCacheResponse, error)) *CacheServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *CacheServiceClient) Get(ctx context.Context, in *cacheservice.GetCacheRequest, opts ...grpc.CallOption) (*cacheservice.GetCacheResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *cacheservice.GetCacheResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.GetCacheRequest, ...grpc.CallOption) (*cacheservice.GetCacheResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.GetCacheRequest, ...grpc.CallOption) *cacheservice.GetCacheResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cacheservice.GetCacheResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cacheservice.GetCacheRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CacheServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cacheservice.GetCacheRequest
//   - opts ...grpc.CallOption
func (_e *CacheServiceClient_Expecter) Get(ctx interface{}, in interface{}, opts ...interface{}) *CacheServiceClient_Get_Call {
	return &CacheServiceClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CacheServiceClient_Get_Call) Run(run func(ctx context.Context, in *cacheservice.GetCacheRequest, opts ...grpc.CallOption)) *CacheServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cacheservice.GetCacheRequest), variadicArgs...)
	})
	return _c
}

func (_c *CacheServiceClient_Get_Call) Return(_a0 *cacheservice.GetCacheResponse, _a1 error) *CacheServiceClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheServiceClient_Get_Call) RunAndReturn(run func(context.Context, *cacheservice.GetCacheRequest, ...grpc.CallOption) (*cacheservice.GetCacheResponse, error)) *CacheServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrExtendReservation provides a mock function with given fields: ctx, in, opts
func (_m *CacheServiceClient) GetOrExtendReservation(ctx context.Context, in *cacheservice.GetOrExtendReservationRequest, opts ...grpc.CallOption) (*cacheservice.GetOrExtendReservationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrExtendReservation")
	}

	var r0 *cacheservice.GetOrExtendReservationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.GetOrExtendReservationRequest, ...grpc.CallOption) (*cacheservice.GetOrExtendReservationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.GetOrExtendReservationRequest, ...grpc.CallOption) *cacheservice.GetOrExtendReservationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cacheservice.GetOrExtendReservationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cacheservice.GetOrExtendReservationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheServiceClient_GetOrExtendReservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrExtendReservation'
type CacheServiceClient_GetOrExtendReservation_Call struct {
	*mock.Call
}

// GetOrExtendReservation is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cacheservice.GetOrExtendReservationRequest
//   - opts ...grpc.CallOption
func (_e *CacheServiceClient_Expecter) GetOrExtendReservation(ctx interface{}, in interface{}, opts ...interface{}) *CacheServiceClient_GetOrExtendReservation_Call {
	return &CacheServiceClient_GetOrExtendReservation_Call{Call: _e.mock.On("GetOrExtendReservation",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CacheServiceClient_GetOrExtendReservation_Call) Run(run func(ctx context.Context, in *cacheservice.GetOrExtendReservationRequest, opts ...grpc.CallOption)) *CacheServiceClient_GetOrExtendReservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cacheservice.GetOrExtendReservationRequest), variadicArgs...)
	})
	return _c
}

func (_c *CacheServiceClient_GetOrExtendReservation_Call) Return(_a0 *cacheservice.GetOrExtendReservationResponse, _a1 error) *CacheServiceClient_GetOrExtendReservation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheServiceClient_GetOrExtendReservation_Call) RunAndReturn(run func(context.Context, *cacheservice.GetOrExtendReservationRequest, ...grpc.CallOption) (*cacheservice.GetOrExtendReservationResponse, error)) *CacheServiceClient_GetOrExtendReservation_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, in, opts
func (_m *CacheServiceClient) Put(ctx context.Context, in *cacheservice.PutCacheRequest, opts ...grpc.CallOption) (*cacheservice.PutCacheResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *cacheservice.PutCacheResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.PutCacheRequest, ...grpc.CallOption) (*cacheservice.PutCacheResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.PutCacheRequest, ...grpc.CallOption) *cacheservice.PutCacheResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cacheservice.PutCacheResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cacheservice.PutCacheRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheServiceClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type CacheServiceClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cacheservice.PutCacheRequest
//   - opts ...grpc.CallOption
func (_e *CacheServiceClient_Expecter) Put(ctx interface{}, in interface{}, opts ...interface{}) *CacheServiceClient_Put_Call {
	return &CacheServiceClient_Put_Call{Call: _e.mock.On("Put",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CacheServiceClient_Put_Call) Run(run func(ctx context.Context, in *cacheservice.PutCacheRequest, opts ...grpc.CallOption)) *CacheServiceClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cacheservice.PutCacheRequest), variadicArgs...)
	})
	return _c
}

func (_c *CacheServiceClient_Put_Call) Return(_a0 *cacheservice.PutCacheResponse, _a1 error) *CacheServiceClient_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheServiceClient_Put_Call) RunAndReturn(run func(context.Context, *cacheservice.PutCacheRequest, ...grpc.CallOption) (*cacheservice.PutCacheResponse, error)) *CacheServiceClient_Put_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseReservation provides a mock function with given fields: ctx, in, opts
func (_m *CacheServiceClient) ReleaseReservation(ctx context.Context, in *cacheservice.ReleaseReservationRequest, opts ...grpc.CallOption) (*cacheservice.ReleaseReservationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseReservation")
	}

	var r0 *cacheservice.ReleaseReservationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.ReleaseReservationRequest, ...grpc.CallOption) (*cacheservice.ReleaseReservationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cacheservice.ReleaseReservationRequest, ...grpc.CallOption) *cacheservice.ReleaseReservationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cacheservice.ReleaseReservationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cacheservice.ReleaseReservationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheServiceClient_ReleaseReservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseReservation'
type CacheServiceClient_ReleaseReservation_Call struct {
	*mock.Call
}

// ReleaseReservation is a helper method to define mock.On call
//   - ctx context.Context
//   - in *cacheservice.ReleaseReservationRequest
//   - opts ...grpc.CallOption
func (_e *CacheServiceClient_Expecter) ReleaseReservation(ctx interface{}, in interface{}, opts ...interface{}) *CacheServiceClient_ReleaseReservation_Call {
	return &CacheServiceClient_ReleaseReservation_Call{Call: _e.mock.On("ReleaseReservation",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CacheServiceClient_ReleaseReservation_Call) Run(run func(ctx context.Context, in *cacheservice.ReleaseReservationRequest, opts ...grpc.CallOption)) *CacheServiceClient_ReleaseReservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*cacheservice.ReleaseReservationRequest), variadicArgs...)
	})
	return _c
}

func (_c *CacheServiceClient_ReleaseReservation_Call) Return(_a0 *cacheservice.ReleaseReservationResponse, _a1 error) *CacheServiceClient_ReleaseReservation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheServiceClient_ReleaseReservation_Call) RunAndReturn(run func(context.Context, *cacheservice.ReleaseReservationRequest, ...grpc.CallOption) (*cacheservice.ReleaseReservationResponse, error)) *CacheServiceClient_ReleaseReservation_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheServiceClient creates a new instance of CacheServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheServiceClient {
	mock := &CacheServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
