// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	connector "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/connector"

	mock "github.com/stretchr/testify/mock"
)

// AgentMetadataServiceServer is an autogenerated mock type for the AgentMetadataServiceServer type
type AgentMetadataServiceServer struct {
	mock.Mock
}

type AgentMetadataServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *AgentMetadataServiceServer) EXPECT() *AgentMetadataServiceServer_Expecter {
	return &AgentMetadataServiceServer_Expecter{mock: &_m.Mock}
}

// GetAgent provides a mock function with given fields: _a0, _a1
func (_m *AgentMetadataServiceServer) GetAgent(_a0 context.Context, _a1 *connector.GetAgentRequest) (*connector.GetAgentResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAgent")
	}

	var r0 *connector.GetAgentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connector.GetAgentRequest) (*connector.GetAgentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connector.GetAgentRequest) *connector.GetAgentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.GetAgentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connector.GetAgentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentMetadataServiceServer_GetAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgent'
type AgentMetadataServiceServer_GetAgent_Call struct {
	*mock.Call
}

// GetAgent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connector.GetAgentRequest
func (_e *AgentMetadataServiceServer_Expecter) GetAgent(_a0 interface{}, _a1 interface{}) *AgentMetadataServiceServer_GetAgent_Call {
	return &AgentMetadataServiceServer_GetAgent_Call{Call: _e.mock.On("GetAgent", _a0, _a1)}
}

func (_c *AgentMetadataServiceServer_GetAgent_Call) Run(run func(_a0 context.Context, _a1 *connector.GetAgentRequest)) *AgentMetadataServiceServer_GetAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connector.GetAgentRequest))
	})
	return _c
}

func (_c *AgentMetadataServiceServer_GetAgent_Call) Return(_a0 *connector.GetAgentResponse, _a1 error) *AgentMetadataServiceServer_GetAgent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentMetadataServiceServer_GetAgent_Call) RunAndReturn(run func(context.Context, *connector.GetAgentRequest) (*connector.GetAgentResponse, error)) *AgentMetadataServiceServer_GetAgent_Call {
	_c.Call.Return(run)
	return _c
}

// ListAgents provides a mock function with given fields: _a0, _a1
func (_m *AgentMetadataServiceServer) ListAgents(_a0 context.Context, _a1 *connector.ListAgentsRequest) (*connector.ListAgentsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListAgents")
	}

	var r0 *connector.ListAgentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connector.ListAgentsRequest) (*connector.ListAgentsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connector.ListAgentsRequest) *connector.ListAgentsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.ListAgentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connector.ListAgentsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentMetadataServiceServer_ListAgents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAgents'
type AgentMetadataServiceServer_ListAgents_Call struct {
	*mock.Call
}

// ListAgents is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connector.ListAgentsRequest
func (_e *AgentMetadataServiceServer_Expecter) ListAgents(_a0 interface{}, _a1 interface{}) *AgentMetadataServiceServer_ListAgents_Call {
	return &AgentMetadataServiceServer_ListAgents_Call{Call: _e.mock.On("ListAgents", _a0, _a1)}
}

func (_c *AgentMetadataServiceServer_ListAgents_Call) Run(run func(_a0 context.Context, _a1 *connector.ListAgentsRequest)) *AgentMetadataServiceServer_ListAgents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connector.ListAgentsRequest))
	})
	return _c
}

func (_c *AgentMetadataServiceServer_ListAgents_Call) Return(_a0 *connector.ListAgentsResponse, _a1 error) *AgentMetadataServiceServer_ListAgents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AgentMetadataServiceServer_ListAgents_Call) RunAndReturn(run func(context.Context, *connector.ListAgentsRequest) (*connector.ListAgentsResponse, error)) *AgentMetadataServiceServer_ListAgents_Call {
	_c.Call.Return(run)
	return _c
}

// NewAgentMetadataServiceServer creates a new instance of AgentMetadataServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgentMetadataServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AgentMetadataServiceServer {
	mock := &AgentMetadataServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
