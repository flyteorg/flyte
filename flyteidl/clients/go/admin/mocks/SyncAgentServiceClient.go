// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
)

// SyncAgentServiceClient is an autogenerated mock type for the SyncAgentServiceClient type
type SyncAgentServiceClient struct {
	mock.Mock
}

type SyncAgentServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SyncAgentServiceClient) EXPECT() *SyncAgentServiceClient_Expecter {
	return &SyncAgentServiceClient_Expecter{mock: &_m.Mock}
}

// ExecuteTaskSync provides a mock function with given fields: ctx, opts
func (_m *SyncAgentServiceClient) ExecuteTaskSync(ctx context.Context, opts ...grpc.CallOption) (service.SyncAgentService_ExecuteTaskSyncClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTaskSync")
	}

	var r0 service.SyncAgentService_ExecuteTaskSyncClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (service.SyncAgentService_ExecuteTaskSyncClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) service.SyncAgentService_ExecuteTaskSyncClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.SyncAgentService_ExecuteTaskSyncClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncAgentServiceClient_ExecuteTaskSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTaskSync'
type SyncAgentServiceClient_ExecuteTaskSync_Call struct {
	*mock.Call
}

// ExecuteTaskSync is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *SyncAgentServiceClient_Expecter) ExecuteTaskSync(ctx interface{}, opts ...interface{}) *SyncAgentServiceClient_ExecuteTaskSync_Call {
	return &SyncAgentServiceClient_ExecuteTaskSync_Call{Call: _e.mock.On("ExecuteTaskSync",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *SyncAgentServiceClient_ExecuteTaskSync_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *SyncAgentServiceClient_ExecuteTaskSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *SyncAgentServiceClient_ExecuteTaskSync_Call) Return(_a0 service.SyncAgentService_ExecuteTaskSyncClient, _a1 error) *SyncAgentServiceClient_ExecuteTaskSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SyncAgentServiceClient_ExecuteTaskSync_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (service.SyncAgentService_ExecuteTaskSyncClient, error)) *SyncAgentServiceClient_ExecuteTaskSync_Call {
	_c.Call.Return(run)
	return _c
}

// NewSyncAgentServiceClient creates a new instance of SyncAgentServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncAgentServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SyncAgentServiceClient {
	mock := &SyncAgentServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
