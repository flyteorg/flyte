// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	connector "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/connector"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
)

// AsyncConnectorServiceServer is an autogenerated mock type for the AsyncConnectorServiceServer type
type AsyncConnectorServiceServer struct {
	mock.Mock
}

type AsyncConnectorServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *AsyncConnectorServiceServer) EXPECT() *AsyncConnectorServiceServer_Expecter {
	return &AsyncConnectorServiceServer_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *AsyncConnectorServiceServer) CreateTask(_a0 context.Context, _a1 *connector.CreateTaskRequest) (*connector.CreateTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *connector.CreateTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connector.CreateTaskRequest) (*connector.CreateTaskResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connector.CreateTaskRequest) *connector.CreateTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.CreateTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connector.CreateTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncConnectorServiceServer_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type AsyncConnectorServiceServer_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connector.CreateTaskRequest
func (_e *AsyncConnectorServiceServer_Expecter) CreateTask(_a0 interface{}, _a1 interface{}) *AsyncConnectorServiceServer_CreateTask_Call {
	return &AsyncConnectorServiceServer_CreateTask_Call{Call: _e.mock.On("CreateTask", _a0, _a1)}
}

func (_c *AsyncConnectorServiceServer_CreateTask_Call) Run(run func(_a0 context.Context, _a1 *connector.CreateTaskRequest)) *AsyncConnectorServiceServer_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connector.CreateTaskRequest))
	})
	return _c
}

func (_c *AsyncConnectorServiceServer_CreateTask_Call) Return(_a0 *connector.CreateTaskResponse, _a1 error) *AsyncConnectorServiceServer_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncConnectorServiceServer_CreateTask_Call) RunAndReturn(run func(context.Context, *connector.CreateTaskRequest) (*connector.CreateTaskResponse, error)) *AsyncConnectorServiceServer_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: _a0, _a1
func (_m *AsyncConnectorServiceServer) DeleteTask(_a0 context.Context, _a1 *connector.DeleteTaskRequest) (*connector.DeleteTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *connector.DeleteTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connector.DeleteTaskRequest) (*connector.DeleteTaskResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connector.DeleteTaskRequest) *connector.DeleteTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.DeleteTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connector.DeleteTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncConnectorServiceServer_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type AsyncConnectorServiceServer_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connector.DeleteTaskRequest
func (_e *AsyncConnectorServiceServer_Expecter) DeleteTask(_a0 interface{}, _a1 interface{}) *AsyncConnectorServiceServer_DeleteTask_Call {
	return &AsyncConnectorServiceServer_DeleteTask_Call{Call: _e.mock.On("DeleteTask", _a0, _a1)}
}

func (_c *AsyncConnectorServiceServer_DeleteTask_Call) Run(run func(_a0 context.Context, _a1 *connector.DeleteTaskRequest)) *AsyncConnectorServiceServer_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connector.DeleteTaskRequest))
	})
	return _c
}

func (_c *AsyncConnectorServiceServer_DeleteTask_Call) Return(_a0 *connector.DeleteTaskResponse, _a1 error) *AsyncConnectorServiceServer_DeleteTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncConnectorServiceServer_DeleteTask_Call) RunAndReturn(run func(context.Context, *connector.DeleteTaskRequest) (*connector.DeleteTaskResponse, error)) *AsyncConnectorServiceServer_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: _a0, _a1
func (_m *AsyncConnectorServiceServer) GetTask(_a0 context.Context, _a1 *connector.GetTaskRequest) (*connector.GetTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *connector.GetTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connector.GetTaskRequest) (*connector.GetTaskResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connector.GetTaskRequest) *connector.GetTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.GetTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connector.GetTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncConnectorServiceServer_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type AsyncConnectorServiceServer_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connector.GetTaskRequest
func (_e *AsyncConnectorServiceServer_Expecter) GetTask(_a0 interface{}, _a1 interface{}) *AsyncConnectorServiceServer_GetTask_Call {
	return &AsyncConnectorServiceServer_GetTask_Call{Call: _e.mock.On("GetTask", _a0, _a1)}
}

func (_c *AsyncConnectorServiceServer_GetTask_Call) Run(run func(_a0 context.Context, _a1 *connector.GetTaskRequest)) *AsyncConnectorServiceServer_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connector.GetTaskRequest))
	})
	return _c
}

func (_c *AsyncConnectorServiceServer_GetTask_Call) Return(_a0 *connector.GetTaskResponse, _a1 error) *AsyncConnectorServiceServer_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncConnectorServiceServer_GetTask_Call) RunAndReturn(run func(context.Context, *connector.GetTaskRequest) (*connector.GetTaskResponse, error)) *AsyncConnectorServiceServer_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskLogs provides a mock function with given fields: _a0, _a1
func (_m *AsyncConnectorServiceServer) GetTaskLogs(_a0 *connector.GetTaskLogsRequest, _a1 service.AsyncConnectorService_GetTaskLogsServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*connector.GetTaskLogsRequest, service.AsyncConnectorService_GetTaskLogsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AsyncConnectorServiceServer_GetTaskLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskLogs'
type AsyncConnectorServiceServer_GetTaskLogs_Call struct {
	*mock.Call
}

// GetTaskLogs is a helper method to define mock.On call
//   - _a0 *connector.GetTaskLogsRequest
//   - _a1 service.AsyncConnectorService_GetTaskLogsServer
func (_e *AsyncConnectorServiceServer_Expecter) GetTaskLogs(_a0 interface{}, _a1 interface{}) *AsyncConnectorServiceServer_GetTaskLogs_Call {
	return &AsyncConnectorServiceServer_GetTaskLogs_Call{Call: _e.mock.On("GetTaskLogs", _a0, _a1)}
}

func (_c *AsyncConnectorServiceServer_GetTaskLogs_Call) Run(run func(_a0 *connector.GetTaskLogsRequest, _a1 service.AsyncConnectorService_GetTaskLogsServer)) *AsyncConnectorServiceServer_GetTaskLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*connector.GetTaskLogsRequest), args[1].(service.AsyncConnectorService_GetTaskLogsServer))
	})
	return _c
}

func (_c *AsyncConnectorServiceServer_GetTaskLogs_Call) Return(_a0 error) *AsyncConnectorServiceServer_GetTaskLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AsyncConnectorServiceServer_GetTaskLogs_Call) RunAndReturn(run func(*connector.GetTaskLogsRequest, service.AsyncConnectorService_GetTaskLogsServer) error) *AsyncConnectorServiceServer_GetTaskLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskMetrics provides a mock function with given fields: _a0, _a1
func (_m *AsyncConnectorServiceServer) GetTaskMetrics(_a0 context.Context, _a1 *connector.GetTaskMetricsRequest) (*connector.GetTaskMetricsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskMetrics")
	}

	var r0 *connector.GetTaskMetricsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connector.GetTaskMetricsRequest) (*connector.GetTaskMetricsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connector.GetTaskMetricsRequest) *connector.GetTaskMetricsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.GetTaskMetricsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connector.GetTaskMetricsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncConnectorServiceServer_GetTaskMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskMetrics'
type AsyncConnectorServiceServer_GetTaskMetrics_Call struct {
	*mock.Call
}

// GetTaskMetrics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *connector.GetTaskMetricsRequest
func (_e *AsyncConnectorServiceServer_Expecter) GetTaskMetrics(_a0 interface{}, _a1 interface{}) *AsyncConnectorServiceServer_GetTaskMetrics_Call {
	return &AsyncConnectorServiceServer_GetTaskMetrics_Call{Call: _e.mock.On("GetTaskMetrics", _a0, _a1)}
}

func (_c *AsyncConnectorServiceServer_GetTaskMetrics_Call) Run(run func(_a0 context.Context, _a1 *connector.GetTaskMetricsRequest)) *AsyncConnectorServiceServer_GetTaskMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connector.GetTaskMetricsRequest))
	})
	return _c
}

func (_c *AsyncConnectorServiceServer_GetTaskMetrics_Call) Return(_a0 *connector.GetTaskMetricsResponse, _a1 error) *AsyncConnectorServiceServer_GetTaskMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncConnectorServiceServer_GetTaskMetrics_Call) RunAndReturn(run func(context.Context, *connector.GetTaskMetricsRequest) (*connector.GetTaskMetricsResponse, error)) *AsyncConnectorServiceServer_GetTaskMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewAsyncConnectorServiceServer creates a new instance of AsyncConnectorServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsyncConnectorServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsyncConnectorServiceServer {
	mock := &AsyncConnectorServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
