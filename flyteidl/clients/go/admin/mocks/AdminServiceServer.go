// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// AdminServiceServer is an autogenerated mock type for the AdminServiceServer type
type AdminServiceServer struct {
	mock.Mock
}

type AdminServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *AdminServiceServer) EXPECT() *AdminServiceServer_Expecter {
	return &AdminServiceServer_Expecter{mock: &_m.Mock}
}

// CreateExecution provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) CreateExecution(_a0 context.Context, _a1 *admin.ExecutionCreateRequest) (*admin.ExecutionCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateExecution")
	}

	var r0 *admin.ExecutionCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionCreateRequest) (*admin.ExecutionCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionCreateRequest) *admin.ExecutionCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ExecutionCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_CreateExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExecution'
type AdminServiceServer_CreateExecution_Call struct {
	*mock.Call
}

// CreateExecution is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ExecutionCreateRequest
func (_e *AdminServiceServer_Expecter) CreateExecution(_a0 interface{}, _a1 interface{}) *AdminServiceServer_CreateExecution_Call {
	return &AdminServiceServer_CreateExecution_Call{Call: _e.mock.On("CreateExecution", _a0, _a1)}
}

func (_c *AdminServiceServer_CreateExecution_Call) Run(run func(_a0 context.Context, _a1 *admin.ExecutionCreateRequest)) *AdminServiceServer_CreateExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ExecutionCreateRequest))
	})
	return _c
}

func (_c *AdminServiceServer_CreateExecution_Call) Return(_a0 *admin.ExecutionCreateResponse, _a1 error) *AdminServiceServer_CreateExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_CreateExecution_Call) RunAndReturn(run func(context.Context, *admin.ExecutionCreateRequest) (*admin.ExecutionCreateResponse, error)) *AdminServiceServer_CreateExecution_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLaunchPlan provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) CreateLaunchPlan(_a0 context.Context, _a1 *admin.LaunchPlanCreateRequest) (*admin.LaunchPlanCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateLaunchPlan")
	}

	var r0 *admin.LaunchPlanCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanCreateRequest) (*admin.LaunchPlanCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanCreateRequest) *admin.LaunchPlanCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.LaunchPlanCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_CreateLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLaunchPlan'
type AdminServiceServer_CreateLaunchPlan_Call struct {
	*mock.Call
}

// CreateLaunchPlan is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.LaunchPlanCreateRequest
func (_e *AdminServiceServer_Expecter) CreateLaunchPlan(_a0 interface{}, _a1 interface{}) *AdminServiceServer_CreateLaunchPlan_Call {
	return &AdminServiceServer_CreateLaunchPlan_Call{Call: _e.mock.On("CreateLaunchPlan", _a0, _a1)}
}

func (_c *AdminServiceServer_CreateLaunchPlan_Call) Run(run func(_a0 context.Context, _a1 *admin.LaunchPlanCreateRequest)) *AdminServiceServer_CreateLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.LaunchPlanCreateRequest))
	})
	return _c
}

func (_c *AdminServiceServer_CreateLaunchPlan_Call) Return(_a0 *admin.LaunchPlanCreateResponse, _a1 error) *AdminServiceServer_CreateLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_CreateLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.LaunchPlanCreateRequest) (*admin.LaunchPlanCreateResponse, error)) *AdminServiceServer_CreateLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNodeEvent provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) CreateNodeEvent(_a0 context.Context, _a1 *admin.NodeExecutionEventRequest) (*admin.NodeExecutionEventResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateNodeEvent")
	}

	var r0 *admin.NodeExecutionEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionEventRequest) (*admin.NodeExecutionEventResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionEventRequest) *admin.NodeExecutionEventResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NodeExecutionEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_CreateNodeEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNodeEvent'
type AdminServiceServer_CreateNodeEvent_Call struct {
	*mock.Call
}

// CreateNodeEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.NodeExecutionEventRequest
func (_e *AdminServiceServer_Expecter) CreateNodeEvent(_a0 interface{}, _a1 interface{}) *AdminServiceServer_CreateNodeEvent_Call {
	return &AdminServiceServer_CreateNodeEvent_Call{Call: _e.mock.On("CreateNodeEvent", _a0, _a1)}
}

func (_c *AdminServiceServer_CreateNodeEvent_Call) Run(run func(_a0 context.Context, _a1 *admin.NodeExecutionEventRequest)) *AdminServiceServer_CreateNodeEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NodeExecutionEventRequest))
	})
	return _c
}

func (_c *AdminServiceServer_CreateNodeEvent_Call) Return(_a0 *admin.NodeExecutionEventResponse, _a1 error) *AdminServiceServer_CreateNodeEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_CreateNodeEvent_Call) RunAndReturn(run func(context.Context, *admin.NodeExecutionEventRequest) (*admin.NodeExecutionEventResponse, error)) *AdminServiceServer_CreateNodeEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) CreateTask(_a0 context.Context, _a1 *admin.TaskCreateRequest) (*admin.TaskCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *admin.TaskCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskCreateRequest) (*admin.TaskCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskCreateRequest) *admin.TaskCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.TaskCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type AdminServiceServer_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.TaskCreateRequest
func (_e *AdminServiceServer_Expecter) CreateTask(_a0 interface{}, _a1 interface{}) *AdminServiceServer_CreateTask_Call {
	return &AdminServiceServer_CreateTask_Call{Call: _e.mock.On("CreateTask", _a0, _a1)}
}

func (_c *AdminServiceServer_CreateTask_Call) Run(run func(_a0 context.Context, _a1 *admin.TaskCreateRequest)) *AdminServiceServer_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.TaskCreateRequest))
	})
	return _c
}

func (_c *AdminServiceServer_CreateTask_Call) Return(_a0 *admin.TaskCreateResponse, _a1 error) *AdminServiceServer_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_CreateTask_Call) RunAndReturn(run func(context.Context, *admin.TaskCreateRequest) (*admin.TaskCreateResponse, error)) *AdminServiceServer_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTaskEvent provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) CreateTaskEvent(_a0 context.Context, _a1 *admin.TaskExecutionEventRequest) (*admin.TaskExecutionEventResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskEvent")
	}

	var r0 *admin.TaskExecutionEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionEventRequest) (*admin.TaskExecutionEventResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionEventRequest) *admin.TaskExecutionEventResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskExecutionEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.TaskExecutionEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_CreateTaskEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskEvent'
type AdminServiceServer_CreateTaskEvent_Call struct {
	*mock.Call
}

// CreateTaskEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.TaskExecutionEventRequest
func (_e *AdminServiceServer_Expecter) CreateTaskEvent(_a0 interface{}, _a1 interface{}) *AdminServiceServer_CreateTaskEvent_Call {
	return &AdminServiceServer_CreateTaskEvent_Call{Call: _e.mock.On("CreateTaskEvent", _a0, _a1)}
}

func (_c *AdminServiceServer_CreateTaskEvent_Call) Run(run func(_a0 context.Context, _a1 *admin.TaskExecutionEventRequest)) *AdminServiceServer_CreateTaskEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.TaskExecutionEventRequest))
	})
	return _c
}

func (_c *AdminServiceServer_CreateTaskEvent_Call) Return(_a0 *admin.TaskExecutionEventResponse, _a1 error) *AdminServiceServer_CreateTaskEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_CreateTaskEvent_Call) RunAndReturn(run func(context.Context, *admin.TaskExecutionEventRequest) (*admin.TaskExecutionEventResponse, error)) *AdminServiceServer_CreateTaskEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkflow provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) CreateWorkflow(_a0 context.Context, _a1 *admin.WorkflowCreateRequest) (*admin.WorkflowCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkflow")
	}

	var r0 *admin.WorkflowCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowCreateRequest) (*admin.WorkflowCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowCreateRequest) *admin.WorkflowCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_CreateWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkflow'
type AdminServiceServer_CreateWorkflow_Call struct {
	*mock.Call
}

// CreateWorkflow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.WorkflowCreateRequest
func (_e *AdminServiceServer_Expecter) CreateWorkflow(_a0 interface{}, _a1 interface{}) *AdminServiceServer_CreateWorkflow_Call {
	return &AdminServiceServer_CreateWorkflow_Call{Call: _e.mock.On("CreateWorkflow", _a0, _a1)}
}

func (_c *AdminServiceServer_CreateWorkflow_Call) Run(run func(_a0 context.Context, _a1 *admin.WorkflowCreateRequest)) *AdminServiceServer_CreateWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WorkflowCreateRequest))
	})
	return _c
}

func (_c *AdminServiceServer_CreateWorkflow_Call) Return(_a0 *admin.WorkflowCreateResponse, _a1 error) *AdminServiceServer_CreateWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_CreateWorkflow_Call) RunAndReturn(run func(context.Context, *admin.WorkflowCreateRequest) (*admin.WorkflowCreateResponse, error)) *AdminServiceServer_CreateWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkflowEvent provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) CreateWorkflowEvent(_a0 context.Context, _a1 *admin.WorkflowExecutionEventRequest) (*admin.WorkflowExecutionEventResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkflowEvent")
	}

	var r0 *admin.WorkflowExecutionEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionEventRequest) (*admin.WorkflowExecutionEventResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionEventRequest) *admin.WorkflowExecutionEventResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowExecutionEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowExecutionEventRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_CreateWorkflowEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkflowEvent'
type AdminServiceServer_CreateWorkflowEvent_Call struct {
	*mock.Call
}

// CreateWorkflowEvent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.WorkflowExecutionEventRequest
func (_e *AdminServiceServer_Expecter) CreateWorkflowEvent(_a0 interface{}, _a1 interface{}) *AdminServiceServer_CreateWorkflowEvent_Call {
	return &AdminServiceServer_CreateWorkflowEvent_Call{Call: _e.mock.On("CreateWorkflowEvent", _a0, _a1)}
}

func (_c *AdminServiceServer_CreateWorkflowEvent_Call) Run(run func(_a0 context.Context, _a1 *admin.WorkflowExecutionEventRequest)) *AdminServiceServer_CreateWorkflowEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WorkflowExecutionEventRequest))
	})
	return _c
}

func (_c *AdminServiceServer_CreateWorkflowEvent_Call) Return(_a0 *admin.WorkflowExecutionEventResponse, _a1 error) *AdminServiceServer_CreateWorkflowEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_CreateWorkflowEvent_Call) RunAndReturn(run func(context.Context, *admin.WorkflowExecutionEventRequest) (*admin.WorkflowExecutionEventResponse, error)) *AdminServiceServer_CreateWorkflowEvent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectAttributes provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) DeleteProjectAttributes(_a0 context.Context, _a1 *admin.ProjectAttributesDeleteRequest) (*admin.ProjectAttributesDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectAttributes")
	}

	var r0 *admin.ProjectAttributesDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesDeleteRequest) (*admin.ProjectAttributesDeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesDeleteRequest) *admin.ProjectAttributesDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectAttributesDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectAttributesDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_DeleteProjectAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectAttributes'
type AdminServiceServer_DeleteProjectAttributes_Call struct {
	*mock.Call
}

// DeleteProjectAttributes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ProjectAttributesDeleteRequest
func (_e *AdminServiceServer_Expecter) DeleteProjectAttributes(_a0 interface{}, _a1 interface{}) *AdminServiceServer_DeleteProjectAttributes_Call {
	return &AdminServiceServer_DeleteProjectAttributes_Call{Call: _e.mock.On("DeleteProjectAttributes", _a0, _a1)}
}

func (_c *AdminServiceServer_DeleteProjectAttributes_Call) Run(run func(_a0 context.Context, _a1 *admin.ProjectAttributesDeleteRequest)) *AdminServiceServer_DeleteProjectAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectAttributesDeleteRequest))
	})
	return _c
}

func (_c *AdminServiceServer_DeleteProjectAttributes_Call) Return(_a0 *admin.ProjectAttributesDeleteResponse, _a1 error) *AdminServiceServer_DeleteProjectAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_DeleteProjectAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectAttributesDeleteRequest) (*admin.ProjectAttributesDeleteResponse, error)) *AdminServiceServer_DeleteProjectAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectDomainAttributes provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) DeleteProjectDomainAttributes(_a0 context.Context, _a1 *admin.ProjectDomainAttributesDeleteRequest) (*admin.ProjectDomainAttributesDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectDomainAttributes")
	}

	var r0 *admin.ProjectDomainAttributesDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesDeleteRequest) (*admin.ProjectDomainAttributesDeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesDeleteRequest) *admin.ProjectDomainAttributesDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectDomainAttributesDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectDomainAttributesDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_DeleteProjectDomainAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectDomainAttributes'
type AdminServiceServer_DeleteProjectDomainAttributes_Call struct {
	*mock.Call
}

// DeleteProjectDomainAttributes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ProjectDomainAttributesDeleteRequest
func (_e *AdminServiceServer_Expecter) DeleteProjectDomainAttributes(_a0 interface{}, _a1 interface{}) *AdminServiceServer_DeleteProjectDomainAttributes_Call {
	return &AdminServiceServer_DeleteProjectDomainAttributes_Call{Call: _e.mock.On("DeleteProjectDomainAttributes", _a0, _a1)}
}

func (_c *AdminServiceServer_DeleteProjectDomainAttributes_Call) Run(run func(_a0 context.Context, _a1 *admin.ProjectDomainAttributesDeleteRequest)) *AdminServiceServer_DeleteProjectDomainAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectDomainAttributesDeleteRequest))
	})
	return _c
}

func (_c *AdminServiceServer_DeleteProjectDomainAttributes_Call) Return(_a0 *admin.ProjectDomainAttributesDeleteResponse, _a1 error) *AdminServiceServer_DeleteProjectDomainAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_DeleteProjectDomainAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectDomainAttributesDeleteRequest) (*admin.ProjectDomainAttributesDeleteResponse, error)) *AdminServiceServer_DeleteProjectDomainAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkflowAttributes provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) DeleteWorkflowAttributes(_a0 context.Context, _a1 *admin.WorkflowAttributesDeleteRequest) (*admin.WorkflowAttributesDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflowAttributes")
	}

	var r0 *admin.WorkflowAttributesDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesDeleteRequest) (*admin.WorkflowAttributesDeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesDeleteRequest) *admin.WorkflowAttributesDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowAttributesDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowAttributesDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_DeleteWorkflowAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkflowAttributes'
type AdminServiceServer_DeleteWorkflowAttributes_Call struct {
	*mock.Call
}

// DeleteWorkflowAttributes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.WorkflowAttributesDeleteRequest
func (_e *AdminServiceServer_Expecter) DeleteWorkflowAttributes(_a0 interface{}, _a1 interface{}) *AdminServiceServer_DeleteWorkflowAttributes_Call {
	return &AdminServiceServer_DeleteWorkflowAttributes_Call{Call: _e.mock.On("DeleteWorkflowAttributes", _a0, _a1)}
}

func (_c *AdminServiceServer_DeleteWorkflowAttributes_Call) Run(run func(_a0 context.Context, _a1 *admin.WorkflowAttributesDeleteRequest)) *AdminServiceServer_DeleteWorkflowAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WorkflowAttributesDeleteRequest))
	})
	return _c
}

func (_c *AdminServiceServer_DeleteWorkflowAttributes_Call) Return(_a0 *admin.WorkflowAttributesDeleteResponse, _a1 error) *AdminServiceServer_DeleteWorkflowAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_DeleteWorkflowAttributes_Call) RunAndReturn(run func(context.Context, *admin.WorkflowAttributesDeleteRequest) (*admin.WorkflowAttributesDeleteResponse, error)) *AdminServiceServer_DeleteWorkflowAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveLaunchPlan provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetActiveLaunchPlan(_a0 context.Context, _a1 *admin.ActiveLaunchPlanRequest) (*admin.LaunchPlan, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveLaunchPlan")
	}

	var r0 *admin.LaunchPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanRequest) (*admin.LaunchPlan, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanRequest) *admin.LaunchPlan); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ActiveLaunchPlanRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetActiveLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveLaunchPlan'
type AdminServiceServer_GetActiveLaunchPlan_Call struct {
	*mock.Call
}

// GetActiveLaunchPlan is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ActiveLaunchPlanRequest
func (_e *AdminServiceServer_Expecter) GetActiveLaunchPlan(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetActiveLaunchPlan_Call {
	return &AdminServiceServer_GetActiveLaunchPlan_Call{Call: _e.mock.On("GetActiveLaunchPlan", _a0, _a1)}
}

func (_c *AdminServiceServer_GetActiveLaunchPlan_Call) Run(run func(_a0 context.Context, _a1 *admin.ActiveLaunchPlanRequest)) *AdminServiceServer_GetActiveLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ActiveLaunchPlanRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetActiveLaunchPlan_Call) Return(_a0 *admin.LaunchPlan, _a1 error) *AdminServiceServer_GetActiveLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetActiveLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.ActiveLaunchPlanRequest) (*admin.LaunchPlan, error)) *AdminServiceServer_GetActiveLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// GetDescriptionEntity provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetDescriptionEntity(_a0 context.Context, _a1 *admin.ObjectGetRequest) (*admin.DescriptionEntity, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDescriptionEntity")
	}

	var r0 *admin.DescriptionEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) (*admin.DescriptionEntity, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) *admin.DescriptionEntity); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DescriptionEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ObjectGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetDescriptionEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDescriptionEntity'
type AdminServiceServer_GetDescriptionEntity_Call struct {
	*mock.Call
}

// GetDescriptionEntity is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ObjectGetRequest
func (_e *AdminServiceServer_Expecter) GetDescriptionEntity(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetDescriptionEntity_Call {
	return &AdminServiceServer_GetDescriptionEntity_Call{Call: _e.mock.On("GetDescriptionEntity", _a0, _a1)}
}

func (_c *AdminServiceServer_GetDescriptionEntity_Call) Run(run func(_a0 context.Context, _a1 *admin.ObjectGetRequest)) *AdminServiceServer_GetDescriptionEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ObjectGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetDescriptionEntity_Call) Return(_a0 *admin.DescriptionEntity, _a1 error) *AdminServiceServer_GetDescriptionEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetDescriptionEntity_Call) RunAndReturn(run func(context.Context, *admin.ObjectGetRequest) (*admin.DescriptionEntity, error)) *AdminServiceServer_GetDescriptionEntity_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomains provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetDomains(_a0 context.Context, _a1 *admin.GetDomainRequest) (*admin.GetDomainsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDomains")
	}

	var r0 *admin.GetDomainsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDomainRequest) (*admin.GetDomainsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDomainRequest) *admin.GetDomainsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetDomainsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetDomainRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomains'
type AdminServiceServer_GetDomains_Call struct {
	*mock.Call
}

// GetDomains is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.GetDomainRequest
func (_e *AdminServiceServer_Expecter) GetDomains(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetDomains_Call {
	return &AdminServiceServer_GetDomains_Call{Call: _e.mock.On("GetDomains", _a0, _a1)}
}

func (_c *AdminServiceServer_GetDomains_Call) Run(run func(_a0 context.Context, _a1 *admin.GetDomainRequest)) *AdminServiceServer_GetDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetDomainRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetDomains_Call) Return(_a0 *admin.GetDomainsResponse, _a1 error) *AdminServiceServer_GetDomains_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetDomains_Call) RunAndReturn(run func(context.Context, *admin.GetDomainRequest) (*admin.GetDomainsResponse, error)) *AdminServiceServer_GetDomains_Call {
	_c.Call.Return(run)
	return _c
}

// GetDynamicNodeWorkflow provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetDynamicNodeWorkflow(_a0 context.Context, _a1 *admin.GetDynamicNodeWorkflowRequest) (*admin.DynamicNodeWorkflowResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDynamicNodeWorkflow")
	}

	var r0 *admin.DynamicNodeWorkflowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDynamicNodeWorkflowRequest) (*admin.DynamicNodeWorkflowResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDynamicNodeWorkflowRequest) *admin.DynamicNodeWorkflowResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DynamicNodeWorkflowResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetDynamicNodeWorkflowRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetDynamicNodeWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamicNodeWorkflow'
type AdminServiceServer_GetDynamicNodeWorkflow_Call struct {
	*mock.Call
}

// GetDynamicNodeWorkflow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.GetDynamicNodeWorkflowRequest
func (_e *AdminServiceServer_Expecter) GetDynamicNodeWorkflow(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetDynamicNodeWorkflow_Call {
	return &AdminServiceServer_GetDynamicNodeWorkflow_Call{Call: _e.mock.On("GetDynamicNodeWorkflow", _a0, _a1)}
}

func (_c *AdminServiceServer_GetDynamicNodeWorkflow_Call) Run(run func(_a0 context.Context, _a1 *admin.GetDynamicNodeWorkflowRequest)) *AdminServiceServer_GetDynamicNodeWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetDynamicNodeWorkflowRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetDynamicNodeWorkflow_Call) Return(_a0 *admin.DynamicNodeWorkflowResponse, _a1 error) *AdminServiceServer_GetDynamicNodeWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetDynamicNodeWorkflow_Call) RunAndReturn(run func(context.Context, *admin.GetDynamicNodeWorkflowRequest) (*admin.DynamicNodeWorkflowResponse, error)) *AdminServiceServer_GetDynamicNodeWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecution provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetExecution(_a0 context.Context, _a1 *admin.WorkflowExecutionGetRequest) (*admin.Execution, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetExecution")
	}

	var r0 *admin.Execution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetRequest) (*admin.Execution, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetRequest) *admin.Execution); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Execution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowExecutionGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecution'
type AdminServiceServer_GetExecution_Call struct {
	*mock.Call
}

// GetExecution is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.WorkflowExecutionGetRequest
func (_e *AdminServiceServer_Expecter) GetExecution(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetExecution_Call {
	return &AdminServiceServer_GetExecution_Call{Call: _e.mock.On("GetExecution", _a0, _a1)}
}

func (_c *AdminServiceServer_GetExecution_Call) Run(run func(_a0 context.Context, _a1 *admin.WorkflowExecutionGetRequest)) *AdminServiceServer_GetExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WorkflowExecutionGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetExecution_Call) Return(_a0 *admin.Execution, _a1 error) *AdminServiceServer_GetExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetExecution_Call) RunAndReturn(run func(context.Context, *admin.WorkflowExecutionGetRequest) (*admin.Execution, error)) *AdminServiceServer_GetExecution_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionData provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetExecutionData(_a0 context.Context, _a1 *admin.WorkflowExecutionGetDataRequest) (*admin.WorkflowExecutionGetDataResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionData")
	}

	var r0 *admin.WorkflowExecutionGetDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetDataRequest) (*admin.WorkflowExecutionGetDataResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetDataRequest) *admin.WorkflowExecutionGetDataResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowExecutionGetDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowExecutionGetDataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionData'
type AdminServiceServer_GetExecutionData_Call struct {
	*mock.Call
}

// GetExecutionData is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.WorkflowExecutionGetDataRequest
func (_e *AdminServiceServer_Expecter) GetExecutionData(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetExecutionData_Call {
	return &AdminServiceServer_GetExecutionData_Call{Call: _e.mock.On("GetExecutionData", _a0, _a1)}
}

func (_c *AdminServiceServer_GetExecutionData_Call) Run(run func(_a0 context.Context, _a1 *admin.WorkflowExecutionGetDataRequest)) *AdminServiceServer_GetExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WorkflowExecutionGetDataRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetExecutionData_Call) Return(_a0 *admin.WorkflowExecutionGetDataResponse, _a1 error) *AdminServiceServer_GetExecutionData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetExecutionData_Call) RunAndReturn(run func(context.Context, *admin.WorkflowExecutionGetDataRequest) (*admin.WorkflowExecutionGetDataResponse, error)) *AdminServiceServer_GetExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionMetrics provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetExecutionMetrics(_a0 context.Context, _a1 *admin.WorkflowExecutionGetMetricsRequest) (*admin.WorkflowExecutionGetMetricsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionMetrics")
	}

	var r0 *admin.WorkflowExecutionGetMetricsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetMetricsRequest) (*admin.WorkflowExecutionGetMetricsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetMetricsRequest) *admin.WorkflowExecutionGetMetricsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowExecutionGetMetricsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowExecutionGetMetricsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetExecutionMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionMetrics'
type AdminServiceServer_GetExecutionMetrics_Call struct {
	*mock.Call
}

// GetExecutionMetrics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.WorkflowExecutionGetMetricsRequest
func (_e *AdminServiceServer_Expecter) GetExecutionMetrics(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetExecutionMetrics_Call {
	return &AdminServiceServer_GetExecutionMetrics_Call{Call: _e.mock.On("GetExecutionMetrics", _a0, _a1)}
}

func (_c *AdminServiceServer_GetExecutionMetrics_Call) Run(run func(_a0 context.Context, _a1 *admin.WorkflowExecutionGetMetricsRequest)) *AdminServiceServer_GetExecutionMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WorkflowExecutionGetMetricsRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetExecutionMetrics_Call) Return(_a0 *admin.WorkflowExecutionGetMetricsResponse, _a1 error) *AdminServiceServer_GetExecutionMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetExecutionMetrics_Call) RunAndReturn(run func(context.Context, *admin.WorkflowExecutionGetMetricsRequest) (*admin.WorkflowExecutionGetMetricsResponse, error)) *AdminServiceServer_GetExecutionMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetLaunchPlan provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetLaunchPlan(_a0 context.Context, _a1 *admin.ObjectGetRequest) (*admin.LaunchPlan, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchPlan")
	}

	var r0 *admin.LaunchPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) (*admin.LaunchPlan, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) *admin.LaunchPlan); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ObjectGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLaunchPlan'
type AdminServiceServer_GetLaunchPlan_Call struct {
	*mock.Call
}

// GetLaunchPlan is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ObjectGetRequest
func (_e *AdminServiceServer_Expecter) GetLaunchPlan(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetLaunchPlan_Call {
	return &AdminServiceServer_GetLaunchPlan_Call{Call: _e.mock.On("GetLaunchPlan", _a0, _a1)}
}

func (_c *AdminServiceServer_GetLaunchPlan_Call) Run(run func(_a0 context.Context, _a1 *admin.ObjectGetRequest)) *AdminServiceServer_GetLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ObjectGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetLaunchPlan_Call) Return(_a0 *admin.LaunchPlan, _a1 error) *AdminServiceServer_GetLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.ObjectGetRequest) (*admin.LaunchPlan, error)) *AdminServiceServer_GetLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamedEntity provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetNamedEntity(_a0 context.Context, _a1 *admin.NamedEntityGetRequest) (*admin.NamedEntity, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetNamedEntity")
	}

	var r0 *admin.NamedEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityGetRequest) (*admin.NamedEntity, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityGetRequest) *admin.NamedEntity); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetNamedEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamedEntity'
type AdminServiceServer_GetNamedEntity_Call struct {
	*mock.Call
}

// GetNamedEntity is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.NamedEntityGetRequest
func (_e *AdminServiceServer_Expecter) GetNamedEntity(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetNamedEntity_Call {
	return &AdminServiceServer_GetNamedEntity_Call{Call: _e.mock.On("GetNamedEntity", _a0, _a1)}
}

func (_c *AdminServiceServer_GetNamedEntity_Call) Run(run func(_a0 context.Context, _a1 *admin.NamedEntityGetRequest)) *AdminServiceServer_GetNamedEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NamedEntityGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetNamedEntity_Call) Return(_a0 *admin.NamedEntity, _a1 error) *AdminServiceServer_GetNamedEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetNamedEntity_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityGetRequest) (*admin.NamedEntity, error)) *AdminServiceServer_GetNamedEntity_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeExecution provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetNodeExecution(_a0 context.Context, _a1 *admin.NodeExecutionGetRequest) (*admin.NodeExecution, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeExecution")
	}

	var r0 *admin.NodeExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionGetRequest) (*admin.NodeExecution, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionGetRequest) *admin.NodeExecution); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NodeExecutionGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetNodeExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeExecution'
type AdminServiceServer_GetNodeExecution_Call struct {
	*mock.Call
}

// GetNodeExecution is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.NodeExecutionGetRequest
func (_e *AdminServiceServer_Expecter) GetNodeExecution(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetNodeExecution_Call {
	return &AdminServiceServer_GetNodeExecution_Call{Call: _e.mock.On("GetNodeExecution", _a0, _a1)}
}

func (_c *AdminServiceServer_GetNodeExecution_Call) Run(run func(_a0 context.Context, _a1 *admin.NodeExecutionGetRequest)) *AdminServiceServer_GetNodeExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NodeExecutionGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetNodeExecution_Call) Return(_a0 *admin.NodeExecution, _a1 error) *AdminServiceServer_GetNodeExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetNodeExecution_Call) RunAndReturn(run func(context.Context, *admin.NodeExecutionGetRequest) (*admin.NodeExecution, error)) *AdminServiceServer_GetNodeExecution_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeExecutionData provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetNodeExecutionData(_a0 context.Context, _a1 *admin.NodeExecutionGetDataRequest) (*admin.NodeExecutionGetDataResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeExecutionData")
	}

	var r0 *admin.NodeExecutionGetDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionGetDataRequest) (*admin.NodeExecutionGetDataResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionGetDataRequest) *admin.NodeExecutionGetDataResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionGetDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NodeExecutionGetDataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetNodeExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeExecutionData'
type AdminServiceServer_GetNodeExecutionData_Call struct {
	*mock.Call
}

// GetNodeExecutionData is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.NodeExecutionGetDataRequest
func (_e *AdminServiceServer_Expecter) GetNodeExecutionData(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetNodeExecutionData_Call {
	return &AdminServiceServer_GetNodeExecutionData_Call{Call: _e.mock.On("GetNodeExecutionData", _a0, _a1)}
}

func (_c *AdminServiceServer_GetNodeExecutionData_Call) Run(run func(_a0 context.Context, _a1 *admin.NodeExecutionGetDataRequest)) *AdminServiceServer_GetNodeExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NodeExecutionGetDataRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetNodeExecutionData_Call) Return(_a0 *admin.NodeExecutionGetDataResponse, _a1 error) *AdminServiceServer_GetNodeExecutionData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetNodeExecutionData_Call) RunAndReturn(run func(context.Context, *admin.NodeExecutionGetDataRequest) (*admin.NodeExecutionGetDataResponse, error)) *AdminServiceServer_GetNodeExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetProject(_a0 context.Context, _a1 *admin.ProjectGetRequest) (*admin.Project, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *admin.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectGetRequest) (*admin.Project, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectGetRequest) *admin.Project); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type AdminServiceServer_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ProjectGetRequest
func (_e *AdminServiceServer_Expecter) GetProject(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetProject_Call {
	return &AdminServiceServer_GetProject_Call{Call: _e.mock.On("GetProject", _a0, _a1)}
}

func (_c *AdminServiceServer_GetProject_Call) Run(run func(_a0 context.Context, _a1 *admin.ProjectGetRequest)) *AdminServiceServer_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetProject_Call) Return(_a0 *admin.Project, _a1 error) *AdminServiceServer_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetProject_Call) RunAndReturn(run func(context.Context, *admin.ProjectGetRequest) (*admin.Project, error)) *AdminServiceServer_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectAttributes provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetProjectAttributes(_a0 context.Context, _a1 *admin.ProjectAttributesGetRequest) (*admin.ProjectAttributesGetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectAttributes")
	}

	var r0 *admin.ProjectAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesGetRequest) (*admin.ProjectAttributesGetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesGetRequest) *admin.ProjectAttributesGetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectAttributesGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetProjectAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectAttributes'
type AdminServiceServer_GetProjectAttributes_Call struct {
	*mock.Call
}

// GetProjectAttributes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ProjectAttributesGetRequest
func (_e *AdminServiceServer_Expecter) GetProjectAttributes(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetProjectAttributes_Call {
	return &AdminServiceServer_GetProjectAttributes_Call{Call: _e.mock.On("GetProjectAttributes", _a0, _a1)}
}

func (_c *AdminServiceServer_GetProjectAttributes_Call) Run(run func(_a0 context.Context, _a1 *admin.ProjectAttributesGetRequest)) *AdminServiceServer_GetProjectAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectAttributesGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetProjectAttributes_Call) Return(_a0 *admin.ProjectAttributesGetResponse, _a1 error) *AdminServiceServer_GetProjectAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetProjectAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectAttributesGetRequest) (*admin.ProjectAttributesGetResponse, error)) *AdminServiceServer_GetProjectAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectDomainAttributes provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetProjectDomainAttributes(_a0 context.Context, _a1 *admin.ProjectDomainAttributesGetRequest) (*admin.ProjectDomainAttributesGetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectDomainAttributes")
	}

	var r0 *admin.ProjectDomainAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesGetRequest) (*admin.ProjectDomainAttributesGetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesGetRequest) *admin.ProjectDomainAttributesGetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectDomainAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectDomainAttributesGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetProjectDomainAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectDomainAttributes'
type AdminServiceServer_GetProjectDomainAttributes_Call struct {
	*mock.Call
}

// GetProjectDomainAttributes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ProjectDomainAttributesGetRequest
func (_e *AdminServiceServer_Expecter) GetProjectDomainAttributes(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetProjectDomainAttributes_Call {
	return &AdminServiceServer_GetProjectDomainAttributes_Call{Call: _e.mock.On("GetProjectDomainAttributes", _a0, _a1)}
}

func (_c *AdminServiceServer_GetProjectDomainAttributes_Call) Run(run func(_a0 context.Context, _a1 *admin.ProjectDomainAttributesGetRequest)) *AdminServiceServer_GetProjectDomainAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectDomainAttributesGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetProjectDomainAttributes_Call) Return(_a0 *admin.ProjectDomainAttributesGetResponse, _a1 error) *AdminServiceServer_GetProjectDomainAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetProjectDomainAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectDomainAttributesGetRequest) (*admin.ProjectDomainAttributesGetResponse, error)) *AdminServiceServer_GetProjectDomainAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetTask(_a0 context.Context, _a1 *admin.ObjectGetRequest) (*admin.Task, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *admin.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) (*admin.Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) *admin.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ObjectGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type AdminServiceServer_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ObjectGetRequest
func (_e *AdminServiceServer_Expecter) GetTask(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetTask_Call {
	return &AdminServiceServer_GetTask_Call{Call: _e.mock.On("GetTask", _a0, _a1)}
}

func (_c *AdminServiceServer_GetTask_Call) Run(run func(_a0 context.Context, _a1 *admin.ObjectGetRequest)) *AdminServiceServer_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ObjectGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetTask_Call) Return(_a0 *admin.Task, _a1 error) *AdminServiceServer_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetTask_Call) RunAndReturn(run func(context.Context, *admin.ObjectGetRequest) (*admin.Task, error)) *AdminServiceServer_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskExecution provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetTaskExecution(_a0 context.Context, _a1 *admin.TaskExecutionGetRequest) (*admin.TaskExecution, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskExecution")
	}

	var r0 *admin.TaskExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionGetRequest) (*admin.TaskExecution, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionGetRequest) *admin.TaskExecution); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.TaskExecutionGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetTaskExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskExecution'
type AdminServiceServer_GetTaskExecution_Call struct {
	*mock.Call
}

// GetTaskExecution is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.TaskExecutionGetRequest
func (_e *AdminServiceServer_Expecter) GetTaskExecution(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetTaskExecution_Call {
	return &AdminServiceServer_GetTaskExecution_Call{Call: _e.mock.On("GetTaskExecution", _a0, _a1)}
}

func (_c *AdminServiceServer_GetTaskExecution_Call) Run(run func(_a0 context.Context, _a1 *admin.TaskExecutionGetRequest)) *AdminServiceServer_GetTaskExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.TaskExecutionGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetTaskExecution_Call) Return(_a0 *admin.TaskExecution, _a1 error) *AdminServiceServer_GetTaskExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetTaskExecution_Call) RunAndReturn(run func(context.Context, *admin.TaskExecutionGetRequest) (*admin.TaskExecution, error)) *AdminServiceServer_GetTaskExecution_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskExecutionData provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetTaskExecutionData(_a0 context.Context, _a1 *admin.TaskExecutionGetDataRequest) (*admin.TaskExecutionGetDataResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskExecutionData")
	}

	var r0 *admin.TaskExecutionGetDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionGetDataRequest) (*admin.TaskExecutionGetDataResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionGetDataRequest) *admin.TaskExecutionGetDataResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskExecutionGetDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.TaskExecutionGetDataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetTaskExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskExecutionData'
type AdminServiceServer_GetTaskExecutionData_Call struct {
	*mock.Call
}

// GetTaskExecutionData is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.TaskExecutionGetDataRequest
func (_e *AdminServiceServer_Expecter) GetTaskExecutionData(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetTaskExecutionData_Call {
	return &AdminServiceServer_GetTaskExecutionData_Call{Call: _e.mock.On("GetTaskExecutionData", _a0, _a1)}
}

func (_c *AdminServiceServer_GetTaskExecutionData_Call) Run(run func(_a0 context.Context, _a1 *admin.TaskExecutionGetDataRequest)) *AdminServiceServer_GetTaskExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.TaskExecutionGetDataRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetTaskExecutionData_Call) Return(_a0 *admin.TaskExecutionGetDataResponse, _a1 error) *AdminServiceServer_GetTaskExecutionData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetTaskExecutionData_Call) RunAndReturn(run func(context.Context, *admin.TaskExecutionGetDataRequest) (*admin.TaskExecutionGetDataResponse, error)) *AdminServiceServer_GetTaskExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetVersion(_a0 context.Context, _a1 *admin.GetVersionRequest) (*admin.GetVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 *admin.GetVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetVersionRequest) (*admin.GetVersionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetVersionRequest) *admin.GetVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type AdminServiceServer_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.GetVersionRequest
func (_e *AdminServiceServer_Expecter) GetVersion(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetVersion_Call {
	return &AdminServiceServer_GetVersion_Call{Call: _e.mock.On("GetVersion", _a0, _a1)}
}

func (_c *AdminServiceServer_GetVersion_Call) Run(run func(_a0 context.Context, _a1 *admin.GetVersionRequest)) *AdminServiceServer_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetVersionRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetVersion_Call) Return(_a0 *admin.GetVersionResponse, _a1 error) *AdminServiceServer_GetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetVersion_Call) RunAndReturn(run func(context.Context, *admin.GetVersionRequest) (*admin.GetVersionResponse, error)) *AdminServiceServer_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflow provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetWorkflow(_a0 context.Context, _a1 *admin.ObjectGetRequest) (*admin.Workflow, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflow")
	}

	var r0 *admin.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) (*admin.Workflow, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) *admin.Workflow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ObjectGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflow'
type AdminServiceServer_GetWorkflow_Call struct {
	*mock.Call
}

// GetWorkflow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ObjectGetRequest
func (_e *AdminServiceServer_Expecter) GetWorkflow(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetWorkflow_Call {
	return &AdminServiceServer_GetWorkflow_Call{Call: _e.mock.On("GetWorkflow", _a0, _a1)}
}

func (_c *AdminServiceServer_GetWorkflow_Call) Run(run func(_a0 context.Context, _a1 *admin.ObjectGetRequest)) *AdminServiceServer_GetWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ObjectGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetWorkflow_Call) Return(_a0 *admin.Workflow, _a1 error) *AdminServiceServer_GetWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetWorkflow_Call) RunAndReturn(run func(context.Context, *admin.ObjectGetRequest) (*admin.Workflow, error)) *AdminServiceServer_GetWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowAttributes provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) GetWorkflowAttributes(_a0 context.Context, _a1 *admin.WorkflowAttributesGetRequest) (*admin.WorkflowAttributesGetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowAttributes")
	}

	var r0 *admin.WorkflowAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesGetRequest) (*admin.WorkflowAttributesGetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesGetRequest) *admin.WorkflowAttributesGetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowAttributesGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_GetWorkflowAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowAttributes'
type AdminServiceServer_GetWorkflowAttributes_Call struct {
	*mock.Call
}

// GetWorkflowAttributes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.WorkflowAttributesGetRequest
func (_e *AdminServiceServer_Expecter) GetWorkflowAttributes(_a0 interface{}, _a1 interface{}) *AdminServiceServer_GetWorkflowAttributes_Call {
	return &AdminServiceServer_GetWorkflowAttributes_Call{Call: _e.mock.On("GetWorkflowAttributes", _a0, _a1)}
}

func (_c *AdminServiceServer_GetWorkflowAttributes_Call) Run(run func(_a0 context.Context, _a1 *admin.WorkflowAttributesGetRequest)) *AdminServiceServer_GetWorkflowAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WorkflowAttributesGetRequest))
	})
	return _c
}

func (_c *AdminServiceServer_GetWorkflowAttributes_Call) Return(_a0 *admin.WorkflowAttributesGetResponse, _a1 error) *AdminServiceServer_GetWorkflowAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_GetWorkflowAttributes_Call) RunAndReturn(run func(context.Context, *admin.WorkflowAttributesGetRequest) (*admin.WorkflowAttributesGetResponse, error)) *AdminServiceServer_GetWorkflowAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// ListActiveLaunchPlans provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListActiveLaunchPlans(_a0 context.Context, _a1 *admin.ActiveLaunchPlanListRequest) (*admin.LaunchPlanList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListActiveLaunchPlans")
	}

	var r0 *admin.LaunchPlanList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanListRequest) (*admin.LaunchPlanList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanListRequest) *admin.LaunchPlanList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ActiveLaunchPlanListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListActiveLaunchPlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActiveLaunchPlans'
type AdminServiceServer_ListActiveLaunchPlans_Call struct {
	*mock.Call
}

// ListActiveLaunchPlans is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ActiveLaunchPlanListRequest
func (_e *AdminServiceServer_Expecter) ListActiveLaunchPlans(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListActiveLaunchPlans_Call {
	return &AdminServiceServer_ListActiveLaunchPlans_Call{Call: _e.mock.On("ListActiveLaunchPlans", _a0, _a1)}
}

func (_c *AdminServiceServer_ListActiveLaunchPlans_Call) Run(run func(_a0 context.Context, _a1 *admin.ActiveLaunchPlanListRequest)) *AdminServiceServer_ListActiveLaunchPlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ActiveLaunchPlanListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListActiveLaunchPlans_Call) Return(_a0 *admin.LaunchPlanList, _a1 error) *AdminServiceServer_ListActiveLaunchPlans_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListActiveLaunchPlans_Call) RunAndReturn(run func(context.Context, *admin.ActiveLaunchPlanListRequest) (*admin.LaunchPlanList, error)) *AdminServiceServer_ListActiveLaunchPlans_Call {
	_c.Call.Return(run)
	return _c
}

// ListDescriptionEntities provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListDescriptionEntities(_a0 context.Context, _a1 *admin.DescriptionEntityListRequest) (*admin.DescriptionEntityList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListDescriptionEntities")
	}

	var r0 *admin.DescriptionEntityList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DescriptionEntityListRequest) (*admin.DescriptionEntityList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DescriptionEntityListRequest) *admin.DescriptionEntityList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DescriptionEntityList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.DescriptionEntityListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListDescriptionEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDescriptionEntities'
type AdminServiceServer_ListDescriptionEntities_Call struct {
	*mock.Call
}

// ListDescriptionEntities is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.DescriptionEntityListRequest
func (_e *AdminServiceServer_Expecter) ListDescriptionEntities(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListDescriptionEntities_Call {
	return &AdminServiceServer_ListDescriptionEntities_Call{Call: _e.mock.On("ListDescriptionEntities", _a0, _a1)}
}

func (_c *AdminServiceServer_ListDescriptionEntities_Call) Run(run func(_a0 context.Context, _a1 *admin.DescriptionEntityListRequest)) *AdminServiceServer_ListDescriptionEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DescriptionEntityListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListDescriptionEntities_Call) Return(_a0 *admin.DescriptionEntityList, _a1 error) *AdminServiceServer_ListDescriptionEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListDescriptionEntities_Call) RunAndReturn(run func(context.Context, *admin.DescriptionEntityListRequest) (*admin.DescriptionEntityList, error)) *AdminServiceServer_ListDescriptionEntities_Call {
	_c.Call.Return(run)
	return _c
}

// ListExecutions provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListExecutions(_a0 context.Context, _a1 *admin.ResourceListRequest) (*admin.ExecutionList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListExecutions")
	}

	var r0 *admin.ExecutionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) (*admin.ExecutionList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) *admin.ExecutionList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ResourceListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExecutions'
type AdminServiceServer_ListExecutions_Call struct {
	*mock.Call
}

// ListExecutions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ResourceListRequest
func (_e *AdminServiceServer_Expecter) ListExecutions(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListExecutions_Call {
	return &AdminServiceServer_ListExecutions_Call{Call: _e.mock.On("ListExecutions", _a0, _a1)}
}

func (_c *AdminServiceServer_ListExecutions_Call) Run(run func(_a0 context.Context, _a1 *admin.ResourceListRequest)) *AdminServiceServer_ListExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ResourceListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListExecutions_Call) Return(_a0 *admin.ExecutionList, _a1 error) *AdminServiceServer_ListExecutions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListExecutions_Call) RunAndReturn(run func(context.Context, *admin.ResourceListRequest) (*admin.ExecutionList, error)) *AdminServiceServer_ListExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// ListLaunchPlanIds provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListLaunchPlanIds(_a0 context.Context, _a1 *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListLaunchPlanIds")
	}

	var r0 *admin.NamedEntityIdentifierList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest) *admin.NamedEntityIdentifierList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityIdentifierList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityIdentifierListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListLaunchPlanIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLaunchPlanIds'
type AdminServiceServer_ListLaunchPlanIds_Call struct {
	*mock.Call
}

// ListLaunchPlanIds is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.NamedEntityIdentifierListRequest
func (_e *AdminServiceServer_Expecter) ListLaunchPlanIds(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListLaunchPlanIds_Call {
	return &AdminServiceServer_ListLaunchPlanIds_Call{Call: _e.mock.On("ListLaunchPlanIds", _a0, _a1)}
}

func (_c *AdminServiceServer_ListLaunchPlanIds_Call) Run(run func(_a0 context.Context, _a1 *admin.NamedEntityIdentifierListRequest)) *AdminServiceServer_ListLaunchPlanIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NamedEntityIdentifierListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListLaunchPlanIds_Call) Return(_a0 *admin.NamedEntityIdentifierList, _a1 error) *AdminServiceServer_ListLaunchPlanIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListLaunchPlanIds_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)) *AdminServiceServer_ListLaunchPlanIds_Call {
	_c.Call.Return(run)
	return _c
}

// ListLaunchPlans provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListLaunchPlans(_a0 context.Context, _a1 *admin.ResourceListRequest) (*admin.LaunchPlanList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListLaunchPlans")
	}

	var r0 *admin.LaunchPlanList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) (*admin.LaunchPlanList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) *admin.LaunchPlanList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ResourceListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListLaunchPlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLaunchPlans'
type AdminServiceServer_ListLaunchPlans_Call struct {
	*mock.Call
}

// ListLaunchPlans is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ResourceListRequest
func (_e *AdminServiceServer_Expecter) ListLaunchPlans(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListLaunchPlans_Call {
	return &AdminServiceServer_ListLaunchPlans_Call{Call: _e.mock.On("ListLaunchPlans", _a0, _a1)}
}

func (_c *AdminServiceServer_ListLaunchPlans_Call) Run(run func(_a0 context.Context, _a1 *admin.ResourceListRequest)) *AdminServiceServer_ListLaunchPlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ResourceListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListLaunchPlans_Call) Return(_a0 *admin.LaunchPlanList, _a1 error) *AdminServiceServer_ListLaunchPlans_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListLaunchPlans_Call) RunAndReturn(run func(context.Context, *admin.ResourceListRequest) (*admin.LaunchPlanList, error)) *AdminServiceServer_ListLaunchPlans_Call {
	_c.Call.Return(run)
	return _c
}

// ListMatchableAttributes provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListMatchableAttributes(_a0 context.Context, _a1 *admin.ListMatchableAttributesRequest) (*admin.ListMatchableAttributesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListMatchableAttributes")
	}

	var r0 *admin.ListMatchableAttributesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListMatchableAttributesRequest) (*admin.ListMatchableAttributesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListMatchableAttributesRequest) *admin.ListMatchableAttributesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ListMatchableAttributesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ListMatchableAttributesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListMatchableAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMatchableAttributes'
type AdminServiceServer_ListMatchableAttributes_Call struct {
	*mock.Call
}

// ListMatchableAttributes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ListMatchableAttributesRequest
func (_e *AdminServiceServer_Expecter) ListMatchableAttributes(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListMatchableAttributes_Call {
	return &AdminServiceServer_ListMatchableAttributes_Call{Call: _e.mock.On("ListMatchableAttributes", _a0, _a1)}
}

func (_c *AdminServiceServer_ListMatchableAttributes_Call) Run(run func(_a0 context.Context, _a1 *admin.ListMatchableAttributesRequest)) *AdminServiceServer_ListMatchableAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListMatchableAttributesRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListMatchableAttributes_Call) Return(_a0 *admin.ListMatchableAttributesResponse, _a1 error) *AdminServiceServer_ListMatchableAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListMatchableAttributes_Call) RunAndReturn(run func(context.Context, *admin.ListMatchableAttributesRequest) (*admin.ListMatchableAttributesResponse, error)) *AdminServiceServer_ListMatchableAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamedEntities provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListNamedEntities(_a0 context.Context, _a1 *admin.NamedEntityListRequest) (*admin.NamedEntityList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListNamedEntities")
	}

	var r0 *admin.NamedEntityList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityListRequest) (*admin.NamedEntityList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityListRequest) *admin.NamedEntityList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListNamedEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamedEntities'
type AdminServiceServer_ListNamedEntities_Call struct {
	*mock.Call
}

// ListNamedEntities is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.NamedEntityListRequest
func (_e *AdminServiceServer_Expecter) ListNamedEntities(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListNamedEntities_Call {
	return &AdminServiceServer_ListNamedEntities_Call{Call: _e.mock.On("ListNamedEntities", _a0, _a1)}
}

func (_c *AdminServiceServer_ListNamedEntities_Call) Run(run func(_a0 context.Context, _a1 *admin.NamedEntityListRequest)) *AdminServiceServer_ListNamedEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NamedEntityListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListNamedEntities_Call) Return(_a0 *admin.NamedEntityList, _a1 error) *AdminServiceServer_ListNamedEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListNamedEntities_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityListRequest) (*admin.NamedEntityList, error)) *AdminServiceServer_ListNamedEntities_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodeExecutions provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListNodeExecutions(_a0 context.Context, _a1 *admin.NodeExecutionListRequest) (*admin.NodeExecutionList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListNodeExecutions")
	}

	var r0 *admin.NodeExecutionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionListRequest) (*admin.NodeExecutionList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionListRequest) *admin.NodeExecutionList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NodeExecutionListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListNodeExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodeExecutions'
type AdminServiceServer_ListNodeExecutions_Call struct {
	*mock.Call
}

// ListNodeExecutions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.NodeExecutionListRequest
func (_e *AdminServiceServer_Expecter) ListNodeExecutions(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListNodeExecutions_Call {
	return &AdminServiceServer_ListNodeExecutions_Call{Call: _e.mock.On("ListNodeExecutions", _a0, _a1)}
}

func (_c *AdminServiceServer_ListNodeExecutions_Call) Run(run func(_a0 context.Context, _a1 *admin.NodeExecutionListRequest)) *AdminServiceServer_ListNodeExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NodeExecutionListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListNodeExecutions_Call) Return(_a0 *admin.NodeExecutionList, _a1 error) *AdminServiceServer_ListNodeExecutions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListNodeExecutions_Call) RunAndReturn(run func(context.Context, *admin.NodeExecutionListRequest) (*admin.NodeExecutionList, error)) *AdminServiceServer_ListNodeExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodeExecutionsForTask provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListNodeExecutionsForTask(_a0 context.Context, _a1 *admin.NodeExecutionForTaskListRequest) (*admin.NodeExecutionList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListNodeExecutionsForTask")
	}

	var r0 *admin.NodeExecutionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionForTaskListRequest) (*admin.NodeExecutionList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionForTaskListRequest) *admin.NodeExecutionList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NodeExecutionForTaskListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListNodeExecutionsForTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodeExecutionsForTask'
type AdminServiceServer_ListNodeExecutionsForTask_Call struct {
	*mock.Call
}

// ListNodeExecutionsForTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.NodeExecutionForTaskListRequest
func (_e *AdminServiceServer_Expecter) ListNodeExecutionsForTask(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListNodeExecutionsForTask_Call {
	return &AdminServiceServer_ListNodeExecutionsForTask_Call{Call: _e.mock.On("ListNodeExecutionsForTask", _a0, _a1)}
}

func (_c *AdminServiceServer_ListNodeExecutionsForTask_Call) Run(run func(_a0 context.Context, _a1 *admin.NodeExecutionForTaskListRequest)) *AdminServiceServer_ListNodeExecutionsForTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NodeExecutionForTaskListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListNodeExecutionsForTask_Call) Return(_a0 *admin.NodeExecutionList, _a1 error) *AdminServiceServer_ListNodeExecutionsForTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListNodeExecutionsForTask_Call) RunAndReturn(run func(context.Context, *admin.NodeExecutionForTaskListRequest) (*admin.NodeExecutionList, error)) *AdminServiceServer_ListNodeExecutionsForTask_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListProjects(_a0 context.Context, _a1 *admin.ProjectListRequest) (*admin.Projects, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 *admin.Projects
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectListRequest) (*admin.Projects, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectListRequest) *admin.Projects); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Projects)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type AdminServiceServer_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ProjectListRequest
func (_e *AdminServiceServer_Expecter) ListProjects(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListProjects_Call {
	return &AdminServiceServer_ListProjects_Call{Call: _e.mock.On("ListProjects", _a0, _a1)}
}

func (_c *AdminServiceServer_ListProjects_Call) Run(run func(_a0 context.Context, _a1 *admin.ProjectListRequest)) *AdminServiceServer_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListProjects_Call) Return(_a0 *admin.Projects, _a1 error) *AdminServiceServer_ListProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListProjects_Call) RunAndReturn(run func(context.Context, *admin.ProjectListRequest) (*admin.Projects, error)) *AdminServiceServer_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListTaskExecutions provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListTaskExecutions(_a0 context.Context, _a1 *admin.TaskExecutionListRequest) (*admin.TaskExecutionList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListTaskExecutions")
	}

	var r0 *admin.TaskExecutionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionListRequest) (*admin.TaskExecutionList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionListRequest) *admin.TaskExecutionList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskExecutionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.TaskExecutionListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListTaskExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTaskExecutions'
type AdminServiceServer_ListTaskExecutions_Call struct {
	*mock.Call
}

// ListTaskExecutions is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.TaskExecutionListRequest
func (_e *AdminServiceServer_Expecter) ListTaskExecutions(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListTaskExecutions_Call {
	return &AdminServiceServer_ListTaskExecutions_Call{Call: _e.mock.On("ListTaskExecutions", _a0, _a1)}
}

func (_c *AdminServiceServer_ListTaskExecutions_Call) Run(run func(_a0 context.Context, _a1 *admin.TaskExecutionListRequest)) *AdminServiceServer_ListTaskExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.TaskExecutionListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListTaskExecutions_Call) Return(_a0 *admin.TaskExecutionList, _a1 error) *AdminServiceServer_ListTaskExecutions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListTaskExecutions_Call) RunAndReturn(run func(context.Context, *admin.TaskExecutionListRequest) (*admin.TaskExecutionList, error)) *AdminServiceServer_ListTaskExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// ListTaskIds provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListTaskIds(_a0 context.Context, _a1 *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListTaskIds")
	}

	var r0 *admin.NamedEntityIdentifierList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest) *admin.NamedEntityIdentifierList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityIdentifierList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityIdentifierListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListTaskIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTaskIds'
type AdminServiceServer_ListTaskIds_Call struct {
	*mock.Call
}

// ListTaskIds is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.NamedEntityIdentifierListRequest
func (_e *AdminServiceServer_Expecter) ListTaskIds(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListTaskIds_Call {
	return &AdminServiceServer_ListTaskIds_Call{Call: _e.mock.On("ListTaskIds", _a0, _a1)}
}

func (_c *AdminServiceServer_ListTaskIds_Call) Run(run func(_a0 context.Context, _a1 *admin.NamedEntityIdentifierListRequest)) *AdminServiceServer_ListTaskIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NamedEntityIdentifierListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListTaskIds_Call) Return(_a0 *admin.NamedEntityIdentifierList, _a1 error) *AdminServiceServer_ListTaskIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListTaskIds_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)) *AdminServiceServer_ListTaskIds_Call {
	_c.Call.Return(run)
	return _c
}

// ListTasks provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListTasks(_a0 context.Context, _a1 *admin.ResourceListRequest) (*admin.TaskList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *admin.TaskList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) (*admin.TaskList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) *admin.TaskList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ResourceListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTasks'
type AdminServiceServer_ListTasks_Call struct {
	*mock.Call
}

// ListTasks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ResourceListRequest
func (_e *AdminServiceServer_Expecter) ListTasks(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListTasks_Call {
	return &AdminServiceServer_ListTasks_Call{Call: _e.mock.On("ListTasks", _a0, _a1)}
}

func (_c *AdminServiceServer_ListTasks_Call) Run(run func(_a0 context.Context, _a1 *admin.ResourceListRequest)) *AdminServiceServer_ListTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ResourceListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListTasks_Call) Return(_a0 *admin.TaskList, _a1 error) *AdminServiceServer_ListTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListTasks_Call) RunAndReturn(run func(context.Context, *admin.ResourceListRequest) (*admin.TaskList, error)) *AdminServiceServer_ListTasks_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkflowIds provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListWorkflowIds(_a0 context.Context, _a1 *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflowIds")
	}

	var r0 *admin.NamedEntityIdentifierList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest) *admin.NamedEntityIdentifierList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityIdentifierList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityIdentifierListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListWorkflowIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkflowIds'
type AdminServiceServer_ListWorkflowIds_Call struct {
	*mock.Call
}

// ListWorkflowIds is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.NamedEntityIdentifierListRequest
func (_e *AdminServiceServer_Expecter) ListWorkflowIds(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListWorkflowIds_Call {
	return &AdminServiceServer_ListWorkflowIds_Call{Call: _e.mock.On("ListWorkflowIds", _a0, _a1)}
}

func (_c *AdminServiceServer_ListWorkflowIds_Call) Run(run func(_a0 context.Context, _a1 *admin.NamedEntityIdentifierListRequest)) *AdminServiceServer_ListWorkflowIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NamedEntityIdentifierListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListWorkflowIds_Call) Return(_a0 *admin.NamedEntityIdentifierList, _a1 error) *AdminServiceServer_ListWorkflowIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListWorkflowIds_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)) *AdminServiceServer_ListWorkflowIds_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkflows provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) ListWorkflows(_a0 context.Context, _a1 *admin.ResourceListRequest) (*admin.WorkflowList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflows")
	}

	var r0 *admin.WorkflowList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) (*admin.WorkflowList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) *admin.WorkflowList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ResourceListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_ListWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkflows'
type AdminServiceServer_ListWorkflows_Call struct {
	*mock.Call
}

// ListWorkflows is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ResourceListRequest
func (_e *AdminServiceServer_Expecter) ListWorkflows(_a0 interface{}, _a1 interface{}) *AdminServiceServer_ListWorkflows_Call {
	return &AdminServiceServer_ListWorkflows_Call{Call: _e.mock.On("ListWorkflows", _a0, _a1)}
}

func (_c *AdminServiceServer_ListWorkflows_Call) Run(run func(_a0 context.Context, _a1 *admin.ResourceListRequest)) *AdminServiceServer_ListWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ResourceListRequest))
	})
	return _c
}

func (_c *AdminServiceServer_ListWorkflows_Call) Return(_a0 *admin.WorkflowList, _a1 error) *AdminServiceServer_ListWorkflows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_ListWorkflows_Call) RunAndReturn(run func(context.Context, *admin.ResourceListRequest) (*admin.WorkflowList, error)) *AdminServiceServer_ListWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// RecoverExecution provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) RecoverExecution(_a0 context.Context, _a1 *admin.ExecutionRecoverRequest) (*admin.ExecutionCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RecoverExecution")
	}

	var r0 *admin.ExecutionCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionRecoverRequest) (*admin.ExecutionCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionRecoverRequest) *admin.ExecutionCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ExecutionRecoverRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_RecoverExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverExecution'
type AdminServiceServer_RecoverExecution_Call struct {
	*mock.Call
}

// RecoverExecution is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ExecutionRecoverRequest
func (_e *AdminServiceServer_Expecter) RecoverExecution(_a0 interface{}, _a1 interface{}) *AdminServiceServer_RecoverExecution_Call {
	return &AdminServiceServer_RecoverExecution_Call{Call: _e.mock.On("RecoverExecution", _a0, _a1)}
}

func (_c *AdminServiceServer_RecoverExecution_Call) Run(run func(_a0 context.Context, _a1 *admin.ExecutionRecoverRequest)) *AdminServiceServer_RecoverExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ExecutionRecoverRequest))
	})
	return _c
}

func (_c *AdminServiceServer_RecoverExecution_Call) Return(_a0 *admin.ExecutionCreateResponse, _a1 error) *AdminServiceServer_RecoverExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_RecoverExecution_Call) RunAndReturn(run func(context.Context, *admin.ExecutionRecoverRequest) (*admin.ExecutionCreateResponse, error)) *AdminServiceServer_RecoverExecution_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterProject provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) RegisterProject(_a0 context.Context, _a1 *admin.ProjectRegisterRequest) (*admin.ProjectRegisterResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterProject")
	}

	var r0 *admin.ProjectRegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectRegisterRequest) (*admin.ProjectRegisterResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectRegisterRequest) *admin.ProjectRegisterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectRegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectRegisterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_RegisterProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterProject'
type AdminServiceServer_RegisterProject_Call struct {
	*mock.Call
}

// RegisterProject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ProjectRegisterRequest
func (_e *AdminServiceServer_Expecter) RegisterProject(_a0 interface{}, _a1 interface{}) *AdminServiceServer_RegisterProject_Call {
	return &AdminServiceServer_RegisterProject_Call{Call: _e.mock.On("RegisterProject", _a0, _a1)}
}

func (_c *AdminServiceServer_RegisterProject_Call) Run(run func(_a0 context.Context, _a1 *admin.ProjectRegisterRequest)) *AdminServiceServer_RegisterProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectRegisterRequest))
	})
	return _c
}

func (_c *AdminServiceServer_RegisterProject_Call) Return(_a0 *admin.ProjectRegisterResponse, _a1 error) *AdminServiceServer_RegisterProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_RegisterProject_Call) RunAndReturn(run func(context.Context, *admin.ProjectRegisterRequest) (*admin.ProjectRegisterResponse, error)) *AdminServiceServer_RegisterProject_Call {
	_c.Call.Return(run)
	return _c
}

// RelaunchExecution provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) RelaunchExecution(_a0 context.Context, _a1 *admin.ExecutionRelaunchRequest) (*admin.ExecutionCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RelaunchExecution")
	}

	var r0 *admin.ExecutionCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionRelaunchRequest) (*admin.ExecutionCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionRelaunchRequest) *admin.ExecutionCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ExecutionRelaunchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_RelaunchExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RelaunchExecution'
type AdminServiceServer_RelaunchExecution_Call struct {
	*mock.Call
}

// RelaunchExecution is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ExecutionRelaunchRequest
func (_e *AdminServiceServer_Expecter) RelaunchExecution(_a0 interface{}, _a1 interface{}) *AdminServiceServer_RelaunchExecution_Call {
	return &AdminServiceServer_RelaunchExecution_Call{Call: _e.mock.On("RelaunchExecution", _a0, _a1)}
}

func (_c *AdminServiceServer_RelaunchExecution_Call) Run(run func(_a0 context.Context, _a1 *admin.ExecutionRelaunchRequest)) *AdminServiceServer_RelaunchExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ExecutionRelaunchRequest))
	})
	return _c
}

func (_c *AdminServiceServer_RelaunchExecution_Call) Return(_a0 *admin.ExecutionCreateResponse, _a1 error) *AdminServiceServer_RelaunchExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_RelaunchExecution_Call) RunAndReturn(run func(context.Context, *admin.ExecutionRelaunchRequest) (*admin.ExecutionCreateResponse, error)) *AdminServiceServer_RelaunchExecution_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateExecution provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) TerminateExecution(_a0 context.Context, _a1 *admin.ExecutionTerminateRequest) (*admin.ExecutionTerminateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for TerminateExecution")
	}

	var r0 *admin.ExecutionTerminateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionTerminateRequest) (*admin.ExecutionTerminateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionTerminateRequest) *admin.ExecutionTerminateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionTerminateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ExecutionTerminateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_TerminateExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateExecution'
type AdminServiceServer_TerminateExecution_Call struct {
	*mock.Call
}

// TerminateExecution is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ExecutionTerminateRequest
func (_e *AdminServiceServer_Expecter) TerminateExecution(_a0 interface{}, _a1 interface{}) *AdminServiceServer_TerminateExecution_Call {
	return &AdminServiceServer_TerminateExecution_Call{Call: _e.mock.On("TerminateExecution", _a0, _a1)}
}

func (_c *AdminServiceServer_TerminateExecution_Call) Run(run func(_a0 context.Context, _a1 *admin.ExecutionTerminateRequest)) *AdminServiceServer_TerminateExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ExecutionTerminateRequest))
	})
	return _c
}

func (_c *AdminServiceServer_TerminateExecution_Call) Return(_a0 *admin.ExecutionTerminateResponse, _a1 error) *AdminServiceServer_TerminateExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_TerminateExecution_Call) RunAndReturn(run func(context.Context, *admin.ExecutionTerminateRequest) (*admin.ExecutionTerminateResponse, error)) *AdminServiceServer_TerminateExecution_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateExecution provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) UpdateExecution(_a0 context.Context, _a1 *admin.ExecutionUpdateRequest) (*admin.ExecutionUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExecution")
	}

	var r0 *admin.ExecutionUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionUpdateRequest) (*admin.ExecutionUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionUpdateRequest) *admin.ExecutionUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ExecutionUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_UpdateExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExecution'
type AdminServiceServer_UpdateExecution_Call struct {
	*mock.Call
}

// UpdateExecution is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ExecutionUpdateRequest
func (_e *AdminServiceServer_Expecter) UpdateExecution(_a0 interface{}, _a1 interface{}) *AdminServiceServer_UpdateExecution_Call {
	return &AdminServiceServer_UpdateExecution_Call{Call: _e.mock.On("UpdateExecution", _a0, _a1)}
}

func (_c *AdminServiceServer_UpdateExecution_Call) Run(run func(_a0 context.Context, _a1 *admin.ExecutionUpdateRequest)) *AdminServiceServer_UpdateExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ExecutionUpdateRequest))
	})
	return _c
}

func (_c *AdminServiceServer_UpdateExecution_Call) Return(_a0 *admin.ExecutionUpdateResponse, _a1 error) *AdminServiceServer_UpdateExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_UpdateExecution_Call) RunAndReturn(run func(context.Context, *admin.ExecutionUpdateRequest) (*admin.ExecutionUpdateResponse, error)) *AdminServiceServer_UpdateExecution_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLaunchPlan provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) UpdateLaunchPlan(_a0 context.Context, _a1 *admin.LaunchPlanUpdateRequest) (*admin.LaunchPlanUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLaunchPlan")
	}

	var r0 *admin.LaunchPlanUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanUpdateRequest) (*admin.LaunchPlanUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanUpdateRequest) *admin.LaunchPlanUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.LaunchPlanUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_UpdateLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLaunchPlan'
type AdminServiceServer_UpdateLaunchPlan_Call struct {
	*mock.Call
}

// UpdateLaunchPlan is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.LaunchPlanUpdateRequest
func (_e *AdminServiceServer_Expecter) UpdateLaunchPlan(_a0 interface{}, _a1 interface{}) *AdminServiceServer_UpdateLaunchPlan_Call {
	return &AdminServiceServer_UpdateLaunchPlan_Call{Call: _e.mock.On("UpdateLaunchPlan", _a0, _a1)}
}

func (_c *AdminServiceServer_UpdateLaunchPlan_Call) Run(run func(_a0 context.Context, _a1 *admin.LaunchPlanUpdateRequest)) *AdminServiceServer_UpdateLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.LaunchPlanUpdateRequest))
	})
	return _c
}

func (_c *AdminServiceServer_UpdateLaunchPlan_Call) Return(_a0 *admin.LaunchPlanUpdateResponse, _a1 error) *AdminServiceServer_UpdateLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_UpdateLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.LaunchPlanUpdateRequest) (*admin.LaunchPlanUpdateResponse, error)) *AdminServiceServer_UpdateLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNamedEntity provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) UpdateNamedEntity(_a0 context.Context, _a1 *admin.NamedEntityUpdateRequest) (*admin.NamedEntityUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNamedEntity")
	}

	var r0 *admin.NamedEntityUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityUpdateRequest) (*admin.NamedEntityUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityUpdateRequest) *admin.NamedEntityUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_UpdateNamedEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNamedEntity'
type AdminServiceServer_UpdateNamedEntity_Call struct {
	*mock.Call
}

// UpdateNamedEntity is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.NamedEntityUpdateRequest
func (_e *AdminServiceServer_Expecter) UpdateNamedEntity(_a0 interface{}, _a1 interface{}) *AdminServiceServer_UpdateNamedEntity_Call {
	return &AdminServiceServer_UpdateNamedEntity_Call{Call: _e.mock.On("UpdateNamedEntity", _a0, _a1)}
}

func (_c *AdminServiceServer_UpdateNamedEntity_Call) Run(run func(_a0 context.Context, _a1 *admin.NamedEntityUpdateRequest)) *AdminServiceServer_UpdateNamedEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NamedEntityUpdateRequest))
	})
	return _c
}

func (_c *AdminServiceServer_UpdateNamedEntity_Call) Return(_a0 *admin.NamedEntityUpdateResponse, _a1 error) *AdminServiceServer_UpdateNamedEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_UpdateNamedEntity_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityUpdateRequest) (*admin.NamedEntityUpdateResponse, error)) *AdminServiceServer_UpdateNamedEntity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) UpdateProject(_a0 context.Context, _a1 *admin.Project) (*admin.ProjectUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *admin.ProjectUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.Project) (*admin.ProjectUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.Project) *admin.ProjectUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.Project) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type AdminServiceServer_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.Project
func (_e *AdminServiceServer_Expecter) UpdateProject(_a0 interface{}, _a1 interface{}) *AdminServiceServer_UpdateProject_Call {
	return &AdminServiceServer_UpdateProject_Call{Call: _e.mock.On("UpdateProject", _a0, _a1)}
}

func (_c *AdminServiceServer_UpdateProject_Call) Run(run func(_a0 context.Context, _a1 *admin.Project)) *AdminServiceServer_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.Project))
	})
	return _c
}

func (_c *AdminServiceServer_UpdateProject_Call) Return(_a0 *admin.ProjectUpdateResponse, _a1 error) *AdminServiceServer_UpdateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_UpdateProject_Call) RunAndReturn(run func(context.Context, *admin.Project) (*admin.ProjectUpdateResponse, error)) *AdminServiceServer_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectAttributes provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) UpdateProjectAttributes(_a0 context.Context, _a1 *admin.ProjectAttributesUpdateRequest) (*admin.ProjectAttributesUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectAttributes")
	}

	var r0 *admin.ProjectAttributesUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesUpdateRequest) (*admin.ProjectAttributesUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesUpdateRequest) *admin.ProjectAttributesUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectAttributesUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectAttributesUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_UpdateProjectAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectAttributes'
type AdminServiceServer_UpdateProjectAttributes_Call struct {
	*mock.Call
}

// UpdateProjectAttributes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ProjectAttributesUpdateRequest
func (_e *AdminServiceServer_Expecter) UpdateProjectAttributes(_a0 interface{}, _a1 interface{}) *AdminServiceServer_UpdateProjectAttributes_Call {
	return &AdminServiceServer_UpdateProjectAttributes_Call{Call: _e.mock.On("UpdateProjectAttributes", _a0, _a1)}
}

func (_c *AdminServiceServer_UpdateProjectAttributes_Call) Run(run func(_a0 context.Context, _a1 *admin.ProjectAttributesUpdateRequest)) *AdminServiceServer_UpdateProjectAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectAttributesUpdateRequest))
	})
	return _c
}

func (_c *AdminServiceServer_UpdateProjectAttributes_Call) Return(_a0 *admin.ProjectAttributesUpdateResponse, _a1 error) *AdminServiceServer_UpdateProjectAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_UpdateProjectAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectAttributesUpdateRequest) (*admin.ProjectAttributesUpdateResponse, error)) *AdminServiceServer_UpdateProjectAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectDomainAttributes provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) UpdateProjectDomainAttributes(_a0 context.Context, _a1 *admin.ProjectDomainAttributesUpdateRequest) (*admin.ProjectDomainAttributesUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectDomainAttributes")
	}

	var r0 *admin.ProjectDomainAttributesUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesUpdateRequest) (*admin.ProjectDomainAttributesUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesUpdateRequest) *admin.ProjectDomainAttributesUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectDomainAttributesUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectDomainAttributesUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_UpdateProjectDomainAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectDomainAttributes'
type AdminServiceServer_UpdateProjectDomainAttributes_Call struct {
	*mock.Call
}

// UpdateProjectDomainAttributes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.ProjectDomainAttributesUpdateRequest
func (_e *AdminServiceServer_Expecter) UpdateProjectDomainAttributes(_a0 interface{}, _a1 interface{}) *AdminServiceServer_UpdateProjectDomainAttributes_Call {
	return &AdminServiceServer_UpdateProjectDomainAttributes_Call{Call: _e.mock.On("UpdateProjectDomainAttributes", _a0, _a1)}
}

func (_c *AdminServiceServer_UpdateProjectDomainAttributes_Call) Run(run func(_a0 context.Context, _a1 *admin.ProjectDomainAttributesUpdateRequest)) *AdminServiceServer_UpdateProjectDomainAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectDomainAttributesUpdateRequest))
	})
	return _c
}

func (_c *AdminServiceServer_UpdateProjectDomainAttributes_Call) Return(_a0 *admin.ProjectDomainAttributesUpdateResponse, _a1 error) *AdminServiceServer_UpdateProjectDomainAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_UpdateProjectDomainAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectDomainAttributesUpdateRequest) (*admin.ProjectDomainAttributesUpdateResponse, error)) *AdminServiceServer_UpdateProjectDomainAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkflowAttributes provides a mock function with given fields: _a0, _a1
func (_m *AdminServiceServer) UpdateWorkflowAttributes(_a0 context.Context, _a1 *admin.WorkflowAttributesUpdateRequest) (*admin.WorkflowAttributesUpdateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkflowAttributes")
	}

	var r0 *admin.WorkflowAttributesUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesUpdateRequest) (*admin.WorkflowAttributesUpdateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesUpdateRequest) *admin.WorkflowAttributesUpdateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowAttributesUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowAttributesUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceServer_UpdateWorkflowAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflowAttributes'
type AdminServiceServer_UpdateWorkflowAttributes_Call struct {
	*mock.Call
}

// UpdateWorkflowAttributes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.WorkflowAttributesUpdateRequest
func (_e *AdminServiceServer_Expecter) UpdateWorkflowAttributes(_a0 interface{}, _a1 interface{}) *AdminServiceServer_UpdateWorkflowAttributes_Call {
	return &AdminServiceServer_UpdateWorkflowAttributes_Call{Call: _e.mock.On("UpdateWorkflowAttributes", _a0, _a1)}
}

func (_c *AdminServiceServer_UpdateWorkflowAttributes_Call) Run(run func(_a0 context.Context, _a1 *admin.WorkflowAttributesUpdateRequest)) *AdminServiceServer_UpdateWorkflowAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WorkflowAttributesUpdateRequest))
	})
	return _c
}

func (_c *AdminServiceServer_UpdateWorkflowAttributes_Call) Return(_a0 *admin.WorkflowAttributesUpdateResponse, _a1 error) *AdminServiceServer_UpdateWorkflowAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceServer_UpdateWorkflowAttributes_Call) RunAndReturn(run func(context.Context, *admin.WorkflowAttributesUpdateRequest) (*admin.WorkflowAttributesUpdateResponse, error)) *AdminServiceServer_UpdateWorkflowAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// NewAdminServiceServer creates a new instance of AdminServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminServiceServer {
	mock := &AdminServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
