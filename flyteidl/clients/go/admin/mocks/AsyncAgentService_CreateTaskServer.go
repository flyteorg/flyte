// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	metadata "google.golang.org/grpc/metadata"

	mock "github.com/stretchr/testify/mock"
)

// AsyncConnectorService_CreateTaskServer is an autogenerated mock type for the AsyncConnectorService_CreateTaskServer type
type AsyncConnectorService_CreateTaskServer struct {
	mock.Mock
}

type AsyncConnectorService_CreateTaskServer_Context struct {
	*mock.Call
}

func (_m AsyncConnectorService_CreateTaskServer_Context) Return(_a0 context.Context) *AsyncConnectorService_CreateTaskServer_Context {
	return &AsyncConnectorService_CreateTaskServer_Context{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnContext() *AsyncConnectorService_CreateTaskServer_Context {
	c_call := _m.On("Context")
	return &AsyncConnectorService_CreateTaskServer_Context{Call: c_call}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnContextMatch(matchers ...interface{}) *AsyncConnectorService_CreateTaskServer_Context {
	c_call := _m.On("Context", matchers...)
	return &AsyncConnectorService_CreateTaskServer_Context{Call: c_call}
}

// Context provides a mock function with given fields:
func (_m *AsyncConnectorService_CreateTaskServer) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

type AsyncConnectorService_CreateTaskServer_Recv struct {
	*mock.Call
}

func (_m AsyncConnectorService_CreateTaskServer_Recv) Return(_a0 *admin.CreateTaskRequest, _a1 error) *AsyncConnectorService_CreateTaskServer_Recv {
	return &AsyncConnectorService_CreateTaskServer_Recv{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnRecv() *AsyncConnectorService_CreateTaskServer_Recv {
	c_call := _m.On("Recv")
	return &AsyncConnectorService_CreateTaskServer_Recv{Call: c_call}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnRecvMatch(matchers ...interface{}) *AsyncConnectorService_CreateTaskServer_Recv {
	c_call := _m.On("Recv", matchers...)
	return &AsyncConnectorService_CreateTaskServer_Recv{Call: c_call}
}

// Recv provides a mock function with given fields:
func (_m *AsyncConnectorService_CreateTaskServer) Recv() (*admin.CreateTaskRequest, error) {
	ret := _m.Called()

	var r0 *admin.CreateTaskRequest
	if rf, ok := ret.Get(0).(func() *admin.CreateTaskRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CreateTaskRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AsyncConnectorService_CreateTaskServer_RecvMsg struct {
	*mock.Call
}

func (_m AsyncConnectorService_CreateTaskServer_RecvMsg) Return(_a0 error) *AsyncConnectorService_CreateTaskServer_RecvMsg {
	return &AsyncConnectorService_CreateTaskServer_RecvMsg{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnRecvMsg(m interface{}) *AsyncConnectorService_CreateTaskServer_RecvMsg {
	c_call := _m.On("RecvMsg", m)
	return &AsyncConnectorService_CreateTaskServer_RecvMsg{Call: c_call}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnRecvMsgMatch(matchers ...interface{}) *AsyncConnectorService_CreateTaskServer_RecvMsg {
	c_call := _m.On("RecvMsg", matchers...)
	return &AsyncConnectorService_CreateTaskServer_RecvMsg{Call: c_call}
}

// RecvMsg provides a mock function with given fields: m
func (_m *AsyncConnectorService_CreateTaskServer) RecvMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncConnectorService_CreateTaskServer_SendAndClose struct {
	*mock.Call
}

func (_m AsyncConnectorService_CreateTaskServer_SendAndClose) Return(_a0 error) *AsyncConnectorService_CreateTaskServer_SendAndClose {
	return &AsyncConnectorService_CreateTaskServer_SendAndClose{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnSendAndClose(_a0 *admin.CreateTaskResponse) *AsyncConnectorService_CreateTaskServer_SendAndClose {
	c_call := _m.On("SendAndClose", _a0)
	return &AsyncConnectorService_CreateTaskServer_SendAndClose{Call: c_call}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnSendAndCloseMatch(matchers ...interface{}) *AsyncConnectorService_CreateTaskServer_SendAndClose {
	c_call := _m.On("SendAndClose", matchers...)
	return &AsyncConnectorService_CreateTaskServer_SendAndClose{Call: c_call}
}

// SendAndClose provides a mock function with given fields: _a0
func (_m *AsyncConnectorService_CreateTaskServer) SendAndClose(_a0 *admin.CreateTaskResponse) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*admin.CreateTaskResponse) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncConnectorService_CreateTaskServer_SendHeader struct {
	*mock.Call
}

func (_m AsyncConnectorService_CreateTaskServer_SendHeader) Return(_a0 error) *AsyncConnectorService_CreateTaskServer_SendHeader {
	return &AsyncConnectorService_CreateTaskServer_SendHeader{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnSendHeader(_a0 metadata.MD) *AsyncConnectorService_CreateTaskServer_SendHeader {
	c_call := _m.On("SendHeader", _a0)
	return &AsyncConnectorService_CreateTaskServer_SendHeader{Call: c_call}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnSendHeaderMatch(matchers ...interface{}) *AsyncConnectorService_CreateTaskServer_SendHeader {
	c_call := _m.On("SendHeader", matchers...)
	return &AsyncConnectorService_CreateTaskServer_SendHeader{Call: c_call}
}

// SendHeader provides a mock function with given fields: _a0
func (_m *AsyncConnectorService_CreateTaskServer) SendHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncConnectorService_CreateTaskServer_SendMsg struct {
	*mock.Call
}

func (_m AsyncConnectorService_CreateTaskServer_SendMsg) Return(_a0 error) *AsyncConnectorService_CreateTaskServer_SendMsg {
	return &AsyncConnectorService_CreateTaskServer_SendMsg{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnSendMsg(m interface{}) *AsyncConnectorService_CreateTaskServer_SendMsg {
	c_call := _m.On("SendMsg", m)
	return &AsyncConnectorService_CreateTaskServer_SendMsg{Call: c_call}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnSendMsgMatch(matchers ...interface{}) *AsyncConnectorService_CreateTaskServer_SendMsg {
	c_call := _m.On("SendMsg", matchers...)
	return &AsyncConnectorService_CreateTaskServer_SendMsg{Call: c_call}
}

// SendMsg provides a mock function with given fields: m
func (_m *AsyncConnectorService_CreateTaskServer) SendMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncConnectorService_CreateTaskServer_SetHeader struct {
	*mock.Call
}

func (_m AsyncConnectorService_CreateTaskServer_SetHeader) Return(_a0 error) *AsyncConnectorService_CreateTaskServer_SetHeader {
	return &AsyncConnectorService_CreateTaskServer_SetHeader{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnSetHeader(_a0 metadata.MD) *AsyncConnectorService_CreateTaskServer_SetHeader {
	c_call := _m.On("SetHeader", _a0)
	return &AsyncConnectorService_CreateTaskServer_SetHeader{Call: c_call}
}

func (_m *AsyncConnectorService_CreateTaskServer) OnSetHeaderMatch(matchers ...interface{}) *AsyncConnectorService_CreateTaskServer_SetHeader {
	c_call := _m.On("SetHeader", matchers...)
	return &AsyncConnectorService_CreateTaskServer_SetHeader{Call: c_call}
}

// SetHeader provides a mock function with given fields: _a0
func (_m *AsyncConnectorService_CreateTaskServer) SetHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTrailer provides a mock function with given fields: _a0
func (_m *AsyncConnectorService_CreateTaskServer) SetTrailer(_a0 metadata.MD) {
	_m.Called(_a0)
}
