// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	metadata "google.golang.org/grpc/metadata"

	mock "github.com/stretchr/testify/mock"
)

// AsyncConnectorService_GetTaskServer is an autogenerated mock type for the AsyncConnectorService_GetTaskServer type
type AsyncConnectorService_GetTaskServer struct {
	mock.Mock
}

type AsyncConnectorService_GetTaskServer_Context struct {
	*mock.Call
}

func (_m AsyncConnectorService_GetTaskServer_Context) Return(_a0 context.Context) *AsyncConnectorService_GetTaskServer_Context {
	return &AsyncConnectorService_GetTaskServer_Context{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_GetTaskServer) OnContext() *AsyncConnectorService_GetTaskServer_Context {
	c_call := _m.On("Context")
	return &AsyncConnectorService_GetTaskServer_Context{Call: c_call}
}

func (_m *AsyncConnectorService_GetTaskServer) OnContextMatch(matchers ...interface{}) *AsyncConnectorService_GetTaskServer_Context {
	c_call := _m.On("Context", matchers...)
	return &AsyncConnectorService_GetTaskServer_Context{Call: c_call}
}

// Context provides a mock function with given fields:
func (_m *AsyncConnectorService_GetTaskServer) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

type AsyncConnectorService_GetTaskServer_RecvMsg struct {
	*mock.Call
}

func (_m AsyncConnectorService_GetTaskServer_RecvMsg) Return(_a0 error) *AsyncConnectorService_GetTaskServer_RecvMsg {
	return &AsyncConnectorService_GetTaskServer_RecvMsg{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_GetTaskServer) OnRecvMsg(m interface{}) *AsyncConnectorService_GetTaskServer_RecvMsg {
	c_call := _m.On("RecvMsg", m)
	return &AsyncConnectorService_GetTaskServer_RecvMsg{Call: c_call}
}

func (_m *AsyncConnectorService_GetTaskServer) OnRecvMsgMatch(matchers ...interface{}) *AsyncConnectorService_GetTaskServer_RecvMsg {
	c_call := _m.On("RecvMsg", matchers...)
	return &AsyncConnectorService_GetTaskServer_RecvMsg{Call: c_call}
}

// RecvMsg provides a mock function with given fields: m
func (_m *AsyncConnectorService_GetTaskServer) RecvMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncConnectorService_GetTaskServer_Send struct {
	*mock.Call
}

func (_m AsyncConnectorService_GetTaskServer_Send) Return(_a0 error) *AsyncConnectorService_GetTaskServer_Send {
	return &AsyncConnectorService_GetTaskServer_Send{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_GetTaskServer) OnSend(_a0 *admin.GetTaskResponse) *AsyncConnectorService_GetTaskServer_Send {
	c_call := _m.On("Send", _a0)
	return &AsyncConnectorService_GetTaskServer_Send{Call: c_call}
}

func (_m *AsyncConnectorService_GetTaskServer) OnSendMatch(matchers ...interface{}) *AsyncConnectorService_GetTaskServer_Send {
	c_call := _m.On("Send", matchers...)
	return &AsyncConnectorService_GetTaskServer_Send{Call: c_call}
}

// Send provides a mock function with given fields: _a0
func (_m *AsyncConnectorService_GetTaskServer) Send(_a0 *admin.GetTaskResponse) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*admin.GetTaskResponse) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncConnectorService_GetTaskServer_SendHeader struct {
	*mock.Call
}

func (_m AsyncConnectorService_GetTaskServer_SendHeader) Return(_a0 error) *AsyncConnectorService_GetTaskServer_SendHeader {
	return &AsyncConnectorService_GetTaskServer_SendHeader{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_GetTaskServer) OnSendHeader(_a0 metadata.MD) *AsyncConnectorService_GetTaskServer_SendHeader {
	c_call := _m.On("SendHeader", _a0)
	return &AsyncConnectorService_GetTaskServer_SendHeader{Call: c_call}
}

func (_m *AsyncConnectorService_GetTaskServer) OnSendHeaderMatch(matchers ...interface{}) *AsyncConnectorService_GetTaskServer_SendHeader {
	c_call := _m.On("SendHeader", matchers...)
	return &AsyncConnectorService_GetTaskServer_SendHeader{Call: c_call}
}

// SendHeader provides a mock function with given fields: _a0
func (_m *AsyncConnectorService_GetTaskServer) SendHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncConnectorService_GetTaskServer_SendMsg struct {
	*mock.Call
}

func (_m AsyncConnectorService_GetTaskServer_SendMsg) Return(_a0 error) *AsyncConnectorService_GetTaskServer_SendMsg {
	return &AsyncConnectorService_GetTaskServer_SendMsg{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_GetTaskServer) OnSendMsg(m interface{}) *AsyncConnectorService_GetTaskServer_SendMsg {
	c_call := _m.On("SendMsg", m)
	return &AsyncConnectorService_GetTaskServer_SendMsg{Call: c_call}
}

func (_m *AsyncConnectorService_GetTaskServer) OnSendMsgMatch(matchers ...interface{}) *AsyncConnectorService_GetTaskServer_SendMsg {
	c_call := _m.On("SendMsg", matchers...)
	return &AsyncConnectorService_GetTaskServer_SendMsg{Call: c_call}
}

// SendMsg provides a mock function with given fields: m
func (_m *AsyncConnectorService_GetTaskServer) SendMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncConnectorService_GetTaskServer_SetHeader struct {
	*mock.Call
}

func (_m AsyncConnectorService_GetTaskServer_SetHeader) Return(_a0 error) *AsyncConnectorService_GetTaskServer_SetHeader {
	return &AsyncConnectorService_GetTaskServer_SetHeader{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncConnectorService_GetTaskServer) OnSetHeader(_a0 metadata.MD) *AsyncConnectorService_GetTaskServer_SetHeader {
	c_call := _m.On("SetHeader", _a0)
	return &AsyncConnectorService_GetTaskServer_SetHeader{Call: c_call}
}

func (_m *AsyncConnectorService_GetTaskServer) OnSetHeaderMatch(matchers ...interface{}) *AsyncConnectorService_GetTaskServer_SetHeader {
	c_call := _m.On("SetHeader", matchers...)
	return &AsyncConnectorService_GetTaskServer_SetHeader{Call: c_call}
}

// SetHeader provides a mock function with given fields: _a0
func (_m *AsyncConnectorService_GetTaskServer) SetHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTrailer provides a mock function with given fields: _a0
func (_m *AsyncConnectorService_GetTaskServer) SetTrailer(_a0 metadata.MD) {
	_m.Called(_a0)
}
