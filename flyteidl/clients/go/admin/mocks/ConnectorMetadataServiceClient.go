// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	connector "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/connector"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ConnectorMetadataServiceClient is an autogenerated mock type for the ConnectorMetadataServiceClient type
type ConnectorMetadataServiceClient struct {
	mock.Mock
}

type ConnectorMetadataServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectorMetadataServiceClient) EXPECT() *ConnectorMetadataServiceClient_Expecter {
	return &ConnectorMetadataServiceClient_Expecter{mock: &_m.Mock}
}

// GetConnector provides a mock function with given fields: ctx, in, opts
func (_m *ConnectorMetadataServiceClient) GetConnector(ctx context.Context, in *connector.GetConnectorRequest, opts ...grpc.CallOption) (*connector.GetConnectorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnector")
	}

	var r0 *connector.GetConnectorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connector.GetConnectorRequest, ...grpc.CallOption) (*connector.GetConnectorResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connector.GetConnectorRequest, ...grpc.CallOption) *connector.GetConnectorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.GetConnectorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connector.GetConnectorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectorMetadataServiceClient_GetConnector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnector'
type ConnectorMetadataServiceClient_GetConnector_Call struct {
	*mock.Call
}

// GetConnector is a helper method to define mock.On call
//   - ctx context.Context
//   - in *connector.GetConnectorRequest
//   - opts ...grpc.CallOption
func (_e *ConnectorMetadataServiceClient_Expecter) GetConnector(ctx interface{}, in interface{}, opts ...interface{}) *ConnectorMetadataServiceClient_GetConnector_Call {
	return &ConnectorMetadataServiceClient_GetConnector_Call{Call: _e.mock.On("GetConnector",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ConnectorMetadataServiceClient_GetConnector_Call) Run(run func(ctx context.Context, in *connector.GetConnectorRequest, opts ...grpc.CallOption)) *ConnectorMetadataServiceClient_GetConnector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*connector.GetConnectorRequest), variadicArgs...)
	})
	return _c
}

func (_c *ConnectorMetadataServiceClient_GetConnector_Call) Return(_a0 *connector.GetConnectorResponse, _a1 error) *ConnectorMetadataServiceClient_GetConnector_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConnectorMetadataServiceClient_GetConnector_Call) RunAndReturn(run func(context.Context, *connector.GetConnectorRequest, ...grpc.CallOption) (*connector.GetConnectorResponse, error)) *ConnectorMetadataServiceClient_GetConnector_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectors provides a mock function with given fields: ctx, in, opts
func (_m *ConnectorMetadataServiceClient) ListConnectors(ctx context.Context, in *connector.ListConnectorsRequest, opts ...grpc.CallOption) (*connector.ListConnectorsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectors")
	}

	var r0 *connector.ListConnectorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connector.ListConnectorsRequest, ...grpc.CallOption) (*connector.ListConnectorsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connector.ListConnectorsRequest, ...grpc.CallOption) *connector.ListConnectorsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connector.ListConnectorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connector.ListConnectorsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectorMetadataServiceClient_ListConnectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectors'
type ConnectorMetadataServiceClient_ListConnectors_Call struct {
	*mock.Call
}

// ListConnectors is a helper method to define mock.On call
//   - ctx context.Context
//   - in *connector.ListConnectorsRequest
//   - opts ...grpc.CallOption
func (_e *ConnectorMetadataServiceClient_Expecter) ListConnectors(ctx interface{}, in interface{}, opts ...interface{}) *ConnectorMetadataServiceClient_ListConnectors_Call {
	return &ConnectorMetadataServiceClient_ListConnectors_Call{Call: _e.mock.On("ListConnectors",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ConnectorMetadataServiceClient_ListConnectors_Call) Run(run func(ctx context.Context, in *connector.ListConnectorsRequest, opts ...grpc.CallOption)) *ConnectorMetadataServiceClient_ListConnectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*connector.ListConnectorsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ConnectorMetadataServiceClient_ListConnectors_Call) Return(_a0 *connector.ListConnectorsResponse, _a1 error) *ConnectorMetadataServiceClient_ListConnectors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConnectorMetadataServiceClient_ListConnectors_Call) RunAndReturn(run func(context.Context, *connector.ListConnectorsRequest, ...grpc.CallOption) (*connector.ListConnectorsResponse, error)) *ConnectorMetadataServiceClient_ListConnectors_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectorMetadataServiceClient creates a new instance of ConnectorMetadataServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectorMetadataServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectorMetadataServiceClient {
	mock := &ConnectorMetadataServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
