// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
	mock "github.com/stretchr/testify/mock"
)

// ExternalPluginServiceServer is an autogenerated mock type for the ExternalPluginServiceServer type
type ExternalPluginServiceServer struct {
	mock.Mock
}

type ExternalPluginServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ExternalPluginServiceServer) EXPECT() *ExternalPluginServiceServer_Expecter {
	return &ExternalPluginServiceServer_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *ExternalPluginServiceServer) CreateTask(_a0 context.Context, _a1 *service.TaskCreateRequest) (*service.TaskCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *service.TaskCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskCreateRequest) (*service.TaskCreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskCreateRequest) *service.TaskCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExternalPluginServiceServer_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type ExternalPluginServiceServer_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *service.TaskCreateRequest
func (_e *ExternalPluginServiceServer_Expecter) CreateTask(_a0 interface{}, _a1 interface{}) *ExternalPluginServiceServer_CreateTask_Call {
	return &ExternalPluginServiceServer_CreateTask_Call{Call: _e.mock.On("CreateTask", _a0, _a1)}
}

func (_c *ExternalPluginServiceServer_CreateTask_Call) Run(run func(_a0 context.Context, _a1 *service.TaskCreateRequest)) *ExternalPluginServiceServer_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*service.TaskCreateRequest))
	})
	return _c
}

func (_c *ExternalPluginServiceServer_CreateTask_Call) Return(_a0 *service.TaskCreateResponse, _a1 error) *ExternalPluginServiceServer_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExternalPluginServiceServer_CreateTask_Call) RunAndReturn(run func(context.Context, *service.TaskCreateRequest) (*service.TaskCreateResponse, error)) *ExternalPluginServiceServer_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: _a0, _a1
func (_m *ExternalPluginServiceServer) DeleteTask(_a0 context.Context, _a1 *service.TaskDeleteRequest) (*service.TaskDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *service.TaskDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskDeleteRequest) (*service.TaskDeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskDeleteRequest) *service.TaskDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExternalPluginServiceServer_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type ExternalPluginServiceServer_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *service.TaskDeleteRequest
func (_e *ExternalPluginServiceServer_Expecter) DeleteTask(_a0 interface{}, _a1 interface{}) *ExternalPluginServiceServer_DeleteTask_Call {
	return &ExternalPluginServiceServer_DeleteTask_Call{Call: _e.mock.On("DeleteTask", _a0, _a1)}
}

func (_c *ExternalPluginServiceServer_DeleteTask_Call) Run(run func(_a0 context.Context, _a1 *service.TaskDeleteRequest)) *ExternalPluginServiceServer_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*service.TaskDeleteRequest))
	})
	return _c
}

func (_c *ExternalPluginServiceServer_DeleteTask_Call) Return(_a0 *service.TaskDeleteResponse, _a1 error) *ExternalPluginServiceServer_DeleteTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExternalPluginServiceServer_DeleteTask_Call) RunAndReturn(run func(context.Context, *service.TaskDeleteRequest) (*service.TaskDeleteResponse, error)) *ExternalPluginServiceServer_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: _a0, _a1
func (_m *ExternalPluginServiceServer) GetTask(_a0 context.Context, _a1 *service.TaskGetRequest) (*service.TaskGetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *service.TaskGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskGetRequest) (*service.TaskGetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskGetRequest) *service.TaskGetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExternalPluginServiceServer_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type ExternalPluginServiceServer_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *service.TaskGetRequest
func (_e *ExternalPluginServiceServer_Expecter) GetTask(_a0 interface{}, _a1 interface{}) *ExternalPluginServiceServer_GetTask_Call {
	return &ExternalPluginServiceServer_GetTask_Call{Call: _e.mock.On("GetTask", _a0, _a1)}
}

func (_c *ExternalPluginServiceServer_GetTask_Call) Run(run func(_a0 context.Context, _a1 *service.TaskGetRequest)) *ExternalPluginServiceServer_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*service.TaskGetRequest))
	})
	return _c
}

func (_c *ExternalPluginServiceServer_GetTask_Call) Return(_a0 *service.TaskGetResponse, _a1 error) *ExternalPluginServiceServer_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExternalPluginServiceServer_GetTask_Call) RunAndReturn(run func(context.Context, *service.TaskGetRequest) (*service.TaskGetResponse, error)) *ExternalPluginServiceServer_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewExternalPluginServiceServer creates a new instance of ExternalPluginServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExternalPluginServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExternalPluginServiceServer {
	mock := &ExternalPluginServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
