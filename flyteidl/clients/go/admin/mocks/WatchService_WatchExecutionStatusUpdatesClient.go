// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metadata "google.golang.org/grpc/metadata"

	watch "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/watch"
)

// WatchService_WatchExecutionStatusUpdatesClient is an autogenerated mock type for the WatchService_WatchExecutionStatusUpdatesClient type
type WatchService_WatchExecutionStatusUpdatesClient struct {
	mock.Mock
}

type WatchService_WatchExecutionStatusUpdatesClient_CloseSend struct {
	*mock.Call
}

func (_m WatchService_WatchExecutionStatusUpdatesClient_CloseSend) Return(_a0 error) *WatchService_WatchExecutionStatusUpdatesClient_CloseSend {
	return &WatchService_WatchExecutionStatusUpdatesClient_CloseSend{Call: _m.Call.Return(_a0)}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnCloseSend() *WatchService_WatchExecutionStatusUpdatesClient_CloseSend {
	c_call := _m.On("CloseSend")
	return &WatchService_WatchExecutionStatusUpdatesClient_CloseSend{Call: c_call}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnCloseSendMatch(matchers ...interface{}) *WatchService_WatchExecutionStatusUpdatesClient_CloseSend {
	c_call := _m.On("CloseSend", matchers...)
	return &WatchService_WatchExecutionStatusUpdatesClient_CloseSend{Call: c_call}
}

// CloseSend provides a mock function with given fields:
func (_m *WatchService_WatchExecutionStatusUpdatesClient) CloseSend() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type WatchService_WatchExecutionStatusUpdatesClient_Context struct {
	*mock.Call
}

func (_m WatchService_WatchExecutionStatusUpdatesClient_Context) Return(_a0 context.Context) *WatchService_WatchExecutionStatusUpdatesClient_Context {
	return &WatchService_WatchExecutionStatusUpdatesClient_Context{Call: _m.Call.Return(_a0)}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnContext() *WatchService_WatchExecutionStatusUpdatesClient_Context {
	c_call := _m.On("Context")
	return &WatchService_WatchExecutionStatusUpdatesClient_Context{Call: c_call}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnContextMatch(matchers ...interface{}) *WatchService_WatchExecutionStatusUpdatesClient_Context {
	c_call := _m.On("Context", matchers...)
	return &WatchService_WatchExecutionStatusUpdatesClient_Context{Call: c_call}
}

// Context provides a mock function with given fields:
func (_m *WatchService_WatchExecutionStatusUpdatesClient) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

type WatchService_WatchExecutionStatusUpdatesClient_Header struct {
	*mock.Call
}

func (_m WatchService_WatchExecutionStatusUpdatesClient_Header) Return(_a0 metadata.MD, _a1 error) *WatchService_WatchExecutionStatusUpdatesClient_Header {
	return &WatchService_WatchExecutionStatusUpdatesClient_Header{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnHeader() *WatchService_WatchExecutionStatusUpdatesClient_Header {
	c_call := _m.On("Header")
	return &WatchService_WatchExecutionStatusUpdatesClient_Header{Call: c_call}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnHeaderMatch(matchers ...interface{}) *WatchService_WatchExecutionStatusUpdatesClient_Header {
	c_call := _m.On("Header", matchers...)
	return &WatchService_WatchExecutionStatusUpdatesClient_Header{Call: c_call}
}

// Header provides a mock function with given fields:
func (_m *WatchService_WatchExecutionStatusUpdatesClient) Header() (metadata.MD, error) {
	ret := _m.Called()

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type WatchService_WatchExecutionStatusUpdatesClient_Recv struct {
	*mock.Call
}

func (_m WatchService_WatchExecutionStatusUpdatesClient_Recv) Return(_a0 *watch.WatchExecutionStatusUpdatesResponse, _a1 error) *WatchService_WatchExecutionStatusUpdatesClient_Recv {
	return &WatchService_WatchExecutionStatusUpdatesClient_Recv{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnRecv() *WatchService_WatchExecutionStatusUpdatesClient_Recv {
	c_call := _m.On("Recv")
	return &WatchService_WatchExecutionStatusUpdatesClient_Recv{Call: c_call}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnRecvMatch(matchers ...interface{}) *WatchService_WatchExecutionStatusUpdatesClient_Recv {
	c_call := _m.On("Recv", matchers...)
	return &WatchService_WatchExecutionStatusUpdatesClient_Recv{Call: c_call}
}

// Recv provides a mock function with given fields:
func (_m *WatchService_WatchExecutionStatusUpdatesClient) Recv() (*watch.WatchExecutionStatusUpdatesResponse, error) {
	ret := _m.Called()

	var r0 *watch.WatchExecutionStatusUpdatesResponse
	if rf, ok := ret.Get(0).(func() *watch.WatchExecutionStatusUpdatesResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*watch.WatchExecutionStatusUpdatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type WatchService_WatchExecutionStatusUpdatesClient_RecvMsg struct {
	*mock.Call
}

func (_m WatchService_WatchExecutionStatusUpdatesClient_RecvMsg) Return(_a0 error) *WatchService_WatchExecutionStatusUpdatesClient_RecvMsg {
	return &WatchService_WatchExecutionStatusUpdatesClient_RecvMsg{Call: _m.Call.Return(_a0)}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnRecvMsg(m interface{}) *WatchService_WatchExecutionStatusUpdatesClient_RecvMsg {
	c_call := _m.On("RecvMsg", m)
	return &WatchService_WatchExecutionStatusUpdatesClient_RecvMsg{Call: c_call}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnRecvMsgMatch(matchers ...interface{}) *WatchService_WatchExecutionStatusUpdatesClient_RecvMsg {
	c_call := _m.On("RecvMsg", matchers...)
	return &WatchService_WatchExecutionStatusUpdatesClient_RecvMsg{Call: c_call}
}

// RecvMsg provides a mock function with given fields: m
func (_m *WatchService_WatchExecutionStatusUpdatesClient) RecvMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type WatchService_WatchExecutionStatusUpdatesClient_SendMsg struct {
	*mock.Call
}

func (_m WatchService_WatchExecutionStatusUpdatesClient_SendMsg) Return(_a0 error) *WatchService_WatchExecutionStatusUpdatesClient_SendMsg {
	return &WatchService_WatchExecutionStatusUpdatesClient_SendMsg{Call: _m.Call.Return(_a0)}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnSendMsg(m interface{}) *WatchService_WatchExecutionStatusUpdatesClient_SendMsg {
	c_call := _m.On("SendMsg", m)
	return &WatchService_WatchExecutionStatusUpdatesClient_SendMsg{Call: c_call}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnSendMsgMatch(matchers ...interface{}) *WatchService_WatchExecutionStatusUpdatesClient_SendMsg {
	c_call := _m.On("SendMsg", matchers...)
	return &WatchService_WatchExecutionStatusUpdatesClient_SendMsg{Call: c_call}
}

// SendMsg provides a mock function with given fields: m
func (_m *WatchService_WatchExecutionStatusUpdatesClient) SendMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type WatchService_WatchExecutionStatusUpdatesClient_Trailer struct {
	*mock.Call
}

func (_m WatchService_WatchExecutionStatusUpdatesClient_Trailer) Return(_a0 metadata.MD) *WatchService_WatchExecutionStatusUpdatesClient_Trailer {
	return &WatchService_WatchExecutionStatusUpdatesClient_Trailer{Call: _m.Call.Return(_a0)}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnTrailer() *WatchService_WatchExecutionStatusUpdatesClient_Trailer {
	c_call := _m.On("Trailer")
	return &WatchService_WatchExecutionStatusUpdatesClient_Trailer{Call: c_call}
}

func (_m *WatchService_WatchExecutionStatusUpdatesClient) OnTrailerMatch(matchers ...interface{}) *WatchService_WatchExecutionStatusUpdatesClient_Trailer {
	c_call := _m.On("Trailer", matchers...)
	return &WatchService_WatchExecutionStatusUpdatesClient_Trailer{Call: c_call}
}

// Trailer provides a mock function with given fields:
func (_m *WatchService_WatchExecutionStatusUpdatesClient) Trailer() metadata.MD {
	ret := _m.Called()

	var r0 metadata.MD
	if rf, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}

	return r0
}
