// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
)

// AuthMetadataServiceClient is an autogenerated mock type for the AuthMetadataServiceClient type
type AuthMetadataServiceClient struct {
	mock.Mock
}

type AuthMetadataServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthMetadataServiceClient) EXPECT() *AuthMetadataServiceClient_Expecter {
	return &AuthMetadataServiceClient_Expecter{mock: &_m.Mock}
}

// GetOAuth2Metadata provides a mock function with given fields: ctx, in, opts
func (_m *AuthMetadataServiceClient) GetOAuth2Metadata(ctx context.Context, in *service.OAuth2MetadataRequest, opts ...grpc.CallOption) (*service.OAuth2MetadataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuth2Metadata")
	}

	var r0 *service.OAuth2MetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.OAuth2MetadataRequest, ...grpc.CallOption) (*service.OAuth2MetadataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.OAuth2MetadataRequest, ...grpc.CallOption) *service.OAuth2MetadataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.OAuth2MetadataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.OAuth2MetadataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthMetadataServiceClient_GetOAuth2Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOAuth2Metadata'
type AuthMetadataServiceClient_GetOAuth2Metadata_Call struct {
	*mock.Call
}

// GetOAuth2Metadata is a helper method to define mock.On call
//   - ctx context.Context
//   - in *service.OAuth2MetadataRequest
//   - opts ...grpc.CallOption
func (_e *AuthMetadataServiceClient_Expecter) GetOAuth2Metadata(ctx interface{}, in interface{}, opts ...interface{}) *AuthMetadataServiceClient_GetOAuth2Metadata_Call {
	return &AuthMetadataServiceClient_GetOAuth2Metadata_Call{Call: _e.mock.On("GetOAuth2Metadata",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthMetadataServiceClient_GetOAuth2Metadata_Call) Run(run func(ctx context.Context, in *service.OAuth2MetadataRequest, opts ...grpc.CallOption)) *AuthMetadataServiceClient_GetOAuth2Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*service.OAuth2MetadataRequest), variadicArgs...)
	})
	return _c
}

func (_c *AuthMetadataServiceClient_GetOAuth2Metadata_Call) Return(_a0 *service.OAuth2MetadataResponse, _a1 error) *AuthMetadataServiceClient_GetOAuth2Metadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthMetadataServiceClient_GetOAuth2Metadata_Call) RunAndReturn(run func(context.Context, *service.OAuth2MetadataRequest, ...grpc.CallOption) (*service.OAuth2MetadataResponse, error)) *AuthMetadataServiceClient_GetOAuth2Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicClientConfig provides a mock function with given fields: ctx, in, opts
func (_m *AuthMetadataServiceClient) GetPublicClientConfig(ctx context.Context, in *service.PublicClientAuthConfigRequest, opts ...grpc.CallOption) (*service.PublicClientAuthConfigResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicClientConfig")
	}

	var r0 *service.PublicClientAuthConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.PublicClientAuthConfigRequest, ...grpc.CallOption) (*service.PublicClientAuthConfigResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.PublicClientAuthConfigRequest, ...grpc.CallOption) *service.PublicClientAuthConfigResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.PublicClientAuthConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.PublicClientAuthConfigRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthMetadataServiceClient_GetPublicClientConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicClientConfig'
type AuthMetadataServiceClient_GetPublicClientConfig_Call struct {
	*mock.Call
}

// GetPublicClientConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - in *service.PublicClientAuthConfigRequest
//   - opts ...grpc.CallOption
func (_e *AuthMetadataServiceClient_Expecter) GetPublicClientConfig(ctx interface{}, in interface{}, opts ...interface{}) *AuthMetadataServiceClient_GetPublicClientConfig_Call {
	return &AuthMetadataServiceClient_GetPublicClientConfig_Call{Call: _e.mock.On("GetPublicClientConfig",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AuthMetadataServiceClient_GetPublicClientConfig_Call) Run(run func(ctx context.Context, in *service.PublicClientAuthConfigRequest, opts ...grpc.CallOption)) *AuthMetadataServiceClient_GetPublicClientConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*service.PublicClientAuthConfigRequest), variadicArgs...)
	})
	return _c
}

func (_c *AuthMetadataServiceClient_GetPublicClientConfig_Call) Return(_a0 *service.PublicClientAuthConfigResponse, _a1 error) *AuthMetadataServiceClient_GetPublicClientConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthMetadataServiceClient_GetPublicClientConfig_Call) RunAndReturn(run func(context.Context, *service.PublicClientAuthConfigRequest, ...grpc.CallOption) (*service.PublicClientAuthConfigResponse, error)) *AuthMetadataServiceClient_GetPublicClientConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthMetadataServiceClient creates a new instance of AuthMetadataServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthMetadataServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthMetadataServiceClient {
	mock := &AuthMetadataServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
