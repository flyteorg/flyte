// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
)

// AsyncAgentServiceClient is an autogenerated mock type for the AsyncAgentServiceClient type
type AsyncAgentServiceClient struct {
	mock.Mock
}

type AsyncAgentServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AsyncAgentServiceClient) EXPECT() *AsyncAgentServiceClient_Expecter {
	return &AsyncAgentServiceClient_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: ctx, in, opts
func (_m *AsyncAgentServiceClient) CreateTask(ctx context.Context, in *admin.CreateTaskRequest, opts ...grpc.CallOption) (*admin.CreateTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *admin.CreateTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateTaskRequest, ...grpc.CallOption) (*admin.CreateTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateTaskRequest, ...grpc.CallOption) *admin.CreateTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CreateTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.CreateTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncAgentServiceClient_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type AsyncAgentServiceClient_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.CreateTaskRequest
//   - opts ...grpc.CallOption
func (_e *AsyncAgentServiceClient_Expecter) CreateTask(ctx interface{}, in interface{}, opts ...interface{}) *AsyncAgentServiceClient_CreateTask_Call {
	return &AsyncAgentServiceClient_CreateTask_Call{Call: _e.mock.On("CreateTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AsyncAgentServiceClient_CreateTask_Call) Run(run func(ctx context.Context, in *admin.CreateTaskRequest, opts ...grpc.CallOption)) *AsyncAgentServiceClient_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.CreateTaskRequest), variadicArgs...)
	})
	return _c
}

func (_c *AsyncAgentServiceClient_CreateTask_Call) Return(_a0 *admin.CreateTaskResponse, _a1 error) *AsyncAgentServiceClient_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncAgentServiceClient_CreateTask_Call) RunAndReturn(run func(context.Context, *admin.CreateTaskRequest, ...grpc.CallOption) (*admin.CreateTaskResponse, error)) *AsyncAgentServiceClient_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: ctx, in, opts
func (_m *AsyncAgentServiceClient) DeleteTask(ctx context.Context, in *admin.DeleteTaskRequest, opts ...grpc.CallOption) (*admin.DeleteTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *admin.DeleteTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteTaskRequest, ...grpc.CallOption) (*admin.DeleteTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteTaskRequest, ...grpc.CallOption) *admin.DeleteTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DeleteTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.DeleteTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncAgentServiceClient_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type AsyncAgentServiceClient_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.DeleteTaskRequest
//   - opts ...grpc.CallOption
func (_e *AsyncAgentServiceClient_Expecter) DeleteTask(ctx interface{}, in interface{}, opts ...interface{}) *AsyncAgentServiceClient_DeleteTask_Call {
	return &AsyncAgentServiceClient_DeleteTask_Call{Call: _e.mock.On("DeleteTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AsyncAgentServiceClient_DeleteTask_Call) Run(run func(ctx context.Context, in *admin.DeleteTaskRequest, opts ...grpc.CallOption)) *AsyncAgentServiceClient_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.DeleteTaskRequest), variadicArgs...)
	})
	return _c
}

func (_c *AsyncAgentServiceClient_DeleteTask_Call) Return(_a0 *admin.DeleteTaskResponse, _a1 error) *AsyncAgentServiceClient_DeleteTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncAgentServiceClient_DeleteTask_Call) RunAndReturn(run func(context.Context, *admin.DeleteTaskRequest, ...grpc.CallOption) (*admin.DeleteTaskResponse, error)) *AsyncAgentServiceClient_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: ctx, in, opts
func (_m *AsyncAgentServiceClient) GetTask(ctx context.Context, in *admin.GetTaskRequest, opts ...grpc.CallOption) (*admin.GetTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *admin.GetTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskRequest, ...grpc.CallOption) (*admin.GetTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskRequest, ...grpc.CallOption) *admin.GetTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncAgentServiceClient_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type AsyncAgentServiceClient_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.GetTaskRequest
//   - opts ...grpc.CallOption
func (_e *AsyncAgentServiceClient_Expecter) GetTask(ctx interface{}, in interface{}, opts ...interface{}) *AsyncAgentServiceClient_GetTask_Call {
	return &AsyncAgentServiceClient_GetTask_Call{Call: _e.mock.On("GetTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AsyncAgentServiceClient_GetTask_Call) Run(run func(ctx context.Context, in *admin.GetTaskRequest, opts ...grpc.CallOption)) *AsyncAgentServiceClient_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.GetTaskRequest), variadicArgs...)
	})
	return _c
}

func (_c *AsyncAgentServiceClient_GetTask_Call) Return(_a0 *admin.GetTaskResponse, _a1 error) *AsyncAgentServiceClient_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncAgentServiceClient_GetTask_Call) RunAndReturn(run func(context.Context, *admin.GetTaskRequest, ...grpc.CallOption) (*admin.GetTaskResponse, error)) *AsyncAgentServiceClient_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskLogs provides a mock function with given fields: ctx, in, opts
func (_m *AsyncAgentServiceClient) GetTaskLogs(ctx context.Context, in *admin.GetTaskLogsRequest, opts ...grpc.CallOption) (service.AsyncAgentService_GetTaskLogsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskLogs")
	}

	var r0 service.AsyncAgentService_GetTaskLogsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskLogsRequest, ...grpc.CallOption) (service.AsyncAgentService_GetTaskLogsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskLogsRequest, ...grpc.CallOption) service.AsyncAgentService_GetTaskLogsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.AsyncAgentService_GetTaskLogsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetTaskLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncAgentServiceClient_GetTaskLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskLogs'
type AsyncAgentServiceClient_GetTaskLogs_Call struct {
	*mock.Call
}

// GetTaskLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.GetTaskLogsRequest
//   - opts ...grpc.CallOption
func (_e *AsyncAgentServiceClient_Expecter) GetTaskLogs(ctx interface{}, in interface{}, opts ...interface{}) *AsyncAgentServiceClient_GetTaskLogs_Call {
	return &AsyncAgentServiceClient_GetTaskLogs_Call{Call: _e.mock.On("GetTaskLogs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AsyncAgentServiceClient_GetTaskLogs_Call) Run(run func(ctx context.Context, in *admin.GetTaskLogsRequest, opts ...grpc.CallOption)) *AsyncAgentServiceClient_GetTaskLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.GetTaskLogsRequest), variadicArgs...)
	})
	return _c
}

func (_c *AsyncAgentServiceClient_GetTaskLogs_Call) Return(_a0 service.AsyncAgentService_GetTaskLogsClient, _a1 error) *AsyncAgentServiceClient_GetTaskLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncAgentServiceClient_GetTaskLogs_Call) RunAndReturn(run func(context.Context, *admin.GetTaskLogsRequest, ...grpc.CallOption) (service.AsyncAgentService_GetTaskLogsClient, error)) *AsyncAgentServiceClient_GetTaskLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskMetrics provides a mock function with given fields: ctx, in, opts
func (_m *AsyncAgentServiceClient) GetTaskMetrics(ctx context.Context, in *admin.GetTaskMetricsRequest, opts ...grpc.CallOption) (*admin.GetTaskMetricsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskMetrics")
	}

	var r0 *admin.GetTaskMetricsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskMetricsRequest, ...grpc.CallOption) (*admin.GetTaskMetricsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskMetricsRequest, ...grpc.CallOption) *admin.GetTaskMetricsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetTaskMetricsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetTaskMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncAgentServiceClient_GetTaskMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskMetrics'
type AsyncAgentServiceClient_GetTaskMetrics_Call struct {
	*mock.Call
}

// GetTaskMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.GetTaskMetricsRequest
//   - opts ...grpc.CallOption
func (_e *AsyncAgentServiceClient_Expecter) GetTaskMetrics(ctx interface{}, in interface{}, opts ...interface{}) *AsyncAgentServiceClient_GetTaskMetrics_Call {
	return &AsyncAgentServiceClient_GetTaskMetrics_Call{Call: _e.mock.On("GetTaskMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AsyncAgentServiceClient_GetTaskMetrics_Call) Run(run func(ctx context.Context, in *admin.GetTaskMetricsRequest, opts ...grpc.CallOption)) *AsyncAgentServiceClient_GetTaskMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.GetTaskMetricsRequest), variadicArgs...)
	})
	return _c
}

func (_c *AsyncAgentServiceClient_GetTaskMetrics_Call) Return(_a0 *admin.GetTaskMetricsResponse, _a1 error) *AsyncAgentServiceClient_GetTaskMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncAgentServiceClient_GetTaskMetrics_Call) RunAndReturn(run func(context.Context, *admin.GetTaskMetricsRequest, ...grpc.CallOption) (*admin.GetTaskMetricsResponse, error)) *AsyncAgentServiceClient_GetTaskMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewAsyncAgentServiceClient creates a new instance of AsyncAgentServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsyncAgentServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsyncAgentServiceClient {
	mock := &AsyncAgentServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
