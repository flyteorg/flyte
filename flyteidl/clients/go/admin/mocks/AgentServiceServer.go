// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// ConnectorServiceServer is an autogenerated mock type for the ConnectorServiceServer type
type ConnectorServiceServer struct {
	mock.Mock
}

type ConnectorServiceServer_CreateTask struct {
	*mock.Call
}

func (_m ConnectorServiceServer_CreateTask) Return(_a0 *admin.CreateTaskResponse, _a1 error) *ConnectorServiceServer_CreateTask {
	return &ConnectorServiceServer_CreateTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConnectorServiceServer) OnCreateTask(_a0 context.Context, _a1 *admin.CreateTaskRequest) *ConnectorServiceServer_CreateTask {
	c_call := _m.On("CreateTask", _a0, _a1)
	return &ConnectorServiceServer_CreateTask{Call: c_call}
}

func (_m *ConnectorServiceServer) OnCreateTaskMatch(matchers ...interface{}) *ConnectorServiceServer_CreateTask {
	c_call := _m.On("CreateTask", matchers...)
	return &ConnectorServiceServer_CreateTask{Call: c_call}
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *ConnectorServiceServer) CreateTask(_a0 context.Context, _a1 *admin.CreateTaskRequest) (*admin.CreateTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *admin.CreateTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateTaskRequest) *admin.CreateTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CreateTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.CreateTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ConnectorServiceServer_DeleteTask struct {
	*mock.Call
}

func (_m ConnectorServiceServer_DeleteTask) Return(_a0 *admin.DeleteTaskResponse, _a1 error) *ConnectorServiceServer_DeleteTask {
	return &ConnectorServiceServer_DeleteTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConnectorServiceServer) OnDeleteTask(_a0 context.Context, _a1 *admin.DeleteTaskRequest) *ConnectorServiceServer_DeleteTask {
	c_call := _m.On("DeleteTask", _a0, _a1)
	return &ConnectorServiceServer_DeleteTask{Call: c_call}
}

func (_m *ConnectorServiceServer) OnDeleteTaskMatch(matchers ...interface{}) *ConnectorServiceServer_DeleteTask {
	c_call := _m.On("DeleteTask", matchers...)
	return &ConnectorServiceServer_DeleteTask{Call: c_call}
}

// DeleteTask provides a mock function with given fields: _a0, _a1
func (_m *ConnectorServiceServer) DeleteTask(_a0 context.Context, _a1 *admin.DeleteTaskRequest) (*admin.DeleteTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *admin.DeleteTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteTaskRequest) *admin.DeleteTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DeleteTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.DeleteTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ConnectorServiceServer_GetTask struct {
	*mock.Call
}

func (_m ConnectorServiceServer_GetTask) Return(_a0 *admin.GetTaskResponse, _a1 error) *ConnectorServiceServer_GetTask {
	return &ConnectorServiceServer_GetTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConnectorServiceServer) OnGetTask(_a0 context.Context, _a1 *admin.GetTaskRequest) *ConnectorServiceServer_GetTask {
	c_call := _m.On("GetTask", _a0, _a1)
	return &ConnectorServiceServer_GetTask{Call: c_call}
}

func (_m *ConnectorServiceServer) OnGetTaskMatch(matchers ...interface{}) *ConnectorServiceServer_GetTask {
	c_call := _m.On("GetTask", matchers...)
	return &ConnectorServiceServer_GetTask{Call: c_call}
}

// GetTask provides a mock function with given fields: _a0, _a1
func (_m *ConnectorServiceServer) GetTask(_a0 context.Context, _a1 *admin.GetTaskRequest) (*admin.GetTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *admin.GetTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskRequest) *admin.GetTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
