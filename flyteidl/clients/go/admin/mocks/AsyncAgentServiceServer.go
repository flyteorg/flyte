// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
)

// AsyncAgentServiceServer is an autogenerated mock type for the AsyncAgentServiceServer type
type AsyncAgentServiceServer struct {
	mock.Mock
}

type AsyncAgentServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *AsyncAgentServiceServer) EXPECT() *AsyncAgentServiceServer_Expecter {
	return &AsyncAgentServiceServer_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *AsyncAgentServiceServer) CreateTask(_a0 context.Context, _a1 *admin.CreateTaskRequest) (*admin.CreateTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *admin.CreateTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateTaskRequest) (*admin.CreateTaskResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateTaskRequest) *admin.CreateTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CreateTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.CreateTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncAgentServiceServer_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type AsyncAgentServiceServer_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.CreateTaskRequest
func (_e *AsyncAgentServiceServer_Expecter) CreateTask(_a0 interface{}, _a1 interface{}) *AsyncAgentServiceServer_CreateTask_Call {
	return &AsyncAgentServiceServer_CreateTask_Call{Call: _e.mock.On("CreateTask", _a0, _a1)}
}

func (_c *AsyncAgentServiceServer_CreateTask_Call) Run(run func(_a0 context.Context, _a1 *admin.CreateTaskRequest)) *AsyncAgentServiceServer_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateTaskRequest))
	})
	return _c
}

func (_c *AsyncAgentServiceServer_CreateTask_Call) Return(_a0 *admin.CreateTaskResponse, _a1 error) *AsyncAgentServiceServer_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncAgentServiceServer_CreateTask_Call) RunAndReturn(run func(context.Context, *admin.CreateTaskRequest) (*admin.CreateTaskResponse, error)) *AsyncAgentServiceServer_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: _a0, _a1
func (_m *AsyncAgentServiceServer) DeleteTask(_a0 context.Context, _a1 *admin.DeleteTaskRequest) (*admin.DeleteTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *admin.DeleteTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteTaskRequest) (*admin.DeleteTaskResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteTaskRequest) *admin.DeleteTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DeleteTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.DeleteTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncAgentServiceServer_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type AsyncAgentServiceServer_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.DeleteTaskRequest
func (_e *AsyncAgentServiceServer_Expecter) DeleteTask(_a0 interface{}, _a1 interface{}) *AsyncAgentServiceServer_DeleteTask_Call {
	return &AsyncAgentServiceServer_DeleteTask_Call{Call: _e.mock.On("DeleteTask", _a0, _a1)}
}

func (_c *AsyncAgentServiceServer_DeleteTask_Call) Run(run func(_a0 context.Context, _a1 *admin.DeleteTaskRequest)) *AsyncAgentServiceServer_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteTaskRequest))
	})
	return _c
}

func (_c *AsyncAgentServiceServer_DeleteTask_Call) Return(_a0 *admin.DeleteTaskResponse, _a1 error) *AsyncAgentServiceServer_DeleteTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncAgentServiceServer_DeleteTask_Call) RunAndReturn(run func(context.Context, *admin.DeleteTaskRequest) (*admin.DeleteTaskResponse, error)) *AsyncAgentServiceServer_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: _a0, _a1
func (_m *AsyncAgentServiceServer) GetTask(_a0 context.Context, _a1 *admin.GetTaskRequest) (*admin.GetTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *admin.GetTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskRequest) (*admin.GetTaskResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskRequest) *admin.GetTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncAgentServiceServer_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type AsyncAgentServiceServer_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.GetTaskRequest
func (_e *AsyncAgentServiceServer_Expecter) GetTask(_a0 interface{}, _a1 interface{}) *AsyncAgentServiceServer_GetTask_Call {
	return &AsyncAgentServiceServer_GetTask_Call{Call: _e.mock.On("GetTask", _a0, _a1)}
}

func (_c *AsyncAgentServiceServer_GetTask_Call) Run(run func(_a0 context.Context, _a1 *admin.GetTaskRequest)) *AsyncAgentServiceServer_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetTaskRequest))
	})
	return _c
}

func (_c *AsyncAgentServiceServer_GetTask_Call) Return(_a0 *admin.GetTaskResponse, _a1 error) *AsyncAgentServiceServer_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncAgentServiceServer_GetTask_Call) RunAndReturn(run func(context.Context, *admin.GetTaskRequest) (*admin.GetTaskResponse, error)) *AsyncAgentServiceServer_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskLogs provides a mock function with given fields: _a0, _a1
func (_m *AsyncAgentServiceServer) GetTaskLogs(_a0 *admin.GetTaskLogsRequest, _a1 service.AsyncAgentService_GetTaskLogsServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*admin.GetTaskLogsRequest, service.AsyncAgentService_GetTaskLogsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AsyncAgentServiceServer_GetTaskLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskLogs'
type AsyncAgentServiceServer_GetTaskLogs_Call struct {
	*mock.Call
}

// GetTaskLogs is a helper method to define mock.On call
//   - _a0 *admin.GetTaskLogsRequest
//   - _a1 service.AsyncAgentService_GetTaskLogsServer
func (_e *AsyncAgentServiceServer_Expecter) GetTaskLogs(_a0 interface{}, _a1 interface{}) *AsyncAgentServiceServer_GetTaskLogs_Call {
	return &AsyncAgentServiceServer_GetTaskLogs_Call{Call: _e.mock.On("GetTaskLogs", _a0, _a1)}
}

func (_c *AsyncAgentServiceServer_GetTaskLogs_Call) Run(run func(_a0 *admin.GetTaskLogsRequest, _a1 service.AsyncAgentService_GetTaskLogsServer)) *AsyncAgentServiceServer_GetTaskLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*admin.GetTaskLogsRequest), args[1].(service.AsyncAgentService_GetTaskLogsServer))
	})
	return _c
}

func (_c *AsyncAgentServiceServer_GetTaskLogs_Call) Return(_a0 error) *AsyncAgentServiceServer_GetTaskLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AsyncAgentServiceServer_GetTaskLogs_Call) RunAndReturn(run func(*admin.GetTaskLogsRequest, service.AsyncAgentService_GetTaskLogsServer) error) *AsyncAgentServiceServer_GetTaskLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskMetrics provides a mock function with given fields: _a0, _a1
func (_m *AsyncAgentServiceServer) GetTaskMetrics(_a0 context.Context, _a1 *admin.GetTaskMetricsRequest) (*admin.GetTaskMetricsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskMetrics")
	}

	var r0 *admin.GetTaskMetricsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskMetricsRequest) (*admin.GetTaskMetricsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskMetricsRequest) *admin.GetTaskMetricsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetTaskMetricsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetTaskMetricsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AsyncAgentServiceServer_GetTaskMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskMetrics'
type AsyncAgentServiceServer_GetTaskMetrics_Call struct {
	*mock.Call
}

// GetTaskMetrics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *admin.GetTaskMetricsRequest
func (_e *AsyncAgentServiceServer_Expecter) GetTaskMetrics(_a0 interface{}, _a1 interface{}) *AsyncAgentServiceServer_GetTaskMetrics_Call {
	return &AsyncAgentServiceServer_GetTaskMetrics_Call{Call: _e.mock.On("GetTaskMetrics", _a0, _a1)}
}

func (_c *AsyncAgentServiceServer_GetTaskMetrics_Call) Run(run func(_a0 context.Context, _a1 *admin.GetTaskMetricsRequest)) *AsyncAgentServiceServer_GetTaskMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetTaskMetricsRequest))
	})
	return _c
}

func (_c *AsyncAgentServiceServer_GetTaskMetrics_Call) Return(_a0 *admin.GetTaskMetricsResponse, _a1 error) *AsyncAgentServiceServer_GetTaskMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AsyncAgentServiceServer_GetTaskMetrics_Call) RunAndReturn(run func(context.Context, *admin.GetTaskMetricsRequest) (*admin.GetTaskMetricsResponse, error)) *AsyncAgentServiceServer_GetTaskMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewAsyncAgentServiceServer creates a new instance of AsyncAgentServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsyncAgentServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsyncAgentServiceServer {
	mock := &AsyncAgentServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
