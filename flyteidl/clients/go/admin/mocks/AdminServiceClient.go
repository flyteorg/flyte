// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// AdminServiceClient is an autogenerated mock type for the AdminServiceClient type
type AdminServiceClient struct {
	mock.Mock
}

type AdminServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *AdminServiceClient) EXPECT() *AdminServiceClient_Expecter {
	return &AdminServiceClient_Expecter{mock: &_m.Mock}
}

// CreateExecution provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) CreateExecution(ctx context.Context, in *admin.ExecutionCreateRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExecution")
	}

	var r0 *admin.ExecutionCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionCreateRequest, ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionCreateRequest, ...grpc.CallOption) *admin.ExecutionCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ExecutionCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_CreateExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExecution'
type AdminServiceClient_CreateExecution_Call struct {
	*mock.Call
}

// CreateExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ExecutionCreateRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) CreateExecution(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_CreateExecution_Call {
	return &AdminServiceClient_CreateExecution_Call{Call: _e.mock.On("CreateExecution",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_CreateExecution_Call) Run(run func(ctx context.Context, in *admin.ExecutionCreateRequest, opts ...grpc.CallOption)) *AdminServiceClient_CreateExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ExecutionCreateRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_CreateExecution_Call) Return(_a0 *admin.ExecutionCreateResponse, _a1 error) *AdminServiceClient_CreateExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_CreateExecution_Call) RunAndReturn(run func(context.Context, *admin.ExecutionCreateRequest, ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)) *AdminServiceClient_CreateExecution_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLaunchPlan provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) CreateLaunchPlan(ctx context.Context, in *admin.LaunchPlanCreateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLaunchPlan")
	}

	var r0 *admin.LaunchPlanCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanCreateRequest, ...grpc.CallOption) (*admin.LaunchPlanCreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanCreateRequest, ...grpc.CallOption) *admin.LaunchPlanCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.LaunchPlanCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_CreateLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLaunchPlan'
type AdminServiceClient_CreateLaunchPlan_Call struct {
	*mock.Call
}

// CreateLaunchPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.LaunchPlanCreateRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) CreateLaunchPlan(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_CreateLaunchPlan_Call {
	return &AdminServiceClient_CreateLaunchPlan_Call{Call: _e.mock.On("CreateLaunchPlan",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_CreateLaunchPlan_Call) Run(run func(ctx context.Context, in *admin.LaunchPlanCreateRequest, opts ...grpc.CallOption)) *AdminServiceClient_CreateLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.LaunchPlanCreateRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_CreateLaunchPlan_Call) Return(_a0 *admin.LaunchPlanCreateResponse, _a1 error) *AdminServiceClient_CreateLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_CreateLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.LaunchPlanCreateRequest, ...grpc.CallOption) (*admin.LaunchPlanCreateResponse, error)) *AdminServiceClient_CreateLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNodeEvent provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) CreateNodeEvent(ctx context.Context, in *admin.NodeExecutionEventRequest, opts ...grpc.CallOption) (*admin.NodeExecutionEventResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNodeEvent")
	}

	var r0 *admin.NodeExecutionEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionEventRequest, ...grpc.CallOption) (*admin.NodeExecutionEventResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionEventRequest, ...grpc.CallOption) *admin.NodeExecutionEventResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NodeExecutionEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_CreateNodeEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNodeEvent'
type AdminServiceClient_CreateNodeEvent_Call struct {
	*mock.Call
}

// CreateNodeEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.NodeExecutionEventRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) CreateNodeEvent(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_CreateNodeEvent_Call {
	return &AdminServiceClient_CreateNodeEvent_Call{Call: _e.mock.On("CreateNodeEvent",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_CreateNodeEvent_Call) Run(run func(ctx context.Context, in *admin.NodeExecutionEventRequest, opts ...grpc.CallOption)) *AdminServiceClient_CreateNodeEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.NodeExecutionEventRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_CreateNodeEvent_Call) Return(_a0 *admin.NodeExecutionEventResponse, _a1 error) *AdminServiceClient_CreateNodeEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_CreateNodeEvent_Call) RunAndReturn(run func(context.Context, *admin.NodeExecutionEventRequest, ...grpc.CallOption) (*admin.NodeExecutionEventResponse, error)) *AdminServiceClient_CreateNodeEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTask provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) CreateTask(ctx context.Context, in *admin.TaskCreateRequest, opts ...grpc.CallOption) (*admin.TaskCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *admin.TaskCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskCreateRequest, ...grpc.CallOption) (*admin.TaskCreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskCreateRequest, ...grpc.CallOption) *admin.TaskCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.TaskCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type AdminServiceClient_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.TaskCreateRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) CreateTask(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_CreateTask_Call {
	return &AdminServiceClient_CreateTask_Call{Call: _e.mock.On("CreateTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_CreateTask_Call) Run(run func(ctx context.Context, in *admin.TaskCreateRequest, opts ...grpc.CallOption)) *AdminServiceClient_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.TaskCreateRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_CreateTask_Call) Return(_a0 *admin.TaskCreateResponse, _a1 error) *AdminServiceClient_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_CreateTask_Call) RunAndReturn(run func(context.Context, *admin.TaskCreateRequest, ...grpc.CallOption) (*admin.TaskCreateResponse, error)) *AdminServiceClient_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTaskEvent provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) CreateTaskEvent(ctx context.Context, in *admin.TaskExecutionEventRequest, opts ...grpc.CallOption) (*admin.TaskExecutionEventResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskEvent")
	}

	var r0 *admin.TaskExecutionEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionEventRequest, ...grpc.CallOption) (*admin.TaskExecutionEventResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionEventRequest, ...grpc.CallOption) *admin.TaskExecutionEventResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskExecutionEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.TaskExecutionEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_CreateTaskEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskEvent'
type AdminServiceClient_CreateTaskEvent_Call struct {
	*mock.Call
}

// CreateTaskEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.TaskExecutionEventRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) CreateTaskEvent(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_CreateTaskEvent_Call {
	return &AdminServiceClient_CreateTaskEvent_Call{Call: _e.mock.On("CreateTaskEvent",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_CreateTaskEvent_Call) Run(run func(ctx context.Context, in *admin.TaskExecutionEventRequest, opts ...grpc.CallOption)) *AdminServiceClient_CreateTaskEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.TaskExecutionEventRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_CreateTaskEvent_Call) Return(_a0 *admin.TaskExecutionEventResponse, _a1 error) *AdminServiceClient_CreateTaskEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_CreateTaskEvent_Call) RunAndReturn(run func(context.Context, *admin.TaskExecutionEventRequest, ...grpc.CallOption) (*admin.TaskExecutionEventResponse, error)) *AdminServiceClient_CreateTaskEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkflow provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) CreateWorkflow(ctx context.Context, in *admin.WorkflowCreateRequest, opts ...grpc.CallOption) (*admin.WorkflowCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkflow")
	}

	var r0 *admin.WorkflowCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowCreateRequest, ...grpc.CallOption) (*admin.WorkflowCreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowCreateRequest, ...grpc.CallOption) *admin.WorkflowCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_CreateWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkflow'
type AdminServiceClient_CreateWorkflow_Call struct {
	*mock.Call
}

// CreateWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.WorkflowCreateRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) CreateWorkflow(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_CreateWorkflow_Call {
	return &AdminServiceClient_CreateWorkflow_Call{Call: _e.mock.On("CreateWorkflow",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_CreateWorkflow_Call) Run(run func(ctx context.Context, in *admin.WorkflowCreateRequest, opts ...grpc.CallOption)) *AdminServiceClient_CreateWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.WorkflowCreateRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_CreateWorkflow_Call) Return(_a0 *admin.WorkflowCreateResponse, _a1 error) *AdminServiceClient_CreateWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_CreateWorkflow_Call) RunAndReturn(run func(context.Context, *admin.WorkflowCreateRequest, ...grpc.CallOption) (*admin.WorkflowCreateResponse, error)) *AdminServiceClient_CreateWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWorkflowEvent provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) CreateWorkflowEvent(ctx context.Context, in *admin.WorkflowExecutionEventRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionEventResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkflowEvent")
	}

	var r0 *admin.WorkflowExecutionEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionEventRequest, ...grpc.CallOption) (*admin.WorkflowExecutionEventResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionEventRequest, ...grpc.CallOption) *admin.WorkflowExecutionEventResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowExecutionEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowExecutionEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_CreateWorkflowEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkflowEvent'
type AdminServiceClient_CreateWorkflowEvent_Call struct {
	*mock.Call
}

// CreateWorkflowEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.WorkflowExecutionEventRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) CreateWorkflowEvent(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_CreateWorkflowEvent_Call {
	return &AdminServiceClient_CreateWorkflowEvent_Call{Call: _e.mock.On("CreateWorkflowEvent",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_CreateWorkflowEvent_Call) Run(run func(ctx context.Context, in *admin.WorkflowExecutionEventRequest, opts ...grpc.CallOption)) *AdminServiceClient_CreateWorkflowEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.WorkflowExecutionEventRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_CreateWorkflowEvent_Call) Return(_a0 *admin.WorkflowExecutionEventResponse, _a1 error) *AdminServiceClient_CreateWorkflowEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_CreateWorkflowEvent_Call) RunAndReturn(run func(context.Context, *admin.WorkflowExecutionEventRequest, ...grpc.CallOption) (*admin.WorkflowExecutionEventResponse, error)) *AdminServiceClient_CreateWorkflowEvent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectAttributes provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) DeleteProjectAttributes(ctx context.Context, in *admin.ProjectAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.ProjectAttributesDeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectAttributes")
	}

	var r0 *admin.ProjectAttributesDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesDeleteRequest, ...grpc.CallOption) (*admin.ProjectAttributesDeleteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesDeleteRequest, ...grpc.CallOption) *admin.ProjectAttributesDeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectAttributesDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectAttributesDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_DeleteProjectAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectAttributes'
type AdminServiceClient_DeleteProjectAttributes_Call struct {
	*mock.Call
}

// DeleteProjectAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ProjectAttributesDeleteRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) DeleteProjectAttributes(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_DeleteProjectAttributes_Call {
	return &AdminServiceClient_DeleteProjectAttributes_Call{Call: _e.mock.On("DeleteProjectAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_DeleteProjectAttributes_Call) Run(run func(ctx context.Context, in *admin.ProjectAttributesDeleteRequest, opts ...grpc.CallOption)) *AdminServiceClient_DeleteProjectAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ProjectAttributesDeleteRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_DeleteProjectAttributes_Call) Return(_a0 *admin.ProjectAttributesDeleteResponse, _a1 error) *AdminServiceClient_DeleteProjectAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_DeleteProjectAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectAttributesDeleteRequest, ...grpc.CallOption) (*admin.ProjectAttributesDeleteResponse, error)) *AdminServiceClient_DeleteProjectAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectDomainAttributes provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) DeleteProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesDeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectDomainAttributes")
	}

	var r0 *admin.ProjectDomainAttributesDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesDeleteRequest, ...grpc.CallOption) (*admin.ProjectDomainAttributesDeleteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesDeleteRequest, ...grpc.CallOption) *admin.ProjectDomainAttributesDeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectDomainAttributesDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectDomainAttributesDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_DeleteProjectDomainAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectDomainAttributes'
type AdminServiceClient_DeleteProjectDomainAttributes_Call struct {
	*mock.Call
}

// DeleteProjectDomainAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ProjectDomainAttributesDeleteRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) DeleteProjectDomainAttributes(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_DeleteProjectDomainAttributes_Call {
	return &AdminServiceClient_DeleteProjectDomainAttributes_Call{Call: _e.mock.On("DeleteProjectDomainAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_DeleteProjectDomainAttributes_Call) Run(run func(ctx context.Context, in *admin.ProjectDomainAttributesDeleteRequest, opts ...grpc.CallOption)) *AdminServiceClient_DeleteProjectDomainAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ProjectDomainAttributesDeleteRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_DeleteProjectDomainAttributes_Call) Return(_a0 *admin.ProjectDomainAttributesDeleteResponse, _a1 error) *AdminServiceClient_DeleteProjectDomainAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_DeleteProjectDomainAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectDomainAttributesDeleteRequest, ...grpc.CallOption) (*admin.ProjectDomainAttributesDeleteResponse, error)) *AdminServiceClient_DeleteProjectDomainAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkflowAttributes provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) DeleteWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesDeleteRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesDeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflowAttributes")
	}

	var r0 *admin.WorkflowAttributesDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesDeleteRequest, ...grpc.CallOption) (*admin.WorkflowAttributesDeleteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesDeleteRequest, ...grpc.CallOption) *admin.WorkflowAttributesDeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowAttributesDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowAttributesDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_DeleteWorkflowAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkflowAttributes'
type AdminServiceClient_DeleteWorkflowAttributes_Call struct {
	*mock.Call
}

// DeleteWorkflowAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.WorkflowAttributesDeleteRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) DeleteWorkflowAttributes(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_DeleteWorkflowAttributes_Call {
	return &AdminServiceClient_DeleteWorkflowAttributes_Call{Call: _e.mock.On("DeleteWorkflowAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_DeleteWorkflowAttributes_Call) Run(run func(ctx context.Context, in *admin.WorkflowAttributesDeleteRequest, opts ...grpc.CallOption)) *AdminServiceClient_DeleteWorkflowAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.WorkflowAttributesDeleteRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_DeleteWorkflowAttributes_Call) Return(_a0 *admin.WorkflowAttributesDeleteResponse, _a1 error) *AdminServiceClient_DeleteWorkflowAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_DeleteWorkflowAttributes_Call) RunAndReturn(run func(context.Context, *admin.WorkflowAttributesDeleteRequest, ...grpc.CallOption) (*admin.WorkflowAttributesDeleteResponse, error)) *AdminServiceClient_DeleteWorkflowAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveLaunchPlan provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetActiveLaunchPlan(ctx context.Context, in *admin.ActiveLaunchPlanRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveLaunchPlan")
	}

	var r0 *admin.LaunchPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanRequest, ...grpc.CallOption) (*admin.LaunchPlan, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanRequest, ...grpc.CallOption) *admin.LaunchPlan); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ActiveLaunchPlanRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetActiveLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveLaunchPlan'
type AdminServiceClient_GetActiveLaunchPlan_Call struct {
	*mock.Call
}

// GetActiveLaunchPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ActiveLaunchPlanRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetActiveLaunchPlan(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetActiveLaunchPlan_Call {
	return &AdminServiceClient_GetActiveLaunchPlan_Call{Call: _e.mock.On("GetActiveLaunchPlan",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetActiveLaunchPlan_Call) Run(run func(ctx context.Context, in *admin.ActiveLaunchPlanRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetActiveLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ActiveLaunchPlanRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetActiveLaunchPlan_Call) Return(_a0 *admin.LaunchPlan, _a1 error) *AdminServiceClient_GetActiveLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetActiveLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.ActiveLaunchPlanRequest, ...grpc.CallOption) (*admin.LaunchPlan, error)) *AdminServiceClient_GetActiveLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// GetDescriptionEntity provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetDescriptionEntity(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.DescriptionEntity, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDescriptionEntity")
	}

	var r0 *admin.DescriptionEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) (*admin.DescriptionEntity, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) *admin.DescriptionEntity); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DescriptionEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetDescriptionEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDescriptionEntity'
type AdminServiceClient_GetDescriptionEntity_Call struct {
	*mock.Call
}

// GetDescriptionEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ObjectGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetDescriptionEntity(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetDescriptionEntity_Call {
	return &AdminServiceClient_GetDescriptionEntity_Call{Call: _e.mock.On("GetDescriptionEntity",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetDescriptionEntity_Call) Run(run func(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetDescriptionEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ObjectGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetDescriptionEntity_Call) Return(_a0 *admin.DescriptionEntity, _a1 error) *AdminServiceClient_GetDescriptionEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetDescriptionEntity_Call) RunAndReturn(run func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) (*admin.DescriptionEntity, error)) *AdminServiceClient_GetDescriptionEntity_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomains provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetDomains(ctx context.Context, in *admin.GetDomainRequest, opts ...grpc.CallOption) (*admin.GetDomainsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomains")
	}

	var r0 *admin.GetDomainsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDomainRequest, ...grpc.CallOption) (*admin.GetDomainsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDomainRequest, ...grpc.CallOption) *admin.GetDomainsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetDomainsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetDomainRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomains'
type AdminServiceClient_GetDomains_Call struct {
	*mock.Call
}

// GetDomains is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.GetDomainRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetDomains(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetDomains_Call {
	return &AdminServiceClient_GetDomains_Call{Call: _e.mock.On("GetDomains",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetDomains_Call) Run(run func(ctx context.Context, in *admin.GetDomainRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.GetDomainRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetDomains_Call) Return(_a0 *admin.GetDomainsResponse, _a1 error) *AdminServiceClient_GetDomains_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetDomains_Call) RunAndReturn(run func(context.Context, *admin.GetDomainRequest, ...grpc.CallOption) (*admin.GetDomainsResponse, error)) *AdminServiceClient_GetDomains_Call {
	_c.Call.Return(run)
	return _c
}

// GetDynamicNodeWorkflow provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetDynamicNodeWorkflow(ctx context.Context, in *admin.GetDynamicNodeWorkflowRequest, opts ...grpc.CallOption) (*admin.DynamicNodeWorkflowResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDynamicNodeWorkflow")
	}

	var r0 *admin.DynamicNodeWorkflowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDynamicNodeWorkflowRequest, ...grpc.CallOption) (*admin.DynamicNodeWorkflowResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDynamicNodeWorkflowRequest, ...grpc.CallOption) *admin.DynamicNodeWorkflowResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DynamicNodeWorkflowResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetDynamicNodeWorkflowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetDynamicNodeWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamicNodeWorkflow'
type AdminServiceClient_GetDynamicNodeWorkflow_Call struct {
	*mock.Call
}

// GetDynamicNodeWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.GetDynamicNodeWorkflowRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetDynamicNodeWorkflow(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetDynamicNodeWorkflow_Call {
	return &AdminServiceClient_GetDynamicNodeWorkflow_Call{Call: _e.mock.On("GetDynamicNodeWorkflow",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetDynamicNodeWorkflow_Call) Run(run func(ctx context.Context, in *admin.GetDynamicNodeWorkflowRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetDynamicNodeWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.GetDynamicNodeWorkflowRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetDynamicNodeWorkflow_Call) Return(_a0 *admin.DynamicNodeWorkflowResponse, _a1 error) *AdminServiceClient_GetDynamicNodeWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetDynamicNodeWorkflow_Call) RunAndReturn(run func(context.Context, *admin.GetDynamicNodeWorkflowRequest, ...grpc.CallOption) (*admin.DynamicNodeWorkflowResponse, error)) *AdminServiceClient_GetDynamicNodeWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecution provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetExecution(ctx context.Context, in *admin.WorkflowExecutionGetRequest, opts ...grpc.CallOption) (*admin.Execution, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExecution")
	}

	var r0 *admin.Execution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetRequest, ...grpc.CallOption) (*admin.Execution, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetRequest, ...grpc.CallOption) *admin.Execution); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Execution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowExecutionGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecution'
type AdminServiceClient_GetExecution_Call struct {
	*mock.Call
}

// GetExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.WorkflowExecutionGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetExecution(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetExecution_Call {
	return &AdminServiceClient_GetExecution_Call{Call: _e.mock.On("GetExecution",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetExecution_Call) Run(run func(ctx context.Context, in *admin.WorkflowExecutionGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.WorkflowExecutionGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetExecution_Call) Return(_a0 *admin.Execution, _a1 error) *AdminServiceClient_GetExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetExecution_Call) RunAndReturn(run func(context.Context, *admin.WorkflowExecutionGetRequest, ...grpc.CallOption) (*admin.Execution, error)) *AdminServiceClient_GetExecution_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionData provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetExecutionData(ctx context.Context, in *admin.WorkflowExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionGetDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionData")
	}

	var r0 *admin.WorkflowExecutionGetDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetDataRequest, ...grpc.CallOption) (*admin.WorkflowExecutionGetDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetDataRequest, ...grpc.CallOption) *admin.WorkflowExecutionGetDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowExecutionGetDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowExecutionGetDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionData'
type AdminServiceClient_GetExecutionData_Call struct {
	*mock.Call
}

// GetExecutionData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.WorkflowExecutionGetDataRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetExecutionData(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetExecutionData_Call {
	return &AdminServiceClient_GetExecutionData_Call{Call: _e.mock.On("GetExecutionData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetExecutionData_Call) Run(run func(ctx context.Context, in *admin.WorkflowExecutionGetDataRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.WorkflowExecutionGetDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetExecutionData_Call) Return(_a0 *admin.WorkflowExecutionGetDataResponse, _a1 error) *AdminServiceClient_GetExecutionData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetExecutionData_Call) RunAndReturn(run func(context.Context, *admin.WorkflowExecutionGetDataRequest, ...grpc.CallOption) (*admin.WorkflowExecutionGetDataResponse, error)) *AdminServiceClient_GetExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionMetrics provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetExecutionMetrics(ctx context.Context, in *admin.WorkflowExecutionGetMetricsRequest, opts ...grpc.CallOption) (*admin.WorkflowExecutionGetMetricsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionMetrics")
	}

	var r0 *admin.WorkflowExecutionGetMetricsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetMetricsRequest, ...grpc.CallOption) (*admin.WorkflowExecutionGetMetricsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowExecutionGetMetricsRequest, ...grpc.CallOption) *admin.WorkflowExecutionGetMetricsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowExecutionGetMetricsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowExecutionGetMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetExecutionMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionMetrics'
type AdminServiceClient_GetExecutionMetrics_Call struct {
	*mock.Call
}

// GetExecutionMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.WorkflowExecutionGetMetricsRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetExecutionMetrics(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetExecutionMetrics_Call {
	return &AdminServiceClient_GetExecutionMetrics_Call{Call: _e.mock.On("GetExecutionMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetExecutionMetrics_Call) Run(run func(ctx context.Context, in *admin.WorkflowExecutionGetMetricsRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetExecutionMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.WorkflowExecutionGetMetricsRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetExecutionMetrics_Call) Return(_a0 *admin.WorkflowExecutionGetMetricsResponse, _a1 error) *AdminServiceClient_GetExecutionMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetExecutionMetrics_Call) RunAndReturn(run func(context.Context, *admin.WorkflowExecutionGetMetricsRequest, ...grpc.CallOption) (*admin.WorkflowExecutionGetMetricsResponse, error)) *AdminServiceClient_GetExecutionMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetLaunchPlan provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetLaunchPlan(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.LaunchPlan, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchPlan")
	}

	var r0 *admin.LaunchPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) (*admin.LaunchPlan, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) *admin.LaunchPlan); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLaunchPlan'
type AdminServiceClient_GetLaunchPlan_Call struct {
	*mock.Call
}

// GetLaunchPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ObjectGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetLaunchPlan(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetLaunchPlan_Call {
	return &AdminServiceClient_GetLaunchPlan_Call{Call: _e.mock.On("GetLaunchPlan",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetLaunchPlan_Call) Run(run func(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ObjectGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetLaunchPlan_Call) Return(_a0 *admin.LaunchPlan, _a1 error) *AdminServiceClient_GetLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) (*admin.LaunchPlan, error)) *AdminServiceClient_GetLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamedEntity provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetNamedEntity(ctx context.Context, in *admin.NamedEntityGetRequest, opts ...grpc.CallOption) (*admin.NamedEntity, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNamedEntity")
	}

	var r0 *admin.NamedEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityGetRequest, ...grpc.CallOption) (*admin.NamedEntity, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityGetRequest, ...grpc.CallOption) *admin.NamedEntity); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetNamedEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamedEntity'
type AdminServiceClient_GetNamedEntity_Call struct {
	*mock.Call
}

// GetNamedEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.NamedEntityGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetNamedEntity(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetNamedEntity_Call {
	return &AdminServiceClient_GetNamedEntity_Call{Call: _e.mock.On("GetNamedEntity",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetNamedEntity_Call) Run(run func(ctx context.Context, in *admin.NamedEntityGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetNamedEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.NamedEntityGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetNamedEntity_Call) Return(_a0 *admin.NamedEntity, _a1 error) *AdminServiceClient_GetNamedEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetNamedEntity_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityGetRequest, ...grpc.CallOption) (*admin.NamedEntity, error)) *AdminServiceClient_GetNamedEntity_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeExecution provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetNodeExecution(ctx context.Context, in *admin.NodeExecutionGetRequest, opts ...grpc.CallOption) (*admin.NodeExecution, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeExecution")
	}

	var r0 *admin.NodeExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionGetRequest, ...grpc.CallOption) (*admin.NodeExecution, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionGetRequest, ...grpc.CallOption) *admin.NodeExecution); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NodeExecutionGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetNodeExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeExecution'
type AdminServiceClient_GetNodeExecution_Call struct {
	*mock.Call
}

// GetNodeExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.NodeExecutionGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetNodeExecution(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetNodeExecution_Call {
	return &AdminServiceClient_GetNodeExecution_Call{Call: _e.mock.On("GetNodeExecution",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetNodeExecution_Call) Run(run func(ctx context.Context, in *admin.NodeExecutionGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetNodeExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.NodeExecutionGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetNodeExecution_Call) Return(_a0 *admin.NodeExecution, _a1 error) *AdminServiceClient_GetNodeExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetNodeExecution_Call) RunAndReturn(run func(context.Context, *admin.NodeExecutionGetRequest, ...grpc.CallOption) (*admin.NodeExecution, error)) *AdminServiceClient_GetNodeExecution_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeExecutionData provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetNodeExecutionData(ctx context.Context, in *admin.NodeExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.NodeExecutionGetDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeExecutionData")
	}

	var r0 *admin.NodeExecutionGetDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionGetDataRequest, ...grpc.CallOption) (*admin.NodeExecutionGetDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionGetDataRequest, ...grpc.CallOption) *admin.NodeExecutionGetDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionGetDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NodeExecutionGetDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetNodeExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeExecutionData'
type AdminServiceClient_GetNodeExecutionData_Call struct {
	*mock.Call
}

// GetNodeExecutionData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.NodeExecutionGetDataRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetNodeExecutionData(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetNodeExecutionData_Call {
	return &AdminServiceClient_GetNodeExecutionData_Call{Call: _e.mock.On("GetNodeExecutionData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetNodeExecutionData_Call) Run(run func(ctx context.Context, in *admin.NodeExecutionGetDataRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetNodeExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.NodeExecutionGetDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetNodeExecutionData_Call) Return(_a0 *admin.NodeExecutionGetDataResponse, _a1 error) *AdminServiceClient_GetNodeExecutionData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetNodeExecutionData_Call) RunAndReturn(run func(context.Context, *admin.NodeExecutionGetDataRequest, ...grpc.CallOption) (*admin.NodeExecutionGetDataResponse, error)) *AdminServiceClient_GetNodeExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetProject(ctx context.Context, in *admin.ProjectGetRequest, opts ...grpc.CallOption) (*admin.Project, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *admin.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectGetRequest, ...grpc.CallOption) (*admin.Project, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectGetRequest, ...grpc.CallOption) *admin.Project); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type AdminServiceClient_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ProjectGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetProject(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetProject_Call {
	return &AdminServiceClient_GetProject_Call{Call: _e.mock.On("GetProject",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetProject_Call) Run(run func(ctx context.Context, in *admin.ProjectGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ProjectGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetProject_Call) Return(_a0 *admin.Project, _a1 error) *AdminServiceClient_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetProject_Call) RunAndReturn(run func(context.Context, *admin.ProjectGetRequest, ...grpc.CallOption) (*admin.Project, error)) *AdminServiceClient_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectAttributes provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetProjectAttributes(ctx context.Context, in *admin.ProjectAttributesGetRequest, opts ...grpc.CallOption) (*admin.ProjectAttributesGetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectAttributes")
	}

	var r0 *admin.ProjectAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesGetRequest, ...grpc.CallOption) (*admin.ProjectAttributesGetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesGetRequest, ...grpc.CallOption) *admin.ProjectAttributesGetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectAttributesGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetProjectAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectAttributes'
type AdminServiceClient_GetProjectAttributes_Call struct {
	*mock.Call
}

// GetProjectAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ProjectAttributesGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetProjectAttributes(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetProjectAttributes_Call {
	return &AdminServiceClient_GetProjectAttributes_Call{Call: _e.mock.On("GetProjectAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetProjectAttributes_Call) Run(run func(ctx context.Context, in *admin.ProjectAttributesGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetProjectAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ProjectAttributesGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetProjectAttributes_Call) Return(_a0 *admin.ProjectAttributesGetResponse, _a1 error) *AdminServiceClient_GetProjectAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetProjectAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectAttributesGetRequest, ...grpc.CallOption) (*admin.ProjectAttributesGetResponse, error)) *AdminServiceClient_GetProjectAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectDomainAttributes provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesGetRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesGetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectDomainAttributes")
	}

	var r0 *admin.ProjectDomainAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesGetRequest, ...grpc.CallOption) (*admin.ProjectDomainAttributesGetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesGetRequest, ...grpc.CallOption) *admin.ProjectDomainAttributesGetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectDomainAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectDomainAttributesGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetProjectDomainAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectDomainAttributes'
type AdminServiceClient_GetProjectDomainAttributes_Call struct {
	*mock.Call
}

// GetProjectDomainAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ProjectDomainAttributesGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetProjectDomainAttributes(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetProjectDomainAttributes_Call {
	return &AdminServiceClient_GetProjectDomainAttributes_Call{Call: _e.mock.On("GetProjectDomainAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetProjectDomainAttributes_Call) Run(run func(ctx context.Context, in *admin.ProjectDomainAttributesGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetProjectDomainAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ProjectDomainAttributesGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetProjectDomainAttributes_Call) Return(_a0 *admin.ProjectDomainAttributesGetResponse, _a1 error) *AdminServiceClient_GetProjectDomainAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetProjectDomainAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectDomainAttributesGetRequest, ...grpc.CallOption) (*admin.ProjectDomainAttributesGetResponse, error)) *AdminServiceClient_GetProjectDomainAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetTask(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Task, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *admin.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) (*admin.Task, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) *admin.Task); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type AdminServiceClient_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ObjectGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetTask(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetTask_Call {
	return &AdminServiceClient_GetTask_Call{Call: _e.mock.On("GetTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetTask_Call) Run(run func(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ObjectGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetTask_Call) Return(_a0 *admin.Task, _a1 error) *AdminServiceClient_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetTask_Call) RunAndReturn(run func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) (*admin.Task, error)) *AdminServiceClient_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskExecution provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetTaskExecution(ctx context.Context, in *admin.TaskExecutionGetRequest, opts ...grpc.CallOption) (*admin.TaskExecution, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskExecution")
	}

	var r0 *admin.TaskExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionGetRequest, ...grpc.CallOption) (*admin.TaskExecution, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionGetRequest, ...grpc.CallOption) *admin.TaskExecution); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.TaskExecutionGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetTaskExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskExecution'
type AdminServiceClient_GetTaskExecution_Call struct {
	*mock.Call
}

// GetTaskExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.TaskExecutionGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetTaskExecution(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetTaskExecution_Call {
	return &AdminServiceClient_GetTaskExecution_Call{Call: _e.mock.On("GetTaskExecution",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetTaskExecution_Call) Run(run func(ctx context.Context, in *admin.TaskExecutionGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetTaskExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.TaskExecutionGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetTaskExecution_Call) Return(_a0 *admin.TaskExecution, _a1 error) *AdminServiceClient_GetTaskExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetTaskExecution_Call) RunAndReturn(run func(context.Context, *admin.TaskExecutionGetRequest, ...grpc.CallOption) (*admin.TaskExecution, error)) *AdminServiceClient_GetTaskExecution_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskExecutionData provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetTaskExecutionData(ctx context.Context, in *admin.TaskExecutionGetDataRequest, opts ...grpc.CallOption) (*admin.TaskExecutionGetDataResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskExecutionData")
	}

	var r0 *admin.TaskExecutionGetDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionGetDataRequest, ...grpc.CallOption) (*admin.TaskExecutionGetDataResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionGetDataRequest, ...grpc.CallOption) *admin.TaskExecutionGetDataResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskExecutionGetDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.TaskExecutionGetDataRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetTaskExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskExecutionData'
type AdminServiceClient_GetTaskExecutionData_Call struct {
	*mock.Call
}

// GetTaskExecutionData is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.TaskExecutionGetDataRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetTaskExecutionData(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetTaskExecutionData_Call {
	return &AdminServiceClient_GetTaskExecutionData_Call{Call: _e.mock.On("GetTaskExecutionData",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetTaskExecutionData_Call) Run(run func(ctx context.Context, in *admin.TaskExecutionGetDataRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetTaskExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.TaskExecutionGetDataRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetTaskExecutionData_Call) Return(_a0 *admin.TaskExecutionGetDataResponse, _a1 error) *AdminServiceClient_GetTaskExecutionData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetTaskExecutionData_Call) RunAndReturn(run func(context.Context, *admin.TaskExecutionGetDataRequest, ...grpc.CallOption) (*admin.TaskExecutionGetDataResponse, error)) *AdminServiceClient_GetTaskExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetVersion(ctx context.Context, in *admin.GetVersionRequest, opts ...grpc.CallOption) (*admin.GetVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 *admin.GetVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetVersionRequest, ...grpc.CallOption) (*admin.GetVersionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetVersionRequest, ...grpc.CallOption) *admin.GetVersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type AdminServiceClient_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.GetVersionRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetVersion(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetVersion_Call {
	return &AdminServiceClient_GetVersion_Call{Call: _e.mock.On("GetVersion",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetVersion_Call) Run(run func(ctx context.Context, in *admin.GetVersionRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.GetVersionRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetVersion_Call) Return(_a0 *admin.GetVersionResponse, _a1 error) *AdminServiceClient_GetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetVersion_Call) RunAndReturn(run func(context.Context, *admin.GetVersionRequest, ...grpc.CallOption) (*admin.GetVersionResponse, error)) *AdminServiceClient_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflow provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetWorkflow(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption) (*admin.Workflow, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflow")
	}

	var r0 *admin.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) (*admin.Workflow, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) *admin.Workflow); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflow'
type AdminServiceClient_GetWorkflow_Call struct {
	*mock.Call
}

// GetWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ObjectGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetWorkflow(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetWorkflow_Call {
	return &AdminServiceClient_GetWorkflow_Call{Call: _e.mock.On("GetWorkflow",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetWorkflow_Call) Run(run func(ctx context.Context, in *admin.ObjectGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ObjectGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetWorkflow_Call) Return(_a0 *admin.Workflow, _a1 error) *AdminServiceClient_GetWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetWorkflow_Call) RunAndReturn(run func(context.Context, *admin.ObjectGetRequest, ...grpc.CallOption) (*admin.Workflow, error)) *AdminServiceClient_GetWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowAttributes provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) GetWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesGetRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesGetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowAttributes")
	}

	var r0 *admin.WorkflowAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesGetRequest, ...grpc.CallOption) (*admin.WorkflowAttributesGetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesGetRequest, ...grpc.CallOption) *admin.WorkflowAttributesGetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowAttributesGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_GetWorkflowAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowAttributes'
type AdminServiceClient_GetWorkflowAttributes_Call struct {
	*mock.Call
}

// GetWorkflowAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.WorkflowAttributesGetRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) GetWorkflowAttributes(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_GetWorkflowAttributes_Call {
	return &AdminServiceClient_GetWorkflowAttributes_Call{Call: _e.mock.On("GetWorkflowAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_GetWorkflowAttributes_Call) Run(run func(ctx context.Context, in *admin.WorkflowAttributesGetRequest, opts ...grpc.CallOption)) *AdminServiceClient_GetWorkflowAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.WorkflowAttributesGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_GetWorkflowAttributes_Call) Return(_a0 *admin.WorkflowAttributesGetResponse, _a1 error) *AdminServiceClient_GetWorkflowAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_GetWorkflowAttributes_Call) RunAndReturn(run func(context.Context, *admin.WorkflowAttributesGetRequest, ...grpc.CallOption) (*admin.WorkflowAttributesGetResponse, error)) *AdminServiceClient_GetWorkflowAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// ListActiveLaunchPlans provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListActiveLaunchPlans(ctx context.Context, in *admin.ActiveLaunchPlanListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListActiveLaunchPlans")
	}

	var r0 *admin.LaunchPlanList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanListRequest, ...grpc.CallOption) (*admin.LaunchPlanList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanListRequest, ...grpc.CallOption) *admin.LaunchPlanList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ActiveLaunchPlanListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListActiveLaunchPlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActiveLaunchPlans'
type AdminServiceClient_ListActiveLaunchPlans_Call struct {
	*mock.Call
}

// ListActiveLaunchPlans is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ActiveLaunchPlanListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListActiveLaunchPlans(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListActiveLaunchPlans_Call {
	return &AdminServiceClient_ListActiveLaunchPlans_Call{Call: _e.mock.On("ListActiveLaunchPlans",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListActiveLaunchPlans_Call) Run(run func(ctx context.Context, in *admin.ActiveLaunchPlanListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListActiveLaunchPlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ActiveLaunchPlanListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListActiveLaunchPlans_Call) Return(_a0 *admin.LaunchPlanList, _a1 error) *AdminServiceClient_ListActiveLaunchPlans_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListActiveLaunchPlans_Call) RunAndReturn(run func(context.Context, *admin.ActiveLaunchPlanListRequest, ...grpc.CallOption) (*admin.LaunchPlanList, error)) *AdminServiceClient_ListActiveLaunchPlans_Call {
	_c.Call.Return(run)
	return _c
}

// ListDescriptionEntities provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListDescriptionEntities(ctx context.Context, in *admin.DescriptionEntityListRequest, opts ...grpc.CallOption) (*admin.DescriptionEntityList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDescriptionEntities")
	}

	var r0 *admin.DescriptionEntityList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DescriptionEntityListRequest, ...grpc.CallOption) (*admin.DescriptionEntityList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DescriptionEntityListRequest, ...grpc.CallOption) *admin.DescriptionEntityList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DescriptionEntityList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.DescriptionEntityListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListDescriptionEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDescriptionEntities'
type AdminServiceClient_ListDescriptionEntities_Call struct {
	*mock.Call
}

// ListDescriptionEntities is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.DescriptionEntityListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListDescriptionEntities(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListDescriptionEntities_Call {
	return &AdminServiceClient_ListDescriptionEntities_Call{Call: _e.mock.On("ListDescriptionEntities",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListDescriptionEntities_Call) Run(run func(ctx context.Context, in *admin.DescriptionEntityListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListDescriptionEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.DescriptionEntityListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListDescriptionEntities_Call) Return(_a0 *admin.DescriptionEntityList, _a1 error) *AdminServiceClient_ListDescriptionEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListDescriptionEntities_Call) RunAndReturn(run func(context.Context, *admin.DescriptionEntityListRequest, ...grpc.CallOption) (*admin.DescriptionEntityList, error)) *AdminServiceClient_ListDescriptionEntities_Call {
	_c.Call.Return(run)
	return _c
}

// ListExecutions provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListExecutions(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.ExecutionList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExecutions")
	}

	var r0 *admin.ExecutionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) (*admin.ExecutionList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) *admin.ExecutionList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExecutions'
type AdminServiceClient_ListExecutions_Call struct {
	*mock.Call
}

// ListExecutions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ResourceListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListExecutions(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListExecutions_Call {
	return &AdminServiceClient_ListExecutions_Call{Call: _e.mock.On("ListExecutions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListExecutions_Call) Run(run func(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ResourceListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListExecutions_Call) Return(_a0 *admin.ExecutionList, _a1 error) *AdminServiceClient_ListExecutions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListExecutions_Call) RunAndReturn(run func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) (*admin.ExecutionList, error)) *AdminServiceClient_ListExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// ListLaunchPlanIds provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListLaunchPlanIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLaunchPlanIds")
	}

	var r0 *admin.NamedEntityIdentifierList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) *admin.NamedEntityIdentifierList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityIdentifierList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListLaunchPlanIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLaunchPlanIds'
type AdminServiceClient_ListLaunchPlanIds_Call struct {
	*mock.Call
}

// ListLaunchPlanIds is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.NamedEntityIdentifierListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListLaunchPlanIds(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListLaunchPlanIds_Call {
	return &AdminServiceClient_ListLaunchPlanIds_Call{Call: _e.mock.On("ListLaunchPlanIds",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListLaunchPlanIds_Call) Run(run func(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListLaunchPlanIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.NamedEntityIdentifierListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListLaunchPlanIds_Call) Return(_a0 *admin.NamedEntityIdentifierList, _a1 error) *AdminServiceClient_ListLaunchPlanIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListLaunchPlanIds_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)) *AdminServiceClient_ListLaunchPlanIds_Call {
	_c.Call.Return(run)
	return _c
}

// ListLaunchPlans provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListLaunchPlans(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.LaunchPlanList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLaunchPlans")
	}

	var r0 *admin.LaunchPlanList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) (*admin.LaunchPlanList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) *admin.LaunchPlanList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListLaunchPlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLaunchPlans'
type AdminServiceClient_ListLaunchPlans_Call struct {
	*mock.Call
}

// ListLaunchPlans is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ResourceListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListLaunchPlans(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListLaunchPlans_Call {
	return &AdminServiceClient_ListLaunchPlans_Call{Call: _e.mock.On("ListLaunchPlans",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListLaunchPlans_Call) Run(run func(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListLaunchPlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ResourceListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListLaunchPlans_Call) Return(_a0 *admin.LaunchPlanList, _a1 error) *AdminServiceClient_ListLaunchPlans_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListLaunchPlans_Call) RunAndReturn(run func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) (*admin.LaunchPlanList, error)) *AdminServiceClient_ListLaunchPlans_Call {
	_c.Call.Return(run)
	return _c
}

// ListMatchableAttributes provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListMatchableAttributes(ctx context.Context, in *admin.ListMatchableAttributesRequest, opts ...grpc.CallOption) (*admin.ListMatchableAttributesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMatchableAttributes")
	}

	var r0 *admin.ListMatchableAttributesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListMatchableAttributesRequest, ...grpc.CallOption) (*admin.ListMatchableAttributesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListMatchableAttributesRequest, ...grpc.CallOption) *admin.ListMatchableAttributesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ListMatchableAttributesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ListMatchableAttributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListMatchableAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMatchableAttributes'
type AdminServiceClient_ListMatchableAttributes_Call struct {
	*mock.Call
}

// ListMatchableAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ListMatchableAttributesRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListMatchableAttributes(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListMatchableAttributes_Call {
	return &AdminServiceClient_ListMatchableAttributes_Call{Call: _e.mock.On("ListMatchableAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListMatchableAttributes_Call) Run(run func(ctx context.Context, in *admin.ListMatchableAttributesRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListMatchableAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ListMatchableAttributesRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListMatchableAttributes_Call) Return(_a0 *admin.ListMatchableAttributesResponse, _a1 error) *AdminServiceClient_ListMatchableAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListMatchableAttributes_Call) RunAndReturn(run func(context.Context, *admin.ListMatchableAttributesRequest, ...grpc.CallOption) (*admin.ListMatchableAttributesResponse, error)) *AdminServiceClient_ListMatchableAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamedEntities provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListNamedEntities(ctx context.Context, in *admin.NamedEntityListRequest, opts ...grpc.CallOption) (*admin.NamedEntityList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNamedEntities")
	}

	var r0 *admin.NamedEntityList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityListRequest, ...grpc.CallOption) (*admin.NamedEntityList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityListRequest, ...grpc.CallOption) *admin.NamedEntityList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListNamedEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamedEntities'
type AdminServiceClient_ListNamedEntities_Call struct {
	*mock.Call
}

// ListNamedEntities is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.NamedEntityListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListNamedEntities(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListNamedEntities_Call {
	return &AdminServiceClient_ListNamedEntities_Call{Call: _e.mock.On("ListNamedEntities",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListNamedEntities_Call) Run(run func(ctx context.Context, in *admin.NamedEntityListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListNamedEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.NamedEntityListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListNamedEntities_Call) Return(_a0 *admin.NamedEntityList, _a1 error) *AdminServiceClient_ListNamedEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListNamedEntities_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityListRequest, ...grpc.CallOption) (*admin.NamedEntityList, error)) *AdminServiceClient_ListNamedEntities_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodeExecutions provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListNodeExecutions(ctx context.Context, in *admin.NodeExecutionListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNodeExecutions")
	}

	var r0 *admin.NodeExecutionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionListRequest, ...grpc.CallOption) (*admin.NodeExecutionList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionListRequest, ...grpc.CallOption) *admin.NodeExecutionList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NodeExecutionListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListNodeExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodeExecutions'
type AdminServiceClient_ListNodeExecutions_Call struct {
	*mock.Call
}

// ListNodeExecutions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.NodeExecutionListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListNodeExecutions(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListNodeExecutions_Call {
	return &AdminServiceClient_ListNodeExecutions_Call{Call: _e.mock.On("ListNodeExecutions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListNodeExecutions_Call) Run(run func(ctx context.Context, in *admin.NodeExecutionListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListNodeExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.NodeExecutionListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListNodeExecutions_Call) Return(_a0 *admin.NodeExecutionList, _a1 error) *AdminServiceClient_ListNodeExecutions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListNodeExecutions_Call) RunAndReturn(run func(context.Context, *admin.NodeExecutionListRequest, ...grpc.CallOption) (*admin.NodeExecutionList, error)) *AdminServiceClient_ListNodeExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodeExecutionsForTask provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListNodeExecutionsForTask(ctx context.Context, in *admin.NodeExecutionForTaskListRequest, opts ...grpc.CallOption) (*admin.NodeExecutionList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNodeExecutionsForTask")
	}

	var r0 *admin.NodeExecutionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionForTaskListRequest, ...grpc.CallOption) (*admin.NodeExecutionList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NodeExecutionForTaskListRequest, ...grpc.CallOption) *admin.NodeExecutionList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NodeExecutionForTaskListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListNodeExecutionsForTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodeExecutionsForTask'
type AdminServiceClient_ListNodeExecutionsForTask_Call struct {
	*mock.Call
}

// ListNodeExecutionsForTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.NodeExecutionForTaskListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListNodeExecutionsForTask(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListNodeExecutionsForTask_Call {
	return &AdminServiceClient_ListNodeExecutionsForTask_Call{Call: _e.mock.On("ListNodeExecutionsForTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListNodeExecutionsForTask_Call) Run(run func(ctx context.Context, in *admin.NodeExecutionForTaskListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListNodeExecutionsForTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.NodeExecutionForTaskListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListNodeExecutionsForTask_Call) Return(_a0 *admin.NodeExecutionList, _a1 error) *AdminServiceClient_ListNodeExecutionsForTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListNodeExecutionsForTask_Call) RunAndReturn(run func(context.Context, *admin.NodeExecutionForTaskListRequest, ...grpc.CallOption) (*admin.NodeExecutionList, error)) *AdminServiceClient_ListNodeExecutionsForTask_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListProjects(ctx context.Context, in *admin.ProjectListRequest, opts ...grpc.CallOption) (*admin.Projects, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 *admin.Projects
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectListRequest, ...grpc.CallOption) (*admin.Projects, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectListRequest, ...grpc.CallOption) *admin.Projects); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Projects)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type AdminServiceClient_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ProjectListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListProjects(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListProjects_Call {
	return &AdminServiceClient_ListProjects_Call{Call: _e.mock.On("ListProjects",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListProjects_Call) Run(run func(ctx context.Context, in *admin.ProjectListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ProjectListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListProjects_Call) Return(_a0 *admin.Projects, _a1 error) *AdminServiceClient_ListProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListProjects_Call) RunAndReturn(run func(context.Context, *admin.ProjectListRequest, ...grpc.CallOption) (*admin.Projects, error)) *AdminServiceClient_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListTaskExecutions provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListTaskExecutions(ctx context.Context, in *admin.TaskExecutionListRequest, opts ...grpc.CallOption) (*admin.TaskExecutionList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTaskExecutions")
	}

	var r0 *admin.TaskExecutionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionListRequest, ...grpc.CallOption) (*admin.TaskExecutionList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskExecutionListRequest, ...grpc.CallOption) *admin.TaskExecutionList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskExecutionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.TaskExecutionListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListTaskExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTaskExecutions'
type AdminServiceClient_ListTaskExecutions_Call struct {
	*mock.Call
}

// ListTaskExecutions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.TaskExecutionListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListTaskExecutions(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListTaskExecutions_Call {
	return &AdminServiceClient_ListTaskExecutions_Call{Call: _e.mock.On("ListTaskExecutions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListTaskExecutions_Call) Run(run func(ctx context.Context, in *admin.TaskExecutionListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListTaskExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.TaskExecutionListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListTaskExecutions_Call) Return(_a0 *admin.TaskExecutionList, _a1 error) *AdminServiceClient_ListTaskExecutions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListTaskExecutions_Call) RunAndReturn(run func(context.Context, *admin.TaskExecutionListRequest, ...grpc.CallOption) (*admin.TaskExecutionList, error)) *AdminServiceClient_ListTaskExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// ListTaskIds provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListTaskIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTaskIds")
	}

	var r0 *admin.NamedEntityIdentifierList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) *admin.NamedEntityIdentifierList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityIdentifierList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListTaskIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTaskIds'
type AdminServiceClient_ListTaskIds_Call struct {
	*mock.Call
}

// ListTaskIds is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.NamedEntityIdentifierListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListTaskIds(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListTaskIds_Call {
	return &AdminServiceClient_ListTaskIds_Call{Call: _e.mock.On("ListTaskIds",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListTaskIds_Call) Run(run func(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListTaskIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.NamedEntityIdentifierListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListTaskIds_Call) Return(_a0 *admin.NamedEntityIdentifierList, _a1 error) *AdminServiceClient_ListTaskIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListTaskIds_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)) *AdminServiceClient_ListTaskIds_Call {
	_c.Call.Return(run)
	return _c
}

// ListTasks provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListTasks(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.TaskList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *admin.TaskList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) (*admin.TaskList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) *admin.TaskList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTasks'
type AdminServiceClient_ListTasks_Call struct {
	*mock.Call
}

// ListTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ResourceListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListTasks(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListTasks_Call {
	return &AdminServiceClient_ListTasks_Call{Call: _e.mock.On("ListTasks",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListTasks_Call) Run(run func(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ResourceListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListTasks_Call) Return(_a0 *admin.TaskList, _a1 error) *AdminServiceClient_ListTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListTasks_Call) RunAndReturn(run func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) (*admin.TaskList, error)) *AdminServiceClient_ListTasks_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkflowIds provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListWorkflowIds(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflowIds")
	}

	var r0 *admin.NamedEntityIdentifierList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) *admin.NamedEntityIdentifierList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityIdentifierList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListWorkflowIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkflowIds'
type AdminServiceClient_ListWorkflowIds_Call struct {
	*mock.Call
}

// ListWorkflowIds is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.NamedEntityIdentifierListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListWorkflowIds(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListWorkflowIds_Call {
	return &AdminServiceClient_ListWorkflowIds_Call{Call: _e.mock.On("ListWorkflowIds",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListWorkflowIds_Call) Run(run func(ctx context.Context, in *admin.NamedEntityIdentifierListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListWorkflowIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.NamedEntityIdentifierListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListWorkflowIds_Call) Return(_a0 *admin.NamedEntityIdentifierList, _a1 error) *AdminServiceClient_ListWorkflowIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListWorkflowIds_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityIdentifierListRequest, ...grpc.CallOption) (*admin.NamedEntityIdentifierList, error)) *AdminServiceClient_ListWorkflowIds_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkflows provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) ListWorkflows(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption) (*admin.WorkflowList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflows")
	}

	var r0 *admin.WorkflowList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) (*admin.WorkflowList, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) *admin.WorkflowList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_ListWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkflows'
type AdminServiceClient_ListWorkflows_Call struct {
	*mock.Call
}

// ListWorkflows is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ResourceListRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) ListWorkflows(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_ListWorkflows_Call {
	return &AdminServiceClient_ListWorkflows_Call{Call: _e.mock.On("ListWorkflows",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_ListWorkflows_Call) Run(run func(ctx context.Context, in *admin.ResourceListRequest, opts ...grpc.CallOption)) *AdminServiceClient_ListWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ResourceListRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_ListWorkflows_Call) Return(_a0 *admin.WorkflowList, _a1 error) *AdminServiceClient_ListWorkflows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_ListWorkflows_Call) RunAndReturn(run func(context.Context, *admin.ResourceListRequest, ...grpc.CallOption) (*admin.WorkflowList, error)) *AdminServiceClient_ListWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// RecoverExecution provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) RecoverExecution(ctx context.Context, in *admin.ExecutionRecoverRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RecoverExecution")
	}

	var r0 *admin.ExecutionCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionRecoverRequest, ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionRecoverRequest, ...grpc.CallOption) *admin.ExecutionCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ExecutionRecoverRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_RecoverExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverExecution'
type AdminServiceClient_RecoverExecution_Call struct {
	*mock.Call
}

// RecoverExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ExecutionRecoverRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) RecoverExecution(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_RecoverExecution_Call {
	return &AdminServiceClient_RecoverExecution_Call{Call: _e.mock.On("RecoverExecution",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_RecoverExecution_Call) Run(run func(ctx context.Context, in *admin.ExecutionRecoverRequest, opts ...grpc.CallOption)) *AdminServiceClient_RecoverExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ExecutionRecoverRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_RecoverExecution_Call) Return(_a0 *admin.ExecutionCreateResponse, _a1 error) *AdminServiceClient_RecoverExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_RecoverExecution_Call) RunAndReturn(run func(context.Context, *admin.ExecutionRecoverRequest, ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)) *AdminServiceClient_RecoverExecution_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterProject provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) RegisterProject(ctx context.Context, in *admin.ProjectRegisterRequest, opts ...grpc.CallOption) (*admin.ProjectRegisterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterProject")
	}

	var r0 *admin.ProjectRegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectRegisterRequest, ...grpc.CallOption) (*admin.ProjectRegisterResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectRegisterRequest, ...grpc.CallOption) *admin.ProjectRegisterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectRegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectRegisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_RegisterProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterProject'
type AdminServiceClient_RegisterProject_Call struct {
	*mock.Call
}

// RegisterProject is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ProjectRegisterRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) RegisterProject(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_RegisterProject_Call {
	return &AdminServiceClient_RegisterProject_Call{Call: _e.mock.On("RegisterProject",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_RegisterProject_Call) Run(run func(ctx context.Context, in *admin.ProjectRegisterRequest, opts ...grpc.CallOption)) *AdminServiceClient_RegisterProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ProjectRegisterRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_RegisterProject_Call) Return(_a0 *admin.ProjectRegisterResponse, _a1 error) *AdminServiceClient_RegisterProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_RegisterProject_Call) RunAndReturn(run func(context.Context, *admin.ProjectRegisterRequest, ...grpc.CallOption) (*admin.ProjectRegisterResponse, error)) *AdminServiceClient_RegisterProject_Call {
	_c.Call.Return(run)
	return _c
}

// RelaunchExecution provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) RelaunchExecution(ctx context.Context, in *admin.ExecutionRelaunchRequest, opts ...grpc.CallOption) (*admin.ExecutionCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RelaunchExecution")
	}

	var r0 *admin.ExecutionCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionRelaunchRequest, ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionRelaunchRequest, ...grpc.CallOption) *admin.ExecutionCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ExecutionRelaunchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_RelaunchExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RelaunchExecution'
type AdminServiceClient_RelaunchExecution_Call struct {
	*mock.Call
}

// RelaunchExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ExecutionRelaunchRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) RelaunchExecution(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_RelaunchExecution_Call {
	return &AdminServiceClient_RelaunchExecution_Call{Call: _e.mock.On("RelaunchExecution",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_RelaunchExecution_Call) Run(run func(ctx context.Context, in *admin.ExecutionRelaunchRequest, opts ...grpc.CallOption)) *AdminServiceClient_RelaunchExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ExecutionRelaunchRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_RelaunchExecution_Call) Return(_a0 *admin.ExecutionCreateResponse, _a1 error) *AdminServiceClient_RelaunchExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_RelaunchExecution_Call) RunAndReturn(run func(context.Context, *admin.ExecutionRelaunchRequest, ...grpc.CallOption) (*admin.ExecutionCreateResponse, error)) *AdminServiceClient_RelaunchExecution_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateExecution provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) TerminateExecution(ctx context.Context, in *admin.ExecutionTerminateRequest, opts ...grpc.CallOption) (*admin.ExecutionTerminateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateExecution")
	}

	var r0 *admin.ExecutionTerminateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionTerminateRequest, ...grpc.CallOption) (*admin.ExecutionTerminateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionTerminateRequest, ...grpc.CallOption) *admin.ExecutionTerminateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionTerminateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ExecutionTerminateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_TerminateExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateExecution'
type AdminServiceClient_TerminateExecution_Call struct {
	*mock.Call
}

// TerminateExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ExecutionTerminateRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) TerminateExecution(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_TerminateExecution_Call {
	return &AdminServiceClient_TerminateExecution_Call{Call: _e.mock.On("TerminateExecution",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_TerminateExecution_Call) Run(run func(ctx context.Context, in *admin.ExecutionTerminateRequest, opts ...grpc.CallOption)) *AdminServiceClient_TerminateExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ExecutionTerminateRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_TerminateExecution_Call) Return(_a0 *admin.ExecutionTerminateResponse, _a1 error) *AdminServiceClient_TerminateExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_TerminateExecution_Call) RunAndReturn(run func(context.Context, *admin.ExecutionTerminateRequest, ...grpc.CallOption) (*admin.ExecutionTerminateResponse, error)) *AdminServiceClient_TerminateExecution_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateExecution provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) UpdateExecution(ctx context.Context, in *admin.ExecutionUpdateRequest, opts ...grpc.CallOption) (*admin.ExecutionUpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExecution")
	}

	var r0 *admin.ExecutionUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionUpdateRequest, ...grpc.CallOption) (*admin.ExecutionUpdateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ExecutionUpdateRequest, ...grpc.CallOption) *admin.ExecutionUpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ExecutionUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_UpdateExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExecution'
type AdminServiceClient_UpdateExecution_Call struct {
	*mock.Call
}

// UpdateExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ExecutionUpdateRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) UpdateExecution(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_UpdateExecution_Call {
	return &AdminServiceClient_UpdateExecution_Call{Call: _e.mock.On("UpdateExecution",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_UpdateExecution_Call) Run(run func(ctx context.Context, in *admin.ExecutionUpdateRequest, opts ...grpc.CallOption)) *AdminServiceClient_UpdateExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ExecutionUpdateRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_UpdateExecution_Call) Return(_a0 *admin.ExecutionUpdateResponse, _a1 error) *AdminServiceClient_UpdateExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_UpdateExecution_Call) RunAndReturn(run func(context.Context, *admin.ExecutionUpdateRequest, ...grpc.CallOption) (*admin.ExecutionUpdateResponse, error)) *AdminServiceClient_UpdateExecution_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLaunchPlan provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) UpdateLaunchPlan(ctx context.Context, in *admin.LaunchPlanUpdateRequest, opts ...grpc.CallOption) (*admin.LaunchPlanUpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLaunchPlan")
	}

	var r0 *admin.LaunchPlanUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanUpdateRequest, ...grpc.CallOption) (*admin.LaunchPlanUpdateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanUpdateRequest, ...grpc.CallOption) *admin.LaunchPlanUpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.LaunchPlanUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_UpdateLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLaunchPlan'
type AdminServiceClient_UpdateLaunchPlan_Call struct {
	*mock.Call
}

// UpdateLaunchPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.LaunchPlanUpdateRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) UpdateLaunchPlan(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_UpdateLaunchPlan_Call {
	return &AdminServiceClient_UpdateLaunchPlan_Call{Call: _e.mock.On("UpdateLaunchPlan",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_UpdateLaunchPlan_Call) Run(run func(ctx context.Context, in *admin.LaunchPlanUpdateRequest, opts ...grpc.CallOption)) *AdminServiceClient_UpdateLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.LaunchPlanUpdateRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_UpdateLaunchPlan_Call) Return(_a0 *admin.LaunchPlanUpdateResponse, _a1 error) *AdminServiceClient_UpdateLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_UpdateLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.LaunchPlanUpdateRequest, ...grpc.CallOption) (*admin.LaunchPlanUpdateResponse, error)) *AdminServiceClient_UpdateLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNamedEntity provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) UpdateNamedEntity(ctx context.Context, in *admin.NamedEntityUpdateRequest, opts ...grpc.CallOption) (*admin.NamedEntityUpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNamedEntity")
	}

	var r0 *admin.NamedEntityUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityUpdateRequest, ...grpc.CallOption) (*admin.NamedEntityUpdateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityUpdateRequest, ...grpc.CallOption) *admin.NamedEntityUpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_UpdateNamedEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNamedEntity'
type AdminServiceClient_UpdateNamedEntity_Call struct {
	*mock.Call
}

// UpdateNamedEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.NamedEntityUpdateRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) UpdateNamedEntity(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_UpdateNamedEntity_Call {
	return &AdminServiceClient_UpdateNamedEntity_Call{Call: _e.mock.On("UpdateNamedEntity",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_UpdateNamedEntity_Call) Run(run func(ctx context.Context, in *admin.NamedEntityUpdateRequest, opts ...grpc.CallOption)) *AdminServiceClient_UpdateNamedEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.NamedEntityUpdateRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_UpdateNamedEntity_Call) Return(_a0 *admin.NamedEntityUpdateResponse, _a1 error) *AdminServiceClient_UpdateNamedEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_UpdateNamedEntity_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityUpdateRequest, ...grpc.CallOption) (*admin.NamedEntityUpdateResponse, error)) *AdminServiceClient_UpdateNamedEntity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) UpdateProject(ctx context.Context, in *admin.Project, opts ...grpc.CallOption) (*admin.ProjectUpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *admin.ProjectUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.Project, ...grpc.CallOption) (*admin.ProjectUpdateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.Project, ...grpc.CallOption) *admin.ProjectUpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.Project, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type AdminServiceClient_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.Project
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) UpdateProject(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_UpdateProject_Call {
	return &AdminServiceClient_UpdateProject_Call{Call: _e.mock.On("UpdateProject",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_UpdateProject_Call) Run(run func(ctx context.Context, in *admin.Project, opts ...grpc.CallOption)) *AdminServiceClient_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.Project), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_UpdateProject_Call) Return(_a0 *admin.ProjectUpdateResponse, _a1 error) *AdminServiceClient_UpdateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_UpdateProject_Call) RunAndReturn(run func(context.Context, *admin.Project, ...grpc.CallOption) (*admin.ProjectUpdateResponse, error)) *AdminServiceClient_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectAttributes provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) UpdateProjectAttributes(ctx context.Context, in *admin.ProjectAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.ProjectAttributesUpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectAttributes")
	}

	var r0 *admin.ProjectAttributesUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesUpdateRequest, ...grpc.CallOption) (*admin.ProjectAttributesUpdateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesUpdateRequest, ...grpc.CallOption) *admin.ProjectAttributesUpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectAttributesUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectAttributesUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_UpdateProjectAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectAttributes'
type AdminServiceClient_UpdateProjectAttributes_Call struct {
	*mock.Call
}

// UpdateProjectAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ProjectAttributesUpdateRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) UpdateProjectAttributes(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_UpdateProjectAttributes_Call {
	return &AdminServiceClient_UpdateProjectAttributes_Call{Call: _e.mock.On("UpdateProjectAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_UpdateProjectAttributes_Call) Run(run func(ctx context.Context, in *admin.ProjectAttributesUpdateRequest, opts ...grpc.CallOption)) *AdminServiceClient_UpdateProjectAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ProjectAttributesUpdateRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_UpdateProjectAttributes_Call) Return(_a0 *admin.ProjectAttributesUpdateResponse, _a1 error) *AdminServiceClient_UpdateProjectAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_UpdateProjectAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectAttributesUpdateRequest, ...grpc.CallOption) (*admin.ProjectAttributesUpdateResponse, error)) *AdminServiceClient_UpdateProjectAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectDomainAttributes provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) UpdateProjectDomainAttributes(ctx context.Context, in *admin.ProjectDomainAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.ProjectDomainAttributesUpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectDomainAttributes")
	}

	var r0 *admin.ProjectDomainAttributesUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesUpdateRequest, ...grpc.CallOption) (*admin.ProjectDomainAttributesUpdateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesUpdateRequest, ...grpc.CallOption) *admin.ProjectDomainAttributesUpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectDomainAttributesUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectDomainAttributesUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_UpdateProjectDomainAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectDomainAttributes'
type AdminServiceClient_UpdateProjectDomainAttributes_Call struct {
	*mock.Call
}

// UpdateProjectDomainAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.ProjectDomainAttributesUpdateRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) UpdateProjectDomainAttributes(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_UpdateProjectDomainAttributes_Call {
	return &AdminServiceClient_UpdateProjectDomainAttributes_Call{Call: _e.mock.On("UpdateProjectDomainAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_UpdateProjectDomainAttributes_Call) Run(run func(ctx context.Context, in *admin.ProjectDomainAttributesUpdateRequest, opts ...grpc.CallOption)) *AdminServiceClient_UpdateProjectDomainAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.ProjectDomainAttributesUpdateRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_UpdateProjectDomainAttributes_Call) Return(_a0 *admin.ProjectDomainAttributesUpdateResponse, _a1 error) *AdminServiceClient_UpdateProjectDomainAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_UpdateProjectDomainAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectDomainAttributesUpdateRequest, ...grpc.CallOption) (*admin.ProjectDomainAttributesUpdateResponse, error)) *AdminServiceClient_UpdateProjectDomainAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkflowAttributes provides a mock function with given fields: ctx, in, opts
func (_m *AdminServiceClient) UpdateWorkflowAttributes(ctx context.Context, in *admin.WorkflowAttributesUpdateRequest, opts ...grpc.CallOption) (*admin.WorkflowAttributesUpdateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkflowAttributes")
	}

	var r0 *admin.WorkflowAttributesUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesUpdateRequest, ...grpc.CallOption) (*admin.WorkflowAttributesUpdateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesUpdateRequest, ...grpc.CallOption) *admin.WorkflowAttributesUpdateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowAttributesUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowAttributesUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminServiceClient_UpdateWorkflowAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflowAttributes'
type AdminServiceClient_UpdateWorkflowAttributes_Call struct {
	*mock.Call
}

// UpdateWorkflowAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *admin.WorkflowAttributesUpdateRequest
//   - opts ...grpc.CallOption
func (_e *AdminServiceClient_Expecter) UpdateWorkflowAttributes(ctx interface{}, in interface{}, opts ...interface{}) *AdminServiceClient_UpdateWorkflowAttributes_Call {
	return &AdminServiceClient_UpdateWorkflowAttributes_Call{Call: _e.mock.On("UpdateWorkflowAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *AdminServiceClient_UpdateWorkflowAttributes_Call) Run(run func(ctx context.Context, in *admin.WorkflowAttributesUpdateRequest, opts ...grpc.CallOption)) *AdminServiceClient_UpdateWorkflowAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*admin.WorkflowAttributesUpdateRequest), variadicArgs...)
	})
	return _c
}

func (_c *AdminServiceClient_UpdateWorkflowAttributes_Call) Return(_a0 *admin.WorkflowAttributesUpdateResponse, _a1 error) *AdminServiceClient_UpdateWorkflowAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminServiceClient_UpdateWorkflowAttributes_Call) RunAndReturn(run func(context.Context, *admin.WorkflowAttributesUpdateRequest, ...grpc.CallOption) (*admin.WorkflowAttributesUpdateResponse, error)) *AdminServiceClient_UpdateWorkflowAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// NewAdminServiceClient creates a new instance of AdminServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminServiceClient {
	mock := &AdminServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
