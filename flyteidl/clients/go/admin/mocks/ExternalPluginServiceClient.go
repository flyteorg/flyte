// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
)

// ExternalPluginServiceClient is an autogenerated mock type for the ExternalPluginServiceClient type
type ExternalPluginServiceClient struct {
	mock.Mock
}

type ExternalPluginServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ExternalPluginServiceClient) EXPECT() *ExternalPluginServiceClient_Expecter {
	return &ExternalPluginServiceClient_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: ctx, in, opts
func (_m *ExternalPluginServiceClient) CreateTask(ctx context.Context, in *service.TaskCreateRequest, opts ...grpc.CallOption) (*service.TaskCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *service.TaskCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskCreateRequest, ...grpc.CallOption) (*service.TaskCreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskCreateRequest, ...grpc.CallOption) *service.TaskCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExternalPluginServiceClient_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type ExternalPluginServiceClient_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *service.TaskCreateRequest
//   - opts ...grpc.CallOption
func (_e *ExternalPluginServiceClient_Expecter) CreateTask(ctx interface{}, in interface{}, opts ...interface{}) *ExternalPluginServiceClient_CreateTask_Call {
	return &ExternalPluginServiceClient_CreateTask_Call{Call: _e.mock.On("CreateTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ExternalPluginServiceClient_CreateTask_Call) Run(run func(ctx context.Context, in *service.TaskCreateRequest, opts ...grpc.CallOption)) *ExternalPluginServiceClient_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*service.TaskCreateRequest), variadicArgs...)
	})
	return _c
}

func (_c *ExternalPluginServiceClient_CreateTask_Call) Return(_a0 *service.TaskCreateResponse, _a1 error) *ExternalPluginServiceClient_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExternalPluginServiceClient_CreateTask_Call) RunAndReturn(run func(context.Context, *service.TaskCreateRequest, ...grpc.CallOption) (*service.TaskCreateResponse, error)) *ExternalPluginServiceClient_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: ctx, in, opts
func (_m *ExternalPluginServiceClient) DeleteTask(ctx context.Context, in *service.TaskDeleteRequest, opts ...grpc.CallOption) (*service.TaskDeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *service.TaskDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskDeleteRequest, ...grpc.CallOption) (*service.TaskDeleteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskDeleteRequest, ...grpc.CallOption) *service.TaskDeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExternalPluginServiceClient_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type ExternalPluginServiceClient_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *service.TaskDeleteRequest
//   - opts ...grpc.CallOption
func (_e *ExternalPluginServiceClient_Expecter) DeleteTask(ctx interface{}, in interface{}, opts ...interface{}) *ExternalPluginServiceClient_DeleteTask_Call {
	return &ExternalPluginServiceClient_DeleteTask_Call{Call: _e.mock.On("DeleteTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ExternalPluginServiceClient_DeleteTask_Call) Run(run func(ctx context.Context, in *service.TaskDeleteRequest, opts ...grpc.CallOption)) *ExternalPluginServiceClient_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*service.TaskDeleteRequest), variadicArgs...)
	})
	return _c
}

func (_c *ExternalPluginServiceClient_DeleteTask_Call) Return(_a0 *service.TaskDeleteResponse, _a1 error) *ExternalPluginServiceClient_DeleteTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExternalPluginServiceClient_DeleteTask_Call) RunAndReturn(run func(context.Context, *service.TaskDeleteRequest, ...grpc.CallOption) (*service.TaskDeleteResponse, error)) *ExternalPluginServiceClient_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: ctx, in, opts
func (_m *ExternalPluginServiceClient) GetTask(ctx context.Context, in *service.TaskGetRequest, opts ...grpc.CallOption) (*service.TaskGetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *service.TaskGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskGetRequest, ...grpc.CallOption) (*service.TaskGetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskGetRequest, ...grpc.CallOption) *service.TaskGetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExternalPluginServiceClient_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type ExternalPluginServiceClient_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *service.TaskGetRequest
//   - opts ...grpc.CallOption
func (_e *ExternalPluginServiceClient_Expecter) GetTask(ctx interface{}, in interface{}, opts ...interface{}) *ExternalPluginServiceClient_GetTask_Call {
	return &ExternalPluginServiceClient_GetTask_Call{Call: _e.mock.On("GetTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ExternalPluginServiceClient_GetTask_Call) Run(run func(ctx context.Context, in *service.TaskGetRequest, opts ...grpc.CallOption)) *ExternalPluginServiceClient_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*service.TaskGetRequest), variadicArgs...)
	})
	return _c
}

func (_c *ExternalPluginServiceClient_GetTask_Call) Return(_a0 *service.TaskGetResponse, _a1 error) *ExternalPluginServiceClient_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExternalPluginServiceClient_GetTask_Call) RunAndReturn(run func(context.Context, *service.TaskGetRequest, ...grpc.CallOption) (*service.TaskGetResponse, error)) *ExternalPluginServiceClient_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewExternalPluginServiceClient creates a new instance of ExternalPluginServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExternalPluginServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExternalPluginServiceClient {
	mock := &ExternalPluginServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
