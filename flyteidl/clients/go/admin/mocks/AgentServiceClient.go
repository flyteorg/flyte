// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ConnectorServiceClient is an autogenerated mock type for the ConnectorServiceClient type
type ConnectorServiceClient struct {
	mock.Mock
}

type ConnectorServiceClient_CreateTask struct {
	*mock.Call
}

func (_m ConnectorServiceClient_CreateTask) Return(_a0 *admin.CreateTaskResponse, _a1 error) *ConnectorServiceClient_CreateTask {
	return &ConnectorServiceClient_CreateTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConnectorServiceClient) OnCreateTask(ctx context.Context, in *admin.CreateTaskRequest, opts ...grpc.CallOption) *ConnectorServiceClient_CreateTask {
	c_call := _m.On("CreateTask", ctx, in, opts)
	return &ConnectorServiceClient_CreateTask{Call: c_call}
}

func (_m *ConnectorServiceClient) OnCreateTaskMatch(matchers ...interface{}) *ConnectorServiceClient_CreateTask {
	c_call := _m.On("CreateTask", matchers...)
	return &ConnectorServiceClient_CreateTask{Call: c_call}
}

// CreateTask provides a mock function with given fields: ctx, in, opts
func (_m *ConnectorServiceClient) CreateTask(ctx context.Context, in *admin.CreateTaskRequest, opts ...grpc.CallOption) (*admin.CreateTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.CreateTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateTaskRequest, ...grpc.CallOption) *admin.CreateTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CreateTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.CreateTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ConnectorServiceClient_DeleteTask struct {
	*mock.Call
}

func (_m ConnectorServiceClient_DeleteTask) Return(_a0 *admin.DeleteTaskResponse, _a1 error) *ConnectorServiceClient_DeleteTask {
	return &ConnectorServiceClient_DeleteTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConnectorServiceClient) OnDeleteTask(ctx context.Context, in *admin.DeleteTaskRequest, opts ...grpc.CallOption) *ConnectorServiceClient_DeleteTask {
	c_call := _m.On("DeleteTask", ctx, in, opts)
	return &ConnectorServiceClient_DeleteTask{Call: c_call}
}

func (_m *ConnectorServiceClient) OnDeleteTaskMatch(matchers ...interface{}) *ConnectorServiceClient_DeleteTask {
	c_call := _m.On("DeleteTask", matchers...)
	return &ConnectorServiceClient_DeleteTask{Call: c_call}
}

// DeleteTask provides a mock function with given fields: ctx, in, opts
func (_m *ConnectorServiceClient) DeleteTask(ctx context.Context, in *admin.DeleteTaskRequest, opts ...grpc.CallOption) (*admin.DeleteTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.DeleteTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteTaskRequest, ...grpc.CallOption) *admin.DeleteTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DeleteTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.DeleteTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ConnectorServiceClient_GetTask struct {
	*mock.Call
}

func (_m ConnectorServiceClient_GetTask) Return(_a0 *admin.GetTaskResponse, _a1 error) *ConnectorServiceClient_GetTask {
	return &ConnectorServiceClient_GetTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConnectorServiceClient) OnGetTask(ctx context.Context, in *admin.GetTaskRequest, opts ...grpc.CallOption) *ConnectorServiceClient_GetTask {
	c_call := _m.On("GetTask", ctx, in, opts)
	return &ConnectorServiceClient_GetTask{Call: c_call}
}

func (_m *ConnectorServiceClient) OnGetTaskMatch(matchers ...interface{}) *ConnectorServiceClient_GetTask {
	c_call := _m.On("GetTask", matchers...)
	return &ConnectorServiceClient_GetTask{Call: c_call}
}

// GetTask provides a mock function with given fields: ctx, in, opts
func (_m *ConnectorServiceClient) GetTask(ctx context.Context, in *admin.GetTaskRequest, opts ...grpc.CallOption) (*admin.GetTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *admin.GetTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetTaskRequest, ...grpc.CallOption) *admin.GetTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
