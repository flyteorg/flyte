// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	oauth2 "golang.org/x/oauth2"
)

// TokenCache is an autogenerated mock type for the TokenCache type
type TokenCache struct {
	mock.Mock
}

type TokenCache_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenCache) EXPECT() *TokenCache_Expecter {
	return &TokenCache_Expecter{mock: &_m.Mock}
}

// CondBroadcast provides a mock function with given fields:
func (_m *TokenCache) CondBroadcast() {
	_m.Called()
}

// TokenCache_CondBroadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CondBroadcast'
type TokenCache_CondBroadcast_Call struct {
	*mock.Call
}

// CondBroadcast is a helper method to define mock.On call
func (_e *TokenCache_Expecter) CondBroadcast() *TokenCache_CondBroadcast_Call {
	return &TokenCache_CondBroadcast_Call{Call: _e.mock.On("CondBroadcast")}
}

func (_c *TokenCache_CondBroadcast_Call) Run(run func()) *TokenCache_CondBroadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenCache_CondBroadcast_Call) Return() *TokenCache_CondBroadcast_Call {
	_c.Call.Return()
	return _c
}

func (_c *TokenCache_CondBroadcast_Call) RunAndReturn(run func()) *TokenCache_CondBroadcast_Call {
	_c.Call.Return(run)
	return _c
}

// CondWait provides a mock function with given fields:
func (_m *TokenCache) CondWait() {
	_m.Called()
}

// TokenCache_CondWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CondWait'
type TokenCache_CondWait_Call struct {
	*mock.Call
}

// CondWait is a helper method to define mock.On call
func (_e *TokenCache_Expecter) CondWait() *TokenCache_CondWait_Call {
	return &TokenCache_CondWait_Call{Call: _e.mock.On("CondWait")}
}

func (_c *TokenCache_CondWait_Call) Run(run func()) *TokenCache_CondWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenCache_CondWait_Call) Return() *TokenCache_CondWait_Call {
	_c.Call.Return()
	return _c
}

func (_c *TokenCache_CondWait_Call) RunAndReturn(run func()) *TokenCache_CondWait_Call {
	_c.Call.Return(run)
	return _c
}

// GetToken provides a mock function with given fields:
func (_m *TokenCache) GetToken() (*oauth2.Token, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 *oauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func() (*oauth2.Token, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *oauth2.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenCache_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type TokenCache_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
func (_e *TokenCache_Expecter) GetToken() *TokenCache_GetToken_Call {
	return &TokenCache_GetToken_Call{Call: _e.mock.On("GetToken")}
}

func (_c *TokenCache_GetToken_Call) Run(run func()) *TokenCache_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenCache_GetToken_Call) Return(_a0 *oauth2.Token, _a1 error) *TokenCache_GetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenCache_GetToken_Call) RunAndReturn(run func() (*oauth2.Token, error)) *TokenCache_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// Lock provides a mock function with given fields:
func (_m *TokenCache) Lock() {
	_m.Called()
}

// TokenCache_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type TokenCache_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
func (_e *TokenCache_Expecter) Lock() *TokenCache_Lock_Call {
	return &TokenCache_Lock_Call{Call: _e.mock.On("Lock")}
}

func (_c *TokenCache_Lock_Call) Run(run func()) *TokenCache_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenCache_Lock_Call) Return() *TokenCache_Lock_Call {
	_c.Call.Return()
	return _c
}

func (_c *TokenCache_Lock_Call) RunAndReturn(run func()) *TokenCache_Lock_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeIfEquals provides a mock function with given fields: t
func (_m *TokenCache) PurgeIfEquals(t *oauth2.Token) (bool, error) {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for PurgeIfEquals")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*oauth2.Token) (bool, error)); ok {
		return rf(t)
	}
	if rf, ok := ret.Get(0).(func(*oauth2.Token) bool); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*oauth2.Token) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenCache_PurgeIfEquals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeIfEquals'
type TokenCache_PurgeIfEquals_Call struct {
	*mock.Call
}

// PurgeIfEquals is a helper method to define mock.On call
//   - t *oauth2.Token
func (_e *TokenCache_Expecter) PurgeIfEquals(t interface{}) *TokenCache_PurgeIfEquals_Call {
	return &TokenCache_PurgeIfEquals_Call{Call: _e.mock.On("PurgeIfEquals", t)}
}

func (_c *TokenCache_PurgeIfEquals_Call) Run(run func(t *oauth2.Token)) *TokenCache_PurgeIfEquals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*oauth2.Token))
	})
	return _c
}

func (_c *TokenCache_PurgeIfEquals_Call) Return(_a0 bool, _a1 error) *TokenCache_PurgeIfEquals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenCache_PurgeIfEquals_Call) RunAndReturn(run func(*oauth2.Token) (bool, error)) *TokenCache_PurgeIfEquals_Call {
	_c.Call.Return(run)
	return _c
}

// SaveToken provides a mock function with given fields: token
func (_m *TokenCache) SaveToken(token *oauth2.Token) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*oauth2.Token) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenCache_SaveToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveToken'
type TokenCache_SaveToken_Call struct {
	*mock.Call
}

// SaveToken is a helper method to define mock.On call
//   - token *oauth2.Token
func (_e *TokenCache_Expecter) SaveToken(token interface{}) *TokenCache_SaveToken_Call {
	return &TokenCache_SaveToken_Call{Call: _e.mock.On("SaveToken", token)}
}

func (_c *TokenCache_SaveToken_Call) Run(run func(token *oauth2.Token)) *TokenCache_SaveToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*oauth2.Token))
	})
	return _c
}

func (_c *TokenCache_SaveToken_Call) Return(_a0 error) *TokenCache_SaveToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenCache_SaveToken_Call) RunAndReturn(run func(*oauth2.Token) error) *TokenCache_SaveToken_Call {
	_c.Call.Return(run)
	return _c
}

// TryLock provides a mock function with given fields:
func (_m *TokenCache) TryLock() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TryLock")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TokenCache_TryLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryLock'
type TokenCache_TryLock_Call struct {
	*mock.Call
}

// TryLock is a helper method to define mock.On call
func (_e *TokenCache_Expecter) TryLock() *TokenCache_TryLock_Call {
	return &TokenCache_TryLock_Call{Call: _e.mock.On("TryLock")}
}

func (_c *TokenCache_TryLock_Call) Run(run func()) *TokenCache_TryLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenCache_TryLock_Call) Return(_a0 bool) *TokenCache_TryLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenCache_TryLock_Call) RunAndReturn(run func() bool) *TokenCache_TryLock_Call {
	_c.Call.Return(run)
	return _c
}

// Unlock provides a mock function with given fields:
func (_m *TokenCache) Unlock() {
	_m.Called()
}

// TokenCache_Unlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlock'
type TokenCache_Unlock_Call struct {
	*mock.Call
}

// Unlock is a helper method to define mock.On call
func (_e *TokenCache_Expecter) Unlock() *TokenCache_Unlock_Call {
	return &TokenCache_Unlock_Call{Call: _e.mock.On("Unlock")}
}

func (_c *TokenCache_Unlock_Call) Run(run func()) *TokenCache_Unlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenCache_Unlock_Call) Return() *TokenCache_Unlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *TokenCache_Unlock_Call) RunAndReturn(run func()) *TokenCache_Unlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenCache creates a new instance of TokenCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenCache {
	mock := &TokenCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
