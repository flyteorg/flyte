// @generated by protoc-gen-connect-es v1.3.0 with parameter "target=ts"
// @generated from file flyteidl/service/connector.proto (package flyteidl.service, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateTaskRequest, CreateTaskResponse, DeleteTaskRequest, DeleteTaskResponse, ExecuteTaskSyncRequest, ExecuteTaskSyncResponse, GetConnectorRequest, GetConnectorResponse, GetTaskLogsRequest, GetTaskLogsResponse, GetTaskMetricsRequest, GetTaskMetricsResponse, GetTaskRequest, GetTaskResponse, ListConnectorsRequest, ListConnectorsResponse } from "../connector/connector_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * SyncConnectorService defines an RPC Service that allows propeller to send the request to the connector server synchronously.
 *
 * @generated from service flyteidl.service.SyncConnectorService
 */
export const SyncConnectorService = {
  typeName: "flyteidl.service.SyncConnectorService",
  methods: {
    /**
     * ExecuteTaskSync streams the create request and inputs to the connector service and streams the outputs back.
     *
     * @generated from rpc flyteidl.service.SyncConnectorService.ExecuteTaskSync
     */
    executeTaskSync: {
      name: "ExecuteTaskSync",
      I: ExecuteTaskSyncRequest,
      O: ExecuteTaskSyncResponse,
      kind: MethodKind.BiDiStreaming,
    },
  }
} as const;

/**
 * AsyncConnectorService defines an RPC Service that allows propeller to send the request to the connector server asynchronously.
 *
 * @generated from service flyteidl.service.AsyncConnectorService
 */
export const AsyncConnectorService = {
  typeName: "flyteidl.service.AsyncConnectorService",
  methods: {
    /**
     * CreateTask sends a task create request to the connector service.
     *
     * @generated from rpc flyteidl.service.AsyncConnectorService.CreateTask
     */
    createTask: {
      name: "CreateTask",
      I: CreateTaskRequest,
      O: CreateTaskResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get job status.
     *
     * @generated from rpc flyteidl.service.AsyncConnectorService.GetTask
     */
    getTask: {
      name: "GetTask",
      I: GetTaskRequest,
      O: GetTaskResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete the task resource.
     *
     * @generated from rpc flyteidl.service.AsyncConnectorService.DeleteTask
     */
    deleteTask: {
      name: "DeleteTask",
      I: DeleteTaskRequest,
      O: DeleteTaskResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetTaskMetrics returns one or more task execution metrics, if available.
     *
     * Errors include
     *  * OutOfRange if metrics are not available for the specified task time range
     *  * various other errors
     *
     * @generated from rpc flyteidl.service.AsyncConnectorService.GetTaskMetrics
     */
    getTaskMetrics: {
      name: "GetTaskMetrics",
      I: GetTaskMetricsRequest,
      O: GetTaskMetricsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetTaskLogs returns task execution logs, if available.
     *
     * @generated from rpc flyteidl.service.AsyncConnectorService.GetTaskLogs
     */
    getTaskLogs: {
      name: "GetTaskLogs",
      I: GetTaskLogsRequest,
      O: GetTaskLogsResponse,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

/**
 * ConnectorMetadataService defines an RPC service that is also served over HTTP via grpc-gateway.
 * This service allows propeller or users to get the metadata of connectors.
 *
 * @generated from service flyteidl.service.ConnectorMetadataService
 */
export const ConnectorMetadataService = {
  typeName: "flyteidl.service.ConnectorMetadataService",
  methods: {
    /**
     * Fetch a :ref:`ref_flyteidl.connector.Connector` definition.
     *
     * @generated from rpc flyteidl.service.ConnectorMetadataService.GetConnector
     */
    getConnector: {
      name: "GetConnector",
      I: GetConnectorRequest,
      O: GetConnectorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Fetch a list of :ref:`ref_flyteidl.connector.Connector` definitions.
     *
     * @generated from rpc flyteidl.service.ConnectorMetadataService.ListConnectors
     */
    listConnectors: {
      name: "ListConnectors",
      I: ListConnectorsRequest,
      O: ListConnectorsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

