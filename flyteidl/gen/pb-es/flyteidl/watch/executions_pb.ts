// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file flyteidl/watch/executions.proto (package flyteidl.watch, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { WorkflowExecutionIdentifier } from "../core/identifier_pb.js";
import { ExecutionError, WorkflowExecution_Phase } from "../core/execution_pb.js";

/**
 * @generated from message flyteidl.watch.WatchExecutionStatusUpdatesRequest
 */
export class WatchExecutionStatusUpdatesRequest extends Message<WatchExecutionStatusUpdatesRequest> {
  /**
   * In a multi-cluster setup, propeller should only request executions that were assigned to a given cluster
   *
   * @generated from field: string cluster = 1;
   */
  cluster = "";

  constructor(data?: PartialMessage<WatchExecutionStatusUpdatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.watch.WatchExecutionStatusUpdatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchExecutionStatusUpdatesRequest {
    return new WatchExecutionStatusUpdatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchExecutionStatusUpdatesRequest {
    return new WatchExecutionStatusUpdatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchExecutionStatusUpdatesRequest {
    return new WatchExecutionStatusUpdatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchExecutionStatusUpdatesRequest | PlainMessage<WatchExecutionStatusUpdatesRequest> | undefined, b: WatchExecutionStatusUpdatesRequest | PlainMessage<WatchExecutionStatusUpdatesRequest> | undefined): boolean {
    return proto3.util.equals(WatchExecutionStatusUpdatesRequest, a, b);
  }
}

/**
 * @generated from message flyteidl.watch.WatchExecutionStatusUpdatesResponse
 */
export class WatchExecutionStatusUpdatesResponse extends Message<WatchExecutionStatusUpdatesResponse> {
  /**
   * @generated from field: flyteidl.core.WorkflowExecutionIdentifier id = 1;
   */
  id?: WorkflowExecutionIdentifier;

  /**
   * @generated from field: flyteidl.core.WorkflowExecution.Phase phase = 2;
   */
  phase = WorkflowExecution_Phase.UNDEFINED;

  /**
   * May only be returned when phase is SUCCEEDED
   *
   * @generated from field: string output_uri = 3;
   */
  outputUri = "";

  /**
   * May only be returned when phase is FAILED
   *
   * @generated from field: flyteidl.core.ExecutionError error = 4;
   */
  error?: ExecutionError;

  constructor(data?: PartialMessage<WatchExecutionStatusUpdatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.watch.WatchExecutionStatusUpdatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: WorkflowExecutionIdentifier },
    { no: 2, name: "phase", kind: "enum", T: proto3.getEnumType(WorkflowExecution_Phase) },
    { no: 3, name: "output_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "error", kind: "message", T: ExecutionError },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchExecutionStatusUpdatesResponse {
    return new WatchExecutionStatusUpdatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchExecutionStatusUpdatesResponse {
    return new WatchExecutionStatusUpdatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchExecutionStatusUpdatesResponse {
    return new WatchExecutionStatusUpdatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchExecutionStatusUpdatesResponse | PlainMessage<WatchExecutionStatusUpdatesResponse> | undefined, b: WatchExecutionStatusUpdatesResponse | PlainMessage<WatchExecutionStatusUpdatesResponse> | undefined): boolean {
    return proto3.util.equals(WatchExecutionStatusUpdatesResponse, a, b);
  }
}

