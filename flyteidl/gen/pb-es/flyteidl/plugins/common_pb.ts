// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file flyteidl/plugins/common.proto (package flyteidl.plugins, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Resources } from "../core/tasks_pb.js";

/**
 * @generated from enum flyteidl.plugins.RestartPolicy
 */
export enum RestartPolicy {
  /**
   * @generated from enum value: RESTART_POLICY_NEVER = 0;
   */
  NEVER = 0,

  /**
   * @generated from enum value: RESTART_POLICY_ON_FAILURE = 1;
   */
  ON_FAILURE = 1,

  /**
   * @generated from enum value: RESTART_POLICY_ALWAYS = 2;
   */
  ALWAYS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(RestartPolicy)
proto3.util.setEnumType(RestartPolicy, "flyteidl.plugins.RestartPolicy", [
  { no: 0, name: "RESTART_POLICY_NEVER" },
  { no: 1, name: "RESTART_POLICY_ON_FAILURE" },
  { no: 2, name: "RESTART_POLICY_ALWAYS" },
]);

/**
 * @generated from message flyteidl.plugins.CommonReplicaSpec
 */
export class CommonReplicaSpec extends Message<CommonReplicaSpec> {
  /**
   * Number of replicas
   *
   * @generated from field: int32 replicas = 1;
   */
  replicas = 0;

  /**
   * Image used for the replica group
   *
   * @generated from field: string image = 2;
   */
  image = "";

  /**
   * Resources required for the replica group
   *
   * @generated from field: flyteidl.core.Resources resources = 3;
   */
  resources?: Resources;

  /**
   * RestartPolicy determines whether pods will be restarted when they exit
   *
   * @generated from field: flyteidl.plugins.RestartPolicy restart_policy = 4;
   */
  restartPolicy = RestartPolicy.NEVER;

  constructor(data?: PartialMessage<CommonReplicaSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.plugins.CommonReplicaSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resources", kind: "message", T: Resources },
    { no: 4, name: "restart_policy", kind: "enum", T: proto3.getEnumType(RestartPolicy) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommonReplicaSpec {
    return new CommonReplicaSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommonReplicaSpec {
    return new CommonReplicaSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommonReplicaSpec {
    return new CommonReplicaSpec().fromJsonString(jsonString, options);
  }

  static equals(a: CommonReplicaSpec | PlainMessage<CommonReplicaSpec> | undefined, b: CommonReplicaSpec | PlainMessage<CommonReplicaSpec> | undefined): boolean {
    return proto3.util.equals(CommonReplicaSpec, a, b);
  }
}

