// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file flyteidl/admin/org_attributes.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { MatchableResource, MatchingAttributes } from "./matchable_resource_pb.js";

/**
 * Defines a set of custom matching attributes at the org level.
 * For more info on matchable attributes, see :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration`
 *
 * @generated from message flyteidl.admin.OrgAttributes
 */
export class OrgAttributes extends Message<OrgAttributes> {
  /**
   * @generated from field: flyteidl.admin.MatchingAttributes matching_attributes = 1;
   */
  matchingAttributes?: MatchingAttributes;

  /**
   * Optional, org key applied to the attributes.
   *
   * @generated from field: string org = 2;
   */
  org = "";

  constructor(data?: PartialMessage<OrgAttributes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OrgAttributes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "matching_attributes", kind: "message", T: MatchingAttributes },
    { no: 2, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgAttributes {
    return new OrgAttributes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgAttributes {
    return new OrgAttributes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgAttributes {
    return new OrgAttributes().fromJsonString(jsonString, options);
  }

  static equals(a: OrgAttributes | PlainMessage<OrgAttributes> | undefined, b: OrgAttributes | PlainMessage<OrgAttributes> | undefined): boolean {
    return proto3.util.equals(OrgAttributes, a, b);
  }
}

/**
 * Sets custom attributes for an org.
 * For more info on matchable attributes, see :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration`
 *
 * @generated from message flyteidl.admin.OrgAttributesUpdateRequest
 */
export class OrgAttributesUpdateRequest extends Message<OrgAttributesUpdateRequest> {
  /**
   * +required
   *
   * @generated from field: flyteidl.admin.OrgAttributes attributes = 1;
   */
  attributes?: OrgAttributes;

  constructor(data?: PartialMessage<OrgAttributesUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OrgAttributesUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attributes", kind: "message", T: OrgAttributes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgAttributesUpdateRequest {
    return new OrgAttributesUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgAttributesUpdateRequest {
    return new OrgAttributesUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgAttributesUpdateRequest {
    return new OrgAttributesUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OrgAttributesUpdateRequest | PlainMessage<OrgAttributesUpdateRequest> | undefined, b: OrgAttributesUpdateRequest | PlainMessage<OrgAttributesUpdateRequest> | undefined): boolean {
    return proto3.util.equals(OrgAttributesUpdateRequest, a, b);
  }
}

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.OrgAttributesUpdateResponse
 */
export class OrgAttributesUpdateResponse extends Message<OrgAttributesUpdateResponse> {
  constructor(data?: PartialMessage<OrgAttributesUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OrgAttributesUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgAttributesUpdateResponse {
    return new OrgAttributesUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgAttributesUpdateResponse {
    return new OrgAttributesUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgAttributesUpdateResponse {
    return new OrgAttributesUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OrgAttributesUpdateResponse | PlainMessage<OrgAttributesUpdateResponse> | undefined, b: OrgAttributesUpdateResponse | PlainMessage<OrgAttributesUpdateResponse> | undefined): boolean {
    return proto3.util.equals(OrgAttributesUpdateResponse, a, b);
  }
}

/**
 * Request to get an individual org attribute override.
 * For more info on matchable attributes, see :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration`
 *
 * @generated from message flyteidl.admin.OrgAttributesGetRequest
 */
export class OrgAttributesGetRequest extends Message<OrgAttributesGetRequest> {
  /**
   * Which type of matchable attributes to return.
   * +required
   *
   * @generated from field: flyteidl.admin.MatchableResource resource_type = 1;
   */
  resourceType = MatchableResource.TASK_RESOURCE;

  /**
   * Optional, org key applied to the attributes.
   *
   * @generated from field: string org = 2;
   */
  org = "";

  constructor(data?: PartialMessage<OrgAttributesGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OrgAttributesGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_type", kind: "enum", T: proto3.getEnumType(MatchableResource) },
    { no: 2, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgAttributesGetRequest {
    return new OrgAttributesGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgAttributesGetRequest {
    return new OrgAttributesGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgAttributesGetRequest {
    return new OrgAttributesGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OrgAttributesGetRequest | PlainMessage<OrgAttributesGetRequest> | undefined, b: OrgAttributesGetRequest | PlainMessage<OrgAttributesGetRequest> | undefined): boolean {
    return proto3.util.equals(OrgAttributesGetRequest, a, b);
  }
}

/**
 * Response to get an individual org attribute override.
 * For more info on matchable attributes, see :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration`
 *
 * @generated from message flyteidl.admin.OrgAttributesGetResponse
 */
export class OrgAttributesGetResponse extends Message<OrgAttributesGetResponse> {
  /**
   * @generated from field: flyteidl.admin.OrgAttributes attributes = 1;
   */
  attributes?: OrgAttributes;

  constructor(data?: PartialMessage<OrgAttributesGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OrgAttributesGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attributes", kind: "message", T: OrgAttributes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgAttributesGetResponse {
    return new OrgAttributesGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgAttributesGetResponse {
    return new OrgAttributesGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgAttributesGetResponse {
    return new OrgAttributesGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OrgAttributesGetResponse | PlainMessage<OrgAttributesGetResponse> | undefined, b: OrgAttributesGetResponse | PlainMessage<OrgAttributesGetResponse> | undefined): boolean {
    return proto3.util.equals(OrgAttributesGetResponse, a, b);
  }
}

/**
 * Request to delete a set matchable org attribute override.
 * For more info on matchable attributes, see :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration`
 *
 * @generated from message flyteidl.admin.OrgAttributesDeleteRequest
 */
export class OrgAttributesDeleteRequest extends Message<OrgAttributesDeleteRequest> {
  /**
   * Which type of matchable attributes to delete.
   * +required
   *
   * @generated from field: flyteidl.admin.MatchableResource resource_type = 1;
   */
  resourceType = MatchableResource.TASK_RESOURCE;

  /**
   * Optional, org key applied to the attributes.
   *
   * @generated from field: string org = 2;
   */
  org = "";

  constructor(data?: PartialMessage<OrgAttributesDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OrgAttributesDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_type", kind: "enum", T: proto3.getEnumType(MatchableResource) },
    { no: 2, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgAttributesDeleteRequest {
    return new OrgAttributesDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgAttributesDeleteRequest {
    return new OrgAttributesDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgAttributesDeleteRequest {
    return new OrgAttributesDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OrgAttributesDeleteRequest | PlainMessage<OrgAttributesDeleteRequest> | undefined, b: OrgAttributesDeleteRequest | PlainMessage<OrgAttributesDeleteRequest> | undefined): boolean {
    return proto3.util.equals(OrgAttributesDeleteRequest, a, b);
  }
}

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.OrgAttributesDeleteResponse
 */
export class OrgAttributesDeleteResponse extends Message<OrgAttributesDeleteResponse> {
  constructor(data?: PartialMessage<OrgAttributesDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OrgAttributesDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgAttributesDeleteResponse {
    return new OrgAttributesDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgAttributesDeleteResponse {
    return new OrgAttributesDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgAttributesDeleteResponse {
    return new OrgAttributesDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OrgAttributesDeleteResponse | PlainMessage<OrgAttributesDeleteResponse> | undefined, b: OrgAttributesDeleteResponse | PlainMessage<OrgAttributesDeleteResponse> | undefined): boolean {
    return proto3.util.equals(OrgAttributesDeleteResponse, a, b);
  }
}

