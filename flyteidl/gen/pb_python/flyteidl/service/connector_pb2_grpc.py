# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from flyteidl.connector import connector_pb2 as flyteidl_dot_connector_dot_connector__pb2


class SyncConnectorServiceStub(object):
    """SyncConnectorService defines an RPC Service that allows propeller to send the request to the connector server synchronously.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteTaskSync = channel.stream_stream(
                '/flyteidl.service.SyncConnectorService/ExecuteTaskSync',
                request_serializer=flyteidl_dot_connector_dot_connector__pb2.ExecuteTaskSyncRequest.SerializeToString,
                response_deserializer=flyteidl_dot_connector_dot_connector__pb2.ExecuteTaskSyncResponse.FromString,
                )


class SyncConnectorServiceServicer(object):
    """SyncConnectorService defines an RPC Service that allows propeller to send the request to the connector server synchronously.
    """

    def ExecuteTaskSync(self, request_iterator, context):
        """ExecuteTaskSync streams the create request and inputs to the connector service and streams the outputs back.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SyncConnectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteTaskSync': grpc.stream_stream_rpc_method_handler(
                    servicer.ExecuteTaskSync,
                    request_deserializer=flyteidl_dot_connector_dot_connector__pb2.ExecuteTaskSyncRequest.FromString,
                    response_serializer=flyteidl_dot_connector_dot_connector__pb2.ExecuteTaskSyncResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flyteidl.service.SyncConnectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SyncConnectorService(object):
    """SyncConnectorService defines an RPC Service that allows propeller to send the request to the connector server synchronously.
    """

    @staticmethod
    def ExecuteTaskSync(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/flyteidl.service.SyncConnectorService/ExecuteTaskSync',
            flyteidl_dot_connector_dot_connector__pb2.ExecuteTaskSyncRequest.SerializeToString,
            flyteidl_dot_connector_dot_connector__pb2.ExecuteTaskSyncResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AsyncConnectorServiceStub(object):
    """AsyncConnectorService defines an RPC Service that allows propeller to send the request to the connector server asynchronously.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTask = channel.unary_unary(
                '/flyteidl.service.AsyncConnectorService/CreateTask',
                request_serializer=flyteidl_dot_connector_dot_connector__pb2.CreateTaskRequest.SerializeToString,
                response_deserializer=flyteidl_dot_connector_dot_connector__pb2.CreateTaskResponse.FromString,
                )
        self.GetTask = channel.unary_unary(
                '/flyteidl.service.AsyncConnectorService/GetTask',
                request_serializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskRequest.SerializeToString,
                response_deserializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskResponse.FromString,
                )
        self.DeleteTask = channel.unary_unary(
                '/flyteidl.service.AsyncConnectorService/DeleteTask',
                request_serializer=flyteidl_dot_connector_dot_connector__pb2.DeleteTaskRequest.SerializeToString,
                response_deserializer=flyteidl_dot_connector_dot_connector__pb2.DeleteTaskResponse.FromString,
                )
        self.GetTaskMetrics = channel.unary_unary(
                '/flyteidl.service.AsyncConnectorService/GetTaskMetrics',
                request_serializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskMetricsRequest.SerializeToString,
                response_deserializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskMetricsResponse.FromString,
                )
        self.GetTaskLogs = channel.unary_stream(
                '/flyteidl.service.AsyncConnectorService/GetTaskLogs',
                request_serializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskLogsRequest.SerializeToString,
                response_deserializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskLogsResponse.FromString,
                )


class AsyncConnectorServiceServicer(object):
    """AsyncConnectorService defines an RPC Service that allows propeller to send the request to the connector server asynchronously.
    """

    def CreateTask(self, request, context):
        """CreateTask sends a task create request to the connector service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Get job status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTask(self, request, context):
        """Delete the task resource.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskMetrics(self, request, context):
        """GetTaskMetrics returns one or more task execution metrics, if available.

        Errors include
        * OutOfRange if metrics are not available for the specified task time range
        * various other errors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskLogs(self, request, context):
        """GetTaskLogs returns task execution logs, if available.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AsyncConnectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTask,
                    request_deserializer=flyteidl_dot_connector_dot_connector__pb2.CreateTaskRequest.FromString,
                    response_serializer=flyteidl_dot_connector_dot_connector__pb2.CreateTaskResponse.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskRequest.FromString,
                    response_serializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskResponse.SerializeToString,
            ),
            'DeleteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTask,
                    request_deserializer=flyteidl_dot_connector_dot_connector__pb2.DeleteTaskRequest.FromString,
                    response_serializer=flyteidl_dot_connector_dot_connector__pb2.DeleteTaskResponse.SerializeToString,
            ),
            'GetTaskMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskMetrics,
                    request_deserializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskMetricsRequest.FromString,
                    response_serializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskMetricsResponse.SerializeToString,
            ),
            'GetTaskLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTaskLogs,
                    request_deserializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskLogsRequest.FromString,
                    response_serializer=flyteidl_dot_connector_dot_connector__pb2.GetTaskLogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flyteidl.service.AsyncConnectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AsyncConnectorService(object):
    """AsyncConnectorService defines an RPC Service that allows propeller to send the request to the connector server asynchronously.
    """

    @staticmethod
    def CreateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.service.AsyncConnectorService/CreateTask',
            flyteidl_dot_connector_dot_connector__pb2.CreateTaskRequest.SerializeToString,
            flyteidl_dot_connector_dot_connector__pb2.CreateTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.service.AsyncConnectorService/GetTask',
            flyteidl_dot_connector_dot_connector__pb2.GetTaskRequest.SerializeToString,
            flyteidl_dot_connector_dot_connector__pb2.GetTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.service.AsyncConnectorService/DeleteTask',
            flyteidl_dot_connector_dot_connector__pb2.DeleteTaskRequest.SerializeToString,
            flyteidl_dot_connector_dot_connector__pb2.DeleteTaskResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.service.AsyncConnectorService/GetTaskMetrics',
            flyteidl_dot_connector_dot_connector__pb2.GetTaskMetricsRequest.SerializeToString,
            flyteidl_dot_connector_dot_connector__pb2.GetTaskMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/flyteidl.service.AsyncConnectorService/GetTaskLogs',
            flyteidl_dot_connector_dot_connector__pb2.GetTaskLogsRequest.SerializeToString,
            flyteidl_dot_connector_dot_connector__pb2.GetTaskLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ConnectorMetadataServiceStub(object):
    """ConnectorMetadataService defines an RPC service that is also served over HTTP via grpc-gateway.
    This service allows propeller or users to get the metadata of connectors.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConnector = channel.unary_unary(
                '/flyteidl.service.ConnectorMetadataService/GetConnector',
                request_serializer=flyteidl_dot_connector_dot_connector__pb2.GetConnectorRequest.SerializeToString,
                response_deserializer=flyteidl_dot_connector_dot_connector__pb2.GetConnectorResponse.FromString,
                )
        self.ListConnectors = channel.unary_unary(
                '/flyteidl.service.ConnectorMetadataService/ListConnectors',
                request_serializer=flyteidl_dot_connector_dot_connector__pb2.ListConnectorsRequest.SerializeToString,
                response_deserializer=flyteidl_dot_connector_dot_connector__pb2.ListConnectorsResponse.FromString,
                )


class ConnectorMetadataServiceServicer(object):
    """ConnectorMetadataService defines an RPC service that is also served over HTTP via grpc-gateway.
    This service allows propeller or users to get the metadata of connectors.
    """

    def GetConnector(self, request, context):
        """Fetch a :ref:`ref_flyteidl.connector.Connector` definition.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListConnectors(self, request, context):
        """Fetch a list of :ref:`ref_flyteidl.connector.Connector` definitions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectorMetadataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetConnector': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnector,
                    request_deserializer=flyteidl_dot_connector_dot_connector__pb2.GetConnectorRequest.FromString,
                    response_serializer=flyteidl_dot_connector_dot_connector__pb2.GetConnectorResponse.SerializeToString,
            ),
            'ListConnectors': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConnectors,
                    request_deserializer=flyteidl_dot_connector_dot_connector__pb2.ListConnectorsRequest.FromString,
                    response_serializer=flyteidl_dot_connector_dot_connector__pb2.ListConnectorsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flyteidl.service.ConnectorMetadataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConnectorMetadataService(object):
    """ConnectorMetadataService defines an RPC service that is also served over HTTP via grpc-gateway.
    This service allows propeller or users to get the metadata of connectors.
    """

    @staticmethod
    def GetConnector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.service.ConnectorMetadataService/GetConnector',
            flyteidl_dot_connector_dot_connector__pb2.GetConnectorRequest.SerializeToString,
            flyteidl_dot_connector_dot_connector__pb2.GetConnectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListConnectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/flyteidl.service.ConnectorMetadataService/ListConnectors',
            flyteidl_dot_connector_dot_connector__pb2.ListConnectorsRequest.SerializeToString,
            flyteidl_dot_connector_dot_connector__pb2.ListConnectorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
