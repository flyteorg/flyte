// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl/admin/configuration.proto

package admin

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The source of an attribute. We may have other sources in the future.
type AttributesSource int32

const (
	// The source is unspecified.
	AttributesSource_SOURCE_UNSPECIFIED AttributesSource = 0
	// The configuration is a global configuration.
	AttributesSource_GLOBAL AttributesSource = 1
	// The configuration is a domain configuration.
	AttributesSource_DOMAIN AttributesSource = 2
	// The configuration is a project configuration.
	AttributesSource_PROJECT AttributesSource = 3
	// The configuration is a project-domain configuration.
	AttributesSource_PROJECT_DOMAIN AttributesSource = 4
)

// Enum value maps for AttributesSource.
var (
	AttributesSource_name = map[int32]string{
		0: "SOURCE_UNSPECIFIED",
		1: "GLOBAL",
		2: "DOMAIN",
		3: "PROJECT",
		4: "PROJECT_DOMAIN",
	}
	AttributesSource_value = map[string]int32{
		"SOURCE_UNSPECIFIED": 0,
		"GLOBAL":             1,
		"DOMAIN":             2,
		"PROJECT":            3,
		"PROJECT_DOMAIN":     4,
	}
)

func (x AttributesSource) Enum() *AttributesSource {
	p := new(AttributesSource)
	*p = x
	return p
}

func (x AttributesSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributesSource) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_admin_configuration_proto_enumTypes[0].Descriptor()
}

func (AttributesSource) Type() protoreflect.EnumType {
	return &file_flyteidl_admin_configuration_proto_enumTypes[0]
}

func (x AttributesSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributesSource.Descriptor instead.
func (AttributesSource) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{0}
}

// Identifier for a configuration.
type ConfigurationID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the org the configuration belongs to.
	// +optional
	Org string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	// Name of the domain the configuration belongs to.
	// +optional
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	// Name of the project the configuration belongs to.
	// +optional
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Name of the workflow the configuration belongs to.
	// +optional
	Workflow string `protobuf:"bytes,4,opt,name=workflow,proto3" json:"workflow,omitempty"`
}

func (x *ConfigurationID) Reset() {
	*x = ConfigurationID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationID) ProtoMessage() {}

func (x *ConfigurationID) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationID.ProtoReflect.Descriptor instead.
func (*ConfigurationID) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigurationID) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *ConfigurationID) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ConfigurationID) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ConfigurationID) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

type TaskResourceAttributesWithSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source AttributesSource        `protobuf:"varint,1,opt,name=source,proto3,enum=flyteidl.admin.AttributesSource" json:"source,omitempty"`
	Value  *TaskResourceAttributes `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TaskResourceAttributesWithSource) Reset() {
	*x = TaskResourceAttributesWithSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResourceAttributesWithSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResourceAttributesWithSource) ProtoMessage() {}

func (x *TaskResourceAttributesWithSource) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResourceAttributesWithSource.ProtoReflect.Descriptor instead.
func (*TaskResourceAttributesWithSource) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{1}
}

func (x *TaskResourceAttributesWithSource) GetSource() AttributesSource {
	if x != nil {
		return x.Source
	}
	return AttributesSource_SOURCE_UNSPECIFIED
}

func (x *TaskResourceAttributesWithSource) GetValue() *TaskResourceAttributes {
	if x != nil {
		return x.Value
	}
	return nil
}

type ClusterResourceAttributesWithSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source AttributesSource           `protobuf:"varint,1,opt,name=source,proto3,enum=flyteidl.admin.AttributesSource" json:"source,omitempty"`
	Value  *ClusterResourceAttributes `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ClusterResourceAttributesWithSource) Reset() {
	*x = ClusterResourceAttributesWithSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResourceAttributesWithSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResourceAttributesWithSource) ProtoMessage() {}

func (x *ClusterResourceAttributesWithSource) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResourceAttributesWithSource.ProtoReflect.Descriptor instead.
func (*ClusterResourceAttributesWithSource) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterResourceAttributesWithSource) GetSource() AttributesSource {
	if x != nil {
		return x.Source
	}
	return AttributesSource_SOURCE_UNSPECIFIED
}

func (x *ClusterResourceAttributesWithSource) GetValue() *ClusterResourceAttributes {
	if x != nil {
		return x.Value
	}
	return nil
}

type ExecutionQueueAttributesWithSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source AttributesSource          `protobuf:"varint,1,opt,name=source,proto3,enum=flyteidl.admin.AttributesSource" json:"source,omitempty"`
	Value  *ExecutionQueueAttributes `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExecutionQueueAttributesWithSource) Reset() {
	*x = ExecutionQueueAttributesWithSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionQueueAttributesWithSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionQueueAttributesWithSource) ProtoMessage() {}

func (x *ExecutionQueueAttributesWithSource) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionQueueAttributesWithSource.ProtoReflect.Descriptor instead.
func (*ExecutionQueueAttributesWithSource) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutionQueueAttributesWithSource) GetSource() AttributesSource {
	if x != nil {
		return x.Source
	}
	return AttributesSource_SOURCE_UNSPECIFIED
}

func (x *ExecutionQueueAttributesWithSource) GetValue() *ExecutionQueueAttributes {
	if x != nil {
		return x.Value
	}
	return nil
}

type ExecutionClusterLabelWithSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source AttributesSource       `protobuf:"varint,1,opt,name=source,proto3,enum=flyteidl.admin.AttributesSource" json:"source,omitempty"`
	Value  *ExecutionClusterLabel `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExecutionClusterLabelWithSource) Reset() {
	*x = ExecutionClusterLabelWithSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionClusterLabelWithSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionClusterLabelWithSource) ProtoMessage() {}

func (x *ExecutionClusterLabelWithSource) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionClusterLabelWithSource.ProtoReflect.Descriptor instead.
func (*ExecutionClusterLabelWithSource) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{4}
}

func (x *ExecutionClusterLabelWithSource) GetSource() AttributesSource {
	if x != nil {
		return x.Source
	}
	return AttributesSource_SOURCE_UNSPECIFIED
}

func (x *ExecutionClusterLabelWithSource) GetValue() *ExecutionClusterLabel {
	if x != nil {
		return x.Value
	}
	return nil
}

type QualityOfServiceWithSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source AttributesSource       `protobuf:"varint,1,opt,name=source,proto3,enum=flyteidl.admin.AttributesSource" json:"source,omitempty"`
	Value  *core.QualityOfService `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QualityOfServiceWithSource) Reset() {
	*x = QualityOfServiceWithSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityOfServiceWithSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityOfServiceWithSource) ProtoMessage() {}

func (x *QualityOfServiceWithSource) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityOfServiceWithSource.ProtoReflect.Descriptor instead.
func (*QualityOfServiceWithSource) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{5}
}

func (x *QualityOfServiceWithSource) GetSource() AttributesSource {
	if x != nil {
		return x.Source
	}
	return AttributesSource_SOURCE_UNSPECIFIED
}

func (x *QualityOfServiceWithSource) GetValue() *core.QualityOfService {
	if x != nil {
		return x.Value
	}
	return nil
}

type PluginOverridesWithSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source AttributesSource `protobuf:"varint,1,opt,name=source,proto3,enum=flyteidl.admin.AttributesSource" json:"source,omitempty"`
	Value  *PluginOverrides `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PluginOverridesWithSource) Reset() {
	*x = PluginOverridesWithSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginOverridesWithSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginOverridesWithSource) ProtoMessage() {}

func (x *PluginOverridesWithSource) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginOverridesWithSource.ProtoReflect.Descriptor instead.
func (*PluginOverridesWithSource) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{6}
}

func (x *PluginOverridesWithSource) GetSource() AttributesSource {
	if x != nil {
		return x.Source
	}
	return AttributesSource_SOURCE_UNSPECIFIED
}

func (x *PluginOverridesWithSource) GetValue() *PluginOverrides {
	if x != nil {
		return x.Value
	}
	return nil
}

type WorkflowExecutionConfigWithSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source AttributesSource         `protobuf:"varint,1,opt,name=source,proto3,enum=flyteidl.admin.AttributesSource" json:"source,omitempty"`
	Value  *WorkflowExecutionConfig `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WorkflowExecutionConfigWithSource) Reset() {
	*x = WorkflowExecutionConfigWithSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionConfigWithSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionConfigWithSource) ProtoMessage() {}

func (x *WorkflowExecutionConfigWithSource) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionConfigWithSource.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionConfigWithSource) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{7}
}

func (x *WorkflowExecutionConfigWithSource) GetSource() AttributesSource {
	if x != nil {
		return x.Source
	}
	return AttributesSource_SOURCE_UNSPECIFIED
}

func (x *WorkflowExecutionConfigWithSource) GetValue() *WorkflowExecutionConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type ClusterAssignmentWithSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source AttributesSource   `protobuf:"varint,1,opt,name=source,proto3,enum=flyteidl.admin.AttributesSource" json:"source,omitempty"`
	Value  *ClusterAssignment `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ClusterAssignmentWithSource) Reset() {
	*x = ClusterAssignmentWithSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAssignmentWithSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAssignmentWithSource) ProtoMessage() {}

func (x *ClusterAssignmentWithSource) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAssignmentWithSource.ProtoReflect.Descriptor instead.
func (*ClusterAssignmentWithSource) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterAssignmentWithSource) GetSource() AttributesSource {
	if x != nil {
		return x.Source
	}
	return AttributesSource_SOURCE_UNSPECIFIED
}

func (x *ClusterAssignmentWithSource) GetValue() *ClusterAssignment {
	if x != nil {
		return x.Value
	}
	return nil
}

// Configuration with source information.
type ConfigurationWithSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskResourceAttributes    *TaskResourceAttributesWithSource    `protobuf:"bytes,1,opt,name=task_resource_attributes,json=taskResourceAttributes,proto3" json:"task_resource_attributes,omitempty"`
	ClusterResourceAttributes *ClusterResourceAttributesWithSource `protobuf:"bytes,2,opt,name=cluster_resource_attributes,json=clusterResourceAttributes,proto3" json:"cluster_resource_attributes,omitempty"`
	ExecutionQueueAttributes  *ExecutionQueueAttributesWithSource  `protobuf:"bytes,3,opt,name=execution_queue_attributes,json=executionQueueAttributes,proto3" json:"execution_queue_attributes,omitempty"`
	ExecutionClusterLabel     *ExecutionClusterLabelWithSource     `protobuf:"bytes,4,opt,name=execution_cluster_label,json=executionClusterLabel,proto3" json:"execution_cluster_label,omitempty"`
	QualityOfService          *QualityOfServiceWithSource          `protobuf:"bytes,5,opt,name=quality_of_service,json=qualityOfService,proto3" json:"quality_of_service,omitempty"`
	PluginOverrides           *PluginOverridesWithSource           `protobuf:"bytes,6,opt,name=plugin_overrides,json=pluginOverrides,proto3" json:"plugin_overrides,omitempty"`
	WorkflowExecutionConfig   *WorkflowExecutionConfigWithSource   `protobuf:"bytes,7,opt,name=workflow_execution_config,json=workflowExecutionConfig,proto3" json:"workflow_execution_config,omitempty"`
	ClusterAssignment         *ClusterAssignmentWithSource         `protobuf:"bytes,8,opt,name=cluster_assignment,json=clusterAssignment,proto3" json:"cluster_assignment,omitempty"`
}

func (x *ConfigurationWithSource) Reset() {
	*x = ConfigurationWithSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationWithSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationWithSource) ProtoMessage() {}

func (x *ConfigurationWithSource) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationWithSource.ProtoReflect.Descriptor instead.
func (*ConfigurationWithSource) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigurationWithSource) GetTaskResourceAttributes() *TaskResourceAttributesWithSource {
	if x != nil {
		return x.TaskResourceAttributes
	}
	return nil
}

func (x *ConfigurationWithSource) GetClusterResourceAttributes() *ClusterResourceAttributesWithSource {
	if x != nil {
		return x.ClusterResourceAttributes
	}
	return nil
}

func (x *ConfigurationWithSource) GetExecutionQueueAttributes() *ExecutionQueueAttributesWithSource {
	if x != nil {
		return x.ExecutionQueueAttributes
	}
	return nil
}

func (x *ConfigurationWithSource) GetExecutionClusterLabel() *ExecutionClusterLabelWithSource {
	if x != nil {
		return x.ExecutionClusterLabel
	}
	return nil
}

func (x *ConfigurationWithSource) GetQualityOfService() *QualityOfServiceWithSource {
	if x != nil {
		return x.QualityOfService
	}
	return nil
}

func (x *ConfigurationWithSource) GetPluginOverrides() *PluginOverridesWithSource {
	if x != nil {
		return x.PluginOverrides
	}
	return nil
}

func (x *ConfigurationWithSource) GetWorkflowExecutionConfig() *WorkflowExecutionConfigWithSource {
	if x != nil {
		return x.WorkflowExecutionConfig
	}
	return nil
}

func (x *ConfigurationWithSource) GetClusterAssignment() *ClusterAssignmentWithSource {
	if x != nil {
		return x.ClusterAssignment
	}
	return nil
}

// Configuration is a collection of attributes that can be applied to a project or a workflow.
type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskResourceAttributes    *TaskResourceAttributes    `protobuf:"bytes,1,opt,name=task_resource_attributes,json=taskResourceAttributes,proto3" json:"task_resource_attributes,omitempty"`
	ClusterResourceAttributes *ClusterResourceAttributes `protobuf:"bytes,2,opt,name=cluster_resource_attributes,json=clusterResourceAttributes,proto3" json:"cluster_resource_attributes,omitempty"`
	ExecutionQueueAttributes  *ExecutionQueueAttributes  `protobuf:"bytes,3,opt,name=execution_queue_attributes,json=executionQueueAttributes,proto3" json:"execution_queue_attributes,omitempty"`
	ExecutionClusterLabel     *ExecutionClusterLabel     `protobuf:"bytes,4,opt,name=execution_cluster_label,json=executionClusterLabel,proto3" json:"execution_cluster_label,omitempty"`
	QualityOfService          *core.QualityOfService     `protobuf:"bytes,5,opt,name=quality_of_service,json=qualityOfService,proto3" json:"quality_of_service,omitempty"`
	PluginOverrides           *PluginOverrides           `protobuf:"bytes,6,opt,name=plugin_overrides,json=pluginOverrides,proto3" json:"plugin_overrides,omitempty"`
	WorkflowExecutionConfig   *WorkflowExecutionConfig   `protobuf:"bytes,7,opt,name=workflow_execution_config,json=workflowExecutionConfig,proto3" json:"workflow_execution_config,omitempty"`
	ClusterAssignment         *ClusterAssignment         `protobuf:"bytes,8,opt,name=cluster_assignment,json=clusterAssignment,proto3" json:"cluster_assignment,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{10}
}

func (x *Configuration) GetTaskResourceAttributes() *TaskResourceAttributes {
	if x != nil {
		return x.TaskResourceAttributes
	}
	return nil
}

func (x *Configuration) GetClusterResourceAttributes() *ClusterResourceAttributes {
	if x != nil {
		return x.ClusterResourceAttributes
	}
	return nil
}

func (x *Configuration) GetExecutionQueueAttributes() *ExecutionQueueAttributes {
	if x != nil {
		return x.ExecutionQueueAttributes
	}
	return nil
}

func (x *Configuration) GetExecutionClusterLabel() *ExecutionClusterLabel {
	if x != nil {
		return x.ExecutionClusterLabel
	}
	return nil
}

func (x *Configuration) GetQualityOfService() *core.QualityOfService {
	if x != nil {
		return x.QualityOfService
	}
	return nil
}

func (x *Configuration) GetPluginOverrides() *PluginOverrides {
	if x != nil {
		return x.PluginOverrides
	}
	return nil
}

func (x *Configuration) GetWorkflowExecutionConfig() *WorkflowExecutionConfig {
	if x != nil {
		return x.WorkflowExecutionConfig
	}
	return nil
}

func (x *Configuration) GetClusterAssignment() *ClusterAssignment {
	if x != nil {
		return x.ClusterAssignment
	}
	return nil
}

// Request to get a configuration.
type ConfigurationGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the configuration to get.
	// +required
	Id *ConfigurationID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ConfigurationGetRequest) Reset() {
	*x = ConfigurationGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetRequest) ProtoMessage() {}

func (x *ConfigurationGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationGetRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{11}
}

func (x *ConfigurationGetRequest) GetId() *ConfigurationID {
	if x != nil {
		return x.Id
	}
	return nil
}

// Response of a configuration get request.
type ConfigurationGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the configuration.
	Id *ConfigurationID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version of the configuration.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Configuration with source information.
	Configuration *ConfigurationWithSource `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *ConfigurationGetResponse) Reset() {
	*x = ConfigurationGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetResponse) ProtoMessage() {}

func (x *ConfigurationGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationGetResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{12}
}

func (x *ConfigurationGetResponse) GetId() *ConfigurationID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfigurationGetResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConfigurationGetResponse) GetConfiguration() *ConfigurationWithSource {
	if x != nil {
		return x.Configuration
	}
	return nil
}

// Request to update a configuration.
type ConfigurationUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the configuration to update.
	// +required
	Id *ConfigurationID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version of the configuration to update, which should to be the version of the currently active document.
	// +required
	VersionToUpdate string `protobuf:"bytes,2,opt,name=version_to_update,json=versionToUpdate,proto3" json:"version_to_update,omitempty"`
	// Configuration to update.
	// +required
	Configuration *Configuration `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *ConfigurationUpdateRequest) Reset() {
	*x = ConfigurationUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationUpdateRequest) ProtoMessage() {}

func (x *ConfigurationUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationUpdateRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationUpdateRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigurationUpdateRequest) GetId() *ConfigurationID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfigurationUpdateRequest) GetVersionToUpdate() string {
	if x != nil {
		return x.VersionToUpdate
	}
	return ""
}

func (x *ConfigurationUpdateRequest) GetConfiguration() *Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

// Response of a configuration update request.
type ConfigurationUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the updated configuration.
	Id *ConfigurationID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version of the updated configuration.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Updated configuration with source information.
	Configuration *ConfigurationWithSource `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *ConfigurationUpdateResponse) Reset() {
	*x = ConfigurationUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationUpdateResponse) ProtoMessage() {}

func (x *ConfigurationUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationUpdateResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationUpdateResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{14}
}

func (x *ConfigurationUpdateResponse) GetId() *ConfigurationID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfigurationUpdateResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConfigurationUpdateResponse) GetConfiguration() *ConfigurationWithSource {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type ConfigurationDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the configuration document.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// All configurations in the document.
	// The key is the string serialized ConfigurationID with (https://pkg.go.dev/github.com/golang/protobuf/jsonpb#Marshaler.Marshal).
	Configurations map[string]*Configuration `protobuf:"bytes,3,rep,name=configurations,proto3" json:"configurations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigurationDocument) Reset() {
	*x = ConfigurationDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_configuration_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationDocument) ProtoMessage() {}

func (x *ConfigurationDocument) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_configuration_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationDocument.ProtoReflect.Descriptor instead.
func (*ConfigurationDocument) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_configuration_proto_rawDescGZIP(), []int{15}
}

func (x *ConfigurationDocument) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConfigurationDocument) GetConfigurations() map[string]*Configuration {
	if x != nil {
		return x.Configurations
	}
	return nil
}

var File_flyteidl_admin_configuration_proto protoreflect.FileDescriptor

var file_flyteidl_admin_configuration_proto_rawDesc = []byte{
	0x0a, 0x22, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x27, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x9a, 0x01, 0x0a, 0x20, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x23, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x22, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x1f, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x19, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x21, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd0, 0x06, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x6a, 0x0a, 0x18, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x16, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x73, 0x0a,
	0x1b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x19, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x70, 0x0a, 0x1a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x18, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x58, 0x0a,
	0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x6d, 0x0a,
	0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x12,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf5, 0x05, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x18, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x16, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x1b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x19, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x1a, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4d,
	0x0a, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x10, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a,
	0x10, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x19, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50,
	0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x4a, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a,
	0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x43, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf6,
	0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x60, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x63, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x04, 0x42, 0xbe, 0x01, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x42, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x70, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xa2, 0x02, 0x03, 0x46, 0x41, 0x58, 0xaa, 0x02, 0x0e, 0x46,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0xca, 0x02, 0x0e,
	0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0xe2, 0x02,
	0x1a, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x46, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl_admin_configuration_proto_rawDescOnce sync.Once
	file_flyteidl_admin_configuration_proto_rawDescData = file_flyteidl_admin_configuration_proto_rawDesc
)

func file_flyteidl_admin_configuration_proto_rawDescGZIP() []byte {
	file_flyteidl_admin_configuration_proto_rawDescOnce.Do(func() {
		file_flyteidl_admin_configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl_admin_configuration_proto_rawDescData)
	})
	return file_flyteidl_admin_configuration_proto_rawDescData
}

var file_flyteidl_admin_configuration_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_flyteidl_admin_configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_flyteidl_admin_configuration_proto_goTypes = []interface{}{
	(AttributesSource)(0),                       // 0: flyteidl.admin.AttributesSource
	(*ConfigurationID)(nil),                     // 1: flyteidl.admin.ConfigurationID
	(*TaskResourceAttributesWithSource)(nil),    // 2: flyteidl.admin.TaskResourceAttributesWithSource
	(*ClusterResourceAttributesWithSource)(nil), // 3: flyteidl.admin.ClusterResourceAttributesWithSource
	(*ExecutionQueueAttributesWithSource)(nil),  // 4: flyteidl.admin.ExecutionQueueAttributesWithSource
	(*ExecutionClusterLabelWithSource)(nil),     // 5: flyteidl.admin.ExecutionClusterLabelWithSource
	(*QualityOfServiceWithSource)(nil),          // 6: flyteidl.admin.QualityOfServiceWithSource
	(*PluginOverridesWithSource)(nil),           // 7: flyteidl.admin.PluginOverridesWithSource
	(*WorkflowExecutionConfigWithSource)(nil),   // 8: flyteidl.admin.WorkflowExecutionConfigWithSource
	(*ClusterAssignmentWithSource)(nil),         // 9: flyteidl.admin.ClusterAssignmentWithSource
	(*ConfigurationWithSource)(nil),             // 10: flyteidl.admin.ConfigurationWithSource
	(*Configuration)(nil),                       // 11: flyteidl.admin.Configuration
	(*ConfigurationGetRequest)(nil),             // 12: flyteidl.admin.ConfigurationGetRequest
	(*ConfigurationGetResponse)(nil),            // 13: flyteidl.admin.ConfigurationGetResponse
	(*ConfigurationUpdateRequest)(nil),          // 14: flyteidl.admin.ConfigurationUpdateRequest
	(*ConfigurationUpdateResponse)(nil),         // 15: flyteidl.admin.ConfigurationUpdateResponse
	(*ConfigurationDocument)(nil),               // 16: flyteidl.admin.ConfigurationDocument
	nil,                                         // 17: flyteidl.admin.ConfigurationDocument.ConfigurationsEntry
	(*TaskResourceAttributes)(nil),              // 18: flyteidl.admin.TaskResourceAttributes
	(*ClusterResourceAttributes)(nil),           // 19: flyteidl.admin.ClusterResourceAttributes
	(*ExecutionQueueAttributes)(nil),            // 20: flyteidl.admin.ExecutionQueueAttributes
	(*ExecutionClusterLabel)(nil),               // 21: flyteidl.admin.ExecutionClusterLabel
	(*core.QualityOfService)(nil),               // 22: flyteidl.core.QualityOfService
	(*PluginOverrides)(nil),                     // 23: flyteidl.admin.PluginOverrides
	(*WorkflowExecutionConfig)(nil),             // 24: flyteidl.admin.WorkflowExecutionConfig
	(*ClusterAssignment)(nil),                   // 25: flyteidl.admin.ClusterAssignment
}
var file_flyteidl_admin_configuration_proto_depIdxs = []int32{
	0,  // 0: flyteidl.admin.TaskResourceAttributesWithSource.source:type_name -> flyteidl.admin.AttributesSource
	18, // 1: flyteidl.admin.TaskResourceAttributesWithSource.value:type_name -> flyteidl.admin.TaskResourceAttributes
	0,  // 2: flyteidl.admin.ClusterResourceAttributesWithSource.source:type_name -> flyteidl.admin.AttributesSource
	19, // 3: flyteidl.admin.ClusterResourceAttributesWithSource.value:type_name -> flyteidl.admin.ClusterResourceAttributes
	0,  // 4: flyteidl.admin.ExecutionQueueAttributesWithSource.source:type_name -> flyteidl.admin.AttributesSource
	20, // 5: flyteidl.admin.ExecutionQueueAttributesWithSource.value:type_name -> flyteidl.admin.ExecutionQueueAttributes
	0,  // 6: flyteidl.admin.ExecutionClusterLabelWithSource.source:type_name -> flyteidl.admin.AttributesSource
	21, // 7: flyteidl.admin.ExecutionClusterLabelWithSource.value:type_name -> flyteidl.admin.ExecutionClusterLabel
	0,  // 8: flyteidl.admin.QualityOfServiceWithSource.source:type_name -> flyteidl.admin.AttributesSource
	22, // 9: flyteidl.admin.QualityOfServiceWithSource.value:type_name -> flyteidl.core.QualityOfService
	0,  // 10: flyteidl.admin.PluginOverridesWithSource.source:type_name -> flyteidl.admin.AttributesSource
	23, // 11: flyteidl.admin.PluginOverridesWithSource.value:type_name -> flyteidl.admin.PluginOverrides
	0,  // 12: flyteidl.admin.WorkflowExecutionConfigWithSource.source:type_name -> flyteidl.admin.AttributesSource
	24, // 13: flyteidl.admin.WorkflowExecutionConfigWithSource.value:type_name -> flyteidl.admin.WorkflowExecutionConfig
	0,  // 14: flyteidl.admin.ClusterAssignmentWithSource.source:type_name -> flyteidl.admin.AttributesSource
	25, // 15: flyteidl.admin.ClusterAssignmentWithSource.value:type_name -> flyteidl.admin.ClusterAssignment
	2,  // 16: flyteidl.admin.ConfigurationWithSource.task_resource_attributes:type_name -> flyteidl.admin.TaskResourceAttributesWithSource
	3,  // 17: flyteidl.admin.ConfigurationWithSource.cluster_resource_attributes:type_name -> flyteidl.admin.ClusterResourceAttributesWithSource
	4,  // 18: flyteidl.admin.ConfigurationWithSource.execution_queue_attributes:type_name -> flyteidl.admin.ExecutionQueueAttributesWithSource
	5,  // 19: flyteidl.admin.ConfigurationWithSource.execution_cluster_label:type_name -> flyteidl.admin.ExecutionClusterLabelWithSource
	6,  // 20: flyteidl.admin.ConfigurationWithSource.quality_of_service:type_name -> flyteidl.admin.QualityOfServiceWithSource
	7,  // 21: flyteidl.admin.ConfigurationWithSource.plugin_overrides:type_name -> flyteidl.admin.PluginOverridesWithSource
	8,  // 22: flyteidl.admin.ConfigurationWithSource.workflow_execution_config:type_name -> flyteidl.admin.WorkflowExecutionConfigWithSource
	9,  // 23: flyteidl.admin.ConfigurationWithSource.cluster_assignment:type_name -> flyteidl.admin.ClusterAssignmentWithSource
	18, // 24: flyteidl.admin.Configuration.task_resource_attributes:type_name -> flyteidl.admin.TaskResourceAttributes
	19, // 25: flyteidl.admin.Configuration.cluster_resource_attributes:type_name -> flyteidl.admin.ClusterResourceAttributes
	20, // 26: flyteidl.admin.Configuration.execution_queue_attributes:type_name -> flyteidl.admin.ExecutionQueueAttributes
	21, // 27: flyteidl.admin.Configuration.execution_cluster_label:type_name -> flyteidl.admin.ExecutionClusterLabel
	22, // 28: flyteidl.admin.Configuration.quality_of_service:type_name -> flyteidl.core.QualityOfService
	23, // 29: flyteidl.admin.Configuration.plugin_overrides:type_name -> flyteidl.admin.PluginOverrides
	24, // 30: flyteidl.admin.Configuration.workflow_execution_config:type_name -> flyteidl.admin.WorkflowExecutionConfig
	25, // 31: flyteidl.admin.Configuration.cluster_assignment:type_name -> flyteidl.admin.ClusterAssignment
	1,  // 32: flyteidl.admin.ConfigurationGetRequest.id:type_name -> flyteidl.admin.ConfigurationID
	1,  // 33: flyteidl.admin.ConfigurationGetResponse.id:type_name -> flyteidl.admin.ConfigurationID
	10, // 34: flyteidl.admin.ConfigurationGetResponse.configuration:type_name -> flyteidl.admin.ConfigurationWithSource
	1,  // 35: flyteidl.admin.ConfigurationUpdateRequest.id:type_name -> flyteidl.admin.ConfigurationID
	11, // 36: flyteidl.admin.ConfigurationUpdateRequest.configuration:type_name -> flyteidl.admin.Configuration
	1,  // 37: flyteidl.admin.ConfigurationUpdateResponse.id:type_name -> flyteidl.admin.ConfigurationID
	10, // 38: flyteidl.admin.ConfigurationUpdateResponse.configuration:type_name -> flyteidl.admin.ConfigurationWithSource
	17, // 39: flyteidl.admin.ConfigurationDocument.configurations:type_name -> flyteidl.admin.ConfigurationDocument.ConfigurationsEntry
	11, // 40: flyteidl.admin.ConfigurationDocument.ConfigurationsEntry.value:type_name -> flyteidl.admin.Configuration
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_flyteidl_admin_configuration_proto_init() }
func file_flyteidl_admin_configuration_proto_init() {
	if File_flyteidl_admin_configuration_proto != nil {
		return
	}
	file_flyteidl_admin_matchable_resource_proto_init()
	file_flyteidl_admin_cluster_assignment_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flyteidl_admin_configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResourceAttributesWithSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResourceAttributesWithSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionQueueAttributesWithSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionClusterLabelWithSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityOfServiceWithSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginOverridesWithSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionConfigWithSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAssignmentWithSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationWithSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_configuration_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl_admin_configuration_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl_admin_configuration_proto_goTypes,
		DependencyIndexes: file_flyteidl_admin_configuration_proto_depIdxs,
		EnumInfos:         file_flyteidl_admin_configuration_proto_enumTypes,
		MessageInfos:      file_flyteidl_admin_configuration_proto_msgTypes,
	}.Build()
	File_flyteidl_admin_configuration_proto = out.File
	file_flyteidl_admin_configuration_proto_rawDesc = nil
	file_flyteidl_admin_configuration_proto_goTypes = nil
	file_flyteidl_admin_configuration_proto_depIdxs = nil
}
