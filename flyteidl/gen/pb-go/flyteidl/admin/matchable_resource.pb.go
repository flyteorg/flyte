// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl/admin/matchable_resource.proto

package admin

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines a resource that can be configured by customizable Project-, ProjectDomain- or WorkflowAttributes
// based on matching tags.
type MatchableResource int32

const (
	// Applies to customizable task resource requests and limits.
	MatchableResource_TASK_RESOURCE MatchableResource = 0
	// Applies to configuring templated kubernetes cluster resources.
	MatchableResource_CLUSTER_RESOURCE MatchableResource = 1
	// Configures task and dynamic task execution queue assignment.
	MatchableResource_EXECUTION_QUEUE MatchableResource = 2
	// Configures the K8s cluster label to be used for execution to be run
	MatchableResource_EXECUTION_CLUSTER_LABEL MatchableResource = 3
	// Configures default quality of service when undefined in an execution spec.
	MatchableResource_QUALITY_OF_SERVICE_SPECIFICATION MatchableResource = 4
	// Selects configurable plugin implementation behavior for a given task type.
	MatchableResource_PLUGIN_OVERRIDE MatchableResource = 5
	// Adds defaults for customizable workflow-execution specifications and overrides.
	MatchableResource_WORKFLOW_EXECUTION_CONFIG MatchableResource = 6
	// Controls how to select an available cluster on which this execution should run.
	MatchableResource_CLUSTER_ASSIGNMENT MatchableResource = 7
	// Configures the task connection to be used by the agent to connect to external systems.
	MatchableResource_EXTERNAL_RESOURCE MatchableResource = 8
)

// Enum value maps for MatchableResource.
var (
	MatchableResource_name = map[int32]string{
		0: "TASK_RESOURCE",
		1: "CLUSTER_RESOURCE",
		2: "EXECUTION_QUEUE",
		3: "EXECUTION_CLUSTER_LABEL",
		4: "QUALITY_OF_SERVICE_SPECIFICATION",
		5: "PLUGIN_OVERRIDE",
		6: "WORKFLOW_EXECUTION_CONFIG",
		7: "CLUSTER_ASSIGNMENT",
		8: "EXTERNAL_RESOURCE",
	}
	MatchableResource_value = map[string]int32{
		"TASK_RESOURCE":                    0,
		"CLUSTER_RESOURCE":                 1,
		"EXECUTION_QUEUE":                  2,
		"EXECUTION_CLUSTER_LABEL":          3,
		"QUALITY_OF_SERVICE_SPECIFICATION": 4,
		"PLUGIN_OVERRIDE":                  5,
		"WORKFLOW_EXECUTION_CONFIG":        6,
		"CLUSTER_ASSIGNMENT":               7,
		"EXTERNAL_RESOURCE":                8,
	}
)

func (x MatchableResource) Enum() *MatchableResource {
	p := new(MatchableResource)
	*p = x
	return p
}

func (x MatchableResource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchableResource) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_admin_matchable_resource_proto_enumTypes[0].Descriptor()
}

func (MatchableResource) Type() protoreflect.EnumType {
	return &file_flyteidl_admin_matchable_resource_proto_enumTypes[0]
}

func (x MatchableResource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchableResource.Descriptor instead.
func (MatchableResource) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{0}
}

type PluginOverride_MissingPluginBehavior int32

const (
	// By default, if this plugin is not enabled for a Flyte deployment then execution will fail.
	PluginOverride_FAIL PluginOverride_MissingPluginBehavior = 0
	// Uses the system-configured default implementation.
	PluginOverride_USE_DEFAULT PluginOverride_MissingPluginBehavior = 1
)

// Enum value maps for PluginOverride_MissingPluginBehavior.
var (
	PluginOverride_MissingPluginBehavior_name = map[int32]string{
		0: "FAIL",
		1: "USE_DEFAULT",
	}
	PluginOverride_MissingPluginBehavior_value = map[string]int32{
		"FAIL":        0,
		"USE_DEFAULT": 1,
	}
)

func (x PluginOverride_MissingPluginBehavior) Enum() *PluginOverride_MissingPluginBehavior {
	p := new(PluginOverride_MissingPluginBehavior)
	*p = x
	return p
}

func (x PluginOverride_MissingPluginBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginOverride_MissingPluginBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_admin_matchable_resource_proto_enumTypes[1].Descriptor()
}

func (PluginOverride_MissingPluginBehavior) Type() protoreflect.EnumType {
	return &file_flyteidl_admin_matchable_resource_proto_enumTypes[1]
}

func (x PluginOverride_MissingPluginBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginOverride_MissingPluginBehavior.Descriptor instead.
func (PluginOverride_MissingPluginBehavior) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{5, 0}
}

// Defines a set of overridable task resource attributes set during task registration.
type TaskResourceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu              string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Gpu              string `protobuf:"bytes,2,opt,name=gpu,proto3" json:"gpu,omitempty"`
	Memory           string `protobuf:"bytes,3,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage          string `protobuf:"bytes,4,opt,name=storage,proto3" json:"storage,omitempty"`
	EphemeralStorage string `protobuf:"bytes,5,opt,name=ephemeral_storage,json=ephemeralStorage,proto3" json:"ephemeral_storage,omitempty"`
}

func (x *TaskResourceSpec) Reset() {
	*x = TaskResourceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResourceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResourceSpec) ProtoMessage() {}

func (x *TaskResourceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResourceSpec.ProtoReflect.Descriptor instead.
func (*TaskResourceSpec) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{0}
}

func (x *TaskResourceSpec) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *TaskResourceSpec) GetGpu() string {
	if x != nil {
		return x.Gpu
	}
	return ""
}

func (x *TaskResourceSpec) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *TaskResourceSpec) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *TaskResourceSpec) GetEphemeralStorage() string {
	if x != nil {
		return x.EphemeralStorage
	}
	return ""
}

// Defines task resource defaults and limits that will be applied at task registration.
type TaskResourceAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defaults *TaskResourceSpec `protobuf:"bytes,1,opt,name=defaults,proto3" json:"defaults,omitempty"`
	Limits   *TaskResourceSpec `protobuf:"bytes,2,opt,name=limits,proto3" json:"limits,omitempty"`
}

func (x *TaskResourceAttributes) Reset() {
	*x = TaskResourceAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResourceAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResourceAttributes) ProtoMessage() {}

func (x *TaskResourceAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResourceAttributes.ProtoReflect.Descriptor instead.
func (*TaskResourceAttributes) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{1}
}

func (x *TaskResourceAttributes) GetDefaults() *TaskResourceSpec {
	if x != nil {
		return x.Defaults
	}
	return nil
}

func (x *TaskResourceAttributes) GetLimits() *TaskResourceSpec {
	if x != nil {
		return x.Limits
	}
	return nil
}

type ClusterResourceAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Custom resource attributes which will be applied in cluster resource creation (e.g. quotas).
	// Map keys are the *case-sensitive* names of variables in templatized resource files.
	// Map values should be the custom values which get substituted during resource creation.
	Attributes map[string]string `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClusterResourceAttributes) Reset() {
	*x = ClusterResourceAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterResourceAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResourceAttributes) ProtoMessage() {}

func (x *ClusterResourceAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResourceAttributes.ProtoReflect.Descriptor instead.
func (*ClusterResourceAttributes) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterResourceAttributes) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ExecutionQueueAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tags used for assigning execution queues for tasks defined within this project.
	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ExecutionQueueAttributes) Reset() {
	*x = ExecutionQueueAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionQueueAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionQueueAttributes) ProtoMessage() {}

func (x *ExecutionQueueAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionQueueAttributes.ProtoReflect.Descriptor instead.
func (*ExecutionQueueAttributes) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutionQueueAttributes) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ExecutionClusterLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label value to determine where the execution will be run
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExecutionClusterLabel) Reset() {
	*x = ExecutionClusterLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionClusterLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionClusterLabel) ProtoMessage() {}

func (x *ExecutionClusterLabel) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionClusterLabel.ProtoReflect.Descriptor instead.
func (*ExecutionClusterLabel) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{4}
}

func (x *ExecutionClusterLabel) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// This MatchableAttribute configures selecting alternate plugin implementations for a given task type.
// In addition to an override implementation a selection of fallbacks can be provided or other modes
// for handling cases where the desired plugin override is not enabled in a given Flyte deployment.
type PluginOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A predefined yet extensible Task type identifier.
	TaskType string `protobuf:"bytes,1,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	// A set of plugin ids which should handle tasks of this type instead of the default registered plugin. The list will be tried in order until a plugin is found with that id.
	PluginId []string `protobuf:"bytes,2,rep,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	// Defines the behavior when no plugin from the plugin_id list is not found.
	MissingPluginBehavior PluginOverride_MissingPluginBehavior `protobuf:"varint,4,opt,name=missing_plugin_behavior,json=missingPluginBehavior,proto3,enum=flyteidl.admin.PluginOverride_MissingPluginBehavior" json:"missing_plugin_behavior,omitempty"`
}

func (x *PluginOverride) Reset() {
	*x = PluginOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginOverride) ProtoMessage() {}

func (x *PluginOverride) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginOverride.ProtoReflect.Descriptor instead.
func (*PluginOverride) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{5}
}

func (x *PluginOverride) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *PluginOverride) GetPluginId() []string {
	if x != nil {
		return x.PluginId
	}
	return nil
}

func (x *PluginOverride) GetMissingPluginBehavior() PluginOverride_MissingPluginBehavior {
	if x != nil {
		return x.MissingPluginBehavior
	}
	return PluginOverride_FAIL
}

type PluginOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overrides []*PluginOverride `protobuf:"bytes,1,rep,name=overrides,proto3" json:"overrides,omitempty"`
}

func (x *PluginOverrides) Reset() {
	*x = PluginOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginOverrides) ProtoMessage() {}

func (x *PluginOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginOverrides.ProtoReflect.Descriptor instead.
func (*PluginOverrides) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{6}
}

func (x *PluginOverrides) GetOverrides() []*PluginOverride {
	if x != nil {
		return x.Overrides
	}
	return nil
}

// Adds defaults for customizable workflow-execution specifications and overrides.
type WorkflowExecutionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be used to control the number of parallel nodes to run within the workflow. This is useful to achieve fairness.
	MaxParallelism int32 `protobuf:"varint,1,opt,name=max_parallelism,json=maxParallelism,proto3" json:"max_parallelism,omitempty"`
	// Indicates security context permissions for executions triggered with this matchable attribute.
	SecurityContext *core.SecurityContext `protobuf:"bytes,2,opt,name=security_context,json=securityContext,proto3" json:"security_context,omitempty"`
	// Encapsulates user settings pertaining to offloaded data (i.e. Blobs, Schema, query data, etc.).
	RawOutputDataConfig *RawOutputDataConfig `protobuf:"bytes,3,opt,name=raw_output_data_config,json=rawOutputDataConfig,proto3" json:"raw_output_data_config,omitempty"`
	// Custom labels to be applied to a triggered execution resource.
	Labels *Labels `protobuf:"bytes,4,opt,name=labels,proto3" json:"labels,omitempty"`
	// Custom annotations to be applied to a triggered execution resource.
	Annotations *Annotations `protobuf:"bytes,5,opt,name=annotations,proto3" json:"annotations,omitempty"`
	// Allows for the interruptible flag of a workflow to be overwritten for a single execution.
	// Omitting this field uses the workflow's value as a default.
	// As we need to distinguish between the field not being provided and its default value false, we have to use a wrapper
	// around the bool field.
	Interruptible *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=interruptible,proto3" json:"interruptible,omitempty"`
	// Allows for all cached values of a workflow and its tasks to be overwritten for a single execution.
	// If enabled, all calculations are performed even if cached results would be available, overwriting the stored
	// data once execution finishes successfully.
	OverwriteCache bool `protobuf:"varint,7,opt,name=overwrite_cache,json=overwriteCache,proto3" json:"overwrite_cache,omitempty"`
	// Environment variables to be set for the execution.
	Envs *Envs `protobuf:"bytes,8,opt,name=envs,proto3" json:"envs,omitempty"`
	// Execution environment assignments to be set for the execution.
	ExecutionEnvAssignments []*core.ExecutionEnvAssignment `protobuf:"bytes,9,rep,name=execution_env_assignments,json=executionEnvAssignments,proto3" json:"execution_env_assignments,omitempty"`
}

func (x *WorkflowExecutionConfig) Reset() {
	*x = WorkflowExecutionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowExecutionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowExecutionConfig) ProtoMessage() {}

func (x *WorkflowExecutionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowExecutionConfig.ProtoReflect.Descriptor instead.
func (*WorkflowExecutionConfig) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{7}
}

func (x *WorkflowExecutionConfig) GetMaxParallelism() int32 {
	if x != nil {
		return x.MaxParallelism
	}
	return 0
}

func (x *WorkflowExecutionConfig) GetSecurityContext() *core.SecurityContext {
	if x != nil {
		return x.SecurityContext
	}
	return nil
}

func (x *WorkflowExecutionConfig) GetRawOutputDataConfig() *RawOutputDataConfig {
	if x != nil {
		return x.RawOutputDataConfig
	}
	return nil
}

func (x *WorkflowExecutionConfig) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *WorkflowExecutionConfig) GetAnnotations() *Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *WorkflowExecutionConfig) GetInterruptible() *wrapperspb.BoolValue {
	if x != nil {
		return x.Interruptible
	}
	return nil
}

func (x *WorkflowExecutionConfig) GetOverwriteCache() bool {
	if x != nil {
		return x.OverwriteCache
	}
	return false
}

func (x *WorkflowExecutionConfig) GetEnvs() *Envs {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *WorkflowExecutionConfig) GetExecutionEnvAssignments() []*core.ExecutionEnvAssignment {
	if x != nil {
		return x.ExecutionEnvAssignments
	}
	return nil
}

// ExternalResourceAttributes is a message that encapsulates all the attributes
// that are required to connect to external resources or services.
type ExternalResourceAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connections here is used by the agent to connect to external systems.
	Connections map[string]*core.Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExternalResourceAttributes) Reset() {
	*x = ExternalResourceAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalResourceAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalResourceAttributes) ProtoMessage() {}

func (x *ExternalResourceAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalResourceAttributes.ProtoReflect.Descriptor instead.
func (*ExternalResourceAttributes) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{8}
}

func (x *ExternalResourceAttributes) GetConnections() map[string]*core.Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

// Generic container for encapsulating all types of the above attributes messages.
type MatchingAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*MatchingAttributes_TaskResourceAttributes
	//	*MatchingAttributes_ClusterResourceAttributes
	//	*MatchingAttributes_ExecutionQueueAttributes
	//	*MatchingAttributes_ExecutionClusterLabel
	//	*MatchingAttributes_QualityOfService
	//	*MatchingAttributes_PluginOverrides
	//	*MatchingAttributes_WorkflowExecutionConfig
	//	*MatchingAttributes_ClusterAssignment
	//	*MatchingAttributes_ExternalResourceAttributes
	Target isMatchingAttributes_Target `protobuf_oneof:"target"`
}

func (x *MatchingAttributes) Reset() {
	*x = MatchingAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingAttributes) ProtoMessage() {}

func (x *MatchingAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingAttributes.ProtoReflect.Descriptor instead.
func (*MatchingAttributes) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{9}
}

func (m *MatchingAttributes) GetTarget() isMatchingAttributes_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *MatchingAttributes) GetTaskResourceAttributes() *TaskResourceAttributes {
	if x, ok := x.GetTarget().(*MatchingAttributes_TaskResourceAttributes); ok {
		return x.TaskResourceAttributes
	}
	return nil
}

func (x *MatchingAttributes) GetClusterResourceAttributes() *ClusterResourceAttributes {
	if x, ok := x.GetTarget().(*MatchingAttributes_ClusterResourceAttributes); ok {
		return x.ClusterResourceAttributes
	}
	return nil
}

func (x *MatchingAttributes) GetExecutionQueueAttributes() *ExecutionQueueAttributes {
	if x, ok := x.GetTarget().(*MatchingAttributes_ExecutionQueueAttributes); ok {
		return x.ExecutionQueueAttributes
	}
	return nil
}

func (x *MatchingAttributes) GetExecutionClusterLabel() *ExecutionClusterLabel {
	if x, ok := x.GetTarget().(*MatchingAttributes_ExecutionClusterLabel); ok {
		return x.ExecutionClusterLabel
	}
	return nil
}

func (x *MatchingAttributes) GetQualityOfService() *core.QualityOfService {
	if x, ok := x.GetTarget().(*MatchingAttributes_QualityOfService); ok {
		return x.QualityOfService
	}
	return nil
}

func (x *MatchingAttributes) GetPluginOverrides() *PluginOverrides {
	if x, ok := x.GetTarget().(*MatchingAttributes_PluginOverrides); ok {
		return x.PluginOverrides
	}
	return nil
}

func (x *MatchingAttributes) GetWorkflowExecutionConfig() *WorkflowExecutionConfig {
	if x, ok := x.GetTarget().(*MatchingAttributes_WorkflowExecutionConfig); ok {
		return x.WorkflowExecutionConfig
	}
	return nil
}

func (x *MatchingAttributes) GetClusterAssignment() *ClusterAssignment {
	if x, ok := x.GetTarget().(*MatchingAttributes_ClusterAssignment); ok {
		return x.ClusterAssignment
	}
	return nil
}

func (x *MatchingAttributes) GetExternalResourceAttributes() *ExternalResourceAttributes {
	if x, ok := x.GetTarget().(*MatchingAttributes_ExternalResourceAttributes); ok {
		return x.ExternalResourceAttributes
	}
	return nil
}

type isMatchingAttributes_Target interface {
	isMatchingAttributes_Target()
}

type MatchingAttributes_TaskResourceAttributes struct {
	TaskResourceAttributes *TaskResourceAttributes `protobuf:"bytes,1,opt,name=task_resource_attributes,json=taskResourceAttributes,proto3,oneof"`
}

type MatchingAttributes_ClusterResourceAttributes struct {
	ClusterResourceAttributes *ClusterResourceAttributes `protobuf:"bytes,2,opt,name=cluster_resource_attributes,json=clusterResourceAttributes,proto3,oneof"`
}

type MatchingAttributes_ExecutionQueueAttributes struct {
	ExecutionQueueAttributes *ExecutionQueueAttributes `protobuf:"bytes,3,opt,name=execution_queue_attributes,json=executionQueueAttributes,proto3,oneof"`
}

type MatchingAttributes_ExecutionClusterLabel struct {
	ExecutionClusterLabel *ExecutionClusterLabel `protobuf:"bytes,4,opt,name=execution_cluster_label,json=executionClusterLabel,proto3,oneof"`
}

type MatchingAttributes_QualityOfService struct {
	QualityOfService *core.QualityOfService `protobuf:"bytes,5,opt,name=quality_of_service,json=qualityOfService,proto3,oneof"`
}

type MatchingAttributes_PluginOverrides struct {
	PluginOverrides *PluginOverrides `protobuf:"bytes,6,opt,name=plugin_overrides,json=pluginOverrides,proto3,oneof"`
}

type MatchingAttributes_WorkflowExecutionConfig struct {
	WorkflowExecutionConfig *WorkflowExecutionConfig `protobuf:"bytes,7,opt,name=workflow_execution_config,json=workflowExecutionConfig,proto3,oneof"`
}

type MatchingAttributes_ClusterAssignment struct {
	ClusterAssignment *ClusterAssignment `protobuf:"bytes,8,opt,name=cluster_assignment,json=clusterAssignment,proto3,oneof"`
}

type MatchingAttributes_ExternalResourceAttributes struct {
	ExternalResourceAttributes *ExternalResourceAttributes `protobuf:"bytes,9,opt,name=external_resource_attributes,json=externalResourceAttributes,proto3,oneof"`
}

func (*MatchingAttributes_TaskResourceAttributes) isMatchingAttributes_Target() {}

func (*MatchingAttributes_ClusterResourceAttributes) isMatchingAttributes_Target() {}

func (*MatchingAttributes_ExecutionQueueAttributes) isMatchingAttributes_Target() {}

func (*MatchingAttributes_ExecutionClusterLabel) isMatchingAttributes_Target() {}

func (*MatchingAttributes_QualityOfService) isMatchingAttributes_Target() {}

func (*MatchingAttributes_PluginOverrides) isMatchingAttributes_Target() {}

func (*MatchingAttributes_WorkflowExecutionConfig) isMatchingAttributes_Target() {}

func (*MatchingAttributes_ClusterAssignment) isMatchingAttributes_Target() {}

func (*MatchingAttributes_ExternalResourceAttributes) isMatchingAttributes_Target() {}

// Represents a custom set of attributes applied for either a domain (and optional org); a domain and project (and optional org);
// or domain, project and workflow name (and optional org).
// These are used to override system level defaults for kubernetes cluster resource management,
// default execution values, and more all across different levels of specificity.
type MatchableAttributesConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes *MatchingAttributes `protobuf:"bytes,1,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Domain     string              `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Project    string              `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Workflow   string              `protobuf:"bytes,4,opt,name=workflow,proto3" json:"workflow,omitempty"`
	LaunchPlan string              `protobuf:"bytes,5,opt,name=launch_plan,json=launchPlan,proto3" json:"launch_plan,omitempty"`
	// Optional, org key applied to the resource.
	Org string `protobuf:"bytes,6,opt,name=org,proto3" json:"org,omitempty"`
}

func (x *MatchableAttributesConfiguration) Reset() {
	*x = MatchableAttributesConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchableAttributesConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchableAttributesConfiguration) ProtoMessage() {}

func (x *MatchableAttributesConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchableAttributesConfiguration.ProtoReflect.Descriptor instead.
func (*MatchableAttributesConfiguration) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{10}
}

func (x *MatchableAttributesConfiguration) GetAttributes() *MatchingAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *MatchableAttributesConfiguration) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *MatchableAttributesConfiguration) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *MatchableAttributesConfiguration) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *MatchableAttributesConfiguration) GetLaunchPlan() string {
	if x != nil {
		return x.LaunchPlan
	}
	return ""
}

func (x *MatchableAttributesConfiguration) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

// Request all matching resource attributes for a resource type.
// See :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for more details
type ListMatchableAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +required
	ResourceType MatchableResource `protobuf:"varint,1,opt,name=resource_type,json=resourceType,proto3,enum=flyteidl.admin.MatchableResource" json:"resource_type,omitempty"`
	// Optional, org filter applied to list project requests.
	Org string `protobuf:"bytes,2,opt,name=org,proto3" json:"org,omitempty"`
}

func (x *ListMatchableAttributesRequest) Reset() {
	*x = ListMatchableAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMatchableAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMatchableAttributesRequest) ProtoMessage() {}

func (x *ListMatchableAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMatchableAttributesRequest.ProtoReflect.Descriptor instead.
func (*ListMatchableAttributesRequest) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{11}
}

func (x *ListMatchableAttributesRequest) GetResourceType() MatchableResource {
	if x != nil {
		return x.ResourceType
	}
	return MatchableResource_TASK_RESOURCE
}

func (x *ListMatchableAttributesRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

// Response for a request for all matching resource attributes for a resource type.
// See :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for more details
type ListMatchableAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configurations []*MatchableAttributesConfiguration `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty"`
}

func (x *ListMatchableAttributesResponse) Reset() {
	*x = ListMatchableAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMatchableAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMatchableAttributesResponse) ProtoMessage() {}

func (x *ListMatchableAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_admin_matchable_resource_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMatchableAttributesResponse.ProtoReflect.Descriptor instead.
func (*ListMatchableAttributesResponse) Descriptor() ([]byte, []int) {
	return file_flyteidl_admin_matchable_resource_proto_rawDescGZIP(), []int{12}
}

func (x *ListMatchableAttributesResponse) GetConfigurations() []*MatchableAttributesConfiguration {
	if x != nil {
		return x.Configurations
	}
	return nil
}

var File_flyteidl_admin_matchable_resource_proto protoreflect.FileDescriptor

var file_flyteidl_admin_matchable_resource_proto_rawDesc = []byte{
	0x0a, 0x27, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x1b, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x95, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x19,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0x2d, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x6c, 0x0a, 0x17, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x15, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x32, 0x0a,
	0x15, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x01, 0x22, 0x4f, 0x0a, 0x0f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x22, 0xce, 0x04, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x58, 0x0a, 0x16, 0x72, 0x61, 0x77, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x61, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x72, 0x61, 0x77, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73,
	0x12, 0x61, 0x0a, 0x19, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x76, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x59, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x07, 0x0a,
	0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x18, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x16, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x19, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x1a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5f,
	0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x4f, 0x0a, 0x12, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4c, 0x0a, 0x10, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x65,
	0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x17, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x1c, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x20, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x72, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x22, 0x7a, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x22, 0x7b, 0x0a, 0x1f, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0xf7, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x51, 0x55, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45,
	0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10,
	0x06, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x08,
	0x42, 0xc2, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2d, 0x67, 0x6f, 0x2f,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xa2, 0x02,
	0x03, 0x46, 0x41, 0x58, 0xaa, 0x02, 0x0e, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0xca, 0x02, 0x0e, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0xe2, 0x02, 0x1a, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x3a, 0x3a,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl_admin_matchable_resource_proto_rawDescOnce sync.Once
	file_flyteidl_admin_matchable_resource_proto_rawDescData = file_flyteidl_admin_matchable_resource_proto_rawDesc
)

func file_flyteidl_admin_matchable_resource_proto_rawDescGZIP() []byte {
	file_flyteidl_admin_matchable_resource_proto_rawDescOnce.Do(func() {
		file_flyteidl_admin_matchable_resource_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl_admin_matchable_resource_proto_rawDescData)
	})
	return file_flyteidl_admin_matchable_resource_proto_rawDescData
}

var file_flyteidl_admin_matchable_resource_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_flyteidl_admin_matchable_resource_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_flyteidl_admin_matchable_resource_proto_goTypes = []interface{}{
	(MatchableResource)(0),                    // 0: flyteidl.admin.MatchableResource
	(PluginOverride_MissingPluginBehavior)(0), // 1: flyteidl.admin.PluginOverride.MissingPluginBehavior
	(*TaskResourceSpec)(nil),                  // 2: flyteidl.admin.TaskResourceSpec
	(*TaskResourceAttributes)(nil),            // 3: flyteidl.admin.TaskResourceAttributes
	(*ClusterResourceAttributes)(nil),         // 4: flyteidl.admin.ClusterResourceAttributes
	(*ExecutionQueueAttributes)(nil),          // 5: flyteidl.admin.ExecutionQueueAttributes
	(*ExecutionClusterLabel)(nil),             // 6: flyteidl.admin.ExecutionClusterLabel
	(*PluginOverride)(nil),                    // 7: flyteidl.admin.PluginOverride
	(*PluginOverrides)(nil),                   // 8: flyteidl.admin.PluginOverrides
	(*WorkflowExecutionConfig)(nil),           // 9: flyteidl.admin.WorkflowExecutionConfig
	(*ExternalResourceAttributes)(nil),        // 10: flyteidl.admin.ExternalResourceAttributes
	(*MatchingAttributes)(nil),                // 11: flyteidl.admin.MatchingAttributes
	(*MatchableAttributesConfiguration)(nil),  // 12: flyteidl.admin.MatchableAttributesConfiguration
	(*ListMatchableAttributesRequest)(nil),    // 13: flyteidl.admin.ListMatchableAttributesRequest
	(*ListMatchableAttributesResponse)(nil),   // 14: flyteidl.admin.ListMatchableAttributesResponse
	nil,                                       // 15: flyteidl.admin.ClusterResourceAttributes.AttributesEntry
	nil,                                       // 16: flyteidl.admin.ExternalResourceAttributes.ConnectionsEntry
	(*core.SecurityContext)(nil),              // 17: flyteidl.core.SecurityContext
	(*RawOutputDataConfig)(nil),               // 18: flyteidl.admin.RawOutputDataConfig
	(*Labels)(nil),                            // 19: flyteidl.admin.Labels
	(*Annotations)(nil),                       // 20: flyteidl.admin.Annotations
	(*wrapperspb.BoolValue)(nil),              // 21: google.protobuf.BoolValue
	(*Envs)(nil),                              // 22: flyteidl.admin.Envs
	(*core.ExecutionEnvAssignment)(nil),       // 23: flyteidl.core.ExecutionEnvAssignment
	(*core.QualityOfService)(nil),             // 24: flyteidl.core.QualityOfService
	(*ClusterAssignment)(nil),                 // 25: flyteidl.admin.ClusterAssignment
	(*core.Connection)(nil),                   // 26: flyteidl.core.Connection
}
var file_flyteidl_admin_matchable_resource_proto_depIdxs = []int32{
	2,  // 0: flyteidl.admin.TaskResourceAttributes.defaults:type_name -> flyteidl.admin.TaskResourceSpec
	2,  // 1: flyteidl.admin.TaskResourceAttributes.limits:type_name -> flyteidl.admin.TaskResourceSpec
	15, // 2: flyteidl.admin.ClusterResourceAttributes.attributes:type_name -> flyteidl.admin.ClusterResourceAttributes.AttributesEntry
	1,  // 3: flyteidl.admin.PluginOverride.missing_plugin_behavior:type_name -> flyteidl.admin.PluginOverride.MissingPluginBehavior
	7,  // 4: flyteidl.admin.PluginOverrides.overrides:type_name -> flyteidl.admin.PluginOverride
	17, // 5: flyteidl.admin.WorkflowExecutionConfig.security_context:type_name -> flyteidl.core.SecurityContext
	18, // 6: flyteidl.admin.WorkflowExecutionConfig.raw_output_data_config:type_name -> flyteidl.admin.RawOutputDataConfig
	19, // 7: flyteidl.admin.WorkflowExecutionConfig.labels:type_name -> flyteidl.admin.Labels
	20, // 8: flyteidl.admin.WorkflowExecutionConfig.annotations:type_name -> flyteidl.admin.Annotations
	21, // 9: flyteidl.admin.WorkflowExecutionConfig.interruptible:type_name -> google.protobuf.BoolValue
	22, // 10: flyteidl.admin.WorkflowExecutionConfig.envs:type_name -> flyteidl.admin.Envs
	23, // 11: flyteidl.admin.WorkflowExecutionConfig.execution_env_assignments:type_name -> flyteidl.core.ExecutionEnvAssignment
	16, // 12: flyteidl.admin.ExternalResourceAttributes.connections:type_name -> flyteidl.admin.ExternalResourceAttributes.ConnectionsEntry
	3,  // 13: flyteidl.admin.MatchingAttributes.task_resource_attributes:type_name -> flyteidl.admin.TaskResourceAttributes
	4,  // 14: flyteidl.admin.MatchingAttributes.cluster_resource_attributes:type_name -> flyteidl.admin.ClusterResourceAttributes
	5,  // 15: flyteidl.admin.MatchingAttributes.execution_queue_attributes:type_name -> flyteidl.admin.ExecutionQueueAttributes
	6,  // 16: flyteidl.admin.MatchingAttributes.execution_cluster_label:type_name -> flyteidl.admin.ExecutionClusterLabel
	24, // 17: flyteidl.admin.MatchingAttributes.quality_of_service:type_name -> flyteidl.core.QualityOfService
	8,  // 18: flyteidl.admin.MatchingAttributes.plugin_overrides:type_name -> flyteidl.admin.PluginOverrides
	9,  // 19: flyteidl.admin.MatchingAttributes.workflow_execution_config:type_name -> flyteidl.admin.WorkflowExecutionConfig
	25, // 20: flyteidl.admin.MatchingAttributes.cluster_assignment:type_name -> flyteidl.admin.ClusterAssignment
	10, // 21: flyteidl.admin.MatchingAttributes.external_resource_attributes:type_name -> flyteidl.admin.ExternalResourceAttributes
	11, // 22: flyteidl.admin.MatchableAttributesConfiguration.attributes:type_name -> flyteidl.admin.MatchingAttributes
	0,  // 23: flyteidl.admin.ListMatchableAttributesRequest.resource_type:type_name -> flyteidl.admin.MatchableResource
	12, // 24: flyteidl.admin.ListMatchableAttributesResponse.configurations:type_name -> flyteidl.admin.MatchableAttributesConfiguration
	26, // 25: flyteidl.admin.ExternalResourceAttributes.ConnectionsEntry.value:type_name -> flyteidl.core.Connection
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_flyteidl_admin_matchable_resource_proto_init() }
func file_flyteidl_admin_matchable_resource_proto_init() {
	if File_flyteidl_admin_matchable_resource_proto != nil {
		return
	}
	file_flyteidl_admin_common_proto_init()
	file_flyteidl_admin_cluster_assignment_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flyteidl_admin_matchable_resource_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResourceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResourceAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterResourceAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionQueueAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionClusterLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowExecutionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalResourceAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchingAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchableAttributesConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMatchableAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_admin_matchable_resource_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMatchableAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flyteidl_admin_matchable_resource_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*MatchingAttributes_TaskResourceAttributes)(nil),
		(*MatchingAttributes_ClusterResourceAttributes)(nil),
		(*MatchingAttributes_ExecutionQueueAttributes)(nil),
		(*MatchingAttributes_ExecutionClusterLabel)(nil),
		(*MatchingAttributes_QualityOfService)(nil),
		(*MatchingAttributes_PluginOverrides)(nil),
		(*MatchingAttributes_WorkflowExecutionConfig)(nil),
		(*MatchingAttributes_ClusterAssignment)(nil),
		(*MatchingAttributes_ExternalResourceAttributes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl_admin_matchable_resource_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl_admin_matchable_resource_proto_goTypes,
		DependencyIndexes: file_flyteidl_admin_matchable_resource_proto_depIdxs,
		EnumInfos:         file_flyteidl_admin_matchable_resource_proto_enumTypes,
		MessageInfos:      file_flyteidl_admin_matchable_resource_proto_msgTypes,
	}.Build()
	File_flyteidl_admin_matchable_resource_proto = out.File
	file_flyteidl_admin_matchable_resource_proto_rawDesc = nil
	file_flyteidl_admin_matchable_resource_proto_goTypes = nil
	file_flyteidl_admin_matchable_resource_proto_depIdxs = nil
}
