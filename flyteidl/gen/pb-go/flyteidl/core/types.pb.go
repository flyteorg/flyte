// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl/core/types.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Define a set of simple types.
type SimpleType int32

const (
	SimpleType_NONE     SimpleType = 0
	SimpleType_INTEGER  SimpleType = 1
	SimpleType_FLOAT    SimpleType = 2
	SimpleType_STRING   SimpleType = 3
	SimpleType_BOOLEAN  SimpleType = 4
	SimpleType_DATETIME SimpleType = 5
	SimpleType_DURATION SimpleType = 6
	SimpleType_BINARY   SimpleType = 7
	SimpleType_ERROR    SimpleType = 8
	SimpleType_STRUCT   SimpleType = 9
)

// Enum value maps for SimpleType.
var (
	SimpleType_name = map[int32]string{
		0: "NONE",
		1: "INTEGER",
		2: "FLOAT",
		3: "STRING",
		4: "BOOLEAN",
		5: "DATETIME",
		6: "DURATION",
		7: "BINARY",
		8: "ERROR",
		9: "STRUCT",
	}
	SimpleType_value = map[string]int32{
		"NONE":     0,
		"INTEGER":  1,
		"FLOAT":    2,
		"STRING":   3,
		"BOOLEAN":  4,
		"DATETIME": 5,
		"DURATION": 6,
		"BINARY":   7,
		"ERROR":    8,
		"STRUCT":   9,
	}
)

func (x SimpleType) Enum() *SimpleType {
	p := new(SimpleType)
	*p = x
	return p
}

func (x SimpleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimpleType) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_core_types_proto_enumTypes[0].Descriptor()
}

func (SimpleType) Type() protoreflect.EnumType {
	return &file_flyteidl_core_types_proto_enumTypes[0]
}

func (x SimpleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimpleType.Descriptor instead.
func (SimpleType) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{0}
}

type SchemaType_SchemaColumn_SchemaColumnType int32

const (
	SchemaType_SchemaColumn_INTEGER  SchemaType_SchemaColumn_SchemaColumnType = 0
	SchemaType_SchemaColumn_FLOAT    SchemaType_SchemaColumn_SchemaColumnType = 1
	SchemaType_SchemaColumn_STRING   SchemaType_SchemaColumn_SchemaColumnType = 2
	SchemaType_SchemaColumn_BOOLEAN  SchemaType_SchemaColumn_SchemaColumnType = 3
	SchemaType_SchemaColumn_DATETIME SchemaType_SchemaColumn_SchemaColumnType = 4
	SchemaType_SchemaColumn_DURATION SchemaType_SchemaColumn_SchemaColumnType = 5
)

// Enum value maps for SchemaType_SchemaColumn_SchemaColumnType.
var (
	SchemaType_SchemaColumn_SchemaColumnType_name = map[int32]string{
		0: "INTEGER",
		1: "FLOAT",
		2: "STRING",
		3: "BOOLEAN",
		4: "DATETIME",
		5: "DURATION",
	}
	SchemaType_SchemaColumn_SchemaColumnType_value = map[string]int32{
		"INTEGER":  0,
		"FLOAT":    1,
		"STRING":   2,
		"BOOLEAN":  3,
		"DATETIME": 4,
		"DURATION": 5,
	}
)

func (x SchemaType_SchemaColumn_SchemaColumnType) Enum() *SchemaType_SchemaColumn_SchemaColumnType {
	p := new(SchemaType_SchemaColumn_SchemaColumnType)
	*p = x
	return p
}

func (x SchemaType_SchemaColumn_SchemaColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaType_SchemaColumn_SchemaColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_core_types_proto_enumTypes[1].Descriptor()
}

func (SchemaType_SchemaColumn_SchemaColumnType) Type() protoreflect.EnumType {
	return &file_flyteidl_core_types_proto_enumTypes[1]
}

func (x SchemaType_SchemaColumn_SchemaColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaType_SchemaColumn_SchemaColumnType.Descriptor instead.
func (SchemaType_SchemaColumn_SchemaColumnType) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{0, 0, 0}
}

type BlobType_BlobDimensionality int32

const (
	BlobType_SINGLE    BlobType_BlobDimensionality = 0
	BlobType_MULTIPART BlobType_BlobDimensionality = 1
)

// Enum value maps for BlobType_BlobDimensionality.
var (
	BlobType_BlobDimensionality_name = map[int32]string{
		0: "SINGLE",
		1: "MULTIPART",
	}
	BlobType_BlobDimensionality_value = map[string]int32{
		"SINGLE":    0,
		"MULTIPART": 1,
	}
)

func (x BlobType_BlobDimensionality) Enum() *BlobType_BlobDimensionality {
	p := new(BlobType_BlobDimensionality)
	*p = x
	return p
}

func (x BlobType_BlobDimensionality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlobType_BlobDimensionality) Descriptor() protoreflect.EnumDescriptor {
	return file_flyteidl_core_types_proto_enumTypes[2].Descriptor()
}

func (BlobType_BlobDimensionality) Type() protoreflect.EnumType {
	return &file_flyteidl_core_types_proto_enumTypes[2]
}

func (x BlobType_BlobDimensionality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlobType_BlobDimensionality.Descriptor instead.
func (BlobType_BlobDimensionality) EnumDescriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{2, 0}
}

// Defines schema columns and types to strongly type-validate schemas interoperability.
type SchemaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of ordered columns this schema comprises of.
	Columns []*SchemaType_SchemaColumn `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *SchemaType) Reset() {
	*x = SchemaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaType) ProtoMessage() {}

func (x *SchemaType) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaType.ProtoReflect.Descriptor instead.
func (*SchemaType) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{0}
}

func (x *SchemaType) GetColumns() []*SchemaType_SchemaColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

type StructuredDatasetType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of ordered columns this schema comprises of.
	Columns []*StructuredDatasetType_DatasetColumn `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	// This is the storage format, the format of the bits at rest
	// parquet, feather, csv, etc.
	// For two types to be compatible, the format will need to be an exact match.
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// This is a string representing the type that the bytes in external_schema_bytes are formatted in.
	// This is an optional field that will not be used for type checking.
	ExternalSchemaType string `protobuf:"bytes,3,opt,name=external_schema_type,json=externalSchemaType,proto3" json:"external_schema_type,omitempty"`
	// The serialized bytes of a third-party schema library like Arrow.
	// This is an optional field that will not be used for type checking.
	ExternalSchemaBytes []byte `protobuf:"bytes,4,opt,name=external_schema_bytes,json=externalSchemaBytes,proto3" json:"external_schema_bytes,omitempty"`
}

func (x *StructuredDatasetType) Reset() {
	*x = StructuredDatasetType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredDatasetType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredDatasetType) ProtoMessage() {}

func (x *StructuredDatasetType) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredDatasetType.ProtoReflect.Descriptor instead.
func (*StructuredDatasetType) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{1}
}

func (x *StructuredDatasetType) GetColumns() []*StructuredDatasetType_DatasetColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *StructuredDatasetType) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *StructuredDatasetType) GetExternalSchemaType() string {
	if x != nil {
		return x.ExternalSchemaType
	}
	return ""
}

func (x *StructuredDatasetType) GetExternalSchemaBytes() []byte {
	if x != nil {
		return x.ExternalSchemaBytes
	}
	return nil
}

// Defines type behavior for blob objects
type BlobType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format can be a free form string understood by SDK/UI etc like
	// csv, parquet etc
	Format         string                      `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	Dimensionality BlobType_BlobDimensionality `protobuf:"varint,2,opt,name=dimensionality,proto3,enum=flyteidl.core.BlobType_BlobDimensionality" json:"dimensionality,omitempty"`
}

func (x *BlobType) Reset() {
	*x = BlobType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobType) ProtoMessage() {}

func (x *BlobType) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobType.ProtoReflect.Descriptor instead.
func (*BlobType) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{2}
}

func (x *BlobType) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *BlobType) GetDimensionality() BlobType_BlobDimensionality {
	if x != nil {
		return x.Dimensionality
	}
	return BlobType_SINGLE
}

// Enables declaring enum types, with predefined string values
// For len(values) > 0, the first value in the ordered list is regarded as the default value. If you wish
// To provide no defaults, make the first value as undefined.
type EnumType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Predefined set of enum values.
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *EnumType) Reset() {
	*x = EnumType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumType) ProtoMessage() {}

func (x *EnumType) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumType.ProtoReflect.Descriptor instead.
func (*EnumType) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{3}
}

func (x *EnumType) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// Defines a tagged union type, also known as a variant (and formally as the sum type).
//
// A sum type S is defined by a sequence of types (A, B, C, ...), each tagged by a string tag
// A value of type S is constructed from a value of any of the variant types. The specific choice of type is recorded by
// storing the varaint's tag with the literal value and can be examined in runtime.
//
// Type S is typically written as
// S := Apple A | Banana B | Cantaloupe C | ...
//
// Notably, a nullable (optional) type is a sum type between some type X and the singleton type representing a null-value:
// Optional X := X | Null
//
// See also: https://en.wikipedia.org/wiki/Tagged_union
type UnionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Predefined set of variants in union.
	Variants []*LiteralType `protobuf:"bytes,1,rep,name=variants,proto3" json:"variants,omitempty"`
}

func (x *UnionType) Reset() {
	*x = UnionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionType) ProtoMessage() {}

func (x *UnionType) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionType.ProtoReflect.Descriptor instead.
func (*UnionType) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{4}
}

func (x *UnionType) GetVariants() []*LiteralType {
	if x != nil {
		return x.Variants
	}
	return nil
}

// Hints to improve type matching
// e.g. allows distinguishing output from custom type transformers
// even if the underlying IDL serialization matches.
type TypeStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Must exactly match for types to be castable
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// dataclass_type only exists for dataclasses.
	// This is used to resolve the type of the fields of dataclass
	// The key is the field name, and the value is the literal type of the field
	// e.g. For dataclass Foo, with fields a, and a is a string
	// Foo.a will be resolved as a literal type of string from dataclass_type
	DataclassType map[string]*LiteralType `protobuf:"bytes,2,rep,name=dataclass_type,json=dataclassType,proto3" json:"dataclass_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TypeStructure) Reset() {
	*x = TypeStructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeStructure) ProtoMessage() {}

func (x *TypeStructure) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeStructure.ProtoReflect.Descriptor instead.
func (*TypeStructure) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{5}
}

func (x *TypeStructure) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TypeStructure) GetDataclassType() map[string]*LiteralType {
	if x != nil {
		return x.DataclassType
	}
	return nil
}

// TypeAnnotation encapsulates registration time information about a type. This can be used for various control-plane operations. TypeAnnotation will not be available at runtime when a task runs.
type TypeAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A arbitrary JSON payload to describe a type.
	Annotations *structpb.Struct `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *TypeAnnotation) Reset() {
	*x = TypeAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeAnnotation) ProtoMessage() {}

func (x *TypeAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeAnnotation.ProtoReflect.Descriptor instead.
func (*TypeAnnotation) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{6}
}

func (x *TypeAnnotation) GetAnnotations() *structpb.Struct {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Defines a strong type to allow type checking between interfaces.
type LiteralType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*LiteralType_Simple
	//	*LiteralType_Schema
	//	*LiteralType_CollectionType
	//	*LiteralType_MapValueType
	//	*LiteralType_Blob
	//	*LiteralType_EnumType
	//	*LiteralType_StructuredDatasetType
	//	*LiteralType_UnionType
	Type isLiteralType_Type `protobuf_oneof:"type"`
	// This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by
	// consumers to identify special behavior or display extended information for the type.
	Metadata *structpb.Struct `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// This field contains arbitrary data that might have special semantic
	// meaning for the client but does not effect internal flyte behavior.
	Annotation *TypeAnnotation `protobuf:"bytes,9,opt,name=annotation,proto3" json:"annotation,omitempty"`
	// Hints to improve type matching.
	Structure *TypeStructure `protobuf:"bytes,11,opt,name=structure,proto3" json:"structure,omitempty"`
}

func (x *LiteralType) Reset() {
	*x = LiteralType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralType) ProtoMessage() {}

func (x *LiteralType) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralType.ProtoReflect.Descriptor instead.
func (*LiteralType) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{7}
}

func (m *LiteralType) GetType() isLiteralType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *LiteralType) GetSimple() SimpleType {
	if x, ok := x.GetType().(*LiteralType_Simple); ok {
		return x.Simple
	}
	return SimpleType_NONE
}

func (x *LiteralType) GetSchema() *SchemaType {
	if x, ok := x.GetType().(*LiteralType_Schema); ok {
		return x.Schema
	}
	return nil
}

func (x *LiteralType) GetCollectionType() *LiteralType {
	if x, ok := x.GetType().(*LiteralType_CollectionType); ok {
		return x.CollectionType
	}
	return nil
}

func (x *LiteralType) GetMapValueType() *LiteralType {
	if x, ok := x.GetType().(*LiteralType_MapValueType); ok {
		return x.MapValueType
	}
	return nil
}

func (x *LiteralType) GetBlob() *BlobType {
	if x, ok := x.GetType().(*LiteralType_Blob); ok {
		return x.Blob
	}
	return nil
}

func (x *LiteralType) GetEnumType() *EnumType {
	if x, ok := x.GetType().(*LiteralType_EnumType); ok {
		return x.EnumType
	}
	return nil
}

func (x *LiteralType) GetStructuredDatasetType() *StructuredDatasetType {
	if x, ok := x.GetType().(*LiteralType_StructuredDatasetType); ok {
		return x.StructuredDatasetType
	}
	return nil
}

func (x *LiteralType) GetUnionType() *UnionType {
	if x, ok := x.GetType().(*LiteralType_UnionType); ok {
		return x.UnionType
	}
	return nil
}

func (x *LiteralType) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *LiteralType) GetAnnotation() *TypeAnnotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *LiteralType) GetStructure() *TypeStructure {
	if x != nil {
		return x.Structure
	}
	return nil
}

type isLiteralType_Type interface {
	isLiteralType_Type()
}

type LiteralType_Simple struct {
	// A simple type that can be compared one-to-one with another.
	Simple SimpleType `protobuf:"varint,1,opt,name=simple,proto3,enum=flyteidl.core.SimpleType,oneof"`
}

type LiteralType_Schema struct {
	// A complex type that requires matching of inner fields.
	Schema *SchemaType `protobuf:"bytes,2,opt,name=schema,proto3,oneof"`
}

type LiteralType_CollectionType struct {
	// Defines the type of the value of a collection. Only homogeneous collections are allowed.
	CollectionType *LiteralType `protobuf:"bytes,3,opt,name=collection_type,json=collectionType,proto3,oneof"`
}

type LiteralType_MapValueType struct {
	// Defines the type of the value of a map type. The type of the key is always a string.
	MapValueType *LiteralType `protobuf:"bytes,4,opt,name=map_value_type,json=mapValueType,proto3,oneof"`
}

type LiteralType_Blob struct {
	// A blob might have specialized implementation details depending on associated metadata.
	Blob *BlobType `protobuf:"bytes,5,opt,name=blob,proto3,oneof"`
}

type LiteralType_EnumType struct {
	// Defines an enum with pre-defined string values.
	EnumType *EnumType `protobuf:"bytes,7,opt,name=enum_type,json=enumType,proto3,oneof"`
}

type LiteralType_StructuredDatasetType struct {
	// Generalized schema support
	StructuredDatasetType *StructuredDatasetType `protobuf:"bytes,8,opt,name=structured_dataset_type,json=structuredDatasetType,proto3,oneof"`
}

type LiteralType_UnionType struct {
	// Defines an union type with pre-defined LiteralTypes.
	UnionType *UnionType `protobuf:"bytes,10,opt,name=union_type,json=unionType,proto3,oneof"`
}

func (*LiteralType_Simple) isLiteralType_Type() {}

func (*LiteralType_Schema) isLiteralType_Type() {}

func (*LiteralType_CollectionType) isLiteralType_Type() {}

func (*LiteralType_MapValueType) isLiteralType_Type() {}

func (*LiteralType_Blob) isLiteralType_Type() {}

func (*LiteralType_EnumType) isLiteralType_Type() {}

func (*LiteralType_StructuredDatasetType) isLiteralType_Type() {}

func (*LiteralType_UnionType) isLiteralType_Type() {}

// A reference to an output produced by a node. The type can be retrieved -and validated- from
// the underlying interface of the node.
type OutputReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node id must exist at the graph layer.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Variable name must refer to an output variable for the node.
	Var      string              `protobuf:"bytes,2,opt,name=var,proto3" json:"var,omitempty"`
	AttrPath []*PromiseAttribute `protobuf:"bytes,3,rep,name=attr_path,json=attrPath,proto3" json:"attr_path,omitempty"`
}

func (x *OutputReference) Reset() {
	*x = OutputReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputReference) ProtoMessage() {}

func (x *OutputReference) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputReference.ProtoReflect.Descriptor instead.
func (*OutputReference) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{8}
}

func (x *OutputReference) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *OutputReference) GetVar() string {
	if x != nil {
		return x.Var
	}
	return ""
}

func (x *OutputReference) GetAttrPath() []*PromiseAttribute {
	if x != nil {
		return x.AttrPath
	}
	return nil
}

type PromiseAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*PromiseAttribute_StringValue
	//	*PromiseAttribute_IntValue
	Value isPromiseAttribute_Value `protobuf_oneof:"value"`
}

func (x *PromiseAttribute) Reset() {
	*x = PromiseAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromiseAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromiseAttribute) ProtoMessage() {}

func (x *PromiseAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromiseAttribute.ProtoReflect.Descriptor instead.
func (*PromiseAttribute) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{9}
}

func (m *PromiseAttribute) GetValue() isPromiseAttribute_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PromiseAttribute) GetStringValue() string {
	if x, ok := x.GetValue().(*PromiseAttribute_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *PromiseAttribute) GetIntValue() int32 {
	if x, ok := x.GetValue().(*PromiseAttribute_IntValue); ok {
		return x.IntValue
	}
	return 0
}

type isPromiseAttribute_Value interface {
	isPromiseAttribute_Value()
}

type PromiseAttribute_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type PromiseAttribute_IntValue struct {
	IntValue int32 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

func (*PromiseAttribute_StringValue) isPromiseAttribute_Value() {}

func (*PromiseAttribute_IntValue) isPromiseAttribute_Value() {}

// Represents an error thrown from a node.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node id that threw the error.
	FailedNodeId string `protobuf:"bytes,1,opt,name=failed_node_id,json=failedNodeId,proto3" json:"failed_node_id,omitempty"`
	// Error message thrown.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{10}
}

func (x *Error) GetFailedNodeId() string {
	if x != nil {
		return x.FailedNodeId
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SchemaType_SchemaColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique name -within the schema type- for the column
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The column type. This allows a limited set of types currently.
	Type SchemaType_SchemaColumn_SchemaColumnType `protobuf:"varint,2,opt,name=type,proto3,enum=flyteidl.core.SchemaType_SchemaColumn_SchemaColumnType" json:"type,omitempty"`
}

func (x *SchemaType_SchemaColumn) Reset() {
	*x = SchemaType_SchemaColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaType_SchemaColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaType_SchemaColumn) ProtoMessage() {}

func (x *SchemaType_SchemaColumn) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaType_SchemaColumn.ProtoReflect.Descriptor instead.
func (*SchemaType_SchemaColumn) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SchemaType_SchemaColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaType_SchemaColumn) GetType() SchemaType_SchemaColumn_SchemaColumnType {
	if x != nil {
		return x.Type
	}
	return SchemaType_SchemaColumn_INTEGER
}

type StructuredDatasetType_DatasetColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique name within the schema type for the column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The column type.
	LiteralType *LiteralType `protobuf:"bytes,2,opt,name=literal_type,json=literalType,proto3" json:"literal_type,omitempty"`
}

func (x *StructuredDatasetType_DatasetColumn) Reset() {
	*x = StructuredDatasetType_DatasetColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredDatasetType_DatasetColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredDatasetType_DatasetColumn) ProtoMessage() {}

func (x *StructuredDatasetType_DatasetColumn) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredDatasetType_DatasetColumn.ProtoReflect.Descriptor instead.
func (*StructuredDatasetType_DatasetColumn) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_types_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StructuredDatasetType_DatasetColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StructuredDatasetType_DatasetColumn) GetLiteralType() *LiteralType {
	if x != nil {
		return x.LiteralType
	}
	return nil
}

var File_flyteidl_core_types_proto protoreflect.FileDescriptor

var file_flyteidl_core_types_proto_rawDesc = []byte{
	0x0a, 0x19, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x02, 0x0a, 0x0a, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0xd0, 0x01, 0x0a, 0x0c, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x10, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x22, 0xc7, 0x02, 0x0a,
	0x15, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x1a, 0x62, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0x2f, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x62, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x52, 0x54, 0x10, 0x01,
	0x22, 0x22, 0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x56, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x5c, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xbc, 0x05, 0x0a, 0x0b, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x62, 0x6c, 0x6f, 0x62, 0x12, 0x36, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69,
	0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x17,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0a,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x7a, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x3c, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x50, 0x61, 0x74, 0x68, 0x22, 0x5f, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x86, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x09, 0x42, 0xb0,
	0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2d, 0x67, 0x6f,
	0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0xa2, 0x02,
	0x03, 0x46, 0x43, 0x58, 0xaa, 0x02, 0x0d, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0xca, 0x02, 0x0d, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x5c,
	0x43, 0x6f, 0x72, 0x65, 0xe2, 0x02, 0x19, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x5c,
	0x43, 0x6f, 0x72, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0e, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x3a, 0x3a, 0x43, 0x6f, 0x72,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl_core_types_proto_rawDescOnce sync.Once
	file_flyteidl_core_types_proto_rawDescData = file_flyteidl_core_types_proto_rawDesc
)

func file_flyteidl_core_types_proto_rawDescGZIP() []byte {
	file_flyteidl_core_types_proto_rawDescOnce.Do(func() {
		file_flyteidl_core_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl_core_types_proto_rawDescData)
	})
	return file_flyteidl_core_types_proto_rawDescData
}

var file_flyteidl_core_types_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_flyteidl_core_types_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_flyteidl_core_types_proto_goTypes = []interface{}{
	(SimpleType)(0), // 0: flyteidl.core.SimpleType
	(SchemaType_SchemaColumn_SchemaColumnType)(0), // 1: flyteidl.core.SchemaType.SchemaColumn.SchemaColumnType
	(BlobType_BlobDimensionality)(0),              // 2: flyteidl.core.BlobType.BlobDimensionality
	(*SchemaType)(nil),                            // 3: flyteidl.core.SchemaType
	(*StructuredDatasetType)(nil),                 // 4: flyteidl.core.StructuredDatasetType
	(*BlobType)(nil),                              // 5: flyteidl.core.BlobType
	(*EnumType)(nil),                              // 6: flyteidl.core.EnumType
	(*UnionType)(nil),                             // 7: flyteidl.core.UnionType
	(*TypeStructure)(nil),                         // 8: flyteidl.core.TypeStructure
	(*TypeAnnotation)(nil),                        // 9: flyteidl.core.TypeAnnotation
	(*LiteralType)(nil),                           // 10: flyteidl.core.LiteralType
	(*OutputReference)(nil),                       // 11: flyteidl.core.OutputReference
	(*PromiseAttribute)(nil),                      // 12: flyteidl.core.PromiseAttribute
	(*Error)(nil),                                 // 13: flyteidl.core.Error
	(*SchemaType_SchemaColumn)(nil),               // 14: flyteidl.core.SchemaType.SchemaColumn
	(*StructuredDatasetType_DatasetColumn)(nil),   // 15: flyteidl.core.StructuredDatasetType.DatasetColumn
	nil,                     // 16: flyteidl.core.TypeStructure.DataclassTypeEntry
	(*structpb.Struct)(nil), // 17: google.protobuf.Struct
}
var file_flyteidl_core_types_proto_depIdxs = []int32{
	14, // 0: flyteidl.core.SchemaType.columns:type_name -> flyteidl.core.SchemaType.SchemaColumn
	15, // 1: flyteidl.core.StructuredDatasetType.columns:type_name -> flyteidl.core.StructuredDatasetType.DatasetColumn
	2,  // 2: flyteidl.core.BlobType.dimensionality:type_name -> flyteidl.core.BlobType.BlobDimensionality
	10, // 3: flyteidl.core.UnionType.variants:type_name -> flyteidl.core.LiteralType
	16, // 4: flyteidl.core.TypeStructure.dataclass_type:type_name -> flyteidl.core.TypeStructure.DataclassTypeEntry
	17, // 5: flyteidl.core.TypeAnnotation.annotations:type_name -> google.protobuf.Struct
	0,  // 6: flyteidl.core.LiteralType.simple:type_name -> flyteidl.core.SimpleType
	3,  // 7: flyteidl.core.LiteralType.schema:type_name -> flyteidl.core.SchemaType
	10, // 8: flyteidl.core.LiteralType.collection_type:type_name -> flyteidl.core.LiteralType
	10, // 9: flyteidl.core.LiteralType.map_value_type:type_name -> flyteidl.core.LiteralType
	5,  // 10: flyteidl.core.LiteralType.blob:type_name -> flyteidl.core.BlobType
	6,  // 11: flyteidl.core.LiteralType.enum_type:type_name -> flyteidl.core.EnumType
	4,  // 12: flyteidl.core.LiteralType.structured_dataset_type:type_name -> flyteidl.core.StructuredDatasetType
	7,  // 13: flyteidl.core.LiteralType.union_type:type_name -> flyteidl.core.UnionType
	17, // 14: flyteidl.core.LiteralType.metadata:type_name -> google.protobuf.Struct
	9,  // 15: flyteidl.core.LiteralType.annotation:type_name -> flyteidl.core.TypeAnnotation
	8,  // 16: flyteidl.core.LiteralType.structure:type_name -> flyteidl.core.TypeStructure
	12, // 17: flyteidl.core.OutputReference.attr_path:type_name -> flyteidl.core.PromiseAttribute
	1,  // 18: flyteidl.core.SchemaType.SchemaColumn.type:type_name -> flyteidl.core.SchemaType.SchemaColumn.SchemaColumnType
	10, // 19: flyteidl.core.StructuredDatasetType.DatasetColumn.literal_type:type_name -> flyteidl.core.LiteralType
	10, // 20: flyteidl.core.TypeStructure.DataclassTypeEntry.value:type_name -> flyteidl.core.LiteralType
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_flyteidl_core_types_proto_init() }
func file_flyteidl_core_types_proto_init() {
	if File_flyteidl_core_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyteidl_core_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredDatasetType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeStructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromiseAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaType_SchemaColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredDatasetType_DatasetColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flyteidl_core_types_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*LiteralType_Simple)(nil),
		(*LiteralType_Schema)(nil),
		(*LiteralType_CollectionType)(nil),
		(*LiteralType_MapValueType)(nil),
		(*LiteralType_Blob)(nil),
		(*LiteralType_EnumType)(nil),
		(*LiteralType_StructuredDatasetType)(nil),
		(*LiteralType_UnionType)(nil),
	}
	file_flyteidl_core_types_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*PromiseAttribute_StringValue)(nil),
		(*PromiseAttribute_IntValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl_core_types_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl_core_types_proto_goTypes,
		DependencyIndexes: file_flyteidl_core_types_proto_depIdxs,
		EnumInfos:         file_flyteidl_core_types_proto_enumTypes,
		MessageInfos:      file_flyteidl_core_types_proto_msgTypes,
	}.Build()
	File_flyteidl_core_types_proto = out.File
	file_flyteidl_core_types_proto_rawDesc = nil
	file_flyteidl_core_types_proto_goTypes = nil
	file_flyteidl_core_types_proto_depIdxs = nil
}
