// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: flyteidl/core/literals.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Primitive Types
type Primitive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines one of simple primitive types. These types will get translated into different programming languages as
	// described in https://developers.google.com/protocol-buffers/docs/proto#scalar.
	//
	// Types that are assignable to Value:
	//
	//	*Primitive_Integer
	//	*Primitive_FloatValue
	//	*Primitive_StringValue
	//	*Primitive_Boolean
	//	*Primitive_Datetime
	//	*Primitive_Duration
	Value isPrimitive_Value `protobuf_oneof:"value"`
}

func (x *Primitive) Reset() {
	*x = Primitive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Primitive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Primitive) ProtoMessage() {}

func (x *Primitive) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Primitive.ProtoReflect.Descriptor instead.
func (*Primitive) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{0}
}

func (m *Primitive) GetValue() isPrimitive_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Primitive) GetInteger() int64 {
	if x, ok := x.GetValue().(*Primitive_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *Primitive) GetFloatValue() float64 {
	if x, ok := x.GetValue().(*Primitive_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Primitive) GetStringValue() string {
	if x, ok := x.GetValue().(*Primitive_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Primitive) GetBoolean() bool {
	if x, ok := x.GetValue().(*Primitive_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *Primitive) GetDatetime() *timestamppb.Timestamp {
	if x, ok := x.GetValue().(*Primitive_Datetime); ok {
		return x.Datetime
	}
	return nil
}

func (x *Primitive) GetDuration() *durationpb.Duration {
	if x, ok := x.GetValue().(*Primitive_Duration); ok {
		return x.Duration
	}
	return nil
}

type isPrimitive_Value interface {
	isPrimitive_Value()
}

type Primitive_Integer struct {
	Integer int64 `protobuf:"varint,1,opt,name=integer,proto3,oneof"`
}

type Primitive_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Primitive_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Primitive_Boolean struct {
	Boolean bool `protobuf:"varint,4,opt,name=boolean,proto3,oneof"`
}

type Primitive_Datetime struct {
	Datetime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime,proto3,oneof"`
}

type Primitive_Duration struct {
	Duration *durationpb.Duration `protobuf:"bytes,6,opt,name=duration,proto3,oneof"`
}

func (*Primitive_Integer) isPrimitive_Value() {}

func (*Primitive_FloatValue) isPrimitive_Value() {}

func (*Primitive_StringValue) isPrimitive_Value() {}

func (*Primitive_Boolean) isPrimitive_Value() {}

func (*Primitive_Datetime) isPrimitive_Value() {}

func (*Primitive_Duration) isPrimitive_Value() {}

// Used to denote a nil/null/None assignment to a scalar value. The underlying LiteralType for Void is intentionally
// undefined since it can be assigned to a scalar of any LiteralType.
type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{1}
}

// Refers to an offloaded set of files. It encapsulates the type of the store and a unique uri for where the data is.
// There are no restrictions on how the uri is formatted since it will depend on how to interact with the store.
type Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BlobMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Uri      string        `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *Blob) Reset() {
	*x = Blob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blob) ProtoMessage() {}

func (x *Blob) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blob.ProtoReflect.Descriptor instead.
func (*Blob) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{2}
}

func (x *Blob) GetMetadata() *BlobMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Blob) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type BlobMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *BlobType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BlobMetadata) Reset() {
	*x = BlobMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobMetadata) ProtoMessage() {}

func (x *BlobMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobMetadata.ProtoReflect.Descriptor instead.
func (*BlobMetadata) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{3}
}

func (x *BlobMetadata) GetType() *BlobType {
	if x != nil {
		return x.Type
	}
	return nil
}

// A simple byte array with a tag to help different parts of the system communicate about what is in the byte array.
// It's strongly advisable that consumers of this type define a unique tag and validate the tag before parsing the data.
type Binary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Tag   string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Binary) Reset() {
	*x = Binary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binary) ProtoMessage() {}

func (x *Binary) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binary.ProtoReflect.Descriptor instead.
func (*Binary) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{4}
}

func (x *Binary) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Binary) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// A strongly typed schema that defines the interface of data retrieved from the underlying storage medium.
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri  string      `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Type *SchemaType `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{5}
}

func (x *Schema) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Schema) GetType() *SchemaType {
	if x != nil {
		return x.Type
	}
	return nil
}

// The runtime representation of a tagged union value. See `UnionType` for more details.
type Union struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Literal     `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Type  *LiteralType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Union) Reset() {
	*x = Union{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Union) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Union) ProtoMessage() {}

func (x *Union) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Union.ProtoReflect.Descriptor instead.
func (*Union) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{6}
}

func (x *Union) GetValue() *Literal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Union) GetType() *LiteralType {
	if x != nil {
		return x.Type
	}
	return nil
}

type StructuredDatasetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bundle the type information along with the literal.
	// This is here because StructuredDatasets can often be more defined at run time than at compile time.
	// That is, at compile time you might only declare a task to return a pandas dataframe or a StructuredDataset,
	// without any column information, but at run time, you might have that column information.
	// flytekit python will copy this type information into the literal, from the type information, if not provided by
	// the various plugins (encoders).
	// Since this field is run time generated, it's not used for any type checking.
	StructuredDatasetType *StructuredDatasetType `protobuf:"bytes,1,opt,name=structured_dataset_type,json=structuredDatasetType,proto3" json:"structured_dataset_type,omitempty"`
}

func (x *StructuredDatasetMetadata) Reset() {
	*x = StructuredDatasetMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredDatasetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredDatasetMetadata) ProtoMessage() {}

func (x *StructuredDatasetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredDatasetMetadata.ProtoReflect.Descriptor instead.
func (*StructuredDatasetMetadata) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{7}
}

func (x *StructuredDatasetMetadata) GetStructuredDatasetType() *StructuredDatasetType {
	if x != nil {
		return x.StructuredDatasetType
	}
	return nil
}

type StructuredDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String location uniquely identifying where the data is.
	// Should start with the storage location (e.g. s3://, gs://, bq://, etc.)
	Uri      string                     `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Metadata *StructuredDatasetMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *StructuredDataset) Reset() {
	*x = StructuredDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredDataset) ProtoMessage() {}

func (x *StructuredDataset) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredDataset.ProtoReflect.Descriptor instead.
func (*StructuredDataset) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{8}
}

func (x *StructuredDataset) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *StructuredDataset) GetMetadata() *StructuredDatasetMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Scalar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Scalar_Primitive
	//	*Scalar_Blob
	//	*Scalar_Binary
	//	*Scalar_Schema
	//	*Scalar_NoneType
	//	*Scalar_Error
	//	*Scalar_Generic
	//	*Scalar_StructuredDataset
	//	*Scalar_Union
	Value isScalar_Value `protobuf_oneof:"value"`
}

func (x *Scalar) Reset() {
	*x = Scalar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scalar) ProtoMessage() {}

func (x *Scalar) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scalar.ProtoReflect.Descriptor instead.
func (*Scalar) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{9}
}

func (m *Scalar) GetValue() isScalar_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Scalar) GetPrimitive() *Primitive {
	if x, ok := x.GetValue().(*Scalar_Primitive); ok {
		return x.Primitive
	}
	return nil
}

func (x *Scalar) GetBlob() *Blob {
	if x, ok := x.GetValue().(*Scalar_Blob); ok {
		return x.Blob
	}
	return nil
}

func (x *Scalar) GetBinary() *Binary {
	if x, ok := x.GetValue().(*Scalar_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *Scalar) GetSchema() *Schema {
	if x, ok := x.GetValue().(*Scalar_Schema); ok {
		return x.Schema
	}
	return nil
}

func (x *Scalar) GetNoneType() *Void {
	if x, ok := x.GetValue().(*Scalar_NoneType); ok {
		return x.NoneType
	}
	return nil
}

func (x *Scalar) GetError() *Error {
	if x, ok := x.GetValue().(*Scalar_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Scalar) GetGeneric() *structpb.Struct {
	if x, ok := x.GetValue().(*Scalar_Generic); ok {
		return x.Generic
	}
	return nil
}

func (x *Scalar) GetStructuredDataset() *StructuredDataset {
	if x, ok := x.GetValue().(*Scalar_StructuredDataset); ok {
		return x.StructuredDataset
	}
	return nil
}

func (x *Scalar) GetUnion() *Union {
	if x, ok := x.GetValue().(*Scalar_Union); ok {
		return x.Union
	}
	return nil
}

type isScalar_Value interface {
	isScalar_Value()
}

type Scalar_Primitive struct {
	Primitive *Primitive `protobuf:"bytes,1,opt,name=primitive,proto3,oneof"`
}

type Scalar_Blob struct {
	Blob *Blob `protobuf:"bytes,2,opt,name=blob,proto3,oneof"`
}

type Scalar_Binary struct {
	Binary *Binary `protobuf:"bytes,3,opt,name=binary,proto3,oneof"`
}

type Scalar_Schema struct {
	Schema *Schema `protobuf:"bytes,4,opt,name=schema,proto3,oneof"`
}

type Scalar_NoneType struct {
	NoneType *Void `protobuf:"bytes,5,opt,name=none_type,json=noneType,proto3,oneof"`
}

type Scalar_Error struct {
	Error *Error `protobuf:"bytes,6,opt,name=error,proto3,oneof"`
}

type Scalar_Generic struct {
	Generic *structpb.Struct `protobuf:"bytes,7,opt,name=generic,proto3,oneof"`
}

type Scalar_StructuredDataset struct {
	StructuredDataset *StructuredDataset `protobuf:"bytes,8,opt,name=structured_dataset,json=structuredDataset,proto3,oneof"`
}

type Scalar_Union struct {
	Union *Union `protobuf:"bytes,9,opt,name=union,proto3,oneof"`
}

func (*Scalar_Primitive) isScalar_Value() {}

func (*Scalar_Blob) isScalar_Value() {}

func (*Scalar_Binary) isScalar_Value() {}

func (*Scalar_Schema) isScalar_Value() {}

func (*Scalar_NoneType) isScalar_Value() {}

func (*Scalar_Error) isScalar_Value() {}

func (*Scalar_Generic) isScalar_Value() {}

func (*Scalar_StructuredDataset) isScalar_Value() {}

func (*Scalar_Union) isScalar_Value() {}

// A simple value. This supports any level of nesting (e.g. array of array of array of Blobs) as well as simple primitives.
type Literal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Literal_Scalar
	//	*Literal_Collection
	//	*Literal_Map
	Value isLiteral_Value `protobuf_oneof:"value"`
	// A hash representing this literal.
	// This is used for caching purposes. For more details refer to RFC 1893
	// (https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md)
	Hash string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	// Additional metadata for literals.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If this literal is offloaded, this field will contain metadata including the offload location.
	Uri string `protobuf:"bytes,6,opt,name=uri,proto3" json:"uri,omitempty"`
	// Includes information about the size of the literal.
	SizeBytes uint64 `protobuf:"varint,7,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
}

func (x *Literal) Reset() {
	*x = Literal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Literal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Literal) ProtoMessage() {}

func (x *Literal) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Literal.ProtoReflect.Descriptor instead.
func (*Literal) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{10}
}

func (m *Literal) GetValue() isLiteral_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Literal) GetScalar() *Scalar {
	if x, ok := x.GetValue().(*Literal_Scalar); ok {
		return x.Scalar
	}
	return nil
}

func (x *Literal) GetCollection() *LiteralCollection {
	if x, ok := x.GetValue().(*Literal_Collection); ok {
		return x.Collection
	}
	return nil
}

func (x *Literal) GetMap() *LiteralMap {
	if x, ok := x.GetValue().(*Literal_Map); ok {
		return x.Map
	}
	return nil
}

func (x *Literal) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Literal) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Literal) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Literal) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

type isLiteral_Value interface {
	isLiteral_Value()
}

type Literal_Scalar struct {
	// A simple value.
	Scalar *Scalar `protobuf:"bytes,1,opt,name=scalar,proto3,oneof"`
}

type Literal_Collection struct {
	// A collection of literals to allow nesting.
	Collection *LiteralCollection `protobuf:"bytes,2,opt,name=collection,proto3,oneof"`
}

type Literal_Map struct {
	// A map of strings to literals.
	Map *LiteralMap `protobuf:"bytes,3,opt,name=map,proto3,oneof"`
}

func (*Literal_Scalar) isLiteral_Value() {}

func (*Literal_Collection) isLiteral_Value() {}

func (*Literal_Map) isLiteral_Value() {}

// A collection of literals. This is a workaround since oneofs in proto messages cannot contain a repeated field.
type LiteralCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Literals []*Literal `protobuf:"bytes,1,rep,name=literals,proto3" json:"literals,omitempty"`
}

func (x *LiteralCollection) Reset() {
	*x = LiteralCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralCollection) ProtoMessage() {}

func (x *LiteralCollection) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralCollection.ProtoReflect.Descriptor instead.
func (*LiteralCollection) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{11}
}

func (x *LiteralCollection) GetLiterals() []*Literal {
	if x != nil {
		return x.Literals
	}
	return nil
}

// A map of literals. This is a workaround since oneofs in proto messages cannot contain a repeated field.
type LiteralMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Literals map[string]*Literal `protobuf:"bytes,1,rep,name=literals,proto3" json:"literals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LiteralMap) Reset() {
	*x = LiteralMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralMap) ProtoMessage() {}

func (x *LiteralMap) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralMap.ProtoReflect.Descriptor instead.
func (*LiteralMap) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{12}
}

func (x *LiteralMap) GetLiterals() map[string]*Literal {
	if x != nil {
		return x.Literals
	}
	return nil
}

// A collection of BindingData items.
type BindingDataCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bindings []*BindingData `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty"`
}

func (x *BindingDataCollection) Reset() {
	*x = BindingDataCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindingDataCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindingDataCollection) ProtoMessage() {}

func (x *BindingDataCollection) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindingDataCollection.ProtoReflect.Descriptor instead.
func (*BindingDataCollection) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{13}
}

func (x *BindingDataCollection) GetBindings() []*BindingData {
	if x != nil {
		return x.Bindings
	}
	return nil
}

// A map of BindingData items.
type BindingDataMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bindings map[string]*BindingData `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BindingDataMap) Reset() {
	*x = BindingDataMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindingDataMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindingDataMap) ProtoMessage() {}

func (x *BindingDataMap) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindingDataMap.ProtoReflect.Descriptor instead.
func (*BindingDataMap) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{14}
}

func (x *BindingDataMap) GetBindings() map[string]*BindingData {
	if x != nil {
		return x.Bindings
	}
	return nil
}

type UnionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetType *LiteralType `protobuf:"bytes,1,opt,name=targetType,proto3" json:"targetType,omitempty"`
}

func (x *UnionInfo) Reset() {
	*x = UnionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionInfo) ProtoMessage() {}

func (x *UnionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionInfo.ProtoReflect.Descriptor instead.
func (*UnionInfo) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{15}
}

func (x *UnionInfo) GetTargetType() *LiteralType {
	if x != nil {
		return x.TargetType
	}
	return nil
}

// Specifies either a simple value or a reference to another output.
type BindingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*BindingData_Scalar
	//	*BindingData_Collection
	//	*BindingData_Promise
	//	*BindingData_Map
	Value isBindingData_Value `protobuf_oneof:"value"`
	Union *UnionInfo          `protobuf:"bytes,5,opt,name=union,proto3" json:"union,omitempty"`
}

func (x *BindingData) Reset() {
	*x = BindingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindingData) ProtoMessage() {}

func (x *BindingData) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindingData.ProtoReflect.Descriptor instead.
func (*BindingData) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{16}
}

func (m *BindingData) GetValue() isBindingData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *BindingData) GetScalar() *Scalar {
	if x, ok := x.GetValue().(*BindingData_Scalar); ok {
		return x.Scalar
	}
	return nil
}

func (x *BindingData) GetCollection() *BindingDataCollection {
	if x, ok := x.GetValue().(*BindingData_Collection); ok {
		return x.Collection
	}
	return nil
}

func (x *BindingData) GetPromise() *OutputReference {
	if x, ok := x.GetValue().(*BindingData_Promise); ok {
		return x.Promise
	}
	return nil
}

func (x *BindingData) GetMap() *BindingDataMap {
	if x, ok := x.GetValue().(*BindingData_Map); ok {
		return x.Map
	}
	return nil
}

func (x *BindingData) GetUnion() *UnionInfo {
	if x != nil {
		return x.Union
	}
	return nil
}

type isBindingData_Value interface {
	isBindingData_Value()
}

type BindingData_Scalar struct {
	// A simple scalar value.
	Scalar *Scalar `protobuf:"bytes,1,opt,name=scalar,proto3,oneof"`
}

type BindingData_Collection struct {
	// A collection of binding data. This allows nesting of binding data to any number
	// of levels.
	Collection *BindingDataCollection `protobuf:"bytes,2,opt,name=collection,proto3,oneof"`
}

type BindingData_Promise struct {
	// References an output promised by another node.
	Promise *OutputReference `protobuf:"bytes,3,opt,name=promise,proto3,oneof"`
}

type BindingData_Map struct {
	// A map of bindings. The key is always a string.
	Map *BindingDataMap `protobuf:"bytes,4,opt,name=map,proto3,oneof"`
}

func (*BindingData_Scalar) isBindingData_Value() {}

func (*BindingData_Collection) isBindingData_Value() {}

func (*BindingData_Promise) isBindingData_Value() {}

func (*BindingData_Map) isBindingData_Value() {}

// An input/output binding of a variable to either static value or a node output.
type Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Variable name must match an input/output variable of the node.
	Var string `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
	// Data to use to bind this variable.
	Binding *BindingData `protobuf:"bytes,2,opt,name=binding,proto3" json:"binding,omitempty"`
}

func (x *Binding) Reset() {
	*x = Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binding) ProtoMessage() {}

func (x *Binding) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binding.ProtoReflect.Descriptor instead.
func (*Binding) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{17}
}

func (x *Binding) GetVar() string {
	if x != nil {
		return x.Var
	}
	return ""
}

func (x *Binding) GetBinding() *BindingData {
	if x != nil {
		return x.Binding
	}
	return nil
}

// A generic key value pair.
type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// +optional.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{18}
}

func (x *KeyValuePair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValuePair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Retry strategy associated with an executable unit.
type RetryStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of retries. Retries will be consumed when the job fails with a recoverable error.
	// The number of retries must be less than or equals to 10.
	Retries uint32 `protobuf:"varint,5,opt,name=retries,proto3" json:"retries,omitempty"`
}

func (x *RetryStrategy) Reset() {
	*x = RetryStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyteidl_core_literals_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryStrategy) ProtoMessage() {}

func (x *RetryStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_flyteidl_core_literals_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryStrategy.ProtoReflect.Descriptor instead.
func (*RetryStrategy) Descriptor() ([]byte, []int) {
	return file_flyteidl_core_literals_proto_rawDescGZIP(), []int{19}
}

func (x *RetryStrategy) GetRetries() uint32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

var File_flyteidl_core_literals_proto protoreflect.FileDescriptor

var file_flyteidl_core_literals_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x06, 0x0a, 0x04, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x04, 0x42, 0x6c, 0x6f,
	0x62, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x3b, 0x0a, 0x0c,
	0x42, 0x6c, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x49, 0x0a, 0x06, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x65, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a,
	0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x17, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x15, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x03, 0x0a, 0x06, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x6c,
	0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x48, 0x00, 0x52,
	0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x2f, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48,
	0x00, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x51,
	0x0a, 0x12, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79,
	0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x12, 0x2c, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfa, 0x02, 0x0a, 0x07, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x6c, 0x79, 0x74,
	0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x11, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66,
	0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x08, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x22, 0xa6,
	0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x43, 0x0a,
	0x08, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x61, 0x70, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x73, 0x1a, 0x53, 0x0a, 0x0d, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x15, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x47, 0x0a, 0x08, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x2e, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x1a, 0x57, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a,
	0x09, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6c,
	0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x6d,
	0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65,
	0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x2e,
	0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x76, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x29, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0xb3, 0x01,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x42, 0x0d, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x2f,
	0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2d,
	0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0xa2, 0x02, 0x03, 0x46, 0x43, 0x58, 0xaa, 0x02, 0x0d, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0xca, 0x02, 0x0d, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0xe2, 0x02, 0x19, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64,
	0x6c, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0e, 0x46, 0x6c, 0x79, 0x74, 0x65, 0x69, 0x64, 0x6c, 0x3a, 0x3a, 0x43,
	0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyteidl_core_literals_proto_rawDescOnce sync.Once
	file_flyteidl_core_literals_proto_rawDescData = file_flyteidl_core_literals_proto_rawDesc
)

func file_flyteidl_core_literals_proto_rawDescGZIP() []byte {
	file_flyteidl_core_literals_proto_rawDescOnce.Do(func() {
		file_flyteidl_core_literals_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyteidl_core_literals_proto_rawDescData)
	})
	return file_flyteidl_core_literals_proto_rawDescData
}

var file_flyteidl_core_literals_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_flyteidl_core_literals_proto_goTypes = []interface{}{
	(*Primitive)(nil),                 // 0: flyteidl.core.Primitive
	(*Void)(nil),                      // 1: flyteidl.core.Void
	(*Blob)(nil),                      // 2: flyteidl.core.Blob
	(*BlobMetadata)(nil),              // 3: flyteidl.core.BlobMetadata
	(*Binary)(nil),                    // 4: flyteidl.core.Binary
	(*Schema)(nil),                    // 5: flyteidl.core.Schema
	(*Union)(nil),                     // 6: flyteidl.core.Union
	(*StructuredDatasetMetadata)(nil), // 7: flyteidl.core.StructuredDatasetMetadata
	(*StructuredDataset)(nil),         // 8: flyteidl.core.StructuredDataset
	(*Scalar)(nil),                    // 9: flyteidl.core.Scalar
	(*Literal)(nil),                   // 10: flyteidl.core.Literal
	(*LiteralCollection)(nil),         // 11: flyteidl.core.LiteralCollection
	(*LiteralMap)(nil),                // 12: flyteidl.core.LiteralMap
	(*BindingDataCollection)(nil),     // 13: flyteidl.core.BindingDataCollection
	(*BindingDataMap)(nil),            // 14: flyteidl.core.BindingDataMap
	(*UnionInfo)(nil),                 // 15: flyteidl.core.UnionInfo
	(*BindingData)(nil),               // 16: flyteidl.core.BindingData
	(*Binding)(nil),                   // 17: flyteidl.core.Binding
	(*KeyValuePair)(nil),              // 18: flyteidl.core.KeyValuePair
	(*RetryStrategy)(nil),             // 19: flyteidl.core.RetryStrategy
	nil,                               // 20: flyteidl.core.Literal.MetadataEntry
	nil,                               // 21: flyteidl.core.LiteralMap.LiteralsEntry
	nil,                               // 22: flyteidl.core.BindingDataMap.BindingsEntry
	(*timestamppb.Timestamp)(nil),     // 23: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),       // 24: google.protobuf.Duration
	(*BlobType)(nil),                  // 25: flyteidl.core.BlobType
	(*SchemaType)(nil),                // 26: flyteidl.core.SchemaType
	(*LiteralType)(nil),               // 27: flyteidl.core.LiteralType
	(*StructuredDatasetType)(nil),     // 28: flyteidl.core.StructuredDatasetType
	(*Error)(nil),                     // 29: flyteidl.core.Error
	(*structpb.Struct)(nil),           // 30: google.protobuf.Struct
	(*OutputReference)(nil),           // 31: flyteidl.core.OutputReference
}
var file_flyteidl_core_literals_proto_depIdxs = []int32{
	23, // 0: flyteidl.core.Primitive.datetime:type_name -> google.protobuf.Timestamp
	24, // 1: flyteidl.core.Primitive.duration:type_name -> google.protobuf.Duration
	3,  // 2: flyteidl.core.Blob.metadata:type_name -> flyteidl.core.BlobMetadata
	25, // 3: flyteidl.core.BlobMetadata.type:type_name -> flyteidl.core.BlobType
	26, // 4: flyteidl.core.Schema.type:type_name -> flyteidl.core.SchemaType
	10, // 5: flyteidl.core.Union.value:type_name -> flyteidl.core.Literal
	27, // 6: flyteidl.core.Union.type:type_name -> flyteidl.core.LiteralType
	28, // 7: flyteidl.core.StructuredDatasetMetadata.structured_dataset_type:type_name -> flyteidl.core.StructuredDatasetType
	7,  // 8: flyteidl.core.StructuredDataset.metadata:type_name -> flyteidl.core.StructuredDatasetMetadata
	0,  // 9: flyteidl.core.Scalar.primitive:type_name -> flyteidl.core.Primitive
	2,  // 10: flyteidl.core.Scalar.blob:type_name -> flyteidl.core.Blob
	4,  // 11: flyteidl.core.Scalar.binary:type_name -> flyteidl.core.Binary
	5,  // 12: flyteidl.core.Scalar.schema:type_name -> flyteidl.core.Schema
	1,  // 13: flyteidl.core.Scalar.none_type:type_name -> flyteidl.core.Void
	29, // 14: flyteidl.core.Scalar.error:type_name -> flyteidl.core.Error
	30, // 15: flyteidl.core.Scalar.generic:type_name -> google.protobuf.Struct
	8,  // 16: flyteidl.core.Scalar.structured_dataset:type_name -> flyteidl.core.StructuredDataset
	6,  // 17: flyteidl.core.Scalar.union:type_name -> flyteidl.core.Union
	9,  // 18: flyteidl.core.Literal.scalar:type_name -> flyteidl.core.Scalar
	11, // 19: flyteidl.core.Literal.collection:type_name -> flyteidl.core.LiteralCollection
	12, // 20: flyteidl.core.Literal.map:type_name -> flyteidl.core.LiteralMap
	20, // 21: flyteidl.core.Literal.metadata:type_name -> flyteidl.core.Literal.MetadataEntry
	10, // 22: flyteidl.core.LiteralCollection.literals:type_name -> flyteidl.core.Literal
	21, // 23: flyteidl.core.LiteralMap.literals:type_name -> flyteidl.core.LiteralMap.LiteralsEntry
	16, // 24: flyteidl.core.BindingDataCollection.bindings:type_name -> flyteidl.core.BindingData
	22, // 25: flyteidl.core.BindingDataMap.bindings:type_name -> flyteidl.core.BindingDataMap.BindingsEntry
	27, // 26: flyteidl.core.UnionInfo.targetType:type_name -> flyteidl.core.LiteralType
	9,  // 27: flyteidl.core.BindingData.scalar:type_name -> flyteidl.core.Scalar
	13, // 28: flyteidl.core.BindingData.collection:type_name -> flyteidl.core.BindingDataCollection
	31, // 29: flyteidl.core.BindingData.promise:type_name -> flyteidl.core.OutputReference
	14, // 30: flyteidl.core.BindingData.map:type_name -> flyteidl.core.BindingDataMap
	15, // 31: flyteidl.core.BindingData.union:type_name -> flyteidl.core.UnionInfo
	16, // 32: flyteidl.core.Binding.binding:type_name -> flyteidl.core.BindingData
	10, // 33: flyteidl.core.LiteralMap.LiteralsEntry.value:type_name -> flyteidl.core.Literal
	16, // 34: flyteidl.core.BindingDataMap.BindingsEntry.value:type_name -> flyteidl.core.BindingData
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_flyteidl_core_literals_proto_init() }
func file_flyteidl_core_literals_proto_init() {
	if File_flyteidl_core_literals_proto != nil {
		return
	}
	file_flyteidl_core_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_flyteidl_core_literals_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Primitive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Union); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredDatasetMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scalar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Literal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindingDataCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindingDataMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyteidl_core_literals_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_flyteidl_core_literals_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Primitive_Integer)(nil),
		(*Primitive_FloatValue)(nil),
		(*Primitive_StringValue)(nil),
		(*Primitive_Boolean)(nil),
		(*Primitive_Datetime)(nil),
		(*Primitive_Duration)(nil),
	}
	file_flyteidl_core_literals_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Scalar_Primitive)(nil),
		(*Scalar_Blob)(nil),
		(*Scalar_Binary)(nil),
		(*Scalar_Schema)(nil),
		(*Scalar_NoneType)(nil),
		(*Scalar_Error)(nil),
		(*Scalar_Generic)(nil),
		(*Scalar_StructuredDataset)(nil),
		(*Scalar_Union)(nil),
	}
	file_flyteidl_core_literals_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Literal_Scalar)(nil),
		(*Literal_Collection)(nil),
		(*Literal_Map)(nil),
	}
	file_flyteidl_core_literals_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*BindingData_Scalar)(nil),
		(*BindingData_Collection)(nil),
		(*BindingData_Promise)(nil),
		(*BindingData_Map)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyteidl_core_literals_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flyteidl_core_literals_proto_goTypes,
		DependencyIndexes: file_flyteidl_core_literals_proto_depIdxs,
		MessageInfos:      file_flyteidl_core_literals_proto_msgTypes,
	}.Build()
	File_flyteidl_core_literals_proto = out.File
	file_flyteidl_core_literals_proto_rawDesc = nil
	file_flyteidl_core_literals_proto_goTypes = nil
	file_flyteidl_core_literals_proto_depIdxs = nil
}
