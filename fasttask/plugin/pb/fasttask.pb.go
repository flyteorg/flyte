// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: fasttask.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HeartbeatResponse_Operation int32

const (
	HeartbeatResponse_ACK    HeartbeatResponse_Operation = 0
	HeartbeatResponse_ASSIGN HeartbeatResponse_Operation = 1
	HeartbeatResponse_DELETE HeartbeatResponse_Operation = 2
)

// Enum value maps for HeartbeatResponse_Operation.
var (
	HeartbeatResponse_Operation_name = map[int32]string{
		0: "ACK",
		1: "ASSIGN",
		2: "DELETE",
	}
	HeartbeatResponse_Operation_value = map[string]int32{
		"ACK":    0,
		"ASSIGN": 1,
		"DELETE": 2,
	}
)

func (x HeartbeatResponse_Operation) Enum() *HeartbeatResponse_Operation {
	p := new(HeartbeatResponse_Operation)
	*p = x
	return p
}

func (x HeartbeatResponse_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeartbeatResponse_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_fasttask_proto_enumTypes[0].Descriptor()
}

func (HeartbeatResponse_Operation) Type() protoreflect.EnumType {
	return &file_fasttask_proto_enumTypes[0]
}

func (x HeartbeatResponse_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeartbeatResponse_Operation.Descriptor instead.
func (HeartbeatResponse_Operation) EnumDescriptor() ([]byte, []int) {
	return file_fasttask_proto_rawDescGZIP(), []int{3, 0}
}

type TaskStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Namespace  string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId string `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Phase      int32  `protobuf:"varint,4,opt,name=phase,proto3" json:"phase,omitempty"`
	Reason     string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *TaskStatus) Reset() {
	*x = TaskStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasttask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatus) ProtoMessage() {}

func (x *TaskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fasttask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatus.ProtoReflect.Descriptor instead.
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return file_fasttask_proto_rawDescGZIP(), []int{0}
}

func (x *TaskStatus) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskStatus) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TaskStatus) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *TaskStatus) GetPhase() int32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *TaskStatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Capacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionCount int32 `protobuf:"varint,1,opt,name=execution_count,json=executionCount,proto3" json:"execution_count,omitempty"`
	ExecutionLimit int32 `protobuf:"varint,2,opt,name=execution_limit,json=executionLimit,proto3" json:"execution_limit,omitempty"`
	BacklogCount   int32 `protobuf:"varint,3,opt,name=backlog_count,json=backlogCount,proto3" json:"backlog_count,omitempty"`
	BacklogLimit   int32 `protobuf:"varint,4,opt,name=backlog_limit,json=backlogLimit,proto3" json:"backlog_limit,omitempty"`
}

func (x *Capacity) Reset() {
	*x = Capacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasttask_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capacity) ProtoMessage() {}

func (x *Capacity) ProtoReflect() protoreflect.Message {
	mi := &file_fasttask_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capacity.ProtoReflect.Descriptor instead.
func (*Capacity) Descriptor() ([]byte, []int) {
	return file_fasttask_proto_rawDescGZIP(), []int{1}
}

func (x *Capacity) GetExecutionCount() int32 {
	if x != nil {
		return x.ExecutionCount
	}
	return 0
}

func (x *Capacity) GetExecutionLimit() int32 {
	if x != nil {
		return x.ExecutionLimit
	}
	return 0
}

func (x *Capacity) GetBacklogCount() int32 {
	if x != nil {
		return x.BacklogCount
	}
	return 0
}

func (x *Capacity) GetBacklogLimit() int32 {
	if x != nil {
		return x.BacklogLimit
	}
	return 0
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId     string        `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	QueueId      string        `protobuf:"bytes,2,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Capacity     *Capacity     `protobuf:"bytes,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	TaskStatuses []*TaskStatus `protobuf:"bytes,4,rep,name=task_statuses,json=taskStatuses,proto3" json:"task_statuses,omitempty"`
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasttask_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fasttask_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_fasttask_proto_rawDescGZIP(), []int{2}
}

func (x *HeartbeatRequest) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *HeartbeatRequest) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *HeartbeatRequest) GetCapacity() *Capacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *HeartbeatRequest) GetTaskStatuses() []*TaskStatus {
	if x != nil {
		return x.TaskStatuses
	}
	return nil
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     string                      `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Namespace  string                      `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId string                      `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Cmd        []string                    `protobuf:"bytes,4,rep,name=cmd,proto3" json:"cmd,omitempty"`
	Operation  HeartbeatResponse_Operation `protobuf:"varint,5,opt,name=operation,proto3,enum=fasttask.HeartbeatResponse_Operation" json:"operation,omitempty"`
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasttask_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fasttask_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_fasttask_proto_rawDescGZIP(), []int{3}
}

func (x *HeartbeatResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *HeartbeatResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HeartbeatResponse) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *HeartbeatResponse) GetCmd() []string {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *HeartbeatResponse) GetOperation() HeartbeatResponse_Operation {
	if x != nil {
		return x.Operation
	}
	return HeartbeatResponse_ACK
}

type FastTaskEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
}

func (x *FastTaskEnvironment) Reset() {
	*x = FastTaskEnvironment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasttask_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastTaskEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastTaskEnvironment) ProtoMessage() {}

func (x *FastTaskEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_fasttask_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastTaskEnvironment.ProtoReflect.Descriptor instead.
func (*FastTaskEnvironment) Descriptor() ([]byte, []int) {
	return file_fasttask_proto_rawDescGZIP(), []int{4}
}

func (x *FastTaskEnvironment) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

type FastTaskEnvironmentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BacklogLength        int32  `protobuf:"varint,1,opt,name=backlog_length,json=backlogLength,proto3" json:"backlog_length,omitempty"`
	Parallelism          int32  `protobuf:"varint,2,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
	PodTemplateSpec      []byte `protobuf:"bytes,3,opt,name=pod_template_spec,json=podTemplateSpec,proto3" json:"pod_template_spec,omitempty"`
	PrimaryContainerName string `protobuf:"bytes,4,opt,name=primary_container_name,json=primaryContainerName,proto3" json:"primary_container_name,omitempty"`
	ReplicaCount         int32  `protobuf:"varint,5,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	// Types that are assignable to TerminationCriteria:
	//
	//	*FastTaskEnvironmentSpec_TtlSeconds
	TerminationCriteria isFastTaskEnvironmentSpec_TerminationCriteria `protobuf_oneof:"termination_criteria"`
}

func (x *FastTaskEnvironmentSpec) Reset() {
	*x = FastTaskEnvironmentSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasttask_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastTaskEnvironmentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastTaskEnvironmentSpec) ProtoMessage() {}

func (x *FastTaskEnvironmentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_fasttask_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastTaskEnvironmentSpec.ProtoReflect.Descriptor instead.
func (*FastTaskEnvironmentSpec) Descriptor() ([]byte, []int) {
	return file_fasttask_proto_rawDescGZIP(), []int{5}
}

func (x *FastTaskEnvironmentSpec) GetBacklogLength() int32 {
	if x != nil {
		return x.BacklogLength
	}
	return 0
}

func (x *FastTaskEnvironmentSpec) GetParallelism() int32 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *FastTaskEnvironmentSpec) GetPodTemplateSpec() []byte {
	if x != nil {
		return x.PodTemplateSpec
	}
	return nil
}

func (x *FastTaskEnvironmentSpec) GetPrimaryContainerName() string {
	if x != nil {
		return x.PrimaryContainerName
	}
	return ""
}

func (x *FastTaskEnvironmentSpec) GetReplicaCount() int32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (m *FastTaskEnvironmentSpec) GetTerminationCriteria() isFastTaskEnvironmentSpec_TerminationCriteria {
	if m != nil {
		return m.TerminationCriteria
	}
	return nil
}

func (x *FastTaskEnvironmentSpec) GetTtlSeconds() int32 {
	if x, ok := x.GetTerminationCriteria().(*FastTaskEnvironmentSpec_TtlSeconds); ok {
		return x.TtlSeconds
	}
	return 0
}

type isFastTaskEnvironmentSpec_TerminationCriteria interface {
	isFastTaskEnvironmentSpec_TerminationCriteria()
}

type FastTaskEnvironmentSpec_TtlSeconds struct {
	TtlSeconds int32 `protobuf:"varint,6,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof"`
}

func (*FastTaskEnvironmentSpec_TtlSeconds) isFastTaskEnvironmentSpec_TerminationCriteria() {}

type FastTaskAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Environment ID for this fast task
	EnvironmentId string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	// The assigned worker pod name for this fast task, if available
	AssignedWorker string `protobuf:"bytes,2,opt,name=assigned_worker,json=assignedWorker,proto3" json:"assigned_worker,omitempty"`
}

func (x *FastTaskAssignment) Reset() {
	*x = FastTaskAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fasttask_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastTaskAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastTaskAssignment) ProtoMessage() {}

func (x *FastTaskAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_fasttask_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastTaskAssignment.ProtoReflect.Descriptor instead.
func (*FastTaskAssignment) Descriptor() ([]byte, []int) {
	return file_fasttask_proto_rawDescGZIP(), []int{6}
}

func (x *FastTaskAssignment) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *FastTaskAssignment) GetAssignedWorker() string {
	if x != nil {
		return x.AssignedWorker
	}
	return ""
}

var File_fasttask_proto protoreflect.FileDescriptor

var file_fasttask_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x61, 0x73, 0x74, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x66, 0x61, 0x73, 0x74, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xa6, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b,
	0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x61, 0x73, 0x74, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66,
	0x61, 0x73, 0x74, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x22, 0xf0, 0x01, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64,
	0x12, 0x43, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x66, 0x61, 0x73, 0x74, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x53, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x02, 0x22, 0x30, 0x0a, 0x13, 0x46, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x64, 0x22, 0xa4, 0x02, 0x0a, 0x17, 0x46, 0x61, 0x73, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f,
	0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x6f, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0x64, 0x0a, 0x12,
	0x46, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x32, 0x54, 0x0a, 0x08, 0x46, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x48,
	0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1a, 0x2e, 0x66, 0x61,
	0x73, 0x74, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x66, 0x61, 0x73, 0x74, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x05, 0x5a, 0x03, 0x70, 0x62, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fasttask_proto_rawDescOnce sync.Once
	file_fasttask_proto_rawDescData = file_fasttask_proto_rawDesc
)

func file_fasttask_proto_rawDescGZIP() []byte {
	file_fasttask_proto_rawDescOnce.Do(func() {
		file_fasttask_proto_rawDescData = protoimpl.X.CompressGZIP(file_fasttask_proto_rawDescData)
	})
	return file_fasttask_proto_rawDescData
}

var file_fasttask_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fasttask_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_fasttask_proto_goTypes = []interface{}{
	(HeartbeatResponse_Operation)(0), // 0: fasttask.HeartbeatResponse.Operation
	(*TaskStatus)(nil),               // 1: fasttask.TaskStatus
	(*Capacity)(nil),                 // 2: fasttask.Capacity
	(*HeartbeatRequest)(nil),         // 3: fasttask.HeartbeatRequest
	(*HeartbeatResponse)(nil),        // 4: fasttask.HeartbeatResponse
	(*FastTaskEnvironment)(nil),      // 5: fasttask.FastTaskEnvironment
	(*FastTaskEnvironmentSpec)(nil),  // 6: fasttask.FastTaskEnvironmentSpec
	(*FastTaskAssignment)(nil),       // 7: fasttask.FastTaskAssignment
}
var file_fasttask_proto_depIdxs = []int32{
	2, // 0: fasttask.HeartbeatRequest.capacity:type_name -> fasttask.Capacity
	1, // 1: fasttask.HeartbeatRequest.task_statuses:type_name -> fasttask.TaskStatus
	0, // 2: fasttask.HeartbeatResponse.operation:type_name -> fasttask.HeartbeatResponse.Operation
	3, // 3: fasttask.FastTask.Heartbeat:input_type -> fasttask.HeartbeatRequest
	4, // 4: fasttask.FastTask.Heartbeat:output_type -> fasttask.HeartbeatResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_fasttask_proto_init() }
func file_fasttask_proto_init() {
	if File_fasttask_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fasttask_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasttask_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasttask_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasttask_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasttask_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastTaskEnvironment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasttask_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastTaskEnvironmentSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fasttask_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastTaskAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fasttask_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*FastTaskEnvironmentSpec_TtlSeconds)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fasttask_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fasttask_proto_goTypes,
		DependencyIndexes: file_fasttask_proto_depIdxs,
		EnumInfos:         file_fasttask_proto_enumTypes,
		MessageInfos:      file_fasttask_proto_msgTypes,
	}.Build()
	File_fasttask_proto = out.File
	file_fasttask_proto_rawDesc = nil
	file_fasttask_proto_goTypes = nil
	file_fasttask_proto_depIdxs = nil
}
