// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"
)

// FastTaskService is an autogenerated mock type for the FastTaskService type
type FastTaskService struct {
	mock.Mock
}

type FastTaskService_CheckStatus struct {
	*mock.Call
}

func (_m FastTaskService_CheckStatus) Return(_a0 core.Phase, _a1 string, _a2 error) *FastTaskService_CheckStatus {
	return &FastTaskService_CheckStatus{Call: _m.Call.Return(_a0, _a1, _a2)}
}

func (_m *FastTaskService) OnCheckStatus(ctx context.Context, taskID string, queueID string, workerID string) *FastTaskService_CheckStatus {
	c_call := _m.On("CheckStatus", ctx, taskID, queueID, workerID)
	return &FastTaskService_CheckStatus{Call: c_call}
}

func (_m *FastTaskService) OnCheckStatusMatch(matchers ...interface{}) *FastTaskService_CheckStatus {
	c_call := _m.On("CheckStatus", matchers...)
	return &FastTaskService_CheckStatus{Call: c_call}
}

// CheckStatus provides a mock function with given fields: ctx, taskID, queueID, workerID
func (_m *FastTaskService) CheckStatus(ctx context.Context, taskID string, queueID string, workerID string) (core.Phase, string, error) {
	ret := _m.Called(ctx, taskID, queueID, workerID)

	var r0 core.Phase
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) core.Phase); ok {
		r0 = rf(ctx, taskID, queueID, workerID)
	} else {
		r0 = ret.Get(0).(core.Phase)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) string); ok {
		r1 = rf(ctx, taskID, queueID, workerID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, taskID, queueID, workerID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type FastTaskService_Cleanup struct {
	*mock.Call
}

func (_m FastTaskService_Cleanup) Return(_a0 error) *FastTaskService_Cleanup {
	return &FastTaskService_Cleanup{Call: _m.Call.Return(_a0)}
}

func (_m *FastTaskService) OnCleanup(ctx context.Context, taskID string, queueID string, workerID string) *FastTaskService_Cleanup {
	c_call := _m.On("Cleanup", ctx, taskID, queueID, workerID)
	return &FastTaskService_Cleanup{Call: c_call}
}

func (_m *FastTaskService) OnCleanupMatch(matchers ...interface{}) *FastTaskService_Cleanup {
	c_call := _m.On("Cleanup", matchers...)
	return &FastTaskService_Cleanup{Call: c_call}
}

// Cleanup provides a mock function with given fields: ctx, taskID, queueID, workerID
func (_m *FastTaskService) Cleanup(ctx context.Context, taskID string, queueID string, workerID string) error {
	ret := _m.Called(ctx, taskID, queueID, workerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, taskID, queueID, workerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type FastTaskService_OfferOnQueue struct {
	*mock.Call
}

func (_m FastTaskService_OfferOnQueue) Return(_a0 string, _a1 error) *FastTaskService_OfferOnQueue {
	return &FastTaskService_OfferOnQueue{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *FastTaskService) OnOfferOnQueue(ctx context.Context, queueID string, taskID string, namespace string, workflowID string, cmd []string, envVars map[string]string) *FastTaskService_OfferOnQueue {
	c_call := _m.On("OfferOnQueue", ctx, queueID, taskID, namespace, workflowID, cmd, envVars)
	return &FastTaskService_OfferOnQueue{Call: c_call}
}

func (_m *FastTaskService) OnOfferOnQueueMatch(matchers ...interface{}) *FastTaskService_OfferOnQueue {
	c_call := _m.On("OfferOnQueue", matchers...)
	return &FastTaskService_OfferOnQueue{Call: c_call}
}

// OfferOnQueue provides a mock function with given fields: ctx, queueID, taskID, namespace, workflowID, cmd, envVars
func (_m *FastTaskService) OfferOnQueue(ctx context.Context, queueID string, taskID string, namespace string, workflowID string, cmd []string, envVars map[string]string) (string, error) {
	ret := _m.Called(ctx, queueID, taskID, namespace, workflowID, cmd, envVars)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []string, map[string]string) string); ok {
		r0 = rf(ctx, queueID, taskID, namespace, workflowID, cmd, envVars)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []string, map[string]string) error); ok {
		r1 = rf(ctx, queueID, taskID, namespace, workflowID, cmd, envVars)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
