// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/unionai/flyte/fasttask/plugin/pb"
)

// FastTaskClient is an autogenerated mock type for the FastTaskClient type
type FastTaskClient struct {
	mock.Mock
}

type FastTaskClient_Heartbeat struct {
	*mock.Call
}

func (_m FastTaskClient_Heartbeat) Return(_a0 pb.FastTask_HeartbeatClient, _a1 error) *FastTaskClient_Heartbeat {
	return &FastTaskClient_Heartbeat{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *FastTaskClient) OnHeartbeat(ctx context.Context, opts ...grpc.CallOption) *FastTaskClient_Heartbeat {
	c_call := _m.On("Heartbeat", ctx, opts)
	return &FastTaskClient_Heartbeat{Call: c_call}
}

func (_m *FastTaskClient) OnHeartbeatMatch(matchers ...interface{}) *FastTaskClient_Heartbeat {
	c_call := _m.On("Heartbeat", matchers...)
	return &FastTaskClient_Heartbeat{Call: c_call}
}

// Heartbeat provides a mock function with given fields: ctx, opts
func (_m *FastTaskClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (pb.FastTask_HeartbeatClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pb.FastTask_HeartbeatClient
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) pb.FastTask_HeartbeatClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pb.FastTask_HeartbeatClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
