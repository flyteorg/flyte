// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metadata "google.golang.org/grpc/metadata"

	pb "github.com/unionai/flyte/fasttask/plugin/pb"
)

// FastTask_HeartbeatServer is an autogenerated mock type for the FastTask_HeartbeatServer type
type FastTask_HeartbeatServer struct {
	mock.Mock
}

type FastTask_HeartbeatServer_Context struct {
	*mock.Call
}

func (_m FastTask_HeartbeatServer_Context) Return(_a0 context.Context) *FastTask_HeartbeatServer_Context {
	return &FastTask_HeartbeatServer_Context{Call: _m.Call.Return(_a0)}
}

func (_m *FastTask_HeartbeatServer) OnContext() *FastTask_HeartbeatServer_Context {
	c_call := _m.On("Context")
	return &FastTask_HeartbeatServer_Context{Call: c_call}
}

func (_m *FastTask_HeartbeatServer) OnContextMatch(matchers ...interface{}) *FastTask_HeartbeatServer_Context {
	c_call := _m.On("Context", matchers...)
	return &FastTask_HeartbeatServer_Context{Call: c_call}
}

// Context provides a mock function with given fields:
func (_m *FastTask_HeartbeatServer) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

type FastTask_HeartbeatServer_Recv struct {
	*mock.Call
}

func (_m FastTask_HeartbeatServer_Recv) Return(_a0 *pb.HeartbeatRequest, _a1 error) *FastTask_HeartbeatServer_Recv {
	return &FastTask_HeartbeatServer_Recv{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *FastTask_HeartbeatServer) OnRecv() *FastTask_HeartbeatServer_Recv {
	c_call := _m.On("Recv")
	return &FastTask_HeartbeatServer_Recv{Call: c_call}
}

func (_m *FastTask_HeartbeatServer) OnRecvMatch(matchers ...interface{}) *FastTask_HeartbeatServer_Recv {
	c_call := _m.On("Recv", matchers...)
	return &FastTask_HeartbeatServer_Recv{Call: c_call}
}

// Recv provides a mock function with given fields:
func (_m *FastTask_HeartbeatServer) Recv() (*pb.HeartbeatRequest, error) {
	ret := _m.Called()

	var r0 *pb.HeartbeatRequest
	if rf, ok := ret.Get(0).(func() *pb.HeartbeatRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.HeartbeatRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type FastTask_HeartbeatServer_RecvMsg struct {
	*mock.Call
}

func (_m FastTask_HeartbeatServer_RecvMsg) Return(_a0 error) *FastTask_HeartbeatServer_RecvMsg {
	return &FastTask_HeartbeatServer_RecvMsg{Call: _m.Call.Return(_a0)}
}

func (_m *FastTask_HeartbeatServer) OnRecvMsg(m interface{}) *FastTask_HeartbeatServer_RecvMsg {
	c_call := _m.On("RecvMsg", m)
	return &FastTask_HeartbeatServer_RecvMsg{Call: c_call}
}

func (_m *FastTask_HeartbeatServer) OnRecvMsgMatch(matchers ...interface{}) *FastTask_HeartbeatServer_RecvMsg {
	c_call := _m.On("RecvMsg", matchers...)
	return &FastTask_HeartbeatServer_RecvMsg{Call: c_call}
}

// RecvMsg provides a mock function with given fields: m
func (_m *FastTask_HeartbeatServer) RecvMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type FastTask_HeartbeatServer_Send struct {
	*mock.Call
}

func (_m FastTask_HeartbeatServer_Send) Return(_a0 error) *FastTask_HeartbeatServer_Send {
	return &FastTask_HeartbeatServer_Send{Call: _m.Call.Return(_a0)}
}

func (_m *FastTask_HeartbeatServer) OnSend(_a0 *pb.HeartbeatResponse) *FastTask_HeartbeatServer_Send {
	c_call := _m.On("Send", _a0)
	return &FastTask_HeartbeatServer_Send{Call: c_call}
}

func (_m *FastTask_HeartbeatServer) OnSendMatch(matchers ...interface{}) *FastTask_HeartbeatServer_Send {
	c_call := _m.On("Send", matchers...)
	return &FastTask_HeartbeatServer_Send{Call: c_call}
}

// Send provides a mock function with given fields: _a0
func (_m *FastTask_HeartbeatServer) Send(_a0 *pb.HeartbeatResponse) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pb.HeartbeatResponse) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type FastTask_HeartbeatServer_SendHeader struct {
	*mock.Call
}

func (_m FastTask_HeartbeatServer_SendHeader) Return(_a0 error) *FastTask_HeartbeatServer_SendHeader {
	return &FastTask_HeartbeatServer_SendHeader{Call: _m.Call.Return(_a0)}
}

func (_m *FastTask_HeartbeatServer) OnSendHeader(_a0 metadata.MD) *FastTask_HeartbeatServer_SendHeader {
	c_call := _m.On("SendHeader", _a0)
	return &FastTask_HeartbeatServer_SendHeader{Call: c_call}
}

func (_m *FastTask_HeartbeatServer) OnSendHeaderMatch(matchers ...interface{}) *FastTask_HeartbeatServer_SendHeader {
	c_call := _m.On("SendHeader", matchers...)
	return &FastTask_HeartbeatServer_SendHeader{Call: c_call}
}

// SendHeader provides a mock function with given fields: _a0
func (_m *FastTask_HeartbeatServer) SendHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type FastTask_HeartbeatServer_SendMsg struct {
	*mock.Call
}

func (_m FastTask_HeartbeatServer_SendMsg) Return(_a0 error) *FastTask_HeartbeatServer_SendMsg {
	return &FastTask_HeartbeatServer_SendMsg{Call: _m.Call.Return(_a0)}
}

func (_m *FastTask_HeartbeatServer) OnSendMsg(m interface{}) *FastTask_HeartbeatServer_SendMsg {
	c_call := _m.On("SendMsg", m)
	return &FastTask_HeartbeatServer_SendMsg{Call: c_call}
}

func (_m *FastTask_HeartbeatServer) OnSendMsgMatch(matchers ...interface{}) *FastTask_HeartbeatServer_SendMsg {
	c_call := _m.On("SendMsg", matchers...)
	return &FastTask_HeartbeatServer_SendMsg{Call: c_call}
}

// SendMsg provides a mock function with given fields: m
func (_m *FastTask_HeartbeatServer) SendMsg(m interface{}) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type FastTask_HeartbeatServer_SetHeader struct {
	*mock.Call
}

func (_m FastTask_HeartbeatServer_SetHeader) Return(_a0 error) *FastTask_HeartbeatServer_SetHeader {
	return &FastTask_HeartbeatServer_SetHeader{Call: _m.Call.Return(_a0)}
}

func (_m *FastTask_HeartbeatServer) OnSetHeader(_a0 metadata.MD) *FastTask_HeartbeatServer_SetHeader {
	c_call := _m.On("SetHeader", _a0)
	return &FastTask_HeartbeatServer_SetHeader{Call: c_call}
}

func (_m *FastTask_HeartbeatServer) OnSetHeaderMatch(matchers ...interface{}) *FastTask_HeartbeatServer_SetHeader {
	c_call := _m.On("SetHeader", matchers...)
	return &FastTask_HeartbeatServer_SetHeader{Call: c_call}
}

// SetHeader provides a mock function with given fields: _a0
func (_m *FastTask_HeartbeatServer) SetHeader(_a0 metadata.MD) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTrailer provides a mock function with given fields: _a0
func (_m *FastTask_HeartbeatServer) SetTrailer(_a0 metadata.MD) {
	_m.Called(_a0)
}
