syntax = "proto3";

package flyteidl2.secret;

import "flyteidl2/common/identifier.proto";
import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";

option go_package = "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/secret";

enum SecretType {
  // Default, unspecified secret type. Assumed to be generic and no type specific handling required.
  SECRET_TYPE_GENERIC = 0;
  // Secret used specifically for pulling images from a container registry.
  SECRET_TYPE_IMAGE_PULL_SECRET = 1;
}

// SecretSpec contains information used for creating/updating the secret.
// Mainly it contains the value of the secret
// In future we could add meta info like tags, rotation config, whether stored secret has any binary format etc for storage/retrieval.
message SecretSpec {
  oneof value {
    option (buf.validate.oneof).required = true;

    string string_value = 1;
    bytes binary_value = 2;
  }

  // The secret type
  SecretType type = 3;
}

// SecretIdentifier contains the uniquely identifiable way of storing or retrieving the secret
// Name and scope combination are used for defining the format for storage and retrieval of the secret
// For eg : for org scope secrets
// storage format org:<org-name>:name:secret-name
message SecretIdentifier {
  string name = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.pattern = "^[-a-zA-Z0-9_]+$"
  ];
  // Only org scoped resources are supported right now
  string organization = 2;
  // domain scoped secret
  string domain = 3;
  // Project-domain scoped secret
  string project = 4;
}

enum OverallStatus {
  UNSPECIFIED = 0;
  PARTIALLY_PRESENT = 1; // Exists in some cluster
  FULLY_PRESENT = 2; // Exists in all enabled clusters
  UNKNOWN_STATUS = 3; // Status is unknown
}

enum SecretPresenceStatus {
  UNKNOWN = 0;
  MISSING = 1; // Secret is missing in the cluster
  PRESENT = 2; // Secret is present in the cluster
}

// SecretMetadata contain meta info about the secret
message SecretMetadata {
  // created_time of the secret.
  google.protobuf.Timestamp created_time = 1;
  // secret_status reports the overall status of the secret across all the clusters.
  // This relies on number of clusters queried which relies on there enabled state.
  SecretStatus secret_status = 2;

  // The secret type
  SecretType type = 3;
}

// SecretStatus contains the status of the secret across all the clusters
message SecretStatus {
  // overall_status reports the overall status of the secret across all the clusters.
  OverallStatus overall_status = 1;
  // cluster_status reports the status of the secret in each cluster
  repeated ClusterSecretStatus cluster_status = 2;
}

// ClusterSecretStatus contains the status of the secret in a cluster
message ClusterSecretStatus {
  common.ClusterIdentifier cluster = 1;
  // presence_status reports the status of the secret in the cluster
  SecretPresenceStatus presence_status = 2;
}

// Secret is the returned object for Get and List calls which returns the identifier of the secret along with
// meta information in future about the creation data, update date, tags etc
// This doesn't contain the value of the secret
message Secret {
  SecretIdentifier id = 1;
  SecretMetadata secret_metadata = 2;
}
