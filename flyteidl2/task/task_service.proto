syntax = "proto3";

package flyteidl2.task;

import "buf/validate/validate.proto";
import "flyteidl2/common/identifier.proto";
import "flyteidl2/common/list.proto";
import "flyteidl2/task/task_definition.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/task";

// TaskService provides an interface for managing tasks.
service TaskService {
  // Deploy a task.
  rpc DeployTask(DeployTaskRequest) returns (DeployTaskResponse) {}

  // Get detailed information about a task.
  rpc GetTaskDetails(GetTaskDetailsRequest) returns (GetTaskDetailsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Lists tasks, one per task name, returning the latest version and who it was deployed by.
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }

  // Lists all versions for a task.
  rpc ListVersions(ListVersionsRequest) returns (ListVersionsResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

// Request message for deploying a task.
message DeployTaskRequest {
  // The user provided task id.
  TaskIdentifier task_id = 1 [(buf.validate.field).required = true];

  // Specification for the task.
  TaskSpec spec = 2 [(buf.validate.field).required = true];

  // Optional, set of triggers for a given task. Replaces previous set of triggers entirely if any.
  repeated TaskTrigger triggers = 3;
}

// Response message for deploying a task.
message DeployTaskResponse {}

// Request message for getting detailed information about a task.
message GetTaskDetailsRequest {
  // Id of the task.
  TaskIdentifier task_id = 1 [(buf.validate.field).required = true];
}

// Response message for deploying a task.
message GetTaskDetailsResponse {
  // Detailed information about the task.
  TaskDetails details = 1;
}

message ListTasksRequest {
  // Common list request parameters.
  common.ListRequest request = 1;

  oneof scope_by {
    option (buf.validate.oneof).required = true;

    // Organization name for filtering.
    string org = 2 [(buf.validate.field).string.min_len = 1];

    // Project identifier for filtering.
    common.ProjectIdentifier project_id = 3;
  }

  message KnownFilter {
    oneof filter_by {
      // Filter by user
      string deployed_by = 1;
    }
  }

  // Known filters for listing tasks.
  repeated KnownFilter known_filters = 4;
}

message ListTasksResponse {
  repeated Task tasks = 1;

  // Pagination token for the next page of tasks.
  string token = 2;
}

// Request message for listing versions for a task.
message ListVersionsRequest {
  // Id of the task.
  TaskName task_name = 1 [(buf.validate.field).required = true];
}

// Response message for listing versions.
message ListVersionsResponse {
  message VersionResponse {
    string version = 2;

    // The time the task version was deployed
    google.protobuf.Timestamp deployed_at = 3 [(buf.validate.field).required = true];
  }

  // Version with deployed_at
  repeated VersionResponse versions = 1;
}
