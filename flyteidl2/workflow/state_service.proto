syntax = "proto3";

package flyteidl2.workflow;

import "buf/validate/validate.proto";
import "flyteidl2/common/identifier.proto";
import "flyteidl2/core/execution.proto";
import "flyteidl2/workflow/run_definition.proto";
import "google/rpc/status.proto";

option go_package = "github.com/flyteorg/flyte/v2/gen/go/flyteidl2/workflow";

// provides an interface for managing the state of actions.
service StateService {
  // put the state of an action.
  rpc Put(PutRequest) returns (PutResponse) {}

  // get the state of an action.
  rpc Get(GetRequest) returns (GetResponse) {}

  // watch for updates to the state of actions. this api guarantees at-least-once delivery semantics.
  rpc Watch(WatchRequest) returns (stream WatchResponse) {}
}

// request message to put the state of an action.
message PutRequest {
  // a unique identifier for the action.
  common.ActionIdentifier action_id = 1 [(buf.validate.field).required = true];

  // optional name of the parent action if this is a nested action.
  optional string parent_action_name = 2;

  // currently we will store state as a json serialized `NodeStatus` object. this will be required
  // to seamlessly integrate with existing FlytePropeller node execution logic. we can update this
  // to be a subset of fields in the future if there are necessary performance improvements.
  string state = 3 [(buf.validate.field).string.min_len = 1];
}

// response message for putting the state of an action.
message PutResponse {
  // a unique identifier for the action.
  common.ActionIdentifier action_id = 1 [(buf.validate.field).required = true];

  // The result.
  google.rpc.Status status = 2 [(buf.validate.field).required = true];
}

// request message to get the state of an action.
message GetRequest {
  // a unique identifier for the action.
  common.ActionIdentifier action_id = 1 [(buf.validate.field).required = true];
}

// response message for getting the state of an action.
message GetResponse {
  // a unique identifier for the action.
  common.ActionIdentifier action_id = 1 [(buf.validate.field).required = true];
  //
  // The result.
  google.rpc.Status status = 2 [(buf.validate.field).required = true];

  // a json serialized `NodeStatus` object.
  string state = 3 [(buf.validate.field).string.min_len = 1];
}

// request message for watching updates to the state of actions.
message WatchRequest {
  // criteria for filtering which actions to watch.
  oneof filter {
    option (buf.validate.oneof).required = true;

    // a unique identifier for the parent action to watch. this will result in updates for all child
    // actions.
    common.ActionIdentifier parent_action_id = 1;
  }
}

// response message for watching updates to the state of actions.
message WatchResponse {
  // an update to the state of a specific action.
  oneof message {
    ActionUpdate action_update = 1;
    ControlMessage control_message = 2;
  }
}

message ControlMessage {
  // a sentinel value to indicate the end of a stream. this is used to disambiguate between a control message and a
  // regular message. When a watch begins the service will return the existing state of all actions, then a sentinel value,
  // before continuing on with ongoing updates. this sequence disambiguates the current state from new updates.
  bool sentinel = 1;
}

// message to represent an update to the state of an action.
message ActionUpdate {
  // A unique identifier for the action. `nil` is used as a sentinel value; for example,
  common.ActionIdentifier action_id = 1 [(buf.validate.field).required = true];

  // the current phase of the action.
  Phase phase = 2;

  // the error associated with the action (if exists).
  optional flyteidl2.core.ExecutionError error = 3;

  // the output uri for the action
  string output_uri = 4;
}
