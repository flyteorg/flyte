// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/flyteorg/flyte/flytepropeller/pkg/controller/interfaces"
	mock "github.com/stretchr/testify/mock"

	rate "golang.org/x/time/rate"

	time "time"
)

// Limiter is an autogenerated mock type for the Limiter type
type Limiter struct {
	mock.Mock
}

type Limiter_Expecter struct {
	mock *mock.Mock
}

func (_m *Limiter) EXPECT() *Limiter_Expecter {
	return &Limiter_Expecter{mock: &_m.Mock}
}

// Allow provides a mock function with given fields:
func (_m *Limiter) Allow() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Allow")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Limiter_Allow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allow'
type Limiter_Allow_Call struct {
	*mock.Call
}

// Allow is a helper method to define mock.On call
func (_e *Limiter_Expecter) Allow() *Limiter_Allow_Call {
	return &Limiter_Allow_Call{Call: _e.mock.On("Allow")}
}

func (_c *Limiter_Allow_Call) Run(run func()) *Limiter_Allow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Limiter_Allow_Call) Return(_a0 bool) *Limiter_Allow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Limiter_Allow_Call) RunAndReturn(run func() bool) *Limiter_Allow_Call {
	_c.Call.Return(run)
	return _c
}

// AllowN provides a mock function with given fields: t, n
func (_m *Limiter) AllowN(t time.Time, n int) bool {
	ret := _m.Called(t, n)

	if len(ret) == 0 {
		panic("no return value specified for AllowN")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(time.Time, int) bool); ok {
		r0 = rf(t, n)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Limiter_AllowN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllowN'
type Limiter_AllowN_Call struct {
	*mock.Call
}

// AllowN is a helper method to define mock.On call
//   - t time.Time
//   - n int
func (_e *Limiter_Expecter) AllowN(t interface{}, n interface{}) *Limiter_AllowN_Call {
	return &Limiter_AllowN_Call{Call: _e.mock.On("AllowN", t, n)}
}

func (_c *Limiter_AllowN_Call) Run(run func(t time.Time, n int)) *Limiter_AllowN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(int))
	})
	return _c
}

func (_c *Limiter_AllowN_Call) Return(_a0 bool) *Limiter_AllowN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Limiter_AllowN_Call) RunAndReturn(run func(time.Time, int) bool) *Limiter_AllowN_Call {
	_c.Call.Return(run)
	return _c
}

// Burst provides a mock function with given fields:
func (_m *Limiter) Burst() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Burst")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Limiter_Burst_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Burst'
type Limiter_Burst_Call struct {
	*mock.Call
}

// Burst is a helper method to define mock.On call
func (_e *Limiter_Expecter) Burst() *Limiter_Burst_Call {
	return &Limiter_Burst_Call{Call: _e.mock.On("Burst")}
}

func (_c *Limiter_Burst_Call) Run(run func()) *Limiter_Burst_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Limiter_Burst_Call) Return(_a0 int) *Limiter_Burst_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Limiter_Burst_Call) RunAndReturn(run func() int) *Limiter_Burst_Call {
	_c.Call.Return(run)
	return _c
}

// Limit provides a mock function with given fields:
func (_m *Limiter) Limit() rate.Limit {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Limit")
	}

	var r0 rate.Limit
	if rf, ok := ret.Get(0).(func() rate.Limit); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(rate.Limit)
	}

	return r0
}

// Limiter_Limit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Limit'
type Limiter_Limit_Call struct {
	*mock.Call
}

// Limit is a helper method to define mock.On call
func (_e *Limiter_Expecter) Limit() *Limiter_Limit_Call {
	return &Limiter_Limit_Call{Call: _e.mock.On("Limit")}
}

func (_c *Limiter_Limit_Call) Run(run func()) *Limiter_Limit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Limiter_Limit_Call) Return(_a0 rate.Limit) *Limiter_Limit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Limiter_Limit_Call) RunAndReturn(run func() rate.Limit) *Limiter_Limit_Call {
	_c.Call.Return(run)
	return _c
}

// Reserve provides a mock function with given fields:
func (_m *Limiter) Reserve() interfaces.Reservation {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reserve")
	}

	var r0 interfaces.Reservation
	if rf, ok := ret.Get(0).(func() interfaces.Reservation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Reservation)
		}
	}

	return r0
}

// Limiter_Reserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reserve'
type Limiter_Reserve_Call struct {
	*mock.Call
}

// Reserve is a helper method to define mock.On call
func (_e *Limiter_Expecter) Reserve() *Limiter_Reserve_Call {
	return &Limiter_Reserve_Call{Call: _e.mock.On("Reserve")}
}

func (_c *Limiter_Reserve_Call) Run(run func()) *Limiter_Reserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Limiter_Reserve_Call) Return(_a0 interfaces.Reservation) *Limiter_Reserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Limiter_Reserve_Call) RunAndReturn(run func() interfaces.Reservation) *Limiter_Reserve_Call {
	_c.Call.Return(run)
	return _c
}

// ReserveN provides a mock function with given fields: t, n
func (_m *Limiter) ReserveN(t time.Time, n int) interfaces.Reservation {
	ret := _m.Called(t, n)

	if len(ret) == 0 {
		panic("no return value specified for ReserveN")
	}

	var r0 interfaces.Reservation
	if rf, ok := ret.Get(0).(func(time.Time, int) interfaces.Reservation); ok {
		r0 = rf(t, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Reservation)
		}
	}

	return r0
}

// Limiter_ReserveN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReserveN'
type Limiter_ReserveN_Call struct {
	*mock.Call
}

// ReserveN is a helper method to define mock.On call
//   - t time.Time
//   - n int
func (_e *Limiter_Expecter) ReserveN(t interface{}, n interface{}) *Limiter_ReserveN_Call {
	return &Limiter_ReserveN_Call{Call: _e.mock.On("ReserveN", t, n)}
}

func (_c *Limiter_ReserveN_Call) Run(run func(t time.Time, n int)) *Limiter_ReserveN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(int))
	})
	return _c
}

func (_c *Limiter_ReserveN_Call) Return(_a0 interfaces.Reservation) *Limiter_ReserveN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Limiter_ReserveN_Call) RunAndReturn(run func(time.Time, int) interfaces.Reservation) *Limiter_ReserveN_Call {
	_c.Call.Return(run)
	return _c
}

// SetBurst provides a mock function with given fields: newBurst
func (_m *Limiter) SetBurst(newBurst int) {
	_m.Called(newBurst)
}

// Limiter_SetBurst_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBurst'
type Limiter_SetBurst_Call struct {
	*mock.Call
}

// SetBurst is a helper method to define mock.On call
//   - newBurst int
func (_e *Limiter_Expecter) SetBurst(newBurst interface{}) *Limiter_SetBurst_Call {
	return &Limiter_SetBurst_Call{Call: _e.mock.On("SetBurst", newBurst)}
}

func (_c *Limiter_SetBurst_Call) Run(run func(newBurst int)) *Limiter_SetBurst_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Limiter_SetBurst_Call) Return() *Limiter_SetBurst_Call {
	_c.Call.Return()
	return _c
}

func (_c *Limiter_SetBurst_Call) RunAndReturn(run func(int)) *Limiter_SetBurst_Call {
	_c.Call.Return(run)
	return _c
}

// SetBurstAt provides a mock function with given fields: t, newBurst
func (_m *Limiter) SetBurstAt(t time.Time, newBurst int) {
	_m.Called(t, newBurst)
}

// Limiter_SetBurstAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBurstAt'
type Limiter_SetBurstAt_Call struct {
	*mock.Call
}

// SetBurstAt is a helper method to define mock.On call
//   - t time.Time
//   - newBurst int
func (_e *Limiter_Expecter) SetBurstAt(t interface{}, newBurst interface{}) *Limiter_SetBurstAt_Call {
	return &Limiter_SetBurstAt_Call{Call: _e.mock.On("SetBurstAt", t, newBurst)}
}

func (_c *Limiter_SetBurstAt_Call) Run(run func(t time.Time, newBurst int)) *Limiter_SetBurstAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(int))
	})
	return _c
}

func (_c *Limiter_SetBurstAt_Call) Return() *Limiter_SetBurstAt_Call {
	_c.Call.Return()
	return _c
}

func (_c *Limiter_SetBurstAt_Call) RunAndReturn(run func(time.Time, int)) *Limiter_SetBurstAt_Call {
	_c.Call.Return(run)
	return _c
}

// SetLimit provides a mock function with given fields: newLimit
func (_m *Limiter) SetLimit(newLimit rate.Limit) {
	_m.Called(newLimit)
}

// Limiter_SetLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLimit'
type Limiter_SetLimit_Call struct {
	*mock.Call
}

// SetLimit is a helper method to define mock.On call
//   - newLimit rate.Limit
func (_e *Limiter_Expecter) SetLimit(newLimit interface{}) *Limiter_SetLimit_Call {
	return &Limiter_SetLimit_Call{Call: _e.mock.On("SetLimit", newLimit)}
}

func (_c *Limiter_SetLimit_Call) Run(run func(newLimit rate.Limit)) *Limiter_SetLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(rate.Limit))
	})
	return _c
}

func (_c *Limiter_SetLimit_Call) Return() *Limiter_SetLimit_Call {
	_c.Call.Return()
	return _c
}

func (_c *Limiter_SetLimit_Call) RunAndReturn(run func(rate.Limit)) *Limiter_SetLimit_Call {
	_c.Call.Return(run)
	return _c
}

// SetLimitAt provides a mock function with given fields: t, newLimit
func (_m *Limiter) SetLimitAt(t time.Time, newLimit rate.Limit) {
	_m.Called(t, newLimit)
}

// Limiter_SetLimitAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLimitAt'
type Limiter_SetLimitAt_Call struct {
	*mock.Call
}

// SetLimitAt is a helper method to define mock.On call
//   - t time.Time
//   - newLimit rate.Limit
func (_e *Limiter_Expecter) SetLimitAt(t interface{}, newLimit interface{}) *Limiter_SetLimitAt_Call {
	return &Limiter_SetLimitAt_Call{Call: _e.mock.On("SetLimitAt", t, newLimit)}
}

func (_c *Limiter_SetLimitAt_Call) Run(run func(t time.Time, newLimit rate.Limit)) *Limiter_SetLimitAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(rate.Limit))
	})
	return _c
}

func (_c *Limiter_SetLimitAt_Call) Return() *Limiter_SetLimitAt_Call {
	_c.Call.Return()
	return _c
}

func (_c *Limiter_SetLimitAt_Call) RunAndReturn(run func(time.Time, rate.Limit)) *Limiter_SetLimitAt_Call {
	_c.Call.Return(run)
	return _c
}

// Tokens provides a mock function with given fields:
func (_m *Limiter) Tokens() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tokens")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Limiter_Tokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tokens'
type Limiter_Tokens_Call struct {
	*mock.Call
}

// Tokens is a helper method to define mock.On call
func (_e *Limiter_Expecter) Tokens() *Limiter_Tokens_Call {
	return &Limiter_Tokens_Call{Call: _e.mock.On("Tokens")}
}

func (_c *Limiter_Tokens_Call) Run(run func()) *Limiter_Tokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Limiter_Tokens_Call) Return(_a0 float64) *Limiter_Tokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Limiter_Tokens_Call) RunAndReturn(run func() float64) *Limiter_Tokens_Call {
	_c.Call.Return(run)
	return _c
}

// TokensAt provides a mock function with given fields: t
func (_m *Limiter) TokensAt(t time.Time) float64 {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for TokensAt")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(time.Time) float64); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Limiter_TokensAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokensAt'
type Limiter_TokensAt_Call struct {
	*mock.Call
}

// TokensAt is a helper method to define mock.On call
//   - t time.Time
func (_e *Limiter_Expecter) TokensAt(t interface{}) *Limiter_TokensAt_Call {
	return &Limiter_TokensAt_Call{Call: _e.mock.On("TokensAt", t)}
}

func (_c *Limiter_TokensAt_Call) Run(run func(t time.Time)) *Limiter_TokensAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *Limiter_TokensAt_Call) Return(_a0 float64) *Limiter_TokensAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Limiter_TokensAt_Call) RunAndReturn(run func(time.Time) float64) *Limiter_TokensAt_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields: ctx
func (_m *Limiter) Wait(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Limiter_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type Limiter_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Limiter_Expecter) Wait(ctx interface{}) *Limiter_Wait_Call {
	return &Limiter_Wait_Call{Call: _e.mock.On("Wait", ctx)}
}

func (_c *Limiter_Wait_Call) Run(run func(ctx context.Context)) *Limiter_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Limiter_Wait_Call) Return(err error) *Limiter_Wait_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Limiter_Wait_Call) RunAndReturn(run func(context.Context) error) *Limiter_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// WaitN provides a mock function with given fields: ctx, n
func (_m *Limiter) WaitN(ctx context.Context, n int) error {
	ret := _m.Called(ctx, n)

	if len(ret) == 0 {
		panic("no return value specified for WaitN")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Limiter_WaitN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitN'
type Limiter_WaitN_Call struct {
	*mock.Call
}

// WaitN is a helper method to define mock.On call
//   - ctx context.Context
//   - n int
func (_e *Limiter_Expecter) WaitN(ctx interface{}, n interface{}) *Limiter_WaitN_Call {
	return &Limiter_WaitN_Call{Call: _e.mock.On("WaitN", ctx, n)}
}

func (_c *Limiter_WaitN_Call) Run(run func(ctx context.Context, n int)) *Limiter_WaitN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Limiter_WaitN_Call) Return(err error) *Limiter_WaitN_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Limiter_WaitN_Call) RunAndReturn(run func(context.Context, int) error) *Limiter_WaitN_Call {
	_c.Call.Return(run)
	return _c
}

// NewLimiter creates a new instance of Limiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Limiter {
	mock := &Limiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
