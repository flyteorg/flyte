// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ImmutableExecutionContext is an autogenerated mock type for the ImmutableExecutionContext type
type ImmutableExecutionContext struct {
	mock.Mock
}

type ImmutableExecutionContext_GetAnnotations struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetAnnotations) Return(_a0 map[string]string) *ImmutableExecutionContext_GetAnnotations {
	return &ImmutableExecutionContext_GetAnnotations{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetAnnotations() *ImmutableExecutionContext_GetAnnotations {
	c_call := _m.On("GetAnnotations")
	return &ImmutableExecutionContext_GetAnnotations{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetAnnotationsMatch(matchers ...interface{}) *ImmutableExecutionContext_GetAnnotations {
	c_call := _m.On("GetAnnotations", matchers...)
	return &ImmutableExecutionContext_GetAnnotations{Call: c_call}
}

// GetAnnotations provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetAnnotations() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

type ImmutableExecutionContext_GetConsoleURL struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetConsoleURL) Return(_a0 string) *ImmutableExecutionContext_GetConsoleURL {
	return &ImmutableExecutionContext_GetConsoleURL{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetConsoleURL() *ImmutableExecutionContext_GetConsoleURL {
	c_call := _m.On("GetConsoleURL")
	return &ImmutableExecutionContext_GetConsoleURL{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetConsoleURLMatch(matchers ...interface{}) *ImmutableExecutionContext_GetConsoleURL {
	c_call := _m.On("GetConsoleURL", matchers...)
	return &ImmutableExecutionContext_GetConsoleURL{Call: c_call}
}

// GetConsoleURL provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetConsoleURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type ImmutableExecutionContext_GetCreationTimestamp struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetCreationTimestamp) Return(_a0 v1.Time) *ImmutableExecutionContext_GetCreationTimestamp {
	return &ImmutableExecutionContext_GetCreationTimestamp{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetCreationTimestamp() *ImmutableExecutionContext_GetCreationTimestamp {
	c_call := _m.On("GetCreationTimestamp")
	return &ImmutableExecutionContext_GetCreationTimestamp{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetCreationTimestampMatch(matchers ...interface{}) *ImmutableExecutionContext_GetCreationTimestamp {
	c_call := _m.On("GetCreationTimestamp", matchers...)
	return &ImmutableExecutionContext_GetCreationTimestamp{Call: c_call}
}

// GetCreationTimestamp provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetCreationTimestamp() v1.Time {
	ret := _m.Called()

	var r0 v1.Time
	if rf, ok := ret.Get(0).(func() v1.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.Time)
	}

	return r0
}

type ImmutableExecutionContext_GetDefinitionVersion struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetDefinitionVersion) Return(_a0 v1alpha1.WorkflowDefinitionVersion) *ImmutableExecutionContext_GetDefinitionVersion {
	return &ImmutableExecutionContext_GetDefinitionVersion{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetDefinitionVersion() *ImmutableExecutionContext_GetDefinitionVersion {
	c_call := _m.On("GetDefinitionVersion")
	return &ImmutableExecutionContext_GetDefinitionVersion{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetDefinitionVersionMatch(matchers ...interface{}) *ImmutableExecutionContext_GetDefinitionVersion {
	c_call := _m.On("GetDefinitionVersion", matchers...)
	return &ImmutableExecutionContext_GetDefinitionVersion{Call: c_call}
}

// GetDefinitionVersion provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetDefinitionVersion() v1alpha1.WorkflowDefinitionVersion {
	ret := _m.Called()

	var r0 v1alpha1.WorkflowDefinitionVersion
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowDefinitionVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowDefinitionVersion)
	}

	return r0
}

type ImmutableExecutionContext_GetEventVersion struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetEventVersion) Return(_a0 v1alpha1.EventVersion) *ImmutableExecutionContext_GetEventVersion {
	return &ImmutableExecutionContext_GetEventVersion{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetEventVersion() *ImmutableExecutionContext_GetEventVersion {
	c_call := _m.On("GetEventVersion")
	return &ImmutableExecutionContext_GetEventVersion{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetEventVersionMatch(matchers ...interface{}) *ImmutableExecutionContext_GetEventVersion {
	c_call := _m.On("GetEventVersion", matchers...)
	return &ImmutableExecutionContext_GetEventVersion{Call: c_call}
}

// GetEventVersion provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetEventVersion() v1alpha1.EventVersion {
	ret := _m.Called()

	var r0 v1alpha1.EventVersion
	if rf, ok := ret.Get(0).(func() v1alpha1.EventVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.EventVersion)
	}

	return r0
}

type ImmutableExecutionContext_GetExecutionConfig struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetExecutionConfig) Return(_a0 v1alpha1.ExecutionConfig) *ImmutableExecutionContext_GetExecutionConfig {
	return &ImmutableExecutionContext_GetExecutionConfig{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetExecutionConfig() *ImmutableExecutionContext_GetExecutionConfig {
	c_call := _m.On("GetExecutionConfig")
	return &ImmutableExecutionContext_GetExecutionConfig{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetExecutionConfigMatch(matchers ...interface{}) *ImmutableExecutionContext_GetExecutionConfig {
	c_call := _m.On("GetExecutionConfig", matchers...)
	return &ImmutableExecutionContext_GetExecutionConfig{Call: c_call}
}

// GetExecutionConfig provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetExecutionConfig() v1alpha1.ExecutionConfig {
	ret := _m.Called()

	var r0 v1alpha1.ExecutionConfig
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutionConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.ExecutionConfig)
	}

	return r0
}

type ImmutableExecutionContext_GetExecutionID struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetExecutionID) Return(_a0 v1alpha1.WorkflowExecutionIdentifier) *ImmutableExecutionContext_GetExecutionID {
	return &ImmutableExecutionContext_GetExecutionID{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetExecutionID() *ImmutableExecutionContext_GetExecutionID {
	c_call := _m.On("GetExecutionID")
	return &ImmutableExecutionContext_GetExecutionID{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetExecutionIDMatch(matchers ...interface{}) *ImmutableExecutionContext_GetExecutionID {
	c_call := _m.On("GetExecutionID", matchers...)
	return &ImmutableExecutionContext_GetExecutionID{Call: c_call}
}

// GetExecutionID provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetExecutionID() v1alpha1.WorkflowExecutionIdentifier {
	ret := _m.Called()

	var r0 v1alpha1.WorkflowExecutionIdentifier
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowExecutionIdentifier); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowExecutionIdentifier)
	}

	return r0
}

type ImmutableExecutionContext_GetID struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetID) Return(_a0 string) *ImmutableExecutionContext_GetID {
	return &ImmutableExecutionContext_GetID{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetID() *ImmutableExecutionContext_GetID {
	c_call := _m.On("GetID")
	return &ImmutableExecutionContext_GetID{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetIDMatch(matchers ...interface{}) *ImmutableExecutionContext_GetID {
	c_call := _m.On("GetID", matchers...)
	return &ImmutableExecutionContext_GetID{Call: c_call}
}

// GetID provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type ImmutableExecutionContext_GetK8sWorkflowID struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetK8sWorkflowID) Return(_a0 types.NamespacedName) *ImmutableExecutionContext_GetK8sWorkflowID {
	return &ImmutableExecutionContext_GetK8sWorkflowID{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetK8sWorkflowID() *ImmutableExecutionContext_GetK8sWorkflowID {
	c_call := _m.On("GetK8sWorkflowID")
	return &ImmutableExecutionContext_GetK8sWorkflowID{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetK8sWorkflowIDMatch(matchers ...interface{}) *ImmutableExecutionContext_GetK8sWorkflowID {
	c_call := _m.On("GetK8sWorkflowID", matchers...)
	return &ImmutableExecutionContext_GetK8sWorkflowID{Call: c_call}
}

// GetK8sWorkflowID provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetK8sWorkflowID() types.NamespacedName {
	ret := _m.Called()

	var r0 types.NamespacedName
	if rf, ok := ret.Get(0).(func() types.NamespacedName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.NamespacedName)
	}

	return r0
}

type ImmutableExecutionContext_GetLabels struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetLabels) Return(_a0 map[string]string) *ImmutableExecutionContext_GetLabels {
	return &ImmutableExecutionContext_GetLabels{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetLabels() *ImmutableExecutionContext_GetLabels {
	c_call := _m.On("GetLabels")
	return &ImmutableExecutionContext_GetLabels{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetLabelsMatch(matchers ...interface{}) *ImmutableExecutionContext_GetLabels {
	c_call := _m.On("GetLabels", matchers...)
	return &ImmutableExecutionContext_GetLabels{Call: c_call}
}

// GetLabels provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetLabels() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

type ImmutableExecutionContext_GetName struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetName) Return(_a0 string) *ImmutableExecutionContext_GetName {
	return &ImmutableExecutionContext_GetName{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetName() *ImmutableExecutionContext_GetName {
	c_call := _m.On("GetName")
	return &ImmutableExecutionContext_GetName{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetNameMatch(matchers ...interface{}) *ImmutableExecutionContext_GetName {
	c_call := _m.On("GetName", matchers...)
	return &ImmutableExecutionContext_GetName{Call: c_call}
}

// GetName provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type ImmutableExecutionContext_GetNamespace struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetNamespace) Return(_a0 string) *ImmutableExecutionContext_GetNamespace {
	return &ImmutableExecutionContext_GetNamespace{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetNamespace() *ImmutableExecutionContext_GetNamespace {
	c_call := _m.On("GetNamespace")
	return &ImmutableExecutionContext_GetNamespace{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetNamespaceMatch(matchers ...interface{}) *ImmutableExecutionContext_GetNamespace {
	c_call := _m.On("GetNamespace", matchers...)
	return &ImmutableExecutionContext_GetNamespace{Call: c_call}
}

// GetNamespace provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetNamespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type ImmutableExecutionContext_GetOnFailurePolicy struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetOnFailurePolicy) Return(_a0 v1alpha1.WorkflowOnFailurePolicy) *ImmutableExecutionContext_GetOnFailurePolicy {
	return &ImmutableExecutionContext_GetOnFailurePolicy{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetOnFailurePolicy() *ImmutableExecutionContext_GetOnFailurePolicy {
	c_call := _m.On("GetOnFailurePolicy")
	return &ImmutableExecutionContext_GetOnFailurePolicy{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetOnFailurePolicyMatch(matchers ...interface{}) *ImmutableExecutionContext_GetOnFailurePolicy {
	c_call := _m.On("GetOnFailurePolicy", matchers...)
	return &ImmutableExecutionContext_GetOnFailurePolicy{Call: c_call}
}

// GetOnFailurePolicy provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetOnFailurePolicy() v1alpha1.WorkflowOnFailurePolicy {
	ret := _m.Called()

	var r0 v1alpha1.WorkflowOnFailurePolicy
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowOnFailurePolicy); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowOnFailurePolicy)
	}

	return r0
}

type ImmutableExecutionContext_GetOwnerReference struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetOwnerReference) Return(_a0 v1.OwnerReference) *ImmutableExecutionContext_GetOwnerReference {
	return &ImmutableExecutionContext_GetOwnerReference{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetOwnerReference() *ImmutableExecutionContext_GetOwnerReference {
	c_call := _m.On("GetOwnerReference")
	return &ImmutableExecutionContext_GetOwnerReference{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetOwnerReferenceMatch(matchers ...interface{}) *ImmutableExecutionContext_GetOwnerReference {
	c_call := _m.On("GetOwnerReference", matchers...)
	return &ImmutableExecutionContext_GetOwnerReference{Call: c_call}
}

// GetOwnerReference provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetOwnerReference() v1.OwnerReference {
	ret := _m.Called()

	var r0 v1.OwnerReference
	if rf, ok := ret.Get(0).(func() v1.OwnerReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.OwnerReference)
	}

	return r0
}

type ImmutableExecutionContext_GetRawOutputDataConfig struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetRawOutputDataConfig) Return(_a0 v1alpha1.RawOutputDataConfig) *ImmutableExecutionContext_GetRawOutputDataConfig {
	return &ImmutableExecutionContext_GetRawOutputDataConfig{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetRawOutputDataConfig() *ImmutableExecutionContext_GetRawOutputDataConfig {
	c_call := _m.On("GetRawOutputDataConfig")
	return &ImmutableExecutionContext_GetRawOutputDataConfig{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetRawOutputDataConfigMatch(matchers ...interface{}) *ImmutableExecutionContext_GetRawOutputDataConfig {
	c_call := _m.On("GetRawOutputDataConfig", matchers...)
	return &ImmutableExecutionContext_GetRawOutputDataConfig{Call: c_call}
}

// GetRawOutputDataConfig provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetRawOutputDataConfig() v1alpha1.RawOutputDataConfig {
	ret := _m.Called()

	var r0 v1alpha1.RawOutputDataConfig
	if rf, ok := ret.Get(0).(func() v1alpha1.RawOutputDataConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.RawOutputDataConfig)
	}

	return r0
}

type ImmutableExecutionContext_GetSecurityContext struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetSecurityContext) Return(_a0 core.SecurityContext) *ImmutableExecutionContext_GetSecurityContext {
	return &ImmutableExecutionContext_GetSecurityContext{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetSecurityContext() *ImmutableExecutionContext_GetSecurityContext {
	c_call := _m.On("GetSecurityContext")
	return &ImmutableExecutionContext_GetSecurityContext{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetSecurityContextMatch(matchers ...interface{}) *ImmutableExecutionContext_GetSecurityContext {
	c_call := _m.On("GetSecurityContext", matchers...)
	return &ImmutableExecutionContext_GetSecurityContext{Call: c_call}
}

// GetSecurityContext provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetSecurityContext() core.SecurityContext {
	ret := _m.Called()

	var r0 core.SecurityContext
	if rf, ok := ret.Get(0).(func() core.SecurityContext); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.SecurityContext)
	}

	return r0
}

type ImmutableExecutionContext_GetServiceAccountName struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_GetServiceAccountName) Return(_a0 string) *ImmutableExecutionContext_GetServiceAccountName {
	return &ImmutableExecutionContext_GetServiceAccountName{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnGetServiceAccountName() *ImmutableExecutionContext_GetServiceAccountName {
	c_call := _m.On("GetServiceAccountName")
	return &ImmutableExecutionContext_GetServiceAccountName{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnGetServiceAccountNameMatch(matchers ...interface{}) *ImmutableExecutionContext_GetServiceAccountName {
	c_call := _m.On("GetServiceAccountName", matchers...)
	return &ImmutableExecutionContext_GetServiceAccountName{Call: c_call}
}

// GetServiceAccountName provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetServiceAccountName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type ImmutableExecutionContext_IsInterruptible struct {
	*mock.Call
}

func (_m ImmutableExecutionContext_IsInterruptible) Return(_a0 bool) *ImmutableExecutionContext_IsInterruptible {
	return &ImmutableExecutionContext_IsInterruptible{Call: _m.Call.Return(_a0)}
}

func (_m *ImmutableExecutionContext) OnIsInterruptible() *ImmutableExecutionContext_IsInterruptible {
	c_call := _m.On("IsInterruptible")
	return &ImmutableExecutionContext_IsInterruptible{Call: c_call}
}

func (_m *ImmutableExecutionContext) OnIsInterruptibleMatch(matchers ...interface{}) *ImmutableExecutionContext_IsInterruptible {
	c_call := _m.On("IsInterruptible", matchers...)
	return &ImmutableExecutionContext_IsInterruptible{Call: c_call}
}

// IsInterruptible provides a mock function with given fields:
func (_m *ImmutableExecutionContext) IsInterruptible() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
