// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ImmutableExecutionContext is an autogenerated mock type for the ImmutableExecutionContext type
type ImmutableExecutionContext struct {
	mock.Mock
}

type ImmutableExecutionContext_Expecter struct {
	mock *mock.Mock
}

func (_m *ImmutableExecutionContext) EXPECT() *ImmutableExecutionContext_Expecter {
	return &ImmutableExecutionContext_Expecter{mock: &_m.Mock}
}

// GetAnnotations provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetAnnotations() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAnnotations")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// ImmutableExecutionContext_GetAnnotations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnnotations'
type ImmutableExecutionContext_GetAnnotations_Call struct {
	*mock.Call
}

// GetAnnotations is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetAnnotations() *ImmutableExecutionContext_GetAnnotations_Call {
	return &ImmutableExecutionContext_GetAnnotations_Call{Call: _e.mock.On("GetAnnotations")}
}

func (_c *ImmutableExecutionContext_GetAnnotations_Call) Run(run func()) *ImmutableExecutionContext_GetAnnotations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetAnnotations_Call) Return(_a0 map[string]string) *ImmutableExecutionContext_GetAnnotations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetAnnotations_Call) RunAndReturn(run func() map[string]string) *ImmutableExecutionContext_GetAnnotations_Call {
	_c.Call.Return(run)
	return _c
}

// GetConsoleURL provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetConsoleURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConsoleURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ImmutableExecutionContext_GetConsoleURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConsoleURL'
type ImmutableExecutionContext_GetConsoleURL_Call struct {
	*mock.Call
}

// GetConsoleURL is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetConsoleURL() *ImmutableExecutionContext_GetConsoleURL_Call {
	return &ImmutableExecutionContext_GetConsoleURL_Call{Call: _e.mock.On("GetConsoleURL")}
}

func (_c *ImmutableExecutionContext_GetConsoleURL_Call) Run(run func()) *ImmutableExecutionContext_GetConsoleURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetConsoleURL_Call) Return(_a0 string) *ImmutableExecutionContext_GetConsoleURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetConsoleURL_Call) RunAndReturn(run func() string) *ImmutableExecutionContext_GetConsoleURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreationTimestamp provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetCreationTimestamp() v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCreationTimestamp")
	}

	var r0 v1.Time
	if rf, ok := ret.Get(0).(func() v1.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.Time)
	}

	return r0
}

// ImmutableExecutionContext_GetCreationTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreationTimestamp'
type ImmutableExecutionContext_GetCreationTimestamp_Call struct {
	*mock.Call
}

// GetCreationTimestamp is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetCreationTimestamp() *ImmutableExecutionContext_GetCreationTimestamp_Call {
	return &ImmutableExecutionContext_GetCreationTimestamp_Call{Call: _e.mock.On("GetCreationTimestamp")}
}

func (_c *ImmutableExecutionContext_GetCreationTimestamp_Call) Run(run func()) *ImmutableExecutionContext_GetCreationTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetCreationTimestamp_Call) Return(_a0 v1.Time) *ImmutableExecutionContext_GetCreationTimestamp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetCreationTimestamp_Call) RunAndReturn(run func() v1.Time) *ImmutableExecutionContext_GetCreationTimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefinitionVersion provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetDefinitionVersion() v1alpha1.WorkflowDefinitionVersion {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefinitionVersion")
	}

	var r0 v1alpha1.WorkflowDefinitionVersion
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowDefinitionVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowDefinitionVersion)
	}

	return r0
}

// ImmutableExecutionContext_GetDefinitionVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefinitionVersion'
type ImmutableExecutionContext_GetDefinitionVersion_Call struct {
	*mock.Call
}

// GetDefinitionVersion is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetDefinitionVersion() *ImmutableExecutionContext_GetDefinitionVersion_Call {
	return &ImmutableExecutionContext_GetDefinitionVersion_Call{Call: _e.mock.On("GetDefinitionVersion")}
}

func (_c *ImmutableExecutionContext_GetDefinitionVersion_Call) Run(run func()) *ImmutableExecutionContext_GetDefinitionVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetDefinitionVersion_Call) Return(_a0 v1alpha1.WorkflowDefinitionVersion) *ImmutableExecutionContext_GetDefinitionVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetDefinitionVersion_Call) RunAndReturn(run func() v1alpha1.WorkflowDefinitionVersion) *ImmutableExecutionContext_GetDefinitionVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventVersion provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetEventVersion() v1alpha1.EventVersion {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEventVersion")
	}

	var r0 v1alpha1.EventVersion
	if rf, ok := ret.Get(0).(func() v1alpha1.EventVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.EventVersion)
	}

	return r0
}

// ImmutableExecutionContext_GetEventVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventVersion'
type ImmutableExecutionContext_GetEventVersion_Call struct {
	*mock.Call
}

// GetEventVersion is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetEventVersion() *ImmutableExecutionContext_GetEventVersion_Call {
	return &ImmutableExecutionContext_GetEventVersion_Call{Call: _e.mock.On("GetEventVersion")}
}

func (_c *ImmutableExecutionContext_GetEventVersion_Call) Run(run func()) *ImmutableExecutionContext_GetEventVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetEventVersion_Call) Return(_a0 v1alpha1.EventVersion) *ImmutableExecutionContext_GetEventVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetEventVersion_Call) RunAndReturn(run func() v1alpha1.EventVersion) *ImmutableExecutionContext_GetEventVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionConfig provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetExecutionConfig() v1alpha1.ExecutionConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionConfig")
	}

	var r0 v1alpha1.ExecutionConfig
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutionConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.ExecutionConfig)
	}

	return r0
}

// ImmutableExecutionContext_GetExecutionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionConfig'
type ImmutableExecutionContext_GetExecutionConfig_Call struct {
	*mock.Call
}

// GetExecutionConfig is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetExecutionConfig() *ImmutableExecutionContext_GetExecutionConfig_Call {
	return &ImmutableExecutionContext_GetExecutionConfig_Call{Call: _e.mock.On("GetExecutionConfig")}
}

func (_c *ImmutableExecutionContext_GetExecutionConfig_Call) Run(run func()) *ImmutableExecutionContext_GetExecutionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetExecutionConfig_Call) Return(_a0 v1alpha1.ExecutionConfig) *ImmutableExecutionContext_GetExecutionConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetExecutionConfig_Call) RunAndReturn(run func() v1alpha1.ExecutionConfig) *ImmutableExecutionContext_GetExecutionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionID provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetExecutionID() v1alpha1.WorkflowExecutionIdentifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionID")
	}

	var r0 v1alpha1.WorkflowExecutionIdentifier
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowExecutionIdentifier); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowExecutionIdentifier)
	}

	return r0
}

// ImmutableExecutionContext_GetExecutionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionID'
type ImmutableExecutionContext_GetExecutionID_Call struct {
	*mock.Call
}

// GetExecutionID is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetExecutionID() *ImmutableExecutionContext_GetExecutionID_Call {
	return &ImmutableExecutionContext_GetExecutionID_Call{Call: _e.mock.On("GetExecutionID")}
}

func (_c *ImmutableExecutionContext_GetExecutionID_Call) Run(run func()) *ImmutableExecutionContext_GetExecutionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetExecutionID_Call) Return(_a0 v1alpha1.WorkflowExecutionIdentifier) *ImmutableExecutionContext_GetExecutionID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetExecutionID_Call) RunAndReturn(run func() v1alpha1.WorkflowExecutionIdentifier) *ImmutableExecutionContext_GetExecutionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ImmutableExecutionContext_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type ImmutableExecutionContext_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetID() *ImmutableExecutionContext_GetID_Call {
	return &ImmutableExecutionContext_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *ImmutableExecutionContext_GetID_Call) Run(run func()) *ImmutableExecutionContext_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetID_Call) Return(_a0 string) *ImmutableExecutionContext_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetID_Call) RunAndReturn(run func() string) *ImmutableExecutionContext_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetK8sWorkflowID provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetK8sWorkflowID() types.NamespacedName {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetK8sWorkflowID")
	}

	var r0 types.NamespacedName
	if rf, ok := ret.Get(0).(func() types.NamespacedName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.NamespacedName)
	}

	return r0
}

// ImmutableExecutionContext_GetK8sWorkflowID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetK8sWorkflowID'
type ImmutableExecutionContext_GetK8sWorkflowID_Call struct {
	*mock.Call
}

// GetK8sWorkflowID is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetK8sWorkflowID() *ImmutableExecutionContext_GetK8sWorkflowID_Call {
	return &ImmutableExecutionContext_GetK8sWorkflowID_Call{Call: _e.mock.On("GetK8sWorkflowID")}
}

func (_c *ImmutableExecutionContext_GetK8sWorkflowID_Call) Run(run func()) *ImmutableExecutionContext_GetK8sWorkflowID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetK8sWorkflowID_Call) Return(_a0 types.NamespacedName) *ImmutableExecutionContext_GetK8sWorkflowID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetK8sWorkflowID_Call) RunAndReturn(run func() types.NamespacedName) *ImmutableExecutionContext_GetK8sWorkflowID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLabels provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetLabels() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLabels")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// ImmutableExecutionContext_GetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabels'
type ImmutableExecutionContext_GetLabels_Call struct {
	*mock.Call
}

// GetLabels is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetLabels() *ImmutableExecutionContext_GetLabels_Call {
	return &ImmutableExecutionContext_GetLabels_Call{Call: _e.mock.On("GetLabels")}
}

func (_c *ImmutableExecutionContext_GetLabels_Call) Run(run func()) *ImmutableExecutionContext_GetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetLabels_Call) Return(_a0 map[string]string) *ImmutableExecutionContext_GetLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetLabels_Call) RunAndReturn(run func() map[string]string) *ImmutableExecutionContext_GetLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ImmutableExecutionContext_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type ImmutableExecutionContext_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetName() *ImmutableExecutionContext_GetName_Call {
	return &ImmutableExecutionContext_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *ImmutableExecutionContext_GetName_Call) Run(run func()) *ImmutableExecutionContext_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetName_Call) Return(_a0 string) *ImmutableExecutionContext_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetName_Call) RunAndReturn(run func() string) *ImmutableExecutionContext_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetNamespace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ImmutableExecutionContext_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type ImmutableExecutionContext_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetNamespace() *ImmutableExecutionContext_GetNamespace_Call {
	return &ImmutableExecutionContext_GetNamespace_Call{Call: _e.mock.On("GetNamespace")}
}

func (_c *ImmutableExecutionContext_GetNamespace_Call) Run(run func()) *ImmutableExecutionContext_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetNamespace_Call) Return(_a0 string) *ImmutableExecutionContext_GetNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetNamespace_Call) RunAndReturn(run func() string) *ImmutableExecutionContext_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetOnFailurePolicy provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetOnFailurePolicy() v1alpha1.WorkflowOnFailurePolicy {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOnFailurePolicy")
	}

	var r0 v1alpha1.WorkflowOnFailurePolicy
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowOnFailurePolicy); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowOnFailurePolicy)
	}

	return r0
}

// ImmutableExecutionContext_GetOnFailurePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOnFailurePolicy'
type ImmutableExecutionContext_GetOnFailurePolicy_Call struct {
	*mock.Call
}

// GetOnFailurePolicy is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetOnFailurePolicy() *ImmutableExecutionContext_GetOnFailurePolicy_Call {
	return &ImmutableExecutionContext_GetOnFailurePolicy_Call{Call: _e.mock.On("GetOnFailurePolicy")}
}

func (_c *ImmutableExecutionContext_GetOnFailurePolicy_Call) Run(run func()) *ImmutableExecutionContext_GetOnFailurePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetOnFailurePolicy_Call) Return(_a0 v1alpha1.WorkflowOnFailurePolicy) *ImmutableExecutionContext_GetOnFailurePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetOnFailurePolicy_Call) RunAndReturn(run func() v1alpha1.WorkflowOnFailurePolicy) *ImmutableExecutionContext_GetOnFailurePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwnerReference provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetOwnerReference() v1.OwnerReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOwnerReference")
	}

	var r0 v1.OwnerReference
	if rf, ok := ret.Get(0).(func() v1.OwnerReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.OwnerReference)
	}

	return r0
}

// ImmutableExecutionContext_GetOwnerReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnerReference'
type ImmutableExecutionContext_GetOwnerReference_Call struct {
	*mock.Call
}

// GetOwnerReference is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetOwnerReference() *ImmutableExecutionContext_GetOwnerReference_Call {
	return &ImmutableExecutionContext_GetOwnerReference_Call{Call: _e.mock.On("GetOwnerReference")}
}

func (_c *ImmutableExecutionContext_GetOwnerReference_Call) Run(run func()) *ImmutableExecutionContext_GetOwnerReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetOwnerReference_Call) Return(_a0 v1.OwnerReference) *ImmutableExecutionContext_GetOwnerReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetOwnerReference_Call) RunAndReturn(run func() v1.OwnerReference) *ImmutableExecutionContext_GetOwnerReference_Call {
	_c.Call.Return(run)
	return _c
}

// GetRawOutputDataConfig provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetRawOutputDataConfig() v1alpha1.RawOutputDataConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRawOutputDataConfig")
	}

	var r0 v1alpha1.RawOutputDataConfig
	if rf, ok := ret.Get(0).(func() v1alpha1.RawOutputDataConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.RawOutputDataConfig)
	}

	return r0
}

// ImmutableExecutionContext_GetRawOutputDataConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawOutputDataConfig'
type ImmutableExecutionContext_GetRawOutputDataConfig_Call struct {
	*mock.Call
}

// GetRawOutputDataConfig is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetRawOutputDataConfig() *ImmutableExecutionContext_GetRawOutputDataConfig_Call {
	return &ImmutableExecutionContext_GetRawOutputDataConfig_Call{Call: _e.mock.On("GetRawOutputDataConfig")}
}

func (_c *ImmutableExecutionContext_GetRawOutputDataConfig_Call) Run(run func()) *ImmutableExecutionContext_GetRawOutputDataConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetRawOutputDataConfig_Call) Return(_a0 v1alpha1.RawOutputDataConfig) *ImmutableExecutionContext_GetRawOutputDataConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetRawOutputDataConfig_Call) RunAndReturn(run func() v1alpha1.RawOutputDataConfig) *ImmutableExecutionContext_GetRawOutputDataConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecurityContext provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetSecurityContext() core.SecurityContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSecurityContext")
	}

	var r0 core.SecurityContext
	if rf, ok := ret.Get(0).(func() core.SecurityContext); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.SecurityContext)
	}

	return r0
}

// ImmutableExecutionContext_GetSecurityContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecurityContext'
type ImmutableExecutionContext_GetSecurityContext_Call struct {
	*mock.Call
}

// GetSecurityContext is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetSecurityContext() *ImmutableExecutionContext_GetSecurityContext_Call {
	return &ImmutableExecutionContext_GetSecurityContext_Call{Call: _e.mock.On("GetSecurityContext")}
}

func (_c *ImmutableExecutionContext_GetSecurityContext_Call) Run(run func()) *ImmutableExecutionContext_GetSecurityContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetSecurityContext_Call) Return(_a0 core.SecurityContext) *ImmutableExecutionContext_GetSecurityContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetSecurityContext_Call) RunAndReturn(run func() core.SecurityContext) *ImmutableExecutionContext_GetSecurityContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountName provides a mock function with given fields:
func (_m *ImmutableExecutionContext) GetServiceAccountName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ImmutableExecutionContext_GetServiceAccountName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountName'
type ImmutableExecutionContext_GetServiceAccountName_Call struct {
	*mock.Call
}

// GetServiceAccountName is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) GetServiceAccountName() *ImmutableExecutionContext_GetServiceAccountName_Call {
	return &ImmutableExecutionContext_GetServiceAccountName_Call{Call: _e.mock.On("GetServiceAccountName")}
}

func (_c *ImmutableExecutionContext_GetServiceAccountName_Call) Run(run func()) *ImmutableExecutionContext_GetServiceAccountName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_GetServiceAccountName_Call) Return(_a0 string) *ImmutableExecutionContext_GetServiceAccountName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_GetServiceAccountName_Call) RunAndReturn(run func() string) *ImmutableExecutionContext_GetServiceAccountName_Call {
	_c.Call.Return(run)
	return _c
}

// IsInterruptible provides a mock function with given fields:
func (_m *ImmutableExecutionContext) IsInterruptible() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInterruptible")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ImmutableExecutionContext_IsInterruptible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInterruptible'
type ImmutableExecutionContext_IsInterruptible_Call struct {
	*mock.Call
}

// IsInterruptible is a helper method to define mock.On call
func (_e *ImmutableExecutionContext_Expecter) IsInterruptible() *ImmutableExecutionContext_IsInterruptible_Call {
	return &ImmutableExecutionContext_IsInterruptible_Call{Call: _e.mock.On("IsInterruptible")}
}

func (_c *ImmutableExecutionContext_IsInterruptible_Call) Run(run func()) *ImmutableExecutionContext_IsInterruptible_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableExecutionContext_IsInterruptible_Call) Return(_a0 bool) *ImmutableExecutionContext_IsInterruptible_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableExecutionContext_IsInterruptible_Call) RunAndReturn(run func() bool) *ImmutableExecutionContext_IsInterruptible_Call {
	_c.Call.Return(run)
	return _c
}

// NewImmutableExecutionContext creates a new instance of ImmutableExecutionContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImmutableExecutionContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImmutableExecutionContext {
	mock := &ImmutableExecutionContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
