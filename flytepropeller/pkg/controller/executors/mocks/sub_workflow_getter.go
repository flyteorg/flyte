// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// SubWorkflowGetter is an autogenerated mock type for the SubWorkflowGetter type
type SubWorkflowGetter struct {
	mock.Mock
}

type SubWorkflowGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *SubWorkflowGetter) EXPECT() *SubWorkflowGetter_Expecter {
	return &SubWorkflowGetter_Expecter{mock: &_m.Mock}
}

// FindSubWorkflow provides a mock function with given fields: subID
func (_m *SubWorkflowGetter) FindSubWorkflow(subID string) v1alpha1.ExecutableSubWorkflow {
	ret := _m.Called(subID)

	if len(ret) == 0 {
		panic("no return value specified for FindSubWorkflow")
	}

	var r0 v1alpha1.ExecutableSubWorkflow
	if rf, ok := ret.Get(0).(func(string) v1alpha1.ExecutableSubWorkflow); ok {
		r0 = rf(subID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableSubWorkflow)
		}
	}

	return r0
}

// SubWorkflowGetter_FindSubWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSubWorkflow'
type SubWorkflowGetter_FindSubWorkflow_Call struct {
	*mock.Call
}

// FindSubWorkflow is a helper method to define mock.On call
//   - subID string
func (_e *SubWorkflowGetter_Expecter) FindSubWorkflow(subID interface{}) *SubWorkflowGetter_FindSubWorkflow_Call {
	return &SubWorkflowGetter_FindSubWorkflow_Call{Call: _e.mock.On("FindSubWorkflow", subID)}
}

func (_c *SubWorkflowGetter_FindSubWorkflow_Call) Run(run func(subID string)) *SubWorkflowGetter_FindSubWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SubWorkflowGetter_FindSubWorkflow_Call) Return(_a0 v1alpha1.ExecutableSubWorkflow) *SubWorkflowGetter_FindSubWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubWorkflowGetter_FindSubWorkflow_Call) RunAndReturn(run func(string) v1alpha1.ExecutableSubWorkflow) *SubWorkflowGetter_FindSubWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubWorkflowGetter creates a new instance of SubWorkflowGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubWorkflowGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubWorkflowGetter {
	mock := &SubWorkflowGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
