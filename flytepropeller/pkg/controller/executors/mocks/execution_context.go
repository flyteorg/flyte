// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	executors "github.com/flyteorg/flyte/flytepropeller/pkg/controller/executors"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ExecutionContext is an autogenerated mock type for the ExecutionContext type
type ExecutionContext struct {
	mock.Mock
}

type ExecutionContext_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutionContext) EXPECT() *ExecutionContext_Expecter {
	return &ExecutionContext_Expecter{mock: &_m.Mock}
}

// CurrentNodeExecutionCount provides a mock function with given fields:
func (_m *ExecutionContext) CurrentNodeExecutionCount() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentNodeExecutionCount")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutionContext_CurrentNodeExecutionCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentNodeExecutionCount'
type ExecutionContext_CurrentNodeExecutionCount_Call struct {
	*mock.Call
}

// CurrentNodeExecutionCount is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) CurrentNodeExecutionCount() *ExecutionContext_CurrentNodeExecutionCount_Call {
	return &ExecutionContext_CurrentNodeExecutionCount_Call{Call: _e.mock.On("CurrentNodeExecutionCount")}
}

func (_c *ExecutionContext_CurrentNodeExecutionCount_Call) Run(run func()) *ExecutionContext_CurrentNodeExecutionCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_CurrentNodeExecutionCount_Call) Return(_a0 uint32) *ExecutionContext_CurrentNodeExecutionCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_CurrentNodeExecutionCount_Call) RunAndReturn(run func() uint32) *ExecutionContext_CurrentNodeExecutionCount_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentParallelism provides a mock function with given fields:
func (_m *ExecutionContext) CurrentParallelism() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentParallelism")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutionContext_CurrentParallelism_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentParallelism'
type ExecutionContext_CurrentParallelism_Call struct {
	*mock.Call
}

// CurrentParallelism is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) CurrentParallelism() *ExecutionContext_CurrentParallelism_Call {
	return &ExecutionContext_CurrentParallelism_Call{Call: _e.mock.On("CurrentParallelism")}
}

func (_c *ExecutionContext_CurrentParallelism_Call) Run(run func()) *ExecutionContext_CurrentParallelism_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_CurrentParallelism_Call) Return(_a0 uint32) *ExecutionContext_CurrentParallelism_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_CurrentParallelism_Call) RunAndReturn(run func() uint32) *ExecutionContext_CurrentParallelism_Call {
	_c.Call.Return(run)
	return _c
}

// CurrentTaskExecutionCount provides a mock function with given fields:
func (_m *ExecutionContext) CurrentTaskExecutionCount() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentTaskExecutionCount")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutionContext_CurrentTaskExecutionCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentTaskExecutionCount'
type ExecutionContext_CurrentTaskExecutionCount_Call struct {
	*mock.Call
}

// CurrentTaskExecutionCount is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) CurrentTaskExecutionCount() *ExecutionContext_CurrentTaskExecutionCount_Call {
	return &ExecutionContext_CurrentTaskExecutionCount_Call{Call: _e.mock.On("CurrentTaskExecutionCount")}
}

func (_c *ExecutionContext_CurrentTaskExecutionCount_Call) Run(run func()) *ExecutionContext_CurrentTaskExecutionCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_CurrentTaskExecutionCount_Call) Return(_a0 uint32) *ExecutionContext_CurrentTaskExecutionCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_CurrentTaskExecutionCount_Call) RunAndReturn(run func() uint32) *ExecutionContext_CurrentTaskExecutionCount_Call {
	_c.Call.Return(run)
	return _c
}

// FindSubWorkflow provides a mock function with given fields: subID
func (_m *ExecutionContext) FindSubWorkflow(subID string) v1alpha1.ExecutableSubWorkflow {
	ret := _m.Called(subID)

	if len(ret) == 0 {
		panic("no return value specified for FindSubWorkflow")
	}

	var r0 v1alpha1.ExecutableSubWorkflow
	if rf, ok := ret.Get(0).(func(string) v1alpha1.ExecutableSubWorkflow); ok {
		r0 = rf(subID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableSubWorkflow)
		}
	}

	return r0
}

// ExecutionContext_FindSubWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSubWorkflow'
type ExecutionContext_FindSubWorkflow_Call struct {
	*mock.Call
}

// FindSubWorkflow is a helper method to define mock.On call
//   - subID string
func (_e *ExecutionContext_Expecter) FindSubWorkflow(subID interface{}) *ExecutionContext_FindSubWorkflow_Call {
	return &ExecutionContext_FindSubWorkflow_Call{Call: _e.mock.On("FindSubWorkflow", subID)}
}

func (_c *ExecutionContext_FindSubWorkflow_Call) Run(run func(subID string)) *ExecutionContext_FindSubWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutionContext_FindSubWorkflow_Call) Return(_a0 v1alpha1.ExecutableSubWorkflow) *ExecutionContext_FindSubWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_FindSubWorkflow_Call) RunAndReturn(run func(string) v1alpha1.ExecutableSubWorkflow) *ExecutionContext_FindSubWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnnotations provides a mock function with given fields:
func (_m *ExecutionContext) GetAnnotations() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAnnotations")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// ExecutionContext_GetAnnotations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnnotations'
type ExecutionContext_GetAnnotations_Call struct {
	*mock.Call
}

// GetAnnotations is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetAnnotations() *ExecutionContext_GetAnnotations_Call {
	return &ExecutionContext_GetAnnotations_Call{Call: _e.mock.On("GetAnnotations")}
}

func (_c *ExecutionContext_GetAnnotations_Call) Run(run func()) *ExecutionContext_GetAnnotations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetAnnotations_Call) Return(_a0 map[string]string) *ExecutionContext_GetAnnotations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetAnnotations_Call) RunAndReturn(run func() map[string]string) *ExecutionContext_GetAnnotations_Call {
	_c.Call.Return(run)
	return _c
}

// GetConsoleURL provides a mock function with given fields:
func (_m *ExecutionContext) GetConsoleURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConsoleURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutionContext_GetConsoleURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConsoleURL'
type ExecutionContext_GetConsoleURL_Call struct {
	*mock.Call
}

// GetConsoleURL is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetConsoleURL() *ExecutionContext_GetConsoleURL_Call {
	return &ExecutionContext_GetConsoleURL_Call{Call: _e.mock.On("GetConsoleURL")}
}

func (_c *ExecutionContext_GetConsoleURL_Call) Run(run func()) *ExecutionContext_GetConsoleURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetConsoleURL_Call) Return(_a0 string) *ExecutionContext_GetConsoleURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetConsoleURL_Call) RunAndReturn(run func() string) *ExecutionContext_GetConsoleURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreationTimestamp provides a mock function with given fields:
func (_m *ExecutionContext) GetCreationTimestamp() v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCreationTimestamp")
	}

	var r0 v1.Time
	if rf, ok := ret.Get(0).(func() v1.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.Time)
	}

	return r0
}

// ExecutionContext_GetCreationTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreationTimestamp'
type ExecutionContext_GetCreationTimestamp_Call struct {
	*mock.Call
}

// GetCreationTimestamp is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetCreationTimestamp() *ExecutionContext_GetCreationTimestamp_Call {
	return &ExecutionContext_GetCreationTimestamp_Call{Call: _e.mock.On("GetCreationTimestamp")}
}

func (_c *ExecutionContext_GetCreationTimestamp_Call) Run(run func()) *ExecutionContext_GetCreationTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetCreationTimestamp_Call) Return(_a0 v1.Time) *ExecutionContext_GetCreationTimestamp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetCreationTimestamp_Call) RunAndReturn(run func() v1.Time) *ExecutionContext_GetCreationTimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefinitionVersion provides a mock function with given fields:
func (_m *ExecutionContext) GetDefinitionVersion() v1alpha1.WorkflowDefinitionVersion {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefinitionVersion")
	}

	var r0 v1alpha1.WorkflowDefinitionVersion
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowDefinitionVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowDefinitionVersion)
	}

	return r0
}

// ExecutionContext_GetDefinitionVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefinitionVersion'
type ExecutionContext_GetDefinitionVersion_Call struct {
	*mock.Call
}

// GetDefinitionVersion is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetDefinitionVersion() *ExecutionContext_GetDefinitionVersion_Call {
	return &ExecutionContext_GetDefinitionVersion_Call{Call: _e.mock.On("GetDefinitionVersion")}
}

func (_c *ExecutionContext_GetDefinitionVersion_Call) Run(run func()) *ExecutionContext_GetDefinitionVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetDefinitionVersion_Call) Return(_a0 v1alpha1.WorkflowDefinitionVersion) *ExecutionContext_GetDefinitionVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetDefinitionVersion_Call) RunAndReturn(run func() v1alpha1.WorkflowDefinitionVersion) *ExecutionContext_GetDefinitionVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventVersion provides a mock function with given fields:
func (_m *ExecutionContext) GetEventVersion() v1alpha1.EventVersion {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEventVersion")
	}

	var r0 v1alpha1.EventVersion
	if rf, ok := ret.Get(0).(func() v1alpha1.EventVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.EventVersion)
	}

	return r0
}

// ExecutionContext_GetEventVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventVersion'
type ExecutionContext_GetEventVersion_Call struct {
	*mock.Call
}

// GetEventVersion is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetEventVersion() *ExecutionContext_GetEventVersion_Call {
	return &ExecutionContext_GetEventVersion_Call{Call: _e.mock.On("GetEventVersion")}
}

func (_c *ExecutionContext_GetEventVersion_Call) Run(run func()) *ExecutionContext_GetEventVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetEventVersion_Call) Return(_a0 v1alpha1.EventVersion) *ExecutionContext_GetEventVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetEventVersion_Call) RunAndReturn(run func() v1alpha1.EventVersion) *ExecutionContext_GetEventVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionConfig provides a mock function with given fields:
func (_m *ExecutionContext) GetExecutionConfig() v1alpha1.ExecutionConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionConfig")
	}

	var r0 v1alpha1.ExecutionConfig
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutionConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.ExecutionConfig)
	}

	return r0
}

// ExecutionContext_GetExecutionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionConfig'
type ExecutionContext_GetExecutionConfig_Call struct {
	*mock.Call
}

// GetExecutionConfig is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetExecutionConfig() *ExecutionContext_GetExecutionConfig_Call {
	return &ExecutionContext_GetExecutionConfig_Call{Call: _e.mock.On("GetExecutionConfig")}
}

func (_c *ExecutionContext_GetExecutionConfig_Call) Run(run func()) *ExecutionContext_GetExecutionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetExecutionConfig_Call) Return(_a0 v1alpha1.ExecutionConfig) *ExecutionContext_GetExecutionConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetExecutionConfig_Call) RunAndReturn(run func() v1alpha1.ExecutionConfig) *ExecutionContext_GetExecutionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionID provides a mock function with given fields:
func (_m *ExecutionContext) GetExecutionID() v1alpha1.WorkflowExecutionIdentifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionID")
	}

	var r0 v1alpha1.WorkflowExecutionIdentifier
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowExecutionIdentifier); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowExecutionIdentifier)
	}

	return r0
}

// ExecutionContext_GetExecutionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionID'
type ExecutionContext_GetExecutionID_Call struct {
	*mock.Call
}

// GetExecutionID is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetExecutionID() *ExecutionContext_GetExecutionID_Call {
	return &ExecutionContext_GetExecutionID_Call{Call: _e.mock.On("GetExecutionID")}
}

func (_c *ExecutionContext_GetExecutionID_Call) Run(run func()) *ExecutionContext_GetExecutionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetExecutionID_Call) Return(_a0 v1alpha1.WorkflowExecutionIdentifier) *ExecutionContext_GetExecutionID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetExecutionID_Call) RunAndReturn(run func() v1alpha1.WorkflowExecutionIdentifier) *ExecutionContext_GetExecutionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *ExecutionContext) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutionContext_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type ExecutionContext_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetID() *ExecutionContext_GetID_Call {
	return &ExecutionContext_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *ExecutionContext_GetID_Call) Run(run func()) *ExecutionContext_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetID_Call) Return(_a0 string) *ExecutionContext_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetID_Call) RunAndReturn(run func() string) *ExecutionContext_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetK8sWorkflowID provides a mock function with given fields:
func (_m *ExecutionContext) GetK8sWorkflowID() types.NamespacedName {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetK8sWorkflowID")
	}

	var r0 types.NamespacedName
	if rf, ok := ret.Get(0).(func() types.NamespacedName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.NamespacedName)
	}

	return r0
}

// ExecutionContext_GetK8sWorkflowID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetK8sWorkflowID'
type ExecutionContext_GetK8sWorkflowID_Call struct {
	*mock.Call
}

// GetK8sWorkflowID is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetK8sWorkflowID() *ExecutionContext_GetK8sWorkflowID_Call {
	return &ExecutionContext_GetK8sWorkflowID_Call{Call: _e.mock.On("GetK8sWorkflowID")}
}

func (_c *ExecutionContext_GetK8sWorkflowID_Call) Run(run func()) *ExecutionContext_GetK8sWorkflowID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetK8sWorkflowID_Call) Return(_a0 types.NamespacedName) *ExecutionContext_GetK8sWorkflowID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetK8sWorkflowID_Call) RunAndReturn(run func() types.NamespacedName) *ExecutionContext_GetK8sWorkflowID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLabels provides a mock function with given fields:
func (_m *ExecutionContext) GetLabels() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLabels")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// ExecutionContext_GetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabels'
type ExecutionContext_GetLabels_Call struct {
	*mock.Call
}

// GetLabels is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetLabels() *ExecutionContext_GetLabels_Call {
	return &ExecutionContext_GetLabels_Call{Call: _e.mock.On("GetLabels")}
}

func (_c *ExecutionContext_GetLabels_Call) Run(run func()) *ExecutionContext_GetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetLabels_Call) Return(_a0 map[string]string) *ExecutionContext_GetLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetLabels_Call) RunAndReturn(run func() map[string]string) *ExecutionContext_GetLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *ExecutionContext) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutionContext_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type ExecutionContext_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetName() *ExecutionContext_GetName_Call {
	return &ExecutionContext_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *ExecutionContext_GetName_Call) Run(run func()) *ExecutionContext_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetName_Call) Return(_a0 string) *ExecutionContext_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetName_Call) RunAndReturn(run func() string) *ExecutionContext_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields:
func (_m *ExecutionContext) GetNamespace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutionContext_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type ExecutionContext_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetNamespace() *ExecutionContext_GetNamespace_Call {
	return &ExecutionContext_GetNamespace_Call{Call: _e.mock.On("GetNamespace")}
}

func (_c *ExecutionContext_GetNamespace_Call) Run(run func()) *ExecutionContext_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetNamespace_Call) Return(_a0 string) *ExecutionContext_GetNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetNamespace_Call) RunAndReturn(run func() string) *ExecutionContext_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetOnFailurePolicy provides a mock function with given fields:
func (_m *ExecutionContext) GetOnFailurePolicy() v1alpha1.WorkflowOnFailurePolicy {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOnFailurePolicy")
	}

	var r0 v1alpha1.WorkflowOnFailurePolicy
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowOnFailurePolicy); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowOnFailurePolicy)
	}

	return r0
}

// ExecutionContext_GetOnFailurePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOnFailurePolicy'
type ExecutionContext_GetOnFailurePolicy_Call struct {
	*mock.Call
}

// GetOnFailurePolicy is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetOnFailurePolicy() *ExecutionContext_GetOnFailurePolicy_Call {
	return &ExecutionContext_GetOnFailurePolicy_Call{Call: _e.mock.On("GetOnFailurePolicy")}
}

func (_c *ExecutionContext_GetOnFailurePolicy_Call) Run(run func()) *ExecutionContext_GetOnFailurePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetOnFailurePolicy_Call) Return(_a0 v1alpha1.WorkflowOnFailurePolicy) *ExecutionContext_GetOnFailurePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetOnFailurePolicy_Call) RunAndReturn(run func() v1alpha1.WorkflowOnFailurePolicy) *ExecutionContext_GetOnFailurePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwnerReference provides a mock function with given fields:
func (_m *ExecutionContext) GetOwnerReference() v1.OwnerReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOwnerReference")
	}

	var r0 v1.OwnerReference
	if rf, ok := ret.Get(0).(func() v1.OwnerReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.OwnerReference)
	}

	return r0
}

// ExecutionContext_GetOwnerReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnerReference'
type ExecutionContext_GetOwnerReference_Call struct {
	*mock.Call
}

// GetOwnerReference is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetOwnerReference() *ExecutionContext_GetOwnerReference_Call {
	return &ExecutionContext_GetOwnerReference_Call{Call: _e.mock.On("GetOwnerReference")}
}

func (_c *ExecutionContext_GetOwnerReference_Call) Run(run func()) *ExecutionContext_GetOwnerReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetOwnerReference_Call) Return(_a0 v1.OwnerReference) *ExecutionContext_GetOwnerReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetOwnerReference_Call) RunAndReturn(run func() v1.OwnerReference) *ExecutionContext_GetOwnerReference_Call {
	_c.Call.Return(run)
	return _c
}

// GetParentInfo provides a mock function with given fields:
func (_m *ExecutionContext) GetParentInfo() executors.ImmutableParentInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentInfo")
	}

	var r0 executors.ImmutableParentInfo
	if rf, ok := ret.Get(0).(func() executors.ImmutableParentInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(executors.ImmutableParentInfo)
		}
	}

	return r0
}

// ExecutionContext_GetParentInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentInfo'
type ExecutionContext_GetParentInfo_Call struct {
	*mock.Call
}

// GetParentInfo is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetParentInfo() *ExecutionContext_GetParentInfo_Call {
	return &ExecutionContext_GetParentInfo_Call{Call: _e.mock.On("GetParentInfo")}
}

func (_c *ExecutionContext_GetParentInfo_Call) Run(run func()) *ExecutionContext_GetParentInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetParentInfo_Call) Return(_a0 executors.ImmutableParentInfo) *ExecutionContext_GetParentInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetParentInfo_Call) RunAndReturn(run func() executors.ImmutableParentInfo) *ExecutionContext_GetParentInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetRawOutputDataConfig provides a mock function with given fields:
func (_m *ExecutionContext) GetRawOutputDataConfig() v1alpha1.RawOutputDataConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRawOutputDataConfig")
	}

	var r0 v1alpha1.RawOutputDataConfig
	if rf, ok := ret.Get(0).(func() v1alpha1.RawOutputDataConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.RawOutputDataConfig)
	}

	return r0
}

// ExecutionContext_GetRawOutputDataConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawOutputDataConfig'
type ExecutionContext_GetRawOutputDataConfig_Call struct {
	*mock.Call
}

// GetRawOutputDataConfig is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetRawOutputDataConfig() *ExecutionContext_GetRawOutputDataConfig_Call {
	return &ExecutionContext_GetRawOutputDataConfig_Call{Call: _e.mock.On("GetRawOutputDataConfig")}
}

func (_c *ExecutionContext_GetRawOutputDataConfig_Call) Run(run func()) *ExecutionContext_GetRawOutputDataConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetRawOutputDataConfig_Call) Return(_a0 v1alpha1.RawOutputDataConfig) *ExecutionContext_GetRawOutputDataConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetRawOutputDataConfig_Call) RunAndReturn(run func() v1alpha1.RawOutputDataConfig) *ExecutionContext_GetRawOutputDataConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecurityContext provides a mock function with given fields:
func (_m *ExecutionContext) GetSecurityContext() core.SecurityContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSecurityContext")
	}

	var r0 core.SecurityContext
	if rf, ok := ret.Get(0).(func() core.SecurityContext); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.SecurityContext)
	}

	return r0
}

// ExecutionContext_GetSecurityContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecurityContext'
type ExecutionContext_GetSecurityContext_Call struct {
	*mock.Call
}

// GetSecurityContext is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetSecurityContext() *ExecutionContext_GetSecurityContext_Call {
	return &ExecutionContext_GetSecurityContext_Call{Call: _e.mock.On("GetSecurityContext")}
}

func (_c *ExecutionContext_GetSecurityContext_Call) Run(run func()) *ExecutionContext_GetSecurityContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetSecurityContext_Call) Return(_a0 core.SecurityContext) *ExecutionContext_GetSecurityContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetSecurityContext_Call) RunAndReturn(run func() core.SecurityContext) *ExecutionContext_GetSecurityContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountName provides a mock function with given fields:
func (_m *ExecutionContext) GetServiceAccountName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutionContext_GetServiceAccountName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountName'
type ExecutionContext_GetServiceAccountName_Call struct {
	*mock.Call
}

// GetServiceAccountName is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) GetServiceAccountName() *ExecutionContext_GetServiceAccountName_Call {
	return &ExecutionContext_GetServiceAccountName_Call{Call: _e.mock.On("GetServiceAccountName")}
}

func (_c *ExecutionContext_GetServiceAccountName_Call) Run(run func()) *ExecutionContext_GetServiceAccountName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_GetServiceAccountName_Call) Return(_a0 string) *ExecutionContext_GetServiceAccountName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_GetServiceAccountName_Call) RunAndReturn(run func() string) *ExecutionContext_GetServiceAccountName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: id
func (_m *ExecutionContext) GetTask(id string) (v1alpha1.ExecutableTask, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 v1alpha1.ExecutableTask
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (v1alpha1.ExecutableTask, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) v1alpha1.ExecutableTask); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableTask)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionContext_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type ExecutionContext_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - id string
func (_e *ExecutionContext_Expecter) GetTask(id interface{}) *ExecutionContext_GetTask_Call {
	return &ExecutionContext_GetTask_Call{Call: _e.mock.On("GetTask", id)}
}

func (_c *ExecutionContext_GetTask_Call) Run(run func(id string)) *ExecutionContext_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutionContext_GetTask_Call) Return(_a0 v1alpha1.ExecutableTask, _a1 error) *ExecutionContext_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionContext_GetTask_Call) RunAndReturn(run func(string) (v1alpha1.ExecutableTask, error)) *ExecutionContext_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementNodeExecutionCount provides a mock function with given fields:
func (_m *ExecutionContext) IncrementNodeExecutionCount() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncrementNodeExecutionCount")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutionContext_IncrementNodeExecutionCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementNodeExecutionCount'
type ExecutionContext_IncrementNodeExecutionCount_Call struct {
	*mock.Call
}

// IncrementNodeExecutionCount is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) IncrementNodeExecutionCount() *ExecutionContext_IncrementNodeExecutionCount_Call {
	return &ExecutionContext_IncrementNodeExecutionCount_Call{Call: _e.mock.On("IncrementNodeExecutionCount")}
}

func (_c *ExecutionContext_IncrementNodeExecutionCount_Call) Run(run func()) *ExecutionContext_IncrementNodeExecutionCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_IncrementNodeExecutionCount_Call) Return(_a0 uint32) *ExecutionContext_IncrementNodeExecutionCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_IncrementNodeExecutionCount_Call) RunAndReturn(run func() uint32) *ExecutionContext_IncrementNodeExecutionCount_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementParallelism provides a mock function with given fields:
func (_m *ExecutionContext) IncrementParallelism() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncrementParallelism")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutionContext_IncrementParallelism_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementParallelism'
type ExecutionContext_IncrementParallelism_Call struct {
	*mock.Call
}

// IncrementParallelism is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) IncrementParallelism() *ExecutionContext_IncrementParallelism_Call {
	return &ExecutionContext_IncrementParallelism_Call{Call: _e.mock.On("IncrementParallelism")}
}

func (_c *ExecutionContext_IncrementParallelism_Call) Run(run func()) *ExecutionContext_IncrementParallelism_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_IncrementParallelism_Call) Return(_a0 uint32) *ExecutionContext_IncrementParallelism_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_IncrementParallelism_Call) RunAndReturn(run func() uint32) *ExecutionContext_IncrementParallelism_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementTaskExecutionCount provides a mock function with given fields:
func (_m *ExecutionContext) IncrementTaskExecutionCount() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncrementTaskExecutionCount")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutionContext_IncrementTaskExecutionCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementTaskExecutionCount'
type ExecutionContext_IncrementTaskExecutionCount_Call struct {
	*mock.Call
}

// IncrementTaskExecutionCount is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) IncrementTaskExecutionCount() *ExecutionContext_IncrementTaskExecutionCount_Call {
	return &ExecutionContext_IncrementTaskExecutionCount_Call{Call: _e.mock.On("IncrementTaskExecutionCount")}
}

func (_c *ExecutionContext_IncrementTaskExecutionCount_Call) Run(run func()) *ExecutionContext_IncrementTaskExecutionCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_IncrementTaskExecutionCount_Call) Return(_a0 uint32) *ExecutionContext_IncrementTaskExecutionCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_IncrementTaskExecutionCount_Call) RunAndReturn(run func() uint32) *ExecutionContext_IncrementTaskExecutionCount_Call {
	_c.Call.Return(run)
	return _c
}

// IsInterruptible provides a mock function with given fields:
func (_m *ExecutionContext) IsInterruptible() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInterruptible")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutionContext_IsInterruptible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInterruptible'
type ExecutionContext_IsInterruptible_Call struct {
	*mock.Call
}

// IsInterruptible is a helper method to define mock.On call
func (_e *ExecutionContext_Expecter) IsInterruptible() *ExecutionContext_IsInterruptible_Call {
	return &ExecutionContext_IsInterruptible_Call{Call: _e.mock.On("IsInterruptible")}
}

func (_c *ExecutionContext_IsInterruptible_Call) Run(run func()) *ExecutionContext_IsInterruptible_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionContext_IsInterruptible_Call) Return(_a0 bool) *ExecutionContext_IsInterruptible_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionContext_IsInterruptible_Call) RunAndReturn(run func() bool) *ExecutionContext_IsInterruptible_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutionContext creates a new instance of ExecutionContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionContext {
	mock := &ExecutionContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
