// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ImmutableParentInfo is an autogenerated mock type for the ImmutableParentInfo type
type ImmutableParentInfo struct {
	mock.Mock
}

type ImmutableParentInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *ImmutableParentInfo) EXPECT() *ImmutableParentInfo_Expecter {
	return &ImmutableParentInfo_Expecter{mock: &_m.Mock}
}

// CurrentAttempt provides a mock function with no fields
func (_m *ImmutableParentInfo) CurrentAttempt() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentAttempt")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ImmutableParentInfo_CurrentAttempt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CurrentAttempt'
type ImmutableParentInfo_CurrentAttempt_Call struct {
	*mock.Call
}

// CurrentAttempt is a helper method to define mock.On call
func (_e *ImmutableParentInfo_Expecter) CurrentAttempt() *ImmutableParentInfo_CurrentAttempt_Call {
	return &ImmutableParentInfo_CurrentAttempt_Call{Call: _e.mock.On("CurrentAttempt")}
}

func (_c *ImmutableParentInfo_CurrentAttempt_Call) Run(run func()) *ImmutableParentInfo_CurrentAttempt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableParentInfo_CurrentAttempt_Call) Return(_a0 uint32) *ImmutableParentInfo_CurrentAttempt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableParentInfo_CurrentAttempt_Call) RunAndReturn(run func() uint32) *ImmutableParentInfo_CurrentAttempt_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueID provides a mock function with no fields
func (_m *ImmutableParentInfo) GetUniqueID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUniqueID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ImmutableParentInfo_GetUniqueID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueID'
type ImmutableParentInfo_GetUniqueID_Call struct {
	*mock.Call
}

// GetUniqueID is a helper method to define mock.On call
func (_e *ImmutableParentInfo_Expecter) GetUniqueID() *ImmutableParentInfo_GetUniqueID_Call {
	return &ImmutableParentInfo_GetUniqueID_Call{Call: _e.mock.On("GetUniqueID")}
}

func (_c *ImmutableParentInfo_GetUniqueID_Call) Run(run func()) *ImmutableParentInfo_GetUniqueID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableParentInfo_GetUniqueID_Call) Return(_a0 string) *ImmutableParentInfo_GetUniqueID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableParentInfo_GetUniqueID_Call) RunAndReturn(run func() string) *ImmutableParentInfo_GetUniqueID_Call {
	_c.Call.Return(run)
	return _c
}

// IsInDynamicChain provides a mock function with no fields
func (_m *ImmutableParentInfo) IsInDynamicChain() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInDynamicChain")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ImmutableParentInfo_IsInDynamicChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInDynamicChain'
type ImmutableParentInfo_IsInDynamicChain_Call struct {
	*mock.Call
}

// IsInDynamicChain is a helper method to define mock.On call
func (_e *ImmutableParentInfo_Expecter) IsInDynamicChain() *ImmutableParentInfo_IsInDynamicChain_Call {
	return &ImmutableParentInfo_IsInDynamicChain_Call{Call: _e.mock.On("IsInDynamicChain")}
}

func (_c *ImmutableParentInfo_IsInDynamicChain_Call) Run(run func()) *ImmutableParentInfo_IsInDynamicChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ImmutableParentInfo_IsInDynamicChain_Call) Return(_a0 bool) *ImmutableParentInfo_IsInDynamicChain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ImmutableParentInfo_IsInDynamicChain_Call) RunAndReturn(run func() bool) *ImmutableParentInfo_IsInDynamicChain_Call {
	_c.Call.Return(run)
	return _c
}

// NewImmutableParentInfo creates a new instance of ImmutableParentInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImmutableParentInfo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImmutableParentInfo {
	mock := &ImmutableParentInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
