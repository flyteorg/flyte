// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	executors "github.com/flyteorg/flyte/flytepropeller/pkg/controller/executors"
	mock "github.com/stretchr/testify/mock"
)

// ParentInfoGetter is an autogenerated mock type for the ParentInfoGetter type
type ParentInfoGetter struct {
	mock.Mock
}

type ParentInfoGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *ParentInfoGetter) EXPECT() *ParentInfoGetter_Expecter {
	return &ParentInfoGetter_Expecter{mock: &_m.Mock}
}

// GetParentInfo provides a mock function with no fields
func (_m *ParentInfoGetter) GetParentInfo() executors.ImmutableParentInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentInfo")
	}

	var r0 executors.ImmutableParentInfo
	if rf, ok := ret.Get(0).(func() executors.ImmutableParentInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(executors.ImmutableParentInfo)
		}
	}

	return r0
}

// ParentInfoGetter_GetParentInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentInfo'
type ParentInfoGetter_GetParentInfo_Call struct {
	*mock.Call
}

// GetParentInfo is a helper method to define mock.On call
func (_e *ParentInfoGetter_Expecter) GetParentInfo() *ParentInfoGetter_GetParentInfo_Call {
	return &ParentInfoGetter_GetParentInfo_Call{Call: _e.mock.On("GetParentInfo")}
}

func (_c *ParentInfoGetter_GetParentInfo_Call) Run(run func()) *ParentInfoGetter_GetParentInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ParentInfoGetter_GetParentInfo_Call) Return(_a0 executors.ImmutableParentInfo) *ParentInfoGetter_GetParentInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ParentInfoGetter_GetParentInfo_Call) RunAndReturn(run func() executors.ImmutableParentInfo) *ParentInfoGetter_GetParentInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewParentInfoGetter creates a new instance of ParentInfoGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParentInfoGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParentInfoGetter {
	mock := &ParentInfoGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
