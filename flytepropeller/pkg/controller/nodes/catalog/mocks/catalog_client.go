// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/catalog"

	datacatalog "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/datacatalog"

	io "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/io"

	mock "github.com/stretchr/testify/mock"

	taskinterfaces "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/task/interfaces"

	time "time"
)

// CatalogClient is an autogenerated mock type for the CatalogClient type
type CatalogClient struct {
	mock.Mock
}

type CatalogClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CatalogClient) EXPECT() *CatalogClient_Expecter {
	return &CatalogClient_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, key
func (_m *CatalogClient) Get(ctx context.Context, key catalog.Key) (catalog.Entry, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 catalog.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key) (catalog.Entry, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key) catalog.Entry); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(catalog.Entry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CatalogClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CatalogClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key catalog.Key
func (_e *CatalogClient_Expecter) Get(ctx interface{}, key interface{}) *CatalogClient_Get_Call {
	return &CatalogClient_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *CatalogClient_Get_Call) Run(run func(ctx context.Context, key catalog.Key)) *CatalogClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.Key))
	})
	return _c
}

func (_c *CatalogClient_Get_Call) Return(_a0 catalog.Entry, _a1 error) *CatalogClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CatalogClient_Get_Call) RunAndReturn(run func(context.Context, catalog.Key) (catalog.Entry, error)) *CatalogClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetFuture provides a mock function with given fields: ctx, key
func (_m *CatalogClient) GetFuture(ctx context.Context, key catalog.Key) (catalog.Entry, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetFuture")
	}

	var r0 catalog.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key) (catalog.Entry, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key) catalog.Entry); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(catalog.Entry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CatalogClient_GetFuture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFuture'
type CatalogClient_GetFuture_Call struct {
	*mock.Call
}

// GetFuture is a helper method to define mock.On call
//   - ctx context.Context
//   - key catalog.Key
func (_e *CatalogClient_Expecter) GetFuture(ctx interface{}, key interface{}) *CatalogClient_GetFuture_Call {
	return &CatalogClient_GetFuture_Call{Call: _e.mock.On("GetFuture", ctx, key)}
}

func (_c *CatalogClient_GetFuture_Call) Run(run func(ctx context.Context, key catalog.Key)) *CatalogClient_GetFuture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.Key))
	})
	return _c
}

func (_c *CatalogClient_GetFuture_Call) Return(_a0 catalog.Entry, _a1 error) *CatalogClient_GetFuture_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CatalogClient_GetFuture_Call) RunAndReturn(run func(context.Context, catalog.Key) (catalog.Entry, error)) *CatalogClient_GetFuture_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrExtendReservation provides a mock function with given fields: ctx, key, ownerID, heartbeatInterval
func (_m *CatalogClient) GetOrExtendReservation(ctx context.Context, key catalog.Key, ownerID string, heartbeatInterval time.Duration) (*datacatalog.Reservation, error) {
	ret := _m.Called(ctx, key, ownerID, heartbeatInterval)

	if len(ret) == 0 {
		panic("no return value specified for GetOrExtendReservation")
	}

	var r0 *datacatalog.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, string, time.Duration) (*datacatalog.Reservation, error)); ok {
		return rf(ctx, key, ownerID, heartbeatInterval)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, string, time.Duration) *datacatalog.Reservation); ok {
		r0 = rf(ctx, key, ownerID, heartbeatInterval)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.Reservation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key, string, time.Duration) error); ok {
		r1 = rf(ctx, key, ownerID, heartbeatInterval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CatalogClient_GetOrExtendReservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrExtendReservation'
type CatalogClient_GetOrExtendReservation_Call struct {
	*mock.Call
}

// GetOrExtendReservation is a helper method to define mock.On call
//   - ctx context.Context
//   - key catalog.Key
//   - ownerID string
//   - heartbeatInterval time.Duration
func (_e *CatalogClient_Expecter) GetOrExtendReservation(ctx interface{}, key interface{}, ownerID interface{}, heartbeatInterval interface{}) *CatalogClient_GetOrExtendReservation_Call {
	return &CatalogClient_GetOrExtendReservation_Call{Call: _e.mock.On("GetOrExtendReservation", ctx, key, ownerID, heartbeatInterval)}
}

func (_c *CatalogClient_GetOrExtendReservation_Call) Run(run func(ctx context.Context, key catalog.Key, ownerID string, heartbeatInterval time.Duration)) *CatalogClient_GetOrExtendReservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.Key), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *CatalogClient_GetOrExtendReservation_Call) Return(_a0 *datacatalog.Reservation, _a1 error) *CatalogClient_GetOrExtendReservation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CatalogClient_GetOrExtendReservation_Call) RunAndReturn(run func(context.Context, catalog.Key, string, time.Duration) (*datacatalog.Reservation, error)) *CatalogClient_GetOrExtendReservation_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, key, reader, metadata
func (_m *CatalogClient) Put(ctx context.Context, key catalog.Key, reader io.OutputReader, metadata catalog.Metadata) (catalog.Status, error) {
	ret := _m.Called(ctx, key, reader, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 catalog.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) (catalog.Status, error)); ok {
		return rf(ctx, key, reader, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) catalog.Status); ok {
		r0 = rf(ctx, key, reader, metadata)
	} else {
		r0 = ret.Get(0).(catalog.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) error); ok {
		r1 = rf(ctx, key, reader, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CatalogClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type CatalogClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - key catalog.Key
//   - reader io.OutputReader
//   - metadata catalog.Metadata
func (_e *CatalogClient_Expecter) Put(ctx interface{}, key interface{}, reader interface{}, metadata interface{}) *CatalogClient_Put_Call {
	return &CatalogClient_Put_Call{Call: _e.mock.On("Put", ctx, key, reader, metadata)}
}

func (_c *CatalogClient_Put_Call) Run(run func(ctx context.Context, key catalog.Key, reader io.OutputReader, metadata catalog.Metadata)) *CatalogClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.Key), args[2].(io.OutputReader), args[3].(catalog.Metadata))
	})
	return _c
}

func (_c *CatalogClient_Put_Call) Return(_a0 catalog.Status, _a1 error) *CatalogClient_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CatalogClient_Put_Call) RunAndReturn(run func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) (catalog.Status, error)) *CatalogClient_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutFuture provides a mock function with given fields: ctx, key, futureReader, metadata
func (_m *CatalogClient) PutFuture(ctx context.Context, key catalog.Key, futureReader taskinterfaces.FutureFileReaderInterface, metadata catalog.Metadata) (catalog.Status, error) {
	ret := _m.Called(ctx, key, futureReader, metadata)

	if len(ret) == 0 {
		panic("no return value specified for PutFuture")
	}

	var r0 catalog.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, taskinterfaces.FutureFileReaderInterface, catalog.Metadata) (catalog.Status, error)); ok {
		return rf(ctx, key, futureReader, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, taskinterfaces.FutureFileReaderInterface, catalog.Metadata) catalog.Status); ok {
		r0 = rf(ctx, key, futureReader, metadata)
	} else {
		r0 = ret.Get(0).(catalog.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key, taskinterfaces.FutureFileReaderInterface, catalog.Metadata) error); ok {
		r1 = rf(ctx, key, futureReader, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CatalogClient_PutFuture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFuture'
type CatalogClient_PutFuture_Call struct {
	*mock.Call
}

// PutFuture is a helper method to define mock.On call
//   - ctx context.Context
//   - key catalog.Key
//   - futureReader taskinterfaces.FutureFileReaderInterface
//   - metadata catalog.Metadata
func (_e *CatalogClient_Expecter) PutFuture(ctx interface{}, key interface{}, futureReader interface{}, metadata interface{}) *CatalogClient_PutFuture_Call {
	return &CatalogClient_PutFuture_Call{Call: _e.mock.On("PutFuture", ctx, key, futureReader, metadata)}
}

func (_c *CatalogClient_PutFuture_Call) Run(run func(ctx context.Context, key catalog.Key, futureReader taskinterfaces.FutureFileReaderInterface, metadata catalog.Metadata)) *CatalogClient_PutFuture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.Key), args[2].(taskinterfaces.FutureFileReaderInterface), args[3].(catalog.Metadata))
	})
	return _c
}

func (_c *CatalogClient_PutFuture_Call) Return(_a0 catalog.Status, _a1 error) *CatalogClient_PutFuture_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CatalogClient_PutFuture_Call) RunAndReturn(run func(context.Context, catalog.Key, taskinterfaces.FutureFileReaderInterface, catalog.Metadata) (catalog.Status, error)) *CatalogClient_PutFuture_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseReservation provides a mock function with given fields: ctx, key, ownerID
func (_m *CatalogClient) ReleaseReservation(ctx context.Context, key catalog.Key, ownerID string) error {
	ret := _m.Called(ctx, key, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseReservation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, string) error); ok {
		r0 = rf(ctx, key, ownerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CatalogClient_ReleaseReservation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseReservation'
type CatalogClient_ReleaseReservation_Call struct {
	*mock.Call
}

// ReleaseReservation is a helper method to define mock.On call
//   - ctx context.Context
//   - key catalog.Key
//   - ownerID string
func (_e *CatalogClient_Expecter) ReleaseReservation(ctx interface{}, key interface{}, ownerID interface{}) *CatalogClient_ReleaseReservation_Call {
	return &CatalogClient_ReleaseReservation_Call{Call: _e.mock.On("ReleaseReservation", ctx, key, ownerID)}
}

func (_c *CatalogClient_ReleaseReservation_Call) Run(run func(ctx context.Context, key catalog.Key, ownerID string)) *CatalogClient_ReleaseReservation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.Key), args[2].(string))
	})
	return _c
}

func (_c *CatalogClient_ReleaseReservation_Call) Return(_a0 error) *CatalogClient_ReleaseReservation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CatalogClient_ReleaseReservation_Call) RunAndReturn(run func(context.Context, catalog.Key, string) error) *CatalogClient_ReleaseReservation_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, key, reader, metadata
func (_m *CatalogClient) Update(ctx context.Context, key catalog.Key, reader io.OutputReader, metadata catalog.Metadata) (catalog.Status, error) {
	ret := _m.Called(ctx, key, reader, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 catalog.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) (catalog.Status, error)); ok {
		return rf(ctx, key, reader, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) catalog.Status); ok {
		r0 = rf(ctx, key, reader, metadata)
	} else {
		r0 = ret.Get(0).(catalog.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) error); ok {
		r1 = rf(ctx, key, reader, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CatalogClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CatalogClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - key catalog.Key
//   - reader io.OutputReader
//   - metadata catalog.Metadata
func (_e *CatalogClient_Expecter) Update(ctx interface{}, key interface{}, reader interface{}, metadata interface{}) *CatalogClient_Update_Call {
	return &CatalogClient_Update_Call{Call: _e.mock.On("Update", ctx, key, reader, metadata)}
}

func (_c *CatalogClient_Update_Call) Run(run func(ctx context.Context, key catalog.Key, reader io.OutputReader, metadata catalog.Metadata)) *CatalogClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.Key), args[2].(io.OutputReader), args[3].(catalog.Metadata))
	})
	return _c
}

func (_c *CatalogClient_Update_Call) Return(_a0 catalog.Status, _a1 error) *CatalogClient_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CatalogClient_Update_Call) RunAndReturn(run func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) (catalog.Status, error)) *CatalogClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFuture provides a mock function with given fields: ctx, key, futureReader, metadata
func (_m *CatalogClient) UpdateFuture(ctx context.Context, key catalog.Key, futureReader taskinterfaces.FutureFileReaderInterface, metadata catalog.Metadata) (catalog.Status, error) {
	ret := _m.Called(ctx, key, futureReader, metadata)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFuture")
	}

	var r0 catalog.Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, taskinterfaces.FutureFileReaderInterface, catalog.Metadata) (catalog.Status, error)); ok {
		return rf(ctx, key, futureReader, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, taskinterfaces.FutureFileReaderInterface, catalog.Metadata) catalog.Status); ok {
		r0 = rf(ctx, key, futureReader, metadata)
	} else {
		r0 = ret.Get(0).(catalog.Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key, taskinterfaces.FutureFileReaderInterface, catalog.Metadata) error); ok {
		r1 = rf(ctx, key, futureReader, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CatalogClient_UpdateFuture_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFuture'
type CatalogClient_UpdateFuture_Call struct {
	*mock.Call
}

// UpdateFuture is a helper method to define mock.On call
//   - ctx context.Context
//   - key catalog.Key
//   - futureReader taskinterfaces.FutureFileReaderInterface
//   - metadata catalog.Metadata
func (_e *CatalogClient_Expecter) UpdateFuture(ctx interface{}, key interface{}, futureReader interface{}, metadata interface{}) *CatalogClient_UpdateFuture_Call {
	return &CatalogClient_UpdateFuture_Call{Call: _e.mock.On("UpdateFuture", ctx, key, futureReader, metadata)}
}

func (_c *CatalogClient_UpdateFuture_Call) Run(run func(ctx context.Context, key catalog.Key, futureReader taskinterfaces.FutureFileReaderInterface, metadata catalog.Metadata)) *CatalogClient_UpdateFuture_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(catalog.Key), args[2].(taskinterfaces.FutureFileReaderInterface), args[3].(catalog.Metadata))
	})
	return _c
}

func (_c *CatalogClient_UpdateFuture_Call) Return(_a0 catalog.Status, _a1 error) *CatalogClient_UpdateFuture_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CatalogClient_UpdateFuture_Call) RunAndReturn(run func(context.Context, catalog.Key, taskinterfaces.FutureFileReaderInterface, catalog.Metadata) (catalog.Status, error)) *CatalogClient_UpdateFuture_Call {
	_c.Call.Return(run)
	return _c
}

// NewCatalogClient creates a new instance of CatalogClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCatalogClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CatalogClient {
	mock := &CatalogClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
