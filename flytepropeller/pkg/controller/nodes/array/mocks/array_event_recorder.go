// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/flyteorg/flyte/flytepropeller/pkg/controller/config"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	event "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/event"

	interfaces "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// ArrayEventRecorder is an autogenerated mock type for the ArrayEventRecorder type
type ArrayEventRecorder struct {
	mock.Mock
}

type ArrayEventRecorder_RecordNodeEvent struct {
	*mock.Call
}

func (_m ArrayEventRecorder_RecordNodeEvent) Return(_a0 error) *ArrayEventRecorder_RecordNodeEvent {
	return &ArrayEventRecorder_RecordNodeEvent{Call: _m.Call.Return(_a0)}
}

func (_m *ArrayEventRecorder) OnRecordNodeEvent(ctx context.Context, _a1 *event.NodeExecutionEvent, eventConfig *config.EventConfig) *ArrayEventRecorder_RecordNodeEvent {
	c_call := _m.On("RecordNodeEvent", ctx, _a1, eventConfig)
	return &ArrayEventRecorder_RecordNodeEvent{Call: c_call}
}

func (_m *ArrayEventRecorder) OnRecordNodeEventMatch(matchers ...interface{}) *ArrayEventRecorder_RecordNodeEvent {
	c_call := _m.On("RecordNodeEvent", matchers...)
	return &ArrayEventRecorder_RecordNodeEvent{Call: c_call}
}

// RecordNodeEvent provides a mock function with given fields: ctx, _a1, eventConfig
func (_m *ArrayEventRecorder) RecordNodeEvent(ctx context.Context, _a1 *event.NodeExecutionEvent, eventConfig *config.EventConfig) error {
	ret := _m.Called(ctx, _a1, eventConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *event.NodeExecutionEvent, *config.EventConfig) error); ok {
		r0 = rf(ctx, _a1, eventConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ArrayEventRecorder_RecordTaskEvent struct {
	*mock.Call
}

func (_m ArrayEventRecorder_RecordTaskEvent) Return(_a0 error) *ArrayEventRecorder_RecordTaskEvent {
	return &ArrayEventRecorder_RecordTaskEvent{Call: _m.Call.Return(_a0)}
}

func (_m *ArrayEventRecorder) OnRecordTaskEvent(ctx context.Context, _a1 *event.TaskExecutionEvent, eventConfig *config.EventConfig) *ArrayEventRecorder_RecordTaskEvent {
	c_call := _m.On("RecordTaskEvent", ctx, _a1, eventConfig)
	return &ArrayEventRecorder_RecordTaskEvent{Call: c_call}
}

func (_m *ArrayEventRecorder) OnRecordTaskEventMatch(matchers ...interface{}) *ArrayEventRecorder_RecordTaskEvent {
	c_call := _m.On("RecordTaskEvent", matchers...)
	return &ArrayEventRecorder_RecordTaskEvent{Call: c_call}
}

// RecordTaskEvent provides a mock function with given fields: ctx, _a1, eventConfig
func (_m *ArrayEventRecorder) RecordTaskEvent(ctx context.Context, _a1 *event.TaskExecutionEvent, eventConfig *config.EventConfig) error {
	ret := _m.Called(ctx, _a1, eventConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *event.TaskExecutionEvent, *config.EventConfig) error); ok {
		r0 = rf(ctx, _a1, eventConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ArrayEventRecorder_finalize struct {
	*mock.Call
}

func (_m ArrayEventRecorder_finalize) Return(_a0 error) *ArrayEventRecorder_finalize {
	return &ArrayEventRecorder_finalize{Call: _m.Call.Return(_a0)}
}

func (_m *ArrayEventRecorder) Onfinalize(ctx context.Context, nCtx interfaces.NodeExecutionContext, taskPhase core.TaskExecution_Phase, taskPhaseVersion uint32, eventConfig *config.EventConfig, arrayNodeExecutionError *core.ExecutionError) *ArrayEventRecorder_finalize {
	c_call := _m.On("finalize", ctx, nCtx, taskPhase, taskPhaseVersion, eventConfig, arrayNodeExecutionError)
	return &ArrayEventRecorder_finalize{Call: c_call}
}

func (_m *ArrayEventRecorder) OnfinalizeMatch(matchers ...interface{}) *ArrayEventRecorder_finalize {
	c_call := _m.On("finalize", matchers...)
	return &ArrayEventRecorder_finalize{Call: c_call}
}

// finalize provides a mock function with given fields: ctx, nCtx, taskPhase, taskPhaseVersion, eventConfig, arrayNodeExecutionError
func (_m *ArrayEventRecorder) finalize(ctx context.Context, nCtx interfaces.NodeExecutionContext, taskPhase core.TaskExecution_Phase, taskPhaseVersion uint32, eventConfig *config.EventConfig, arrayNodeExecutionError *core.ExecutionError) error {
	ret := _m.Called(ctx, nCtx, taskPhase, taskPhaseVersion, eventConfig, arrayNodeExecutionError)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext, core.TaskExecution_Phase, uint32, *config.EventConfig, *core.ExecutionError) error); ok {
		r0 = rf(ctx, nCtx, taskPhase, taskPhaseVersion, eventConfig, arrayNodeExecutionError)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ArrayEventRecorder_finalizeRequired struct {
	*mock.Call
}

func (_m ArrayEventRecorder_finalizeRequired) Return(_a0 bool) *ArrayEventRecorder_finalizeRequired {
	return &ArrayEventRecorder_finalizeRequired{Call: _m.Call.Return(_a0)}
}

func (_m *ArrayEventRecorder) OnfinalizeRequired(ctx context.Context) *ArrayEventRecorder_finalizeRequired {
	c_call := _m.On("finalizeRequired", ctx)
	return &ArrayEventRecorder_finalizeRequired{Call: c_call}
}

func (_m *ArrayEventRecorder) OnfinalizeRequiredMatch(matchers ...interface{}) *ArrayEventRecorder_finalizeRequired {
	c_call := _m.On("finalizeRequired", matchers...)
	return &ArrayEventRecorder_finalizeRequired{Call: c_call}
}

// finalizeRequired provides a mock function with given fields: ctx
func (_m *ArrayEventRecorder) finalizeRequired(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type ArrayEventRecorder_process struct {
	*mock.Call
}

func (_m ArrayEventRecorder_process) Return(_a0 error) *ArrayEventRecorder_process {
	return &ArrayEventRecorder_process{Call: _m.Call.Return(_a0)}
}

func (_m *ArrayEventRecorder) Onprocess(ctx context.Context, nCtx interfaces.NodeExecutionContext, index int, retryAttempt uint32) *ArrayEventRecorder_process {
	c_call := _m.On("process", ctx, nCtx, index, retryAttempt)
	return &ArrayEventRecorder_process{Call: c_call}
}

func (_m *ArrayEventRecorder) OnprocessMatch(matchers ...interface{}) *ArrayEventRecorder_process {
	c_call := _m.On("process", matchers...)
	return &ArrayEventRecorder_process{Call: c_call}
}

// process provides a mock function with given fields: ctx, nCtx, index, retryAttempt
func (_m *ArrayEventRecorder) process(ctx context.Context, nCtx interfaces.NodeExecutionContext, index int, retryAttempt uint32) error {
	ret := _m.Called(ctx, nCtx, index, retryAttempt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext, int, uint32) error); ok {
		r0 = rf(ctx, nCtx, index, retryAttempt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
