// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// RecoverNodeExecution provides a mock function with given fields: ctx, execID, nodeID
func (_m *Client) RecoverNodeExecution(ctx context.Context, execID *core.WorkflowExecutionIdentifier, nodeID string) (*admin.NodeExecution, error) {
	ret := _m.Called(ctx, execID, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for RecoverNodeExecution")
	}

	var r0 *admin.NodeExecution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.WorkflowExecutionIdentifier, string) (*admin.NodeExecution, error)); ok {
		return rf(ctx, execID, nodeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.WorkflowExecutionIdentifier, string) *admin.NodeExecution); ok {
		r0 = rf(ctx, execID, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.WorkflowExecutionIdentifier, string) error); ok {
		r1 = rf(ctx, execID, nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_RecoverNodeExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverNodeExecution'
type Client_RecoverNodeExecution_Call struct {
	*mock.Call
}

// RecoverNodeExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - execID *core.WorkflowExecutionIdentifier
//   - nodeID string
func (_e *Client_Expecter) RecoverNodeExecution(ctx interface{}, execID interface{}, nodeID interface{}) *Client_RecoverNodeExecution_Call {
	return &Client_RecoverNodeExecution_Call{Call: _e.mock.On("RecoverNodeExecution", ctx, execID, nodeID)}
}

func (_c *Client_RecoverNodeExecution_Call) Run(run func(ctx context.Context, execID *core.WorkflowExecutionIdentifier, nodeID string)) *Client_RecoverNodeExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.WorkflowExecutionIdentifier), args[2].(string))
	})
	return _c
}

func (_c *Client_RecoverNodeExecution_Call) Return(_a0 *admin.NodeExecution, _a1 error) *Client_RecoverNodeExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_RecoverNodeExecution_Call) RunAndReturn(run func(context.Context, *core.WorkflowExecutionIdentifier, string) (*admin.NodeExecution, error)) *Client_RecoverNodeExecution_Call {
	_c.Call.Return(run)
	return _c
}

// RecoverNodeExecutionData provides a mock function with given fields: ctx, execID, nodeID
func (_m *Client) RecoverNodeExecutionData(ctx context.Context, execID *core.WorkflowExecutionIdentifier, nodeID string) (*admin.NodeExecutionGetDataResponse, error) {
	ret := _m.Called(ctx, execID, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for RecoverNodeExecutionData")
	}

	var r0 *admin.NodeExecutionGetDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.WorkflowExecutionIdentifier, string) (*admin.NodeExecutionGetDataResponse, error)); ok {
		return rf(ctx, execID, nodeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.WorkflowExecutionIdentifier, string) *admin.NodeExecutionGetDataResponse); ok {
		r0 = rf(ctx, execID, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionGetDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.WorkflowExecutionIdentifier, string) error); ok {
		r1 = rf(ctx, execID, nodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_RecoverNodeExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecoverNodeExecutionData'
type Client_RecoverNodeExecutionData_Call struct {
	*mock.Call
}

// RecoverNodeExecutionData is a helper method to define mock.On call
//   - ctx context.Context
//   - execID *core.WorkflowExecutionIdentifier
//   - nodeID string
func (_e *Client_Expecter) RecoverNodeExecutionData(ctx interface{}, execID interface{}, nodeID interface{}) *Client_RecoverNodeExecutionData_Call {
	return &Client_RecoverNodeExecutionData_Call{Call: _e.mock.On("RecoverNodeExecutionData", ctx, execID, nodeID)}
}

func (_c *Client_RecoverNodeExecutionData_Call) Run(run func(ctx context.Context, execID *core.WorkflowExecutionIdentifier, nodeID string)) *Client_RecoverNodeExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.WorkflowExecutionIdentifier), args[2].(string))
	})
	return _c
}

func (_c *Client_RecoverNodeExecutionData_Call) Return(_a0 *admin.NodeExecutionGetDataResponse, _a1 error) *Client_RecoverNodeExecutionData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_RecoverNodeExecutionData_Call) RunAndReturn(run func(context.Context, *core.WorkflowExecutionIdentifier, string) (*admin.NodeExecutionGetDataResponse, error)) *Client_RecoverNodeExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
