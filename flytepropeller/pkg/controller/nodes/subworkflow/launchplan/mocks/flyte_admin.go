// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	launchplan "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/subworkflow/launchplan"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// FlyteAdmin is an autogenerated mock type for the FlyteAdmin type
type FlyteAdmin struct {
	mock.Mock
}

type FlyteAdmin_GetLaunchPlan struct {
	*mock.Call
}

func (_m FlyteAdmin_GetLaunchPlan) Return(_a0 *admin.LaunchPlan, _a1 error) *FlyteAdmin_GetLaunchPlan {
	return &FlyteAdmin_GetLaunchPlan{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *FlyteAdmin) OnGetLaunchPlan(ctx context.Context, launchPlanRef *core.Identifier) *FlyteAdmin_GetLaunchPlan {
	c_call := _m.On("GetLaunchPlan", ctx, launchPlanRef)
	return &FlyteAdmin_GetLaunchPlan{Call: c_call}
}

func (_m *FlyteAdmin) OnGetLaunchPlanMatch(matchers ...interface{}) *FlyteAdmin_GetLaunchPlan {
	c_call := _m.On("GetLaunchPlan", matchers...)
	return &FlyteAdmin_GetLaunchPlan{Call: c_call}
}

// GetLaunchPlan provides a mock function with given fields: ctx, launchPlanRef
func (_m *FlyteAdmin) GetLaunchPlan(ctx context.Context, launchPlanRef *core.Identifier) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, launchPlanRef)

	var r0 *admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, *core.Identifier) *admin.LaunchPlan); ok {
		r0 = rf(ctx, launchPlanRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.Identifier) error); ok {
		r1 = rf(ctx, launchPlanRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type FlyteAdmin_GetStatus struct {
	*mock.Call
}

func (_m FlyteAdmin_GetStatus) Return(_a0 launchplan.ExecutionStatus, _a1 error) *FlyteAdmin_GetStatus {
	return &FlyteAdmin_GetStatus{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *FlyteAdmin) OnGetStatus(ctx context.Context, executionID *core.WorkflowExecutionIdentifier, launchPlan v1alpha1.ExecutableLaunchPlan, parentWorkflowID string) *FlyteAdmin_GetStatus {
	c_call := _m.On("GetStatus", ctx, executionID, launchPlan, parentWorkflowID)
	return &FlyteAdmin_GetStatus{Call: c_call}
}

func (_m *FlyteAdmin) OnGetStatusMatch(matchers ...interface{}) *FlyteAdmin_GetStatus {
	c_call := _m.On("GetStatus", matchers...)
	return &FlyteAdmin_GetStatus{Call: c_call}
}

// GetStatus provides a mock function with given fields: ctx, executionID, launchPlan, parentWorkflowID
func (_m *FlyteAdmin) GetStatus(ctx context.Context, executionID *core.WorkflowExecutionIdentifier, launchPlan v1alpha1.ExecutableLaunchPlan, parentWorkflowID string) (launchplan.ExecutionStatus, error) {
	ret := _m.Called(ctx, executionID, launchPlan, parentWorkflowID)

	var r0 launchplan.ExecutionStatus
	if rf, ok := ret.Get(0).(func(context.Context, *core.WorkflowExecutionIdentifier, v1alpha1.ExecutableLaunchPlan, string) launchplan.ExecutionStatus); ok {
		r0 = rf(ctx, executionID, launchPlan, parentWorkflowID)
	} else {
		r0 = ret.Get(0).(launchplan.ExecutionStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.WorkflowExecutionIdentifier, v1alpha1.ExecutableLaunchPlan, string) error); ok {
		r1 = rf(ctx, executionID, launchPlan, parentWorkflowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type FlyteAdmin_Initialize struct {
	*mock.Call
}

func (_m FlyteAdmin_Initialize) Return(_a0 error) *FlyteAdmin_Initialize {
	return &FlyteAdmin_Initialize{Call: _m.Call.Return(_a0)}
}

func (_m *FlyteAdmin) OnInitialize(ctx context.Context) *FlyteAdmin_Initialize {
	c_call := _m.On("Initialize", ctx)
	return &FlyteAdmin_Initialize{Call: c_call}
}

func (_m *FlyteAdmin) OnInitializeMatch(matchers ...interface{}) *FlyteAdmin_Initialize {
	c_call := _m.On("Initialize", matchers...)
	return &FlyteAdmin_Initialize{Call: c_call}
}

// Initialize provides a mock function with given fields: ctx
func (_m *FlyteAdmin) Initialize(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type FlyteAdmin_Kill struct {
	*mock.Call
}

func (_m FlyteAdmin_Kill) Return(_a0 error) *FlyteAdmin_Kill {
	return &FlyteAdmin_Kill{Call: _m.Call.Return(_a0)}
}

func (_m *FlyteAdmin) OnKill(ctx context.Context, executionID *core.WorkflowExecutionIdentifier, reason string) *FlyteAdmin_Kill {
	c_call := _m.On("Kill", ctx, executionID, reason)
	return &FlyteAdmin_Kill{Call: c_call}
}

func (_m *FlyteAdmin) OnKillMatch(matchers ...interface{}) *FlyteAdmin_Kill {
	c_call := _m.On("Kill", matchers...)
	return &FlyteAdmin_Kill{Call: c_call}
}

// Kill provides a mock function with given fields: ctx, executionID, reason
func (_m *FlyteAdmin) Kill(ctx context.Context, executionID *core.WorkflowExecutionIdentifier, reason string) error {
	ret := _m.Called(ctx, executionID, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.WorkflowExecutionIdentifier, string) error); ok {
		r0 = rf(ctx, executionID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type FlyteAdmin_Launch struct {
	*mock.Call
}

func (_m FlyteAdmin_Launch) Return(_a0 error) *FlyteAdmin_Launch {
	return &FlyteAdmin_Launch{Call: _m.Call.Return(_a0)}
}

func (_m *FlyteAdmin) OnLaunch(ctx context.Context, launchCtx launchplan.LaunchContext, executionID *core.WorkflowExecutionIdentifier, launchPlan v1alpha1.ExecutableLaunchPlan, inputs *core.LiteralMap, parentWorkflowID string) *FlyteAdmin_Launch {
	c_call := _m.On("Launch", ctx, launchCtx, executionID, launchPlan, inputs, parentWorkflowID)
	return &FlyteAdmin_Launch{Call: c_call}
}

func (_m *FlyteAdmin) OnLaunchMatch(matchers ...interface{}) *FlyteAdmin_Launch {
	c_call := _m.On("Launch", matchers...)
	return &FlyteAdmin_Launch{Call: c_call}
}

// Launch provides a mock function with given fields: ctx, launchCtx, executionID, launchPlan, inputs, parentWorkflowID
func (_m *FlyteAdmin) Launch(ctx context.Context, launchCtx launchplan.LaunchContext, executionID *core.WorkflowExecutionIdentifier, launchPlan v1alpha1.ExecutableLaunchPlan, inputs *core.LiteralMap, parentWorkflowID string) error {
	ret := _m.Called(ctx, launchCtx, executionID, launchPlan, inputs, parentWorkflowID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, launchplan.LaunchContext, *core.WorkflowExecutionIdentifier, v1alpha1.ExecutableLaunchPlan, *core.LiteralMap, string) error); ok {
		r0 = rf(ctx, launchCtx, executionID, launchPlan, inputs, parentWorkflowID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
