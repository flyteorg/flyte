// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	launchplan "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/subworkflow/launchplan"

	mock "github.com/stretchr/testify/mock"
)

// FlyteAdmin is an autogenerated mock type for the FlyteAdmin type
type FlyteAdmin struct {
	mock.Mock
}

type FlyteAdmin_Expecter struct {
	mock *mock.Mock
}

func (_m *FlyteAdmin) EXPECT() *FlyteAdmin_Expecter {
	return &FlyteAdmin_Expecter{mock: &_m.Mock}
}

// GetLaunchPlan provides a mock function with given fields: ctx, launchPlanRef
func (_m *FlyteAdmin) GetLaunchPlan(ctx context.Context, launchPlanRef *core.Identifier) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, launchPlanRef)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchPlan")
	}

	var r0 *admin.LaunchPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.Identifier) (*admin.LaunchPlan, error)); ok {
		return rf(ctx, launchPlanRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.Identifier) *admin.LaunchPlan); ok {
		r0 = rf(ctx, launchPlanRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.Identifier) error); ok {
		r1 = rf(ctx, launchPlanRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlyteAdmin_GetLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLaunchPlan'
type FlyteAdmin_GetLaunchPlan_Call struct {
	*mock.Call
}

// GetLaunchPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - launchPlanRef *core.Identifier
func (_e *FlyteAdmin_Expecter) GetLaunchPlan(ctx interface{}, launchPlanRef interface{}) *FlyteAdmin_GetLaunchPlan_Call {
	return &FlyteAdmin_GetLaunchPlan_Call{Call: _e.mock.On("GetLaunchPlan", ctx, launchPlanRef)}
}

func (_c *FlyteAdmin_GetLaunchPlan_Call) Run(run func(ctx context.Context, launchPlanRef *core.Identifier)) *FlyteAdmin_GetLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.Identifier))
	})
	return _c
}

func (_c *FlyteAdmin_GetLaunchPlan_Call) Return(_a0 *admin.LaunchPlan, _a1 error) *FlyteAdmin_GetLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlyteAdmin_GetLaunchPlan_Call) RunAndReturn(run func(context.Context, *core.Identifier) (*admin.LaunchPlan, error)) *FlyteAdmin_GetLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatus provides a mock function with given fields: ctx, executionID
func (_m *FlyteAdmin) GetStatus(ctx context.Context, executionID *core.WorkflowExecutionIdentifier) (*admin.ExecutionClosure, *core.LiteralMap, error) {
	ret := _m.Called(ctx, executionID)

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 *admin.ExecutionClosure
	var r1 *core.LiteralMap
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.WorkflowExecutionIdentifier) (*admin.ExecutionClosure, *core.LiteralMap, error)); ok {
		return rf(ctx, executionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.WorkflowExecutionIdentifier) *admin.ExecutionClosure); ok {
		r0 = rf(ctx, executionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionClosure)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.WorkflowExecutionIdentifier) *core.LiteralMap); ok {
		r1 = rf(ctx, executionID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*core.LiteralMap)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *core.WorkflowExecutionIdentifier) error); ok {
		r2 = rf(ctx, executionID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FlyteAdmin_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type FlyteAdmin_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - executionID *core.WorkflowExecutionIdentifier
func (_e *FlyteAdmin_Expecter) GetStatus(ctx interface{}, executionID interface{}) *FlyteAdmin_GetStatus_Call {
	return &FlyteAdmin_GetStatus_Call{Call: _e.mock.On("GetStatus", ctx, executionID)}
}

func (_c *FlyteAdmin_GetStatus_Call) Run(run func(ctx context.Context, executionID *core.WorkflowExecutionIdentifier)) *FlyteAdmin_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.WorkflowExecutionIdentifier))
	})
	return _c
}

func (_c *FlyteAdmin_GetStatus_Call) Return(_a0 *admin.ExecutionClosure, _a1 *core.LiteralMap, _a2 error) *FlyteAdmin_GetStatus_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FlyteAdmin_GetStatus_Call) RunAndReturn(run func(context.Context, *core.WorkflowExecutionIdentifier) (*admin.ExecutionClosure, *core.LiteralMap, error)) *FlyteAdmin_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: ctx
func (_m *FlyteAdmin) Initialize(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlyteAdmin_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type FlyteAdmin_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FlyteAdmin_Expecter) Initialize(ctx interface{}) *FlyteAdmin_Initialize_Call {
	return &FlyteAdmin_Initialize_Call{Call: _e.mock.On("Initialize", ctx)}
}

func (_c *FlyteAdmin_Initialize_Call) Run(run func(ctx context.Context)) *FlyteAdmin_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FlyteAdmin_Initialize_Call) Return(_a0 error) *FlyteAdmin_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlyteAdmin_Initialize_Call) RunAndReturn(run func(context.Context) error) *FlyteAdmin_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// Kill provides a mock function with given fields: ctx, executionID, reason
func (_m *FlyteAdmin) Kill(ctx context.Context, executionID *core.WorkflowExecutionIdentifier, reason string) error {
	ret := _m.Called(ctx, executionID, reason)

	if len(ret) == 0 {
		panic("no return value specified for Kill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.WorkflowExecutionIdentifier, string) error); ok {
		r0 = rf(ctx, executionID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlyteAdmin_Kill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kill'
type FlyteAdmin_Kill_Call struct {
	*mock.Call
}

// Kill is a helper method to define mock.On call
//   - ctx context.Context
//   - executionID *core.WorkflowExecutionIdentifier
//   - reason string
func (_e *FlyteAdmin_Expecter) Kill(ctx interface{}, executionID interface{}, reason interface{}) *FlyteAdmin_Kill_Call {
	return &FlyteAdmin_Kill_Call{Call: _e.mock.On("Kill", ctx, executionID, reason)}
}

func (_c *FlyteAdmin_Kill_Call) Run(run func(ctx context.Context, executionID *core.WorkflowExecutionIdentifier, reason string)) *FlyteAdmin_Kill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.WorkflowExecutionIdentifier), args[2].(string))
	})
	return _c
}

func (_c *FlyteAdmin_Kill_Call) Return(_a0 error) *FlyteAdmin_Kill_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlyteAdmin_Kill_Call) RunAndReturn(run func(context.Context, *core.WorkflowExecutionIdentifier, string) error) *FlyteAdmin_Kill_Call {
	_c.Call.Return(run)
	return _c
}

// Launch provides a mock function with given fields: ctx, launchCtx, executionID, launchPlanRef, inputs, parentWorkflowID
func (_m *FlyteAdmin) Launch(ctx context.Context, launchCtx launchplan.LaunchContext, executionID *core.WorkflowExecutionIdentifier, launchPlanRef *core.Identifier, inputs *core.LiteralMap, parentWorkflowID string) error {
	ret := _m.Called(ctx, launchCtx, executionID, launchPlanRef, inputs, parentWorkflowID)

	if len(ret) == 0 {
		panic("no return value specified for Launch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, launchplan.LaunchContext, *core.WorkflowExecutionIdentifier, *core.Identifier, *core.LiteralMap, string) error); ok {
		r0 = rf(ctx, launchCtx, executionID, launchPlanRef, inputs, parentWorkflowID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlyteAdmin_Launch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Launch'
type FlyteAdmin_Launch_Call struct {
	*mock.Call
}

// Launch is a helper method to define mock.On call
//   - ctx context.Context
//   - launchCtx launchplan.LaunchContext
//   - executionID *core.WorkflowExecutionIdentifier
//   - launchPlanRef *core.Identifier
//   - inputs *core.LiteralMap
//   - parentWorkflowID string
func (_e *FlyteAdmin_Expecter) Launch(ctx interface{}, launchCtx interface{}, executionID interface{}, launchPlanRef interface{}, inputs interface{}, parentWorkflowID interface{}) *FlyteAdmin_Launch_Call {
	return &FlyteAdmin_Launch_Call{Call: _e.mock.On("Launch", ctx, launchCtx, executionID, launchPlanRef, inputs, parentWorkflowID)}
}

func (_c *FlyteAdmin_Launch_Call) Run(run func(ctx context.Context, launchCtx launchplan.LaunchContext, executionID *core.WorkflowExecutionIdentifier, launchPlanRef *core.Identifier, inputs *core.LiteralMap, parentWorkflowID string)) *FlyteAdmin_Launch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(launchplan.LaunchContext), args[2].(*core.WorkflowExecutionIdentifier), args[3].(*core.Identifier), args[4].(*core.LiteralMap), args[5].(string))
	})
	return _c
}

func (_c *FlyteAdmin_Launch_Call) Return(_a0 error) *FlyteAdmin_Launch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FlyteAdmin_Launch_Call) RunAndReturn(run func(context.Context, launchplan.LaunchContext, *core.WorkflowExecutionIdentifier, *core.Identifier, *core.LiteralMap, string) error) *FlyteAdmin_Launch_Call {
	_c.Call.Return(run)
	return _c
}

// NewFlyteAdmin creates a new instance of FlyteAdmin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlyteAdmin(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlyteAdmin {
	mock := &FlyteAdmin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
