// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	catalog "github.com/flyteorg/flyte/flyteplugins/go/tasks/pluginmachinery/catalog"

	handler "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/handler"

	interfaces "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// CacheableNodeHandler is an autogenerated mock type for the CacheableNodeHandler type
type CacheableNodeHandler struct {
	mock.Mock
}

type CacheableNodeHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheableNodeHandler) EXPECT() *CacheableNodeHandler_Expecter {
	return &CacheableNodeHandler_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with given fields: ctx, executionContext, reason
func (_m *CacheableNodeHandler) Abort(ctx context.Context, executionContext interfaces.NodeExecutionContext, reason string) error {
	ret := _m.Called(ctx, executionContext, reason)

	if len(ret) == 0 {
		panic("no return value specified for Abort")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext, string) error); ok {
		r0 = rf(ctx, executionContext, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheableNodeHandler_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type CacheableNodeHandler_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
//   - ctx context.Context
//   - executionContext interfaces.NodeExecutionContext
//   - reason string
func (_e *CacheableNodeHandler_Expecter) Abort(ctx interface{}, executionContext interface{}, reason interface{}) *CacheableNodeHandler_Abort_Call {
	return &CacheableNodeHandler_Abort_Call{Call: _e.mock.On("Abort", ctx, executionContext, reason)}
}

func (_c *CacheableNodeHandler_Abort_Call) Run(run func(ctx context.Context, executionContext interfaces.NodeExecutionContext, reason string)) *CacheableNodeHandler_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.NodeExecutionContext), args[2].(string))
	})
	return _c
}

func (_c *CacheableNodeHandler_Abort_Call) Return(_a0 error) *CacheableNodeHandler_Abort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheableNodeHandler_Abort_Call) RunAndReturn(run func(context.Context, interfaces.NodeExecutionContext, string) error) *CacheableNodeHandler_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// Finalize provides a mock function with given fields: ctx, executionContext
func (_m *CacheableNodeHandler) Finalize(ctx context.Context, executionContext interfaces.NodeExecutionContext) error {
	ret := _m.Called(ctx, executionContext)

	if len(ret) == 0 {
		panic("no return value specified for Finalize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext) error); ok {
		r0 = rf(ctx, executionContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheableNodeHandler_Finalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finalize'
type CacheableNodeHandler_Finalize_Call struct {
	*mock.Call
}

// Finalize is a helper method to define mock.On call
//   - ctx context.Context
//   - executionContext interfaces.NodeExecutionContext
func (_e *CacheableNodeHandler_Expecter) Finalize(ctx interface{}, executionContext interface{}) *CacheableNodeHandler_Finalize_Call {
	return &CacheableNodeHandler_Finalize_Call{Call: _e.mock.On("Finalize", ctx, executionContext)}
}

func (_c *CacheableNodeHandler_Finalize_Call) Run(run func(ctx context.Context, executionContext interfaces.NodeExecutionContext)) *CacheableNodeHandler_Finalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.NodeExecutionContext))
	})
	return _c
}

func (_c *CacheableNodeHandler_Finalize_Call) Return(_a0 error) *CacheableNodeHandler_Finalize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheableNodeHandler_Finalize_Call) RunAndReturn(run func(context.Context, interfaces.NodeExecutionContext) error) *CacheableNodeHandler_Finalize_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizeRequired provides a mock function with no fields
func (_m *CacheableNodeHandler) FinalizeRequired() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalizeRequired")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CacheableNodeHandler_FinalizeRequired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeRequired'
type CacheableNodeHandler_FinalizeRequired_Call struct {
	*mock.Call
}

// FinalizeRequired is a helper method to define mock.On call
func (_e *CacheableNodeHandler_Expecter) FinalizeRequired() *CacheableNodeHandler_FinalizeRequired_Call {
	return &CacheableNodeHandler_FinalizeRequired_Call{Call: _e.mock.On("FinalizeRequired")}
}

func (_c *CacheableNodeHandler_FinalizeRequired_Call) Run(run func()) *CacheableNodeHandler_FinalizeRequired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheableNodeHandler_FinalizeRequired_Call) Return(_a0 bool) *CacheableNodeHandler_FinalizeRequired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheableNodeHandler_FinalizeRequired_Call) RunAndReturn(run func() bool) *CacheableNodeHandler_FinalizeRequired_Call {
	_c.Call.Return(run)
	return _c
}

// GetCatalogKey provides a mock function with given fields: ctx, executionContext
func (_m *CacheableNodeHandler) GetCatalogKey(ctx context.Context, executionContext interfaces.NodeExecutionContext) (catalog.Key, error) {
	ret := _m.Called(ctx, executionContext)

	if len(ret) == 0 {
		panic("no return value specified for GetCatalogKey")
	}

	var r0 catalog.Key
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext) (catalog.Key, error)); ok {
		return rf(ctx, executionContext)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext) catalog.Key); ok {
		r0 = rf(ctx, executionContext)
	} else {
		r0 = ret.Get(0).(catalog.Key)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.NodeExecutionContext) error); ok {
		r1 = rf(ctx, executionContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheableNodeHandler_GetCatalogKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCatalogKey'
type CacheableNodeHandler_GetCatalogKey_Call struct {
	*mock.Call
}

// GetCatalogKey is a helper method to define mock.On call
//   - ctx context.Context
//   - executionContext interfaces.NodeExecutionContext
func (_e *CacheableNodeHandler_Expecter) GetCatalogKey(ctx interface{}, executionContext interface{}) *CacheableNodeHandler_GetCatalogKey_Call {
	return &CacheableNodeHandler_GetCatalogKey_Call{Call: _e.mock.On("GetCatalogKey", ctx, executionContext)}
}

func (_c *CacheableNodeHandler_GetCatalogKey_Call) Run(run func(ctx context.Context, executionContext interfaces.NodeExecutionContext)) *CacheableNodeHandler_GetCatalogKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.NodeExecutionContext))
	})
	return _c
}

func (_c *CacheableNodeHandler_GetCatalogKey_Call) Return(_a0 catalog.Key, _a1 error) *CacheableNodeHandler_GetCatalogKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheableNodeHandler_GetCatalogKey_Call) RunAndReturn(run func(context.Context, interfaces.NodeExecutionContext) (catalog.Key, error)) *CacheableNodeHandler_GetCatalogKey_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: ctx, executionContext
func (_m *CacheableNodeHandler) Handle(ctx context.Context, executionContext interfaces.NodeExecutionContext) (handler.Transition, error) {
	ret := _m.Called(ctx, executionContext)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 handler.Transition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext) (handler.Transition, error)); ok {
		return rf(ctx, executionContext)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext) handler.Transition); ok {
		r0 = rf(ctx, executionContext)
	} else {
		r0 = ret.Get(0).(handler.Transition)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.NodeExecutionContext) error); ok {
		r1 = rf(ctx, executionContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheableNodeHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type CacheableNodeHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - executionContext interfaces.NodeExecutionContext
func (_e *CacheableNodeHandler_Expecter) Handle(ctx interface{}, executionContext interface{}) *CacheableNodeHandler_Handle_Call {
	return &CacheableNodeHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, executionContext)}
}

func (_c *CacheableNodeHandler_Handle_Call) Run(run func(ctx context.Context, executionContext interfaces.NodeExecutionContext)) *CacheableNodeHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.NodeExecutionContext))
	})
	return _c
}

func (_c *CacheableNodeHandler_Handle_Call) Return(_a0 handler.Transition, _a1 error) *CacheableNodeHandler_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheableNodeHandler_Handle_Call) RunAndReturn(run func(context.Context, interfaces.NodeExecutionContext) (handler.Transition, error)) *CacheableNodeHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// IsCacheable provides a mock function with given fields: ctx, executionContext
func (_m *CacheableNodeHandler) IsCacheable(ctx context.Context, executionContext interfaces.NodeExecutionContext) (bool, bool, error) {
	ret := _m.Called(ctx, executionContext)

	if len(ret) == 0 {
		panic("no return value specified for IsCacheable")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext) (bool, bool, error)); ok {
		return rf(ctx, executionContext)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext) bool); ok {
		r0 = rf(ctx, executionContext)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.NodeExecutionContext) bool); ok {
		r1 = rf(ctx, executionContext)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, interfaces.NodeExecutionContext) error); ok {
		r2 = rf(ctx, executionContext)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CacheableNodeHandler_IsCacheable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCacheable'
type CacheableNodeHandler_IsCacheable_Call struct {
	*mock.Call
}

// IsCacheable is a helper method to define mock.On call
//   - ctx context.Context
//   - executionContext interfaces.NodeExecutionContext
func (_e *CacheableNodeHandler_Expecter) IsCacheable(ctx interface{}, executionContext interface{}) *CacheableNodeHandler_IsCacheable_Call {
	return &CacheableNodeHandler_IsCacheable_Call{Call: _e.mock.On("IsCacheable", ctx, executionContext)}
}

func (_c *CacheableNodeHandler_IsCacheable_Call) Run(run func(ctx context.Context, executionContext interfaces.NodeExecutionContext)) *CacheableNodeHandler_IsCacheable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.NodeExecutionContext))
	})
	return _c
}

func (_c *CacheableNodeHandler_IsCacheable_Call) Return(_a0 bool, _a1 bool, _a2 error) *CacheableNodeHandler_IsCacheable_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *CacheableNodeHandler_IsCacheable_Call) RunAndReturn(run func(context.Context, interfaces.NodeExecutionContext) (bool, bool, error)) *CacheableNodeHandler_IsCacheable_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields: ctx, setupContext
func (_m *CacheableNodeHandler) Setup(ctx context.Context, setupContext interfaces.SetupContext) error {
	ret := _m.Called(ctx, setupContext)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.SetupContext) error); ok {
		r0 = rf(ctx, setupContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheableNodeHandler_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type CacheableNodeHandler_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - ctx context.Context
//   - setupContext interfaces.SetupContext
func (_e *CacheableNodeHandler_Expecter) Setup(ctx interface{}, setupContext interface{}) *CacheableNodeHandler_Setup_Call {
	return &CacheableNodeHandler_Setup_Call{Call: _e.mock.On("Setup", ctx, setupContext)}
}

func (_c *CacheableNodeHandler_Setup_Call) Run(run func(ctx context.Context, setupContext interfaces.SetupContext)) *CacheableNodeHandler_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.SetupContext))
	})
	return _c
}

func (_c *CacheableNodeHandler_Setup_Call) Return(_a0 error) *CacheableNodeHandler_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheableNodeHandler_Setup_Call) RunAndReturn(run func(context.Context, interfaces.SetupContext) error) *CacheableNodeHandler_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheableNodeHandler creates a new instance of CacheableNodeHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheableNodeHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheableNodeHandler {
	mock := &CacheableNodeHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
