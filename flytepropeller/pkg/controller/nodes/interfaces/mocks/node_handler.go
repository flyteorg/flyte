// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	handler "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/handler"
	interfaces "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// NodeHandler is an autogenerated mock type for the NodeHandler type
type NodeHandler struct {
	mock.Mock
}

type NodeHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeHandler) EXPECT() *NodeHandler_Expecter {
	return &NodeHandler_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with given fields: ctx, executionContext, reason
func (_m *NodeHandler) Abort(ctx context.Context, executionContext interfaces.NodeExecutionContext, reason string) error {
	ret := _m.Called(ctx, executionContext, reason)

	if len(ret) == 0 {
		panic("no return value specified for Abort")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext, string) error); ok {
		r0 = rf(ctx, executionContext, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeHandler_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type NodeHandler_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
//   - ctx context.Context
//   - executionContext interfaces.NodeExecutionContext
//   - reason string
func (_e *NodeHandler_Expecter) Abort(ctx interface{}, executionContext interface{}, reason interface{}) *NodeHandler_Abort_Call {
	return &NodeHandler_Abort_Call{Call: _e.mock.On("Abort", ctx, executionContext, reason)}
}

func (_c *NodeHandler_Abort_Call) Run(run func(ctx context.Context, executionContext interfaces.NodeExecutionContext, reason string)) *NodeHandler_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.NodeExecutionContext), args[2].(string))
	})
	return _c
}

func (_c *NodeHandler_Abort_Call) Return(_a0 error) *NodeHandler_Abort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeHandler_Abort_Call) RunAndReturn(run func(context.Context, interfaces.NodeExecutionContext, string) error) *NodeHandler_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// Finalize provides a mock function with given fields: ctx, executionContext
func (_m *NodeHandler) Finalize(ctx context.Context, executionContext interfaces.NodeExecutionContext) error {
	ret := _m.Called(ctx, executionContext)

	if len(ret) == 0 {
		panic("no return value specified for Finalize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext) error); ok {
		r0 = rf(ctx, executionContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeHandler_Finalize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finalize'
type NodeHandler_Finalize_Call struct {
	*mock.Call
}

// Finalize is a helper method to define mock.On call
//   - ctx context.Context
//   - executionContext interfaces.NodeExecutionContext
func (_e *NodeHandler_Expecter) Finalize(ctx interface{}, executionContext interface{}) *NodeHandler_Finalize_Call {
	return &NodeHandler_Finalize_Call{Call: _e.mock.On("Finalize", ctx, executionContext)}
}

func (_c *NodeHandler_Finalize_Call) Run(run func(ctx context.Context, executionContext interfaces.NodeExecutionContext)) *NodeHandler_Finalize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.NodeExecutionContext))
	})
	return _c
}

func (_c *NodeHandler_Finalize_Call) Return(_a0 error) *NodeHandler_Finalize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeHandler_Finalize_Call) RunAndReturn(run func(context.Context, interfaces.NodeExecutionContext) error) *NodeHandler_Finalize_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizeRequired provides a mock function with given fields:
func (_m *NodeHandler) FinalizeRequired() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FinalizeRequired")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NodeHandler_FinalizeRequired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeRequired'
type NodeHandler_FinalizeRequired_Call struct {
	*mock.Call
}

// FinalizeRequired is a helper method to define mock.On call
func (_e *NodeHandler_Expecter) FinalizeRequired() *NodeHandler_FinalizeRequired_Call {
	return &NodeHandler_FinalizeRequired_Call{Call: _e.mock.On("FinalizeRequired")}
}

func (_c *NodeHandler_FinalizeRequired_Call) Run(run func()) *NodeHandler_FinalizeRequired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeHandler_FinalizeRequired_Call) Return(_a0 bool) *NodeHandler_FinalizeRequired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeHandler_FinalizeRequired_Call) RunAndReturn(run func() bool) *NodeHandler_FinalizeRequired_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: ctx, executionContext
func (_m *NodeHandler) Handle(ctx context.Context, executionContext interfaces.NodeExecutionContext) (handler.Transition, error) {
	ret := _m.Called(ctx, executionContext)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 handler.Transition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext) (handler.Transition, error)); ok {
		return rf(ctx, executionContext)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.NodeExecutionContext) handler.Transition); ok {
		r0 = rf(ctx, executionContext)
	} else {
		r0 = ret.Get(0).(handler.Transition)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.NodeExecutionContext) error); ok {
		r1 = rf(ctx, executionContext)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type NodeHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - executionContext interfaces.NodeExecutionContext
func (_e *NodeHandler_Expecter) Handle(ctx interface{}, executionContext interface{}) *NodeHandler_Handle_Call {
	return &NodeHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, executionContext)}
}

func (_c *NodeHandler_Handle_Call) Run(run func(ctx context.Context, executionContext interfaces.NodeExecutionContext)) *NodeHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.NodeExecutionContext))
	})
	return _c
}

func (_c *NodeHandler_Handle_Call) Return(_a0 handler.Transition, _a1 error) *NodeHandler_Handle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeHandler_Handle_Call) RunAndReturn(run func(context.Context, interfaces.NodeExecutionContext) (handler.Transition, error)) *NodeHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields: ctx, setupContext
func (_m *NodeHandler) Setup(ctx context.Context, setupContext interfaces.SetupContext) error {
	ret := _m.Called(ctx, setupContext)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.SetupContext) error); ok {
		r0 = rf(ctx, setupContext)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeHandler_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type NodeHandler_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - ctx context.Context
//   - setupContext interfaces.SetupContext
func (_e *NodeHandler_Expecter) Setup(ctx interface{}, setupContext interface{}) *NodeHandler_Setup_Call {
	return &NodeHandler_Setup_Call{Call: _e.mock.On("Setup", ctx, setupContext)}
}

func (_c *NodeHandler_Setup_Call) Run(run func(ctx context.Context, setupContext interfaces.SetupContext)) *NodeHandler_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.SetupContext))
	})
	return _c
}

func (_c *NodeHandler_Setup_Call) Return(_a0 error) *NodeHandler_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeHandler_Setup_Call) RunAndReturn(run func(context.Context, interfaces.SetupContext) error) *NodeHandler_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeHandler creates a new instance of NodeHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeHandler {
	mock := &NodeHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
