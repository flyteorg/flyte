// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// NodeExecutionMetadata is an autogenerated mock type for the NodeExecutionMetadata type
type NodeExecutionMetadata struct {
	mock.Mock
}

type NodeExecutionMetadata_GetAnnotations struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetAnnotations) Return(_a0 map[string]string) *NodeExecutionMetadata_GetAnnotations {
	return &NodeExecutionMetadata_GetAnnotations{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetAnnotations() *NodeExecutionMetadata_GetAnnotations {
	c_call := _m.On("GetAnnotations")
	return &NodeExecutionMetadata_GetAnnotations{Call: c_call}
}

func (_m *NodeExecutionMetadata) OnGetAnnotationsMatch(matchers ...interface{}) *NodeExecutionMetadata_GetAnnotations {
	c_call := _m.On("GetAnnotations", matchers...)
	return &NodeExecutionMetadata_GetAnnotations{Call: c_call}
}

// GetAnnotations provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetAnnotations() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

type NodeExecutionMetadata_GetConsoleURL struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetConsoleURL) Return(_a0 string) *NodeExecutionMetadata_GetConsoleURL {
	return &NodeExecutionMetadata_GetConsoleURL{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetConsoleURL() *NodeExecutionMetadata_GetConsoleURL {
	c_call := _m.On("GetConsoleURL")
	return &NodeExecutionMetadata_GetConsoleURL{Call: c_call}
}

func (_m *NodeExecutionMetadata) OnGetConsoleURLMatch(matchers ...interface{}) *NodeExecutionMetadata_GetConsoleURL {
	c_call := _m.On("GetConsoleURL", matchers...)
	return &NodeExecutionMetadata_GetConsoleURL{Call: c_call}
}

// GetConsoleURL provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetConsoleURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type NodeExecutionMetadata_GetInterruptibleFailureThreshold struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetInterruptibleFailureThreshold) Return(_a0 int32) *NodeExecutionMetadata_GetInterruptibleFailureThreshold {
	return &NodeExecutionMetadata_GetInterruptibleFailureThreshold{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetInterruptibleFailureThreshold() *NodeExecutionMetadata_GetInterruptibleFailureThreshold {
	c_call := _m.On("GetInterruptibleFailureThreshold")
	return &NodeExecutionMetadata_GetInterruptibleFailureThreshold{Call: c_call}
}

func (_m *NodeExecutionMetadata) OnGetInterruptibleFailureThresholdMatch(matchers ...interface{}) *NodeExecutionMetadata_GetInterruptibleFailureThreshold {
	c_call := _m.On("GetInterruptibleFailureThreshold", matchers...)
	return &NodeExecutionMetadata_GetInterruptibleFailureThreshold{Call: c_call}
}

// GetInterruptibleFailureThreshold provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetInterruptibleFailureThreshold() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

type NodeExecutionMetadata_GetK8sServiceAccount struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetK8sServiceAccount) Return(_a0 string) *NodeExecutionMetadata_GetK8sServiceAccount {
	return &NodeExecutionMetadata_GetK8sServiceAccount{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetK8sServiceAccount() *NodeExecutionMetadata_GetK8sServiceAccount {
	c_call := _m.On("GetK8sServiceAccount")
	return &NodeExecutionMetadata_GetK8sServiceAccount{Call: c_call}
}

func (_m *NodeExecutionMetadata) OnGetK8sServiceAccountMatch(matchers ...interface{}) *NodeExecutionMetadata_GetK8sServiceAccount {
	c_call := _m.On("GetK8sServiceAccount", matchers...)
	return &NodeExecutionMetadata_GetK8sServiceAccount{Call: c_call}
}

// GetK8sServiceAccount provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetK8sServiceAccount() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type NodeExecutionMetadata_GetLabels struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetLabels) Return(_a0 map[string]string) *NodeExecutionMetadata_GetLabels {
	return &NodeExecutionMetadata_GetLabels{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetLabels() *NodeExecutionMetadata_GetLabels {
	c_call := _m.On("GetLabels")
	return &NodeExecutionMetadata_GetLabels{Call: c_call}
}

func (_m *NodeExecutionMetadata) OnGetLabelsMatch(matchers ...interface{}) *NodeExecutionMetadata_GetLabels {
	c_call := _m.On("GetLabels", matchers...)
	return &NodeExecutionMetadata_GetLabels{Call: c_call}
}

// GetLabels provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetLabels() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

type NodeExecutionMetadata_GetNamespace struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetNamespace) Return(_a0 string) *NodeExecutionMetadata_GetNamespace {
	return &NodeExecutionMetadata_GetNamespace{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetNamespace() *NodeExecutionMetadata_GetNamespace {
	c_call := _m.On("GetNamespace")
	return &NodeExecutionMetadata_GetNamespace{Call: c_call}
}

func (_m *NodeExecutionMetadata) OnGetNamespaceMatch(matchers ...interface{}) *NodeExecutionMetadata_GetNamespace {
	c_call := _m.On("GetNamespace", matchers...)
	return &NodeExecutionMetadata_GetNamespace{Call: c_call}
}

// GetNamespace provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetNamespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type NodeExecutionMetadata_GetNodeExecutionID struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetNodeExecutionID) Return(_a0 *core.NodeExecutionIdentifier) *NodeExecutionMetadata_GetNodeExecutionID {
	return &NodeExecutionMetadata_GetNodeExecutionID{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetNodeExecutionID() *NodeExecutionMetadata_GetNodeExecutionID {
	c_call := _m.On("GetNodeExecutionID")
	return &NodeExecutionMetadata_GetNodeExecutionID{Call: c_call}
}

func (_m *NodeExecutionMetadata) OnGetNodeExecutionIDMatch(matchers ...interface{}) *NodeExecutionMetadata_GetNodeExecutionID {
	c_call := _m.On("GetNodeExecutionID", matchers...)
	return &NodeExecutionMetadata_GetNodeExecutionID{Call: c_call}
}

// GetNodeExecutionID provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetNodeExecutionID() *core.NodeExecutionIdentifier {
	ret := _m.Called()

	var r0 *core.NodeExecutionIdentifier
	if rf, ok := ret.Get(0).(func() *core.NodeExecutionIdentifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.NodeExecutionIdentifier)
		}
	}

	return r0
}

type NodeExecutionMetadata_GetOwnerID struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetOwnerID) Return(_a0 types.NamespacedName) *NodeExecutionMetadata_GetOwnerID {
	return &NodeExecutionMetadata_GetOwnerID{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetOwnerID() *NodeExecutionMetadata_GetOwnerID {
	c_call := _m.On("GetOwnerID")
	return &NodeExecutionMetadata_GetOwnerID{Call: c_call}
}

func (_m *NodeExecutionMetadata) OnGetOwnerIDMatch(matchers ...interface{}) *NodeExecutionMetadata_GetOwnerID {
	c_call := _m.On("GetOwnerID", matchers...)
	return &NodeExecutionMetadata_GetOwnerID{Call: c_call}
}

// GetOwnerID provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetOwnerID() types.NamespacedName {
	ret := _m.Called()

	var r0 types.NamespacedName
	if rf, ok := ret.Get(0).(func() types.NamespacedName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.NamespacedName)
	}

	return r0
}

type NodeExecutionMetadata_GetOwnerReference struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetOwnerReference) Return(_a0 v1.OwnerReference) *NodeExecutionMetadata_GetOwnerReference {
	return &NodeExecutionMetadata_GetOwnerReference{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetOwnerReference() *NodeExecutionMetadata_GetOwnerReference {
	c_call := _m.On("GetOwnerReference")
	return &NodeExecutionMetadata_GetOwnerReference{Call: c_call}
}

func (_m *NodeExecutionMetadata) OnGetOwnerReferenceMatch(matchers ...interface{}) *NodeExecutionMetadata_GetOwnerReference {
	c_call := _m.On("GetOwnerReference", matchers...)
	return &NodeExecutionMetadata_GetOwnerReference{Call: c_call}
}

// GetOwnerReference provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetOwnerReference() v1.OwnerReference {
	ret := _m.Called()

	var r0 v1.OwnerReference
	if rf, ok := ret.Get(0).(func() v1.OwnerReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.OwnerReference)
	}

	return r0
}

type NodeExecutionMetadata_GetSecurityContext struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_GetSecurityContext) Return(_a0 core.SecurityContext) *NodeExecutionMetadata_GetSecurityContext {
	return &NodeExecutionMetadata_GetSecurityContext{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnGetSecurityContext() *NodeExecutionMetadata_GetSecurityContext {
	c_call := _m.On("GetSecurityContext")
	return &NodeExecutionMetadata_GetSecurityContext{Call: c_call}
}

func (_m *NodeExecutionMetadata) OnGetSecurityContextMatch(matchers ...interface{}) *NodeExecutionMetadata_GetSecurityContext {
	c_call := _m.On("GetSecurityContext", matchers...)
	return &NodeExecutionMetadata_GetSecurityContext{Call: c_call}
}

// GetSecurityContext provides a mock function with given fields:
func (_m *NodeExecutionMetadata) GetSecurityContext() core.SecurityContext {
	ret := _m.Called()

	var r0 core.SecurityContext
	if rf, ok := ret.Get(0).(func() core.SecurityContext); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.SecurityContext)
	}

	return r0
}

type NodeExecutionMetadata_IsInterruptible struct {
	*mock.Call
}

func (_m NodeExecutionMetadata_IsInterruptible) Return(_a0 bool) *NodeExecutionMetadata_IsInterruptible {
	return &NodeExecutionMetadata_IsInterruptible{Call: _m.Call.Return(_a0)}
}

func (_m *NodeExecutionMetadata) OnIsInterruptible() *NodeExecutionMetadata_IsInterruptible {
	c_call := _m.On("IsInterruptible")
	return &NodeExecutionMetadata_IsInterruptible{Call: c_call}
}

func (_m *NodeExecutionMetadata) OnIsInterruptibleMatch(matchers ...interface{}) *NodeExecutionMetadata_IsInterruptible {
	c_call := _m.On("IsInterruptible", matchers...)
	return &NodeExecutionMetadata_IsInterruptible{Call: c_call}
}

// IsInterruptible provides a mock function with given fields:
func (_m *NodeExecutionMetadata) IsInterruptible() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
