// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	executors "github.com/flyteorg/flyte/flytepropeller/pkg/controller/executors"

	interfaces "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/interfaces"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

type Node_Expecter struct {
	mock *mock.Mock
}

func (_m *Node) EXPECT() *Node_Expecter {
	return &Node_Expecter{mock: &_m.Mock}
}

// AbortHandler provides a mock function with given fields: ctx, execContext, dag, nl, currentNode, reason
func (_m *Node) AbortHandler(ctx context.Context, execContext executors.ExecutionContext, dag executors.DAGStructure, nl executors.NodeLookup, currentNode v1alpha1.ExecutableNode, reason string) error {
	ret := _m.Called(ctx, execContext, dag, nl, currentNode, reason)

	if len(ret) == 0 {
		panic("no return value specified for AbortHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, executors.ExecutionContext, executors.DAGStructure, executors.NodeLookup, v1alpha1.ExecutableNode, string) error); ok {
		r0 = rf(ctx, execContext, dag, nl, currentNode, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Node_AbortHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortHandler'
type Node_AbortHandler_Call struct {
	*mock.Call
}

// AbortHandler is a helper method to define mock.On call
//   - ctx context.Context
//   - execContext executors.ExecutionContext
//   - dag executors.DAGStructure
//   - nl executors.NodeLookup
//   - currentNode v1alpha1.ExecutableNode
//   - reason string
func (_e *Node_Expecter) AbortHandler(ctx interface{}, execContext interface{}, dag interface{}, nl interface{}, currentNode interface{}, reason interface{}) *Node_AbortHandler_Call {
	return &Node_AbortHandler_Call{Call: _e.mock.On("AbortHandler", ctx, execContext, dag, nl, currentNode, reason)}
}

func (_c *Node_AbortHandler_Call) Run(run func(ctx context.Context, execContext executors.ExecutionContext, dag executors.DAGStructure, nl executors.NodeLookup, currentNode v1alpha1.ExecutableNode, reason string)) *Node_AbortHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(executors.ExecutionContext), args[2].(executors.DAGStructure), args[3].(executors.NodeLookup), args[4].(v1alpha1.ExecutableNode), args[5].(string))
	})
	return _c
}

func (_c *Node_AbortHandler_Call) Return(_a0 error) *Node_AbortHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_AbortHandler_Call) RunAndReturn(run func(context.Context, executors.ExecutionContext, executors.DAGStructure, executors.NodeLookup, v1alpha1.ExecutableNode, string) error) *Node_AbortHandler_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizeHandler provides a mock function with given fields: ctx, execContext, dag, nl, currentNode
func (_m *Node) FinalizeHandler(ctx context.Context, execContext executors.ExecutionContext, dag executors.DAGStructure, nl executors.NodeLookup, currentNode v1alpha1.ExecutableNode) error {
	ret := _m.Called(ctx, execContext, dag, nl, currentNode)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, executors.ExecutionContext, executors.DAGStructure, executors.NodeLookup, v1alpha1.ExecutableNode) error); ok {
		r0 = rf(ctx, execContext, dag, nl, currentNode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Node_FinalizeHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeHandler'
type Node_FinalizeHandler_Call struct {
	*mock.Call
}

// FinalizeHandler is a helper method to define mock.On call
//   - ctx context.Context
//   - execContext executors.ExecutionContext
//   - dag executors.DAGStructure
//   - nl executors.NodeLookup
//   - currentNode v1alpha1.ExecutableNode
func (_e *Node_Expecter) FinalizeHandler(ctx interface{}, execContext interface{}, dag interface{}, nl interface{}, currentNode interface{}) *Node_FinalizeHandler_Call {
	return &Node_FinalizeHandler_Call{Call: _e.mock.On("FinalizeHandler", ctx, execContext, dag, nl, currentNode)}
}

func (_c *Node_FinalizeHandler_Call) Run(run func(ctx context.Context, execContext executors.ExecutionContext, dag executors.DAGStructure, nl executors.NodeLookup, currentNode v1alpha1.ExecutableNode)) *Node_FinalizeHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(executors.ExecutionContext), args[2].(executors.DAGStructure), args[3].(executors.NodeLookup), args[4].(v1alpha1.ExecutableNode))
	})
	return _c
}

func (_c *Node_FinalizeHandler_Call) Return(_a0 error) *Node_FinalizeHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_FinalizeHandler_Call) RunAndReturn(run func(context.Context, executors.ExecutionContext, executors.DAGStructure, executors.NodeLookup, v1alpha1.ExecutableNode) error) *Node_FinalizeHandler_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeExecutionContextBuilder provides a mock function with given fields:
func (_m *Node) GetNodeExecutionContextBuilder() interfaces.NodeExecutionContextBuilder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodeExecutionContextBuilder")
	}

	var r0 interfaces.NodeExecutionContextBuilder
	if rf, ok := ret.Get(0).(func() interfaces.NodeExecutionContextBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.NodeExecutionContextBuilder)
		}
	}

	return r0
}

// Node_GetNodeExecutionContextBuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeExecutionContextBuilder'
type Node_GetNodeExecutionContextBuilder_Call struct {
	*mock.Call
}

// GetNodeExecutionContextBuilder is a helper method to define mock.On call
func (_e *Node_Expecter) GetNodeExecutionContextBuilder() *Node_GetNodeExecutionContextBuilder_Call {
	return &Node_GetNodeExecutionContextBuilder_Call{Call: _e.mock.On("GetNodeExecutionContextBuilder")}
}

func (_c *Node_GetNodeExecutionContextBuilder_Call) Run(run func()) *Node_GetNodeExecutionContextBuilder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetNodeExecutionContextBuilder_Call) Return(_a0 interfaces.NodeExecutionContextBuilder) *Node_GetNodeExecutionContextBuilder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetNodeExecutionContextBuilder_Call) RunAndReturn(run func() interfaces.NodeExecutionContextBuilder) *Node_GetNodeExecutionContextBuilder_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: ctx
func (_m *Node) Initialize(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Node_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type Node_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Node_Expecter) Initialize(ctx interface{}) *Node_Initialize_Call {
	return &Node_Initialize_Call{Call: _e.mock.On("Initialize", ctx)}
}

func (_c *Node_Initialize_Call) Run(run func(ctx context.Context)) *Node_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Node_Initialize_Call) Return(_a0 error) *Node_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_Initialize_Call) RunAndReturn(run func(context.Context) error) *Node_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// RecursiveNodeHandler provides a mock function with given fields: ctx, execContext, dag, nl, currentNode
func (_m *Node) RecursiveNodeHandler(ctx context.Context, execContext executors.ExecutionContext, dag executors.DAGStructure, nl executors.NodeLookup, currentNode v1alpha1.ExecutableNode) (interfaces.NodeStatus, error) {
	ret := _m.Called(ctx, execContext, dag, nl, currentNode)

	if len(ret) == 0 {
		panic("no return value specified for RecursiveNodeHandler")
	}

	var r0 interfaces.NodeStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, executors.ExecutionContext, executors.DAGStructure, executors.NodeLookup, v1alpha1.ExecutableNode) (interfaces.NodeStatus, error)); ok {
		return rf(ctx, execContext, dag, nl, currentNode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, executors.ExecutionContext, executors.DAGStructure, executors.NodeLookup, v1alpha1.ExecutableNode) interfaces.NodeStatus); ok {
		r0 = rf(ctx, execContext, dag, nl, currentNode)
	} else {
		r0 = ret.Get(0).(interfaces.NodeStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, executors.ExecutionContext, executors.DAGStructure, executors.NodeLookup, v1alpha1.ExecutableNode) error); ok {
		r1 = rf(ctx, execContext, dag, nl, currentNode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Node_RecursiveNodeHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecursiveNodeHandler'
type Node_RecursiveNodeHandler_Call struct {
	*mock.Call
}

// RecursiveNodeHandler is a helper method to define mock.On call
//   - ctx context.Context
//   - execContext executors.ExecutionContext
//   - dag executors.DAGStructure
//   - nl executors.NodeLookup
//   - currentNode v1alpha1.ExecutableNode
func (_e *Node_Expecter) RecursiveNodeHandler(ctx interface{}, execContext interface{}, dag interface{}, nl interface{}, currentNode interface{}) *Node_RecursiveNodeHandler_Call {
	return &Node_RecursiveNodeHandler_Call{Call: _e.mock.On("RecursiveNodeHandler", ctx, execContext, dag, nl, currentNode)}
}

func (_c *Node_RecursiveNodeHandler_Call) Run(run func(ctx context.Context, execContext executors.ExecutionContext, dag executors.DAGStructure, nl executors.NodeLookup, currentNode v1alpha1.ExecutableNode)) *Node_RecursiveNodeHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(executors.ExecutionContext), args[2].(executors.DAGStructure), args[3].(executors.NodeLookup), args[4].(v1alpha1.ExecutableNode))
	})
	return _c
}

func (_c *Node_RecursiveNodeHandler_Call) Return(_a0 interfaces.NodeStatus, _a1 error) *Node_RecursiveNodeHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Node_RecursiveNodeHandler_Call) RunAndReturn(run func(context.Context, executors.ExecutionContext, executors.DAGStructure, executors.NodeLookup, v1alpha1.ExecutableNode) (interfaces.NodeStatus, error)) *Node_RecursiveNodeHandler_Call {
	_c.Call.Return(run)
	return _c
}

// SetInputsForStartNode provides a mock function with given fields: ctx, execContext, dag, nl, inputs
func (_m *Node) SetInputsForStartNode(ctx context.Context, execContext executors.ExecutionContext, dag executors.DAGStructureWithStartNode, nl executors.NodeLookup, inputs *core.LiteralMap) (interfaces.NodeStatus, error) {
	ret := _m.Called(ctx, execContext, dag, nl, inputs)

	if len(ret) == 0 {
		panic("no return value specified for SetInputsForStartNode")
	}

	var r0 interfaces.NodeStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, executors.ExecutionContext, executors.DAGStructureWithStartNode, executors.NodeLookup, *core.LiteralMap) (interfaces.NodeStatus, error)); ok {
		return rf(ctx, execContext, dag, nl, inputs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, executors.ExecutionContext, executors.DAGStructureWithStartNode, executors.NodeLookup, *core.LiteralMap) interfaces.NodeStatus); ok {
		r0 = rf(ctx, execContext, dag, nl, inputs)
	} else {
		r0 = ret.Get(0).(interfaces.NodeStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, executors.ExecutionContext, executors.DAGStructureWithStartNode, executors.NodeLookup, *core.LiteralMap) error); ok {
		r1 = rf(ctx, execContext, dag, nl, inputs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Node_SetInputsForStartNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInputsForStartNode'
type Node_SetInputsForStartNode_Call struct {
	*mock.Call
}

// SetInputsForStartNode is a helper method to define mock.On call
//   - ctx context.Context
//   - execContext executors.ExecutionContext
//   - dag executors.DAGStructureWithStartNode
//   - nl executors.NodeLookup
//   - inputs *core.LiteralMap
func (_e *Node_Expecter) SetInputsForStartNode(ctx interface{}, execContext interface{}, dag interface{}, nl interface{}, inputs interface{}) *Node_SetInputsForStartNode_Call {
	return &Node_SetInputsForStartNode_Call{Call: _e.mock.On("SetInputsForStartNode", ctx, execContext, dag, nl, inputs)}
}

func (_c *Node_SetInputsForStartNode_Call) Run(run func(ctx context.Context, execContext executors.ExecutionContext, dag executors.DAGStructureWithStartNode, nl executors.NodeLookup, inputs *core.LiteralMap)) *Node_SetInputsForStartNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(executors.ExecutionContext), args[2].(executors.DAGStructureWithStartNode), args[3].(executors.NodeLookup), args[4].(*core.LiteralMap))
	})
	return _c
}

func (_c *Node_SetInputsForStartNode_Call) Return(_a0 interfaces.NodeStatus, _a1 error) *Node_SetInputsForStartNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Node_SetInputsForStartNode_Call) RunAndReturn(run func(context.Context, executors.ExecutionContext, executors.DAGStructureWithStartNode, executors.NodeLookup, *core.LiteralMap) (interfaces.NodeStatus, error)) *Node_SetInputsForStartNode_Call {
	_c.Call.Return(run)
	return _c
}

// WithNodeExecutionContextBuilder provides a mock function with given fields: _a0
func (_m *Node) WithNodeExecutionContextBuilder(_a0 interfaces.NodeExecutionContextBuilder) interfaces.Node {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithNodeExecutionContextBuilder")
	}

	var r0 interfaces.Node
	if rf, ok := ret.Get(0).(func(interfaces.NodeExecutionContextBuilder) interfaces.Node); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.Node)
		}
	}

	return r0
}

// Node_WithNodeExecutionContextBuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithNodeExecutionContextBuilder'
type Node_WithNodeExecutionContextBuilder_Call struct {
	*mock.Call
}

// WithNodeExecutionContextBuilder is a helper method to define mock.On call
//   - _a0 interfaces.NodeExecutionContextBuilder
func (_e *Node_Expecter) WithNodeExecutionContextBuilder(_a0 interface{}) *Node_WithNodeExecutionContextBuilder_Call {
	return &Node_WithNodeExecutionContextBuilder_Call{Call: _e.mock.On("WithNodeExecutionContextBuilder", _a0)}
}

func (_c *Node_WithNodeExecutionContextBuilder_Call) Run(run func(_a0 interfaces.NodeExecutionContextBuilder)) *Node_WithNodeExecutionContextBuilder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interfaces.NodeExecutionContextBuilder))
	})
	return _c
}

func (_c *Node_WithNodeExecutionContextBuilder_Call) Return(_a0 interfaces.Node) *Node_WithNodeExecutionContextBuilder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_WithNodeExecutionContextBuilder_Call) RunAndReturn(run func(interfaces.NodeExecutionContextBuilder) interfaces.Node) *Node_WithNodeExecutionContextBuilder_Call {
	_c.Call.Return(run)
	return _c
}

// NewNode creates a new instance of Node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *Node {
	mock := &Node{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
