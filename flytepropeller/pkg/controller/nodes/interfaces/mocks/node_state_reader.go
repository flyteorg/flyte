// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	handler "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/handler"

	mock "github.com/stretchr/testify/mock"
)

// NodeStateReader is an autogenerated mock type for the NodeStateReader type
type NodeStateReader struct {
	mock.Mock
}

type NodeStateReader_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeStateReader) EXPECT() *NodeStateReader_Expecter {
	return &NodeStateReader_Expecter{mock: &_m.Mock}
}

// GetArrayNodeState provides a mock function with given fields:
func (_m *NodeStateReader) GetArrayNodeState() handler.ArrayNodeState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArrayNodeState")
	}

	var r0 handler.ArrayNodeState
	if rf, ok := ret.Get(0).(func() handler.ArrayNodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(handler.ArrayNodeState)
	}

	return r0
}

// NodeStateReader_GetArrayNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArrayNodeState'
type NodeStateReader_GetArrayNodeState_Call struct {
	*mock.Call
}

// GetArrayNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) GetArrayNodeState() *NodeStateReader_GetArrayNodeState_Call {
	return &NodeStateReader_GetArrayNodeState_Call{Call: _e.mock.On("GetArrayNodeState")}
}

func (_c *NodeStateReader_GetArrayNodeState_Call) Run(run func()) *NodeStateReader_GetArrayNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_GetArrayNodeState_Call) Return(_a0 handler.ArrayNodeState) *NodeStateReader_GetArrayNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_GetArrayNodeState_Call) RunAndReturn(run func() handler.ArrayNodeState) *NodeStateReader_GetArrayNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// GetBranchNodeState provides a mock function with given fields:
func (_m *NodeStateReader) GetBranchNodeState() handler.BranchNodeState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBranchNodeState")
	}

	var r0 handler.BranchNodeState
	if rf, ok := ret.Get(0).(func() handler.BranchNodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(handler.BranchNodeState)
	}

	return r0
}

// NodeStateReader_GetBranchNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBranchNodeState'
type NodeStateReader_GetBranchNodeState_Call struct {
	*mock.Call
}

// GetBranchNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) GetBranchNodeState() *NodeStateReader_GetBranchNodeState_Call {
	return &NodeStateReader_GetBranchNodeState_Call{Call: _e.mock.On("GetBranchNodeState")}
}

func (_c *NodeStateReader_GetBranchNodeState_Call) Run(run func()) *NodeStateReader_GetBranchNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_GetBranchNodeState_Call) Return(_a0 handler.BranchNodeState) *NodeStateReader_GetBranchNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_GetBranchNodeState_Call) RunAndReturn(run func() handler.BranchNodeState) *NodeStateReader_GetBranchNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// GetDynamicNodeState provides a mock function with given fields:
func (_m *NodeStateReader) GetDynamicNodeState() handler.DynamicNodeState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDynamicNodeState")
	}

	var r0 handler.DynamicNodeState
	if rf, ok := ret.Get(0).(func() handler.DynamicNodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(handler.DynamicNodeState)
	}

	return r0
}

// NodeStateReader_GetDynamicNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamicNodeState'
type NodeStateReader_GetDynamicNodeState_Call struct {
	*mock.Call
}

// GetDynamicNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) GetDynamicNodeState() *NodeStateReader_GetDynamicNodeState_Call {
	return &NodeStateReader_GetDynamicNodeState_Call{Call: _e.mock.On("GetDynamicNodeState")}
}

func (_c *NodeStateReader_GetDynamicNodeState_Call) Run(run func()) *NodeStateReader_GetDynamicNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_GetDynamicNodeState_Call) Return(_a0 handler.DynamicNodeState) *NodeStateReader_GetDynamicNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_GetDynamicNodeState_Call) RunAndReturn(run func() handler.DynamicNodeState) *NodeStateReader_GetDynamicNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// GetGateNodeState provides a mock function with given fields:
func (_m *NodeStateReader) GetGateNodeState() handler.GateNodeState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGateNodeState")
	}

	var r0 handler.GateNodeState
	if rf, ok := ret.Get(0).(func() handler.GateNodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(handler.GateNodeState)
	}

	return r0
}

// NodeStateReader_GetGateNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGateNodeState'
type NodeStateReader_GetGateNodeState_Call struct {
	*mock.Call
}

// GetGateNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) GetGateNodeState() *NodeStateReader_GetGateNodeState_Call {
	return &NodeStateReader_GetGateNodeState_Call{Call: _e.mock.On("GetGateNodeState")}
}

func (_c *NodeStateReader_GetGateNodeState_Call) Run(run func()) *NodeStateReader_GetGateNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_GetGateNodeState_Call) Return(_a0 handler.GateNodeState) *NodeStateReader_GetGateNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_GetGateNodeState_Call) RunAndReturn(run func() handler.GateNodeState) *NodeStateReader_GetGateNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskNodeState provides a mock function with given fields:
func (_m *NodeStateReader) GetTaskNodeState() handler.TaskNodeState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskNodeState")
	}

	var r0 handler.TaskNodeState
	if rf, ok := ret.Get(0).(func() handler.TaskNodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(handler.TaskNodeState)
	}

	return r0
}

// NodeStateReader_GetTaskNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskNodeState'
type NodeStateReader_GetTaskNodeState_Call struct {
	*mock.Call
}

// GetTaskNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) GetTaskNodeState() *NodeStateReader_GetTaskNodeState_Call {
	return &NodeStateReader_GetTaskNodeState_Call{Call: _e.mock.On("GetTaskNodeState")}
}

func (_c *NodeStateReader_GetTaskNodeState_Call) Run(run func()) *NodeStateReader_GetTaskNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_GetTaskNodeState_Call) Return(_a0 handler.TaskNodeState) *NodeStateReader_GetTaskNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_GetTaskNodeState_Call) RunAndReturn(run func() handler.TaskNodeState) *NodeStateReader_GetTaskNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowNodeState provides a mock function with given fields:
func (_m *NodeStateReader) GetWorkflowNodeState() handler.WorkflowNodeState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowNodeState")
	}

	var r0 handler.WorkflowNodeState
	if rf, ok := ret.Get(0).(func() handler.WorkflowNodeState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(handler.WorkflowNodeState)
	}

	return r0
}

// NodeStateReader_GetWorkflowNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowNodeState'
type NodeStateReader_GetWorkflowNodeState_Call struct {
	*mock.Call
}

// GetWorkflowNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) GetWorkflowNodeState() *NodeStateReader_GetWorkflowNodeState_Call {
	return &NodeStateReader_GetWorkflowNodeState_Call{Call: _e.mock.On("GetWorkflowNodeState")}
}

func (_c *NodeStateReader_GetWorkflowNodeState_Call) Run(run func()) *NodeStateReader_GetWorkflowNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_GetWorkflowNodeState_Call) Return(_a0 handler.WorkflowNodeState) *NodeStateReader_GetWorkflowNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_GetWorkflowNodeState_Call) RunAndReturn(run func() handler.WorkflowNodeState) *NodeStateReader_GetWorkflowNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// HasArrayNodeState provides a mock function with given fields:
func (_m *NodeStateReader) HasArrayNodeState() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasArrayNodeState")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NodeStateReader_HasArrayNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasArrayNodeState'
type NodeStateReader_HasArrayNodeState_Call struct {
	*mock.Call
}

// HasArrayNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) HasArrayNodeState() *NodeStateReader_HasArrayNodeState_Call {
	return &NodeStateReader_HasArrayNodeState_Call{Call: _e.mock.On("HasArrayNodeState")}
}

func (_c *NodeStateReader_HasArrayNodeState_Call) Run(run func()) *NodeStateReader_HasArrayNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_HasArrayNodeState_Call) Return(_a0 bool) *NodeStateReader_HasArrayNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_HasArrayNodeState_Call) RunAndReturn(run func() bool) *NodeStateReader_HasArrayNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// HasBranchNodeState provides a mock function with given fields:
func (_m *NodeStateReader) HasBranchNodeState() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasBranchNodeState")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NodeStateReader_HasBranchNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasBranchNodeState'
type NodeStateReader_HasBranchNodeState_Call struct {
	*mock.Call
}

// HasBranchNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) HasBranchNodeState() *NodeStateReader_HasBranchNodeState_Call {
	return &NodeStateReader_HasBranchNodeState_Call{Call: _e.mock.On("HasBranchNodeState")}
}

func (_c *NodeStateReader_HasBranchNodeState_Call) Run(run func()) *NodeStateReader_HasBranchNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_HasBranchNodeState_Call) Return(_a0 bool) *NodeStateReader_HasBranchNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_HasBranchNodeState_Call) RunAndReturn(run func() bool) *NodeStateReader_HasBranchNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// HasDynamicNodeState provides a mock function with given fields:
func (_m *NodeStateReader) HasDynamicNodeState() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasDynamicNodeState")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NodeStateReader_HasDynamicNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasDynamicNodeState'
type NodeStateReader_HasDynamicNodeState_Call struct {
	*mock.Call
}

// HasDynamicNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) HasDynamicNodeState() *NodeStateReader_HasDynamicNodeState_Call {
	return &NodeStateReader_HasDynamicNodeState_Call{Call: _e.mock.On("HasDynamicNodeState")}
}

func (_c *NodeStateReader_HasDynamicNodeState_Call) Run(run func()) *NodeStateReader_HasDynamicNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_HasDynamicNodeState_Call) Return(_a0 bool) *NodeStateReader_HasDynamicNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_HasDynamicNodeState_Call) RunAndReturn(run func() bool) *NodeStateReader_HasDynamicNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// HasGateNodeState provides a mock function with given fields:
func (_m *NodeStateReader) HasGateNodeState() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasGateNodeState")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NodeStateReader_HasGateNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasGateNodeState'
type NodeStateReader_HasGateNodeState_Call struct {
	*mock.Call
}

// HasGateNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) HasGateNodeState() *NodeStateReader_HasGateNodeState_Call {
	return &NodeStateReader_HasGateNodeState_Call{Call: _e.mock.On("HasGateNodeState")}
}

func (_c *NodeStateReader_HasGateNodeState_Call) Run(run func()) *NodeStateReader_HasGateNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_HasGateNodeState_Call) Return(_a0 bool) *NodeStateReader_HasGateNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_HasGateNodeState_Call) RunAndReturn(run func() bool) *NodeStateReader_HasGateNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// HasTaskNodeState provides a mock function with given fields:
func (_m *NodeStateReader) HasTaskNodeState() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasTaskNodeState")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NodeStateReader_HasTaskNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasTaskNodeState'
type NodeStateReader_HasTaskNodeState_Call struct {
	*mock.Call
}

// HasTaskNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) HasTaskNodeState() *NodeStateReader_HasTaskNodeState_Call {
	return &NodeStateReader_HasTaskNodeState_Call{Call: _e.mock.On("HasTaskNodeState")}
}

func (_c *NodeStateReader_HasTaskNodeState_Call) Run(run func()) *NodeStateReader_HasTaskNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_HasTaskNodeState_Call) Return(_a0 bool) *NodeStateReader_HasTaskNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_HasTaskNodeState_Call) RunAndReturn(run func() bool) *NodeStateReader_HasTaskNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// HasWorkflowNodeState provides a mock function with given fields:
func (_m *NodeStateReader) HasWorkflowNodeState() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasWorkflowNodeState")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NodeStateReader_HasWorkflowNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasWorkflowNodeState'
type NodeStateReader_HasWorkflowNodeState_Call struct {
	*mock.Call
}

// HasWorkflowNodeState is a helper method to define mock.On call
func (_e *NodeStateReader_Expecter) HasWorkflowNodeState() *NodeStateReader_HasWorkflowNodeState_Call {
	return &NodeStateReader_HasWorkflowNodeState_Call{Call: _e.mock.On("HasWorkflowNodeState")}
}

func (_c *NodeStateReader_HasWorkflowNodeState_Call) Run(run func()) *NodeStateReader_HasWorkflowNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateReader_HasWorkflowNodeState_Call) Return(_a0 bool) *NodeStateReader_HasWorkflowNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateReader_HasWorkflowNodeState_Call) RunAndReturn(run func() bool) *NodeStateReader_HasWorkflowNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeStateReader creates a new instance of NodeStateReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeStateReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeStateReader {
	mock := &NodeStateReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
