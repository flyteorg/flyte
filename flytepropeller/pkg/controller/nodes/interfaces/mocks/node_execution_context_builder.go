// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	executors "github.com/flyteorg/flyte/flytepropeller/pkg/controller/executors"
	interfaces "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// NodeExecutionContextBuilder is an autogenerated mock type for the NodeExecutionContextBuilder type
type NodeExecutionContextBuilder struct {
	mock.Mock
}

type NodeExecutionContextBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeExecutionContextBuilder) EXPECT() *NodeExecutionContextBuilder_Expecter {
	return &NodeExecutionContextBuilder_Expecter{mock: &_m.Mock}
}

// BuildNodeExecutionContext provides a mock function with given fields: ctx, executionContext, nl, currentNodeID
func (_m *NodeExecutionContextBuilder) BuildNodeExecutionContext(ctx context.Context, executionContext executors.ExecutionContext, nl executors.NodeLookup, currentNodeID string) (interfaces.NodeExecutionContext, error) {
	ret := _m.Called(ctx, executionContext, nl, currentNodeID)

	if len(ret) == 0 {
		panic("no return value specified for BuildNodeExecutionContext")
	}

	var r0 interfaces.NodeExecutionContext
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, executors.ExecutionContext, executors.NodeLookup, string) (interfaces.NodeExecutionContext, error)); ok {
		return rf(ctx, executionContext, nl, currentNodeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, executors.ExecutionContext, executors.NodeLookup, string) interfaces.NodeExecutionContext); ok {
		r0 = rf(ctx, executionContext, nl, currentNodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.NodeExecutionContext)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, executors.ExecutionContext, executors.NodeLookup, string) error); ok {
		r1 = rf(ctx, executionContext, nl, currentNodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeExecutionContextBuilder_BuildNodeExecutionContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildNodeExecutionContext'
type NodeExecutionContextBuilder_BuildNodeExecutionContext_Call struct {
	*mock.Call
}

// BuildNodeExecutionContext is a helper method to define mock.On call
//   - ctx context.Context
//   - executionContext executors.ExecutionContext
//   - nl executors.NodeLookup
//   - currentNodeID string
func (_e *NodeExecutionContextBuilder_Expecter) BuildNodeExecutionContext(ctx interface{}, executionContext interface{}, nl interface{}, currentNodeID interface{}) *NodeExecutionContextBuilder_BuildNodeExecutionContext_Call {
	return &NodeExecutionContextBuilder_BuildNodeExecutionContext_Call{Call: _e.mock.On("BuildNodeExecutionContext", ctx, executionContext, nl, currentNodeID)}
}

func (_c *NodeExecutionContextBuilder_BuildNodeExecutionContext_Call) Run(run func(ctx context.Context, executionContext executors.ExecutionContext, nl executors.NodeLookup, currentNodeID string)) *NodeExecutionContextBuilder_BuildNodeExecutionContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(executors.ExecutionContext), args[2].(executors.NodeLookup), args[3].(string))
	})
	return _c
}

func (_c *NodeExecutionContextBuilder_BuildNodeExecutionContext_Call) Return(_a0 interfaces.NodeExecutionContext, _a1 error) *NodeExecutionContextBuilder_BuildNodeExecutionContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeExecutionContextBuilder_BuildNodeExecutionContext_Call) RunAndReturn(run func(context.Context, executors.ExecutionContext, executors.NodeLookup, string) (interfaces.NodeExecutionContext, error)) *NodeExecutionContextBuilder_BuildNodeExecutionContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeExecutionContextBuilder creates a new instance of NodeExecutionContextBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeExecutionContextBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeExecutionContextBuilder {
	mock := &NodeExecutionContextBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
