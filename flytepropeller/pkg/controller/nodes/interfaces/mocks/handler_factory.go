// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/interfaces"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// HandlerFactory is an autogenerated mock type for the HandlerFactory type
type HandlerFactory struct {
	mock.Mock
}

type HandlerFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerFactory) EXPECT() *HandlerFactory_Expecter {
	return &HandlerFactory_Expecter{mock: &_m.Mock}
}

// GetHandler provides a mock function with given fields: kind
func (_m *HandlerFactory) GetHandler(kind v1alpha1.NodeKind) (interfaces.NodeHandler, error) {
	ret := _m.Called(kind)

	if len(ret) == 0 {
		panic("no return value specified for GetHandler")
	}

	var r0 interfaces.NodeHandler
	var r1 error
	if rf, ok := ret.Get(0).(func(v1alpha1.NodeKind) (interfaces.NodeHandler, error)); ok {
		return rf(kind)
	}
	if rf, ok := ret.Get(0).(func(v1alpha1.NodeKind) interfaces.NodeHandler); ok {
		r0 = rf(kind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.NodeHandler)
		}
	}

	if rf, ok := ret.Get(1).(func(v1alpha1.NodeKind) error); ok {
		r1 = rf(kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandlerFactory_GetHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHandler'
type HandlerFactory_GetHandler_Call struct {
	*mock.Call
}

// GetHandler is a helper method to define mock.On call
//   - kind v1alpha1.NodeKind
func (_e *HandlerFactory_Expecter) GetHandler(kind interface{}) *HandlerFactory_GetHandler_Call {
	return &HandlerFactory_GetHandler_Call{Call: _e.mock.On("GetHandler", kind)}
}

func (_c *HandlerFactory_GetHandler_Call) Run(run func(kind v1alpha1.NodeKind)) *HandlerFactory_GetHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1alpha1.NodeKind))
	})
	return _c
}

func (_c *HandlerFactory_GetHandler_Call) Return(_a0 interfaces.NodeHandler, _a1 error) *HandlerFactory_GetHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HandlerFactory_GetHandler_Call) RunAndReturn(run func(v1alpha1.NodeKind) (interfaces.NodeHandler, error)) *HandlerFactory_GetHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields: ctx, executor, setup
func (_m *HandlerFactory) Setup(ctx context.Context, executor interfaces.Node, setup interfaces.SetupContext) error {
	ret := _m.Called(ctx, executor, setup)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Node, interfaces.SetupContext) error); ok {
		r0 = rf(ctx, executor, setup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandlerFactory_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type HandlerFactory_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - ctx context.Context
//   - executor interfaces.Node
//   - setup interfaces.SetupContext
func (_e *HandlerFactory_Expecter) Setup(ctx interface{}, executor interface{}, setup interface{}) *HandlerFactory_Setup_Call {
	return &HandlerFactory_Setup_Call{Call: _e.mock.On("Setup", ctx, executor, setup)}
}

func (_c *HandlerFactory_Setup_Call) Run(run func(ctx context.Context, executor interfaces.Node, setup interfaces.SetupContext)) *HandlerFactory_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.Node), args[2].(interfaces.SetupContext))
	})
	return _c
}

func (_c *HandlerFactory_Setup_Call) Return(_a0 error) *HandlerFactory_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerFactory_Setup_Call) RunAndReturn(run func(context.Context, interfaces.Node, interfaces.SetupContext) error) *HandlerFactory_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandlerFactory creates a new instance of HandlerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerFactory {
	mock := &HandlerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
