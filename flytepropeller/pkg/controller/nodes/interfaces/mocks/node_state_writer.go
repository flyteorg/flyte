// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	handler "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/handler"

	mock "github.com/stretchr/testify/mock"
)

// NodeStateWriter is an autogenerated mock type for the NodeStateWriter type
type NodeStateWriter struct {
	mock.Mock
}

type NodeStateWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeStateWriter) EXPECT() *NodeStateWriter_Expecter {
	return &NodeStateWriter_Expecter{mock: &_m.Mock}
}

// ClearNodeStatus provides a mock function with given fields:
func (_m *NodeStateWriter) ClearNodeStatus() {
	_m.Called()
}

// NodeStateWriter_ClearNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearNodeStatus'
type NodeStateWriter_ClearNodeStatus_Call struct {
	*mock.Call
}

// ClearNodeStatus is a helper method to define mock.On call
func (_e *NodeStateWriter_Expecter) ClearNodeStatus() *NodeStateWriter_ClearNodeStatus_Call {
	return &NodeStateWriter_ClearNodeStatus_Call{Call: _e.mock.On("ClearNodeStatus")}
}

func (_c *NodeStateWriter_ClearNodeStatus_Call) Run(run func()) *NodeStateWriter_ClearNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeStateWriter_ClearNodeStatus_Call) Return() *NodeStateWriter_ClearNodeStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeStateWriter_ClearNodeStatus_Call) RunAndReturn(run func()) *NodeStateWriter_ClearNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// PutArrayNodeState provides a mock function with given fields: s
func (_m *NodeStateWriter) PutArrayNodeState(s handler.ArrayNodeState) error {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for PutArrayNodeState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(handler.ArrayNodeState) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeStateWriter_PutArrayNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutArrayNodeState'
type NodeStateWriter_PutArrayNodeState_Call struct {
	*mock.Call
}

// PutArrayNodeState is a helper method to define mock.On call
//   - s handler.ArrayNodeState
func (_e *NodeStateWriter_Expecter) PutArrayNodeState(s interface{}) *NodeStateWriter_PutArrayNodeState_Call {
	return &NodeStateWriter_PutArrayNodeState_Call{Call: _e.mock.On("PutArrayNodeState", s)}
}

func (_c *NodeStateWriter_PutArrayNodeState_Call) Run(run func(s handler.ArrayNodeState)) *NodeStateWriter_PutArrayNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(handler.ArrayNodeState))
	})
	return _c
}

func (_c *NodeStateWriter_PutArrayNodeState_Call) Return(_a0 error) *NodeStateWriter_PutArrayNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateWriter_PutArrayNodeState_Call) RunAndReturn(run func(handler.ArrayNodeState) error) *NodeStateWriter_PutArrayNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// PutBranchNode provides a mock function with given fields: s
func (_m *NodeStateWriter) PutBranchNode(s handler.BranchNodeState) error {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for PutBranchNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(handler.BranchNodeState) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeStateWriter_PutBranchNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutBranchNode'
type NodeStateWriter_PutBranchNode_Call struct {
	*mock.Call
}

// PutBranchNode is a helper method to define mock.On call
//   - s handler.BranchNodeState
func (_e *NodeStateWriter_Expecter) PutBranchNode(s interface{}) *NodeStateWriter_PutBranchNode_Call {
	return &NodeStateWriter_PutBranchNode_Call{Call: _e.mock.On("PutBranchNode", s)}
}

func (_c *NodeStateWriter_PutBranchNode_Call) Run(run func(s handler.BranchNodeState)) *NodeStateWriter_PutBranchNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(handler.BranchNodeState))
	})
	return _c
}

func (_c *NodeStateWriter_PutBranchNode_Call) Return(_a0 error) *NodeStateWriter_PutBranchNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateWriter_PutBranchNode_Call) RunAndReturn(run func(handler.BranchNodeState) error) *NodeStateWriter_PutBranchNode_Call {
	_c.Call.Return(run)
	return _c
}

// PutDynamicNodeState provides a mock function with given fields: s
func (_m *NodeStateWriter) PutDynamicNodeState(s handler.DynamicNodeState) error {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for PutDynamicNodeState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(handler.DynamicNodeState) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeStateWriter_PutDynamicNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDynamicNodeState'
type NodeStateWriter_PutDynamicNodeState_Call struct {
	*mock.Call
}

// PutDynamicNodeState is a helper method to define mock.On call
//   - s handler.DynamicNodeState
func (_e *NodeStateWriter_Expecter) PutDynamicNodeState(s interface{}) *NodeStateWriter_PutDynamicNodeState_Call {
	return &NodeStateWriter_PutDynamicNodeState_Call{Call: _e.mock.On("PutDynamicNodeState", s)}
}

func (_c *NodeStateWriter_PutDynamicNodeState_Call) Run(run func(s handler.DynamicNodeState)) *NodeStateWriter_PutDynamicNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(handler.DynamicNodeState))
	})
	return _c
}

func (_c *NodeStateWriter_PutDynamicNodeState_Call) Return(_a0 error) *NodeStateWriter_PutDynamicNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateWriter_PutDynamicNodeState_Call) RunAndReturn(run func(handler.DynamicNodeState) error) *NodeStateWriter_PutDynamicNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// PutGateNodeState provides a mock function with given fields: s
func (_m *NodeStateWriter) PutGateNodeState(s handler.GateNodeState) error {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for PutGateNodeState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(handler.GateNodeState) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeStateWriter_PutGateNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutGateNodeState'
type NodeStateWriter_PutGateNodeState_Call struct {
	*mock.Call
}

// PutGateNodeState is a helper method to define mock.On call
//   - s handler.GateNodeState
func (_e *NodeStateWriter_Expecter) PutGateNodeState(s interface{}) *NodeStateWriter_PutGateNodeState_Call {
	return &NodeStateWriter_PutGateNodeState_Call{Call: _e.mock.On("PutGateNodeState", s)}
}

func (_c *NodeStateWriter_PutGateNodeState_Call) Run(run func(s handler.GateNodeState)) *NodeStateWriter_PutGateNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(handler.GateNodeState))
	})
	return _c
}

func (_c *NodeStateWriter_PutGateNodeState_Call) Return(_a0 error) *NodeStateWriter_PutGateNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateWriter_PutGateNodeState_Call) RunAndReturn(run func(handler.GateNodeState) error) *NodeStateWriter_PutGateNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// PutTaskNodeState provides a mock function with given fields: s
func (_m *NodeStateWriter) PutTaskNodeState(s handler.TaskNodeState) error {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for PutTaskNodeState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(handler.TaskNodeState) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeStateWriter_PutTaskNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutTaskNodeState'
type NodeStateWriter_PutTaskNodeState_Call struct {
	*mock.Call
}

// PutTaskNodeState is a helper method to define mock.On call
//   - s handler.TaskNodeState
func (_e *NodeStateWriter_Expecter) PutTaskNodeState(s interface{}) *NodeStateWriter_PutTaskNodeState_Call {
	return &NodeStateWriter_PutTaskNodeState_Call{Call: _e.mock.On("PutTaskNodeState", s)}
}

func (_c *NodeStateWriter_PutTaskNodeState_Call) Run(run func(s handler.TaskNodeState)) *NodeStateWriter_PutTaskNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(handler.TaskNodeState))
	})
	return _c
}

func (_c *NodeStateWriter_PutTaskNodeState_Call) Return(_a0 error) *NodeStateWriter_PutTaskNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateWriter_PutTaskNodeState_Call) RunAndReturn(run func(handler.TaskNodeState) error) *NodeStateWriter_PutTaskNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// PutWorkflowNodeState provides a mock function with given fields: s
func (_m *NodeStateWriter) PutWorkflowNodeState(s handler.WorkflowNodeState) error {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for PutWorkflowNodeState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(handler.WorkflowNodeState) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeStateWriter_PutWorkflowNodeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutWorkflowNodeState'
type NodeStateWriter_PutWorkflowNodeState_Call struct {
	*mock.Call
}

// PutWorkflowNodeState is a helper method to define mock.On call
//   - s handler.WorkflowNodeState
func (_e *NodeStateWriter_Expecter) PutWorkflowNodeState(s interface{}) *NodeStateWriter_PutWorkflowNodeState_Call {
	return &NodeStateWriter_PutWorkflowNodeState_Call{Call: _e.mock.On("PutWorkflowNodeState", s)}
}

func (_c *NodeStateWriter_PutWorkflowNodeState_Call) Run(run func(s handler.WorkflowNodeState)) *NodeStateWriter_PutWorkflowNodeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(handler.WorkflowNodeState))
	})
	return _c
}

func (_c *NodeStateWriter_PutWorkflowNodeState_Call) Return(_a0 error) *NodeStateWriter_PutWorkflowNodeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStateWriter_PutWorkflowNodeState_Call) RunAndReturn(run func(handler.WorkflowNodeState) error) *NodeStateWriter_PutWorkflowNodeState_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeStateWriter creates a new instance of NodeStateWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeStateWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeStateWriter {
	mock := &NodeStateWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
