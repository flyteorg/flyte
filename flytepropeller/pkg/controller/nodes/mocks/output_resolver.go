// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	executors "github.com/flyteorg/flyte/flytepropeller/pkg/controller/executors"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// OutputResolver is an autogenerated mock type for the OutputResolver type
type OutputResolver struct {
	mock.Mock
}

type OutputResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *OutputResolver) EXPECT() *OutputResolver_Expecter {
	return &OutputResolver_Expecter{mock: &_m.Mock}
}

// ExtractOutput provides a mock function with given fields: ctx, nl, n, bindToVar, bindAttrPath
func (_m *OutputResolver) ExtractOutput(ctx context.Context, nl executors.NodeLookup, n v1alpha1.ExecutableNode, bindToVar string, bindAttrPath []*core.PromiseAttribute) (*core.Literal, error) {
	ret := _m.Called(ctx, nl, n, bindToVar, bindAttrPath)

	if len(ret) == 0 {
		panic("no return value specified for ExtractOutput")
	}

	var r0 *core.Literal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, executors.NodeLookup, v1alpha1.ExecutableNode, string, []*core.PromiseAttribute) (*core.Literal, error)); ok {
		return rf(ctx, nl, n, bindToVar, bindAttrPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, executors.NodeLookup, v1alpha1.ExecutableNode, string, []*core.PromiseAttribute) *core.Literal); ok {
		r0 = rf(ctx, nl, n, bindToVar, bindAttrPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Literal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, executors.NodeLookup, v1alpha1.ExecutableNode, string, []*core.PromiseAttribute) error); ok {
		r1 = rf(ctx, nl, n, bindToVar, bindAttrPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OutputResolver_ExtractOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractOutput'
type OutputResolver_ExtractOutput_Call struct {
	*mock.Call
}

// ExtractOutput is a helper method to define mock.On call
//   - ctx context.Context
//   - nl executors.NodeLookup
//   - n v1alpha1.ExecutableNode
//   - bindToVar string
//   - bindAttrPath []*core.PromiseAttribute
func (_e *OutputResolver_Expecter) ExtractOutput(ctx interface{}, nl interface{}, n interface{}, bindToVar interface{}, bindAttrPath interface{}) *OutputResolver_ExtractOutput_Call {
	return &OutputResolver_ExtractOutput_Call{Call: _e.mock.On("ExtractOutput", ctx, nl, n, bindToVar, bindAttrPath)}
}

func (_c *OutputResolver_ExtractOutput_Call) Run(run func(ctx context.Context, nl executors.NodeLookup, n v1alpha1.ExecutableNode, bindToVar string, bindAttrPath []*core.PromiseAttribute)) *OutputResolver_ExtractOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(executors.NodeLookup), args[2].(v1alpha1.ExecutableNode), args[3].(string), args[4].([]*core.PromiseAttribute))
	})
	return _c
}

func (_c *OutputResolver_ExtractOutput_Call) Return(values *core.Literal, err error) *OutputResolver_ExtractOutput_Call {
	_c.Call.Return(values, err)
	return _c
}

func (_c *OutputResolver_ExtractOutput_Call) RunAndReturn(run func(context.Context, executors.NodeLookup, v1alpha1.ExecutableNode, string, []*core.PromiseAttribute) (*core.Literal, error)) *OutputResolver_ExtractOutput_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutputResolver creates a new instance of OutputResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutputResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutputResolver {
	mock := &OutputResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
