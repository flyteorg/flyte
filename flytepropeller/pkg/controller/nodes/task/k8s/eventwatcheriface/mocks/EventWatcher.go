// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	eventwatcheriface "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/task/k8s/eventwatcheriface"
	mock "github.com/stretchr/testify/mock"

	time "time"

	types "k8s.io/apimachinery/pkg/types"
)

// EventWatcher is an autogenerated mock type for the EventWatcher type
type EventWatcher struct {
	mock.Mock
}

type EventWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *EventWatcher) EXPECT() *EventWatcher_Expecter {
	return &EventWatcher_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: objectNsName, createdAfter
func (_m *EventWatcher) List(objectNsName types.NamespacedName, createdAfter time.Time) []*eventwatcheriface.EventInfo {
	ret := _m.Called(objectNsName, createdAfter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*eventwatcheriface.EventInfo
	if rf, ok := ret.Get(0).(func(types.NamespacedName, time.Time) []*eventwatcheriface.EventInfo); ok {
		r0 = rf(objectNsName, createdAfter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*eventwatcheriface.EventInfo)
		}
	}

	return r0
}

// EventWatcher_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type EventWatcher_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - objectNsName types.NamespacedName
//   - createdAfter time.Time
func (_e *EventWatcher_Expecter) List(objectNsName interface{}, createdAfter interface{}) *EventWatcher_List_Call {
	return &EventWatcher_List_Call{Call: _e.mock.On("List", objectNsName, createdAfter)}
}

func (_c *EventWatcher_List_Call) Run(run func(objectNsName types.NamespacedName, createdAfter time.Time)) *EventWatcher_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.NamespacedName), args[1].(time.Time))
	})
	return _c
}

func (_c *EventWatcher_List_Call) Return(_a0 []*eventwatcheriface.EventInfo) *EventWatcher_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventWatcher_List_Call) RunAndReturn(run func(types.NamespacedName, time.Time) []*eventwatcheriface.EventInfo) *EventWatcher_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventWatcher creates a new instance of EventWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventWatcher {
	mock := &EventWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
