// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/flyteorg/flyte/flytestdlib/storage"

	task "github.com/flyteorg/flyte/flytepropeller/pkg/controller/nodes/task"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// FutureFileReaderInterface is an autogenerated mock type for the FutureFileReaderInterface type
type FutureFileReaderInterface struct {
	mock.Mock
}

type FutureFileReaderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *FutureFileReaderInterface) EXPECT() *FutureFileReaderInterface_Expecter {
	return &FutureFileReaderInterface_Expecter{mock: &_m.Mock}
}

// Cache provides a mock function with given fields: ctx, wf, workflowClosure
func (_m *FutureFileReaderInterface) Cache(ctx context.Context, wf *v1alpha1.FlyteWorkflow, workflowClosure *core.CompiledWorkflowClosure) error {
	ret := _m.Called(ctx, wf, workflowClosure)

	if len(ret) == 0 {
		panic("no return value specified for Cache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.FlyteWorkflow, *core.CompiledWorkflowClosure) error); ok {
		r0 = rf(ctx, wf, workflowClosure)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FutureFileReaderInterface_Cache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cache'
type FutureFileReaderInterface_Cache_Call struct {
	*mock.Call
}

// Cache is a helper method to define mock.On call
//   - ctx context.Context
//   - wf *v1alpha1.FlyteWorkflow
//   - workflowClosure *core.CompiledWorkflowClosure
func (_e *FutureFileReaderInterface_Expecter) Cache(ctx interface{}, wf interface{}, workflowClosure interface{}) *FutureFileReaderInterface_Cache_Call {
	return &FutureFileReaderInterface_Cache_Call{Call: _e.mock.On("Cache", ctx, wf, workflowClosure)}
}

func (_c *FutureFileReaderInterface_Cache_Call) Run(run func(ctx context.Context, wf *v1alpha1.FlyteWorkflow, workflowClosure *core.CompiledWorkflowClosure)) *FutureFileReaderInterface_Cache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.FlyteWorkflow), args[2].(*core.CompiledWorkflowClosure))
	})
	return _c
}

func (_c *FutureFileReaderInterface_Cache_Call) Return(_a0 error) *FutureFileReaderInterface_Cache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FutureFileReaderInterface_Cache_Call) RunAndReturn(run func(context.Context, *v1alpha1.FlyteWorkflow, *core.CompiledWorkflowClosure) error) *FutureFileReaderInterface_Cache_Call {
	_c.Call.Return(run)
	return _c
}

// CacheExists provides a mock function with given fields: ctx
func (_m *FutureFileReaderInterface) CacheExists(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CacheExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FutureFileReaderInterface_CacheExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheExists'
type FutureFileReaderInterface_CacheExists_Call struct {
	*mock.Call
}

// CacheExists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FutureFileReaderInterface_Expecter) CacheExists(ctx interface{}) *FutureFileReaderInterface_CacheExists_Call {
	return &FutureFileReaderInterface_CacheExists_Call{Call: _e.mock.On("CacheExists", ctx)}
}

func (_c *FutureFileReaderInterface_CacheExists_Call) Run(run func(ctx context.Context)) *FutureFileReaderInterface_CacheExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FutureFileReaderInterface_CacheExists_Call) Return(_a0 bool, _a1 error) *FutureFileReaderInterface_CacheExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FutureFileReaderInterface_CacheExists_Call) RunAndReturn(run func(context.Context) (bool, error)) *FutureFileReaderInterface_CacheExists_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx
func (_m *FutureFileReaderInterface) Exists(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FutureFileReaderInterface_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type FutureFileReaderInterface_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FutureFileReaderInterface_Expecter) Exists(ctx interface{}) *FutureFileReaderInterface_Exists_Call {
	return &FutureFileReaderInterface_Exists_Call{Call: _e.mock.On("Exists", ctx)}
}

func (_c *FutureFileReaderInterface_Exists_Call) Run(run func(ctx context.Context)) *FutureFileReaderInterface_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FutureFileReaderInterface_Exists_Call) Return(_a0 bool, _a1 error) *FutureFileReaderInterface_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FutureFileReaderInterface_Exists_Call) RunAndReturn(run func(context.Context) (bool, error)) *FutureFileReaderInterface_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoc provides a mock function with given fields:
func (_m *FutureFileReaderInterface) GetLoc() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLoc")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// FutureFileReaderInterface_GetLoc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoc'
type FutureFileReaderInterface_GetLoc_Call struct {
	*mock.Call
}

// GetLoc is a helper method to define mock.On call
func (_e *FutureFileReaderInterface_Expecter) GetLoc() *FutureFileReaderInterface_GetLoc_Call {
	return &FutureFileReaderInterface_GetLoc_Call{Call: _e.mock.On("GetLoc")}
}

func (_c *FutureFileReaderInterface_GetLoc_Call) Run(run func()) *FutureFileReaderInterface_GetLoc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FutureFileReaderInterface_GetLoc_Call) Return(_a0 storage.DataReference) *FutureFileReaderInterface_GetLoc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FutureFileReaderInterface_GetLoc_Call) RunAndReturn(run func() storage.DataReference) *FutureFileReaderInterface_GetLoc_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx
func (_m *FutureFileReaderInterface) Read(ctx context.Context) (*core.DynamicJobSpec, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *core.DynamicJobSpec
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*core.DynamicJobSpec, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *core.DynamicJobSpec); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.DynamicJobSpec)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FutureFileReaderInterface_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type FutureFileReaderInterface_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FutureFileReaderInterface_Expecter) Read(ctx interface{}) *FutureFileReaderInterface_Read_Call {
	return &FutureFileReaderInterface_Read_Call{Call: _e.mock.On("Read", ctx)}
}

func (_c *FutureFileReaderInterface_Read_Call) Run(run func(ctx context.Context)) *FutureFileReaderInterface_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FutureFileReaderInterface_Read_Call) Return(_a0 *core.DynamicJobSpec, _a1 error) *FutureFileReaderInterface_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FutureFileReaderInterface_Read_Call) RunAndReturn(run func(context.Context) (*core.DynamicJobSpec, error)) *FutureFileReaderInterface_Read_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveCache provides a mock function with given fields: ctx
func (_m *FutureFileReaderInterface) RetrieveCache(ctx context.Context) (task.CacheContents, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveCache")
	}

	var r0 task.CacheContents
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (task.CacheContents, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) task.CacheContents); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(task.CacheContents)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FutureFileReaderInterface_RetrieveCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveCache'
type FutureFileReaderInterface_RetrieveCache_Call struct {
	*mock.Call
}

// RetrieveCache is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FutureFileReaderInterface_Expecter) RetrieveCache(ctx interface{}) *FutureFileReaderInterface_RetrieveCache_Call {
	return &FutureFileReaderInterface_RetrieveCache_Call{Call: _e.mock.On("RetrieveCache", ctx)}
}

func (_c *FutureFileReaderInterface_RetrieveCache_Call) Run(run func(ctx context.Context)) *FutureFileReaderInterface_RetrieveCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FutureFileReaderInterface_RetrieveCache_Call) Return(_a0 task.CacheContents, _a1 error) *FutureFileReaderInterface_RetrieveCache_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FutureFileReaderInterface_RetrieveCache_Call) RunAndReturn(run func(context.Context) (task.CacheContents, error)) *FutureFileReaderInterface_RetrieveCache_Call {
	_c.Call.Return(run)
	return _c
}

// NewFutureFileReaderInterface creates a new instance of FutureFileReaderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFutureFileReaderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *FutureFileReaderInterface {
	mock := &FutureFileReaderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
