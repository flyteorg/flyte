// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RedisClient is an autogenerated mock type for the RedisClient type
type RedisClient struct {
	mock.Mock
}

type RedisClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisClient) EXPECT() *RedisClient_Expecter {
	return &RedisClient_Expecter{mock: &_m.Mock}
}

// Ping provides a mock function with given fields:
func (_m *RedisClient) Ping() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type RedisClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *RedisClient_Expecter) Ping() *RedisClient_Ping_Call {
	return &RedisClient_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *RedisClient_Ping_Call) Run(run func()) *RedisClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisClient_Ping_Call) Return(_a0 string, _a1 error) *RedisClient_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisClient_Ping_Call) RunAndReturn(run func() (string, error)) *RedisClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// SAdd provides a mock function with given fields: _a0, _a1
func (_m *RedisClient) SAdd(_a0 string, _a1 interface{}) (int64, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SAdd")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisClient_SAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SAdd'
type RedisClient_SAdd_Call struct {
	*mock.Call
}

// SAdd is a helper method to define mock.On call
//   - _a0 string
//   - _a1 interface{}
func (_e *RedisClient_Expecter) SAdd(_a0 interface{}, _a1 interface{}) *RedisClient_SAdd_Call {
	return &RedisClient_SAdd_Call{Call: _e.mock.On("SAdd", _a0, _a1)}
}

func (_c *RedisClient_SAdd_Call) Run(run func(_a0 string, _a1 interface{})) *RedisClient_SAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *RedisClient_SAdd_Call) Return(_a0 int64, _a1 error) *RedisClient_SAdd_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisClient_SAdd_Call) RunAndReturn(run func(string, interface{}) (int64, error)) *RedisClient_SAdd_Call {
	_c.Call.Return(run)
	return _c
}

// SCard provides a mock function with given fields: _a0
func (_m *RedisClient) SCard(_a0 string) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SCard")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisClient_SCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SCard'
type RedisClient_SCard_Call struct {
	*mock.Call
}

// SCard is a helper method to define mock.On call
//   - _a0 string
func (_e *RedisClient_Expecter) SCard(_a0 interface{}) *RedisClient_SCard_Call {
	return &RedisClient_SCard_Call{Call: _e.mock.On("SCard", _a0)}
}

func (_c *RedisClient_SCard_Call) Run(run func(_a0 string)) *RedisClient_SCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisClient_SCard_Call) Return(_a0 int64, _a1 error) *RedisClient_SCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisClient_SCard_Call) RunAndReturn(run func(string) (int64, error)) *RedisClient_SCard_Call {
	_c.Call.Return(run)
	return _c
}

// SIsMember provides a mock function with given fields: _a0, _a1
func (_m *RedisClient) SIsMember(_a0 string, _a1 interface{}) (bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SIsMember")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisClient_SIsMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SIsMember'
type RedisClient_SIsMember_Call struct {
	*mock.Call
}

// SIsMember is a helper method to define mock.On call
//   - _a0 string
//   - _a1 interface{}
func (_e *RedisClient_Expecter) SIsMember(_a0 interface{}, _a1 interface{}) *RedisClient_SIsMember_Call {
	return &RedisClient_SIsMember_Call{Call: _e.mock.On("SIsMember", _a0, _a1)}
}

func (_c *RedisClient_SIsMember_Call) Run(run func(_a0 string, _a1 interface{})) *RedisClient_SIsMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *RedisClient_SIsMember_Call) Return(_a0 bool, _a1 error) *RedisClient_SIsMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisClient_SIsMember_Call) RunAndReturn(run func(string, interface{}) (bool, error)) *RedisClient_SIsMember_Call {
	_c.Call.Return(run)
	return _c
}

// SMembers provides a mock function with given fields: _a0
func (_m *RedisClient) SMembers(_a0 string) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SMembers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisClient_SMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SMembers'
type RedisClient_SMembers_Call struct {
	*mock.Call
}

// SMembers is a helper method to define mock.On call
//   - _a0 string
func (_e *RedisClient_Expecter) SMembers(_a0 interface{}) *RedisClient_SMembers_Call {
	return &RedisClient_SMembers_Call{Call: _e.mock.On("SMembers", _a0)}
}

func (_c *RedisClient_SMembers_Call) Run(run func(_a0 string)) *RedisClient_SMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RedisClient_SMembers_Call) Return(_a0 []string, _a1 error) *RedisClient_SMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisClient_SMembers_Call) RunAndReturn(run func(string) ([]string, error)) *RedisClient_SMembers_Call {
	_c.Call.Return(run)
	return _c
}

// SRem provides a mock function with given fields: _a0, _a1
func (_m *RedisClient) SRem(_a0 string, _a1 interface{}) (int64, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SRem")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedisClient_SRem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SRem'
type RedisClient_SRem_Call struct {
	*mock.Call
}

// SRem is a helper method to define mock.On call
//   - _a0 string
//   - _a1 interface{}
func (_e *RedisClient_Expecter) SRem(_a0 interface{}, _a1 interface{}) *RedisClient_SRem_Call {
	return &RedisClient_SRem_Call{Call: _e.mock.On("SRem", _a0, _a1)}
}

func (_c *RedisClient_SRem_Call) Run(run func(_a0 string, _a1 interface{})) *RedisClient_SRem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *RedisClient_SRem_Call) Return(_a0 int64, _a1 error) *RedisClient_SRem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedisClient_SRem_Call) RunAndReturn(run func(string, interface{}) (int64, error)) *RedisClient_SRem_Call {
	_c.Call.Return(run)
	return _c
}

// NewRedisClient creates a new instance of RedisClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisClient {
	mock := &RedisClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
