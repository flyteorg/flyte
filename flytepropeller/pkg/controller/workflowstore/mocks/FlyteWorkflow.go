// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// FlyteWorkflow is an autogenerated mock type for the FlyteWorkflow type
type FlyteWorkflow struct {
	mock.Mock
}

type FlyteWorkflow_Expecter struct {
	mock *mock.Mock
}

func (_m *FlyteWorkflow) EXPECT() *FlyteWorkflow_Expecter {
	return &FlyteWorkflow_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, namespace, name
func (_m *FlyteWorkflow) Get(ctx context.Context, namespace string, name string) (*v1alpha1.FlyteWorkflow, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1alpha1.FlyteWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*v1alpha1.FlyteWorkflow, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v1alpha1.FlyteWorkflow); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.FlyteWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlyteWorkflow_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type FlyteWorkflow_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *FlyteWorkflow_Expecter) Get(ctx interface{}, namespace interface{}, name interface{}) *FlyteWorkflow_Get_Call {
	return &FlyteWorkflow_Get_Call{Call: _e.mock.On("Get", ctx, namespace, name)}
}

func (_c *FlyteWorkflow_Get_Call) Run(run func(ctx context.Context, namespace string, name string)) *FlyteWorkflow_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FlyteWorkflow_Get_Call) Return(_a0 *v1alpha1.FlyteWorkflow, _a1 error) *FlyteWorkflow_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlyteWorkflow_Get_Call) RunAndReturn(run func(context.Context, string, string) (*v1alpha1.FlyteWorkflow, error)) *FlyteWorkflow_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, workflow
func (_m *FlyteWorkflow) Update(ctx context.Context, workflow *v1alpha1.FlyteWorkflow) (*v1alpha1.FlyteWorkflow, error) {
	ret := _m.Called(ctx, workflow)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1alpha1.FlyteWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.FlyteWorkflow) (*v1alpha1.FlyteWorkflow, error)); ok {
		return rf(ctx, workflow)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.FlyteWorkflow) *v1alpha1.FlyteWorkflow); ok {
		r0 = rf(ctx, workflow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.FlyteWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.FlyteWorkflow) error); ok {
		r1 = rf(ctx, workflow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlyteWorkflow_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type FlyteWorkflow_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - workflow *v1alpha1.FlyteWorkflow
func (_e *FlyteWorkflow_Expecter) Update(ctx interface{}, workflow interface{}) *FlyteWorkflow_Update_Call {
	return &FlyteWorkflow_Update_Call{Call: _e.mock.On("Update", ctx, workflow)}
}

func (_c *FlyteWorkflow_Update_Call) Run(run func(ctx context.Context, workflow *v1alpha1.FlyteWorkflow)) *FlyteWorkflow_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.FlyteWorkflow))
	})
	return _c
}

func (_c *FlyteWorkflow_Update_Call) Return(newWF *v1alpha1.FlyteWorkflow, err error) *FlyteWorkflow_Update_Call {
	_c.Call.Return(newWF, err)
	return _c
}

func (_c *FlyteWorkflow_Update_Call) RunAndReturn(run func(context.Context, *v1alpha1.FlyteWorkflow) (*v1alpha1.FlyteWorkflow, error)) *FlyteWorkflow_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewFlyteWorkflow creates a new instance of FlyteWorkflow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlyteWorkflow(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlyteWorkflow {
	mock := &FlyteWorkflow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
