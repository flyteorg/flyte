// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	time "time"

	storage "github.com/flyteorg/flyte/flytestdlib/storage"
	mock "github.com/stretchr/testify/mock"
)

// ExecutableTaskNodeStatus is an autogenerated mock type for the ExecutableTaskNodeStatus type
type ExecutableTaskNodeStatus struct {
	mock.Mock
}

type ExecutableTaskNodeStatus_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableTaskNodeStatus) EXPECT() *ExecutableTaskNodeStatus_Expecter {
	return &ExecutableTaskNodeStatus_Expecter{mock: &_m.Mock}
}

// GetBarrierClockTick provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetBarrierClockTick() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBarrierClockTick")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutableTaskNodeStatus_GetBarrierClockTick_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBarrierClockTick'
type ExecutableTaskNodeStatus_GetBarrierClockTick_Call struct {
	*mock.Call
}

// GetBarrierClockTick is a helper method to define mock.On call
func (_e *ExecutableTaskNodeStatus_Expecter) GetBarrierClockTick() *ExecutableTaskNodeStatus_GetBarrierClockTick_Call {
	return &ExecutableTaskNodeStatus_GetBarrierClockTick_Call{Call: _e.mock.On("GetBarrierClockTick")}
}

func (_c *ExecutableTaskNodeStatus_GetBarrierClockTick_Call) Run(run func()) *ExecutableTaskNodeStatus_GetBarrierClockTick_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetBarrierClockTick_Call) Return(_a0 uint32) *ExecutableTaskNodeStatus_GetBarrierClockTick_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetBarrierClockTick_Call) RunAndReturn(run func() uint32) *ExecutableTaskNodeStatus_GetBarrierClockTick_Call {
	_c.Call.Return(run)
	return _c
}

// GetCleanupOnFailure provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetCleanupOnFailure() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCleanupOnFailure")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutableTaskNodeStatus_GetCleanupOnFailure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCleanupOnFailure'
type ExecutableTaskNodeStatus_GetCleanupOnFailure_Call struct {
	*mock.Call
}

// GetCleanupOnFailure is a helper method to define mock.On call
func (_e *ExecutableTaskNodeStatus_Expecter) GetCleanupOnFailure() *ExecutableTaskNodeStatus_GetCleanupOnFailure_Call {
	return &ExecutableTaskNodeStatus_GetCleanupOnFailure_Call{Call: _e.mock.On("GetCleanupOnFailure")}
}

func (_c *ExecutableTaskNodeStatus_GetCleanupOnFailure_Call) Run(run func()) *ExecutableTaskNodeStatus_GetCleanupOnFailure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetCleanupOnFailure_Call) Return(_a0 bool) *ExecutableTaskNodeStatus_GetCleanupOnFailure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetCleanupOnFailure_Call) RunAndReturn(run func() bool) *ExecutableTaskNodeStatus_GetCleanupOnFailure_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastPhaseUpdatedAt provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetLastPhaseUpdatedAt() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastPhaseUpdatedAt")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// ExecutableTaskNodeStatus_GetLastPhaseUpdatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastPhaseUpdatedAt'
type ExecutableTaskNodeStatus_GetLastPhaseUpdatedAt_Call struct {
	*mock.Call
}

// GetLastPhaseUpdatedAt is a helper method to define mock.On call
func (_e *ExecutableTaskNodeStatus_Expecter) GetLastPhaseUpdatedAt() *ExecutableTaskNodeStatus_GetLastPhaseUpdatedAt_Call {
	return &ExecutableTaskNodeStatus_GetLastPhaseUpdatedAt_Call{Call: _e.mock.On("GetLastPhaseUpdatedAt")}
}

func (_c *ExecutableTaskNodeStatus_GetLastPhaseUpdatedAt_Call) Run(run func()) *ExecutableTaskNodeStatus_GetLastPhaseUpdatedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetLastPhaseUpdatedAt_Call) Return(_a0 time.Time) *ExecutableTaskNodeStatus_GetLastPhaseUpdatedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetLastPhaseUpdatedAt_Call) RunAndReturn(run func() time.Time) *ExecutableTaskNodeStatus_GetLastPhaseUpdatedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhase provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetPhase() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPhase")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ExecutableTaskNodeStatus_GetPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhase'
type ExecutableTaskNodeStatus_GetPhase_Call struct {
	*mock.Call
}

// GetPhase is a helper method to define mock.On call
func (_e *ExecutableTaskNodeStatus_Expecter) GetPhase() *ExecutableTaskNodeStatus_GetPhase_Call {
	return &ExecutableTaskNodeStatus_GetPhase_Call{Call: _e.mock.On("GetPhase")}
}

func (_c *ExecutableTaskNodeStatus_GetPhase_Call) Run(run func()) *ExecutableTaskNodeStatus_GetPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetPhase_Call) Return(_a0 int) *ExecutableTaskNodeStatus_GetPhase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetPhase_Call) RunAndReturn(run func() int) *ExecutableTaskNodeStatus_GetPhase_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhaseVersion provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetPhaseVersion() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPhaseVersion")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutableTaskNodeStatus_GetPhaseVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhaseVersion'
type ExecutableTaskNodeStatus_GetPhaseVersion_Call struct {
	*mock.Call
}

// GetPhaseVersion is a helper method to define mock.On call
func (_e *ExecutableTaskNodeStatus_Expecter) GetPhaseVersion() *ExecutableTaskNodeStatus_GetPhaseVersion_Call {
	return &ExecutableTaskNodeStatus_GetPhaseVersion_Call{Call: _e.mock.On("GetPhaseVersion")}
}

func (_c *ExecutableTaskNodeStatus_GetPhaseVersion_Call) Run(run func()) *ExecutableTaskNodeStatus_GetPhaseVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetPhaseVersion_Call) Return(_a0 uint32) *ExecutableTaskNodeStatus_GetPhaseVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetPhaseVersion_Call) RunAndReturn(run func() uint32) *ExecutableTaskNodeStatus_GetPhaseVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetPluginState provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetPluginState() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPluginState")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ExecutableTaskNodeStatus_GetPluginState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPluginState'
type ExecutableTaskNodeStatus_GetPluginState_Call struct {
	*mock.Call
}

// GetPluginState is a helper method to define mock.On call
func (_e *ExecutableTaskNodeStatus_Expecter) GetPluginState() *ExecutableTaskNodeStatus_GetPluginState_Call {
	return &ExecutableTaskNodeStatus_GetPluginState_Call{Call: _e.mock.On("GetPluginState")}
}

func (_c *ExecutableTaskNodeStatus_GetPluginState_Call) Run(run func()) *ExecutableTaskNodeStatus_GetPluginState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetPluginState_Call) Return(_a0 []byte) *ExecutableTaskNodeStatus_GetPluginState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetPluginState_Call) RunAndReturn(run func() []byte) *ExecutableTaskNodeStatus_GetPluginState_Call {
	_c.Call.Return(run)
	return _c
}

// GetPluginStateVersion provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetPluginStateVersion() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPluginStateVersion")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutableTaskNodeStatus_GetPluginStateVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPluginStateVersion'
type ExecutableTaskNodeStatus_GetPluginStateVersion_Call struct {
	*mock.Call
}

// GetPluginStateVersion is a helper method to define mock.On call
func (_e *ExecutableTaskNodeStatus_Expecter) GetPluginStateVersion() *ExecutableTaskNodeStatus_GetPluginStateVersion_Call {
	return &ExecutableTaskNodeStatus_GetPluginStateVersion_Call{Call: _e.mock.On("GetPluginStateVersion")}
}

func (_c *ExecutableTaskNodeStatus_GetPluginStateVersion_Call) Run(run func()) *ExecutableTaskNodeStatus_GetPluginStateVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetPluginStateVersion_Call) Return(_a0 uint32) *ExecutableTaskNodeStatus_GetPluginStateVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetPluginStateVersion_Call) RunAndReturn(run func() uint32) *ExecutableTaskNodeStatus_GetPluginStateVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetPreviousNodeExecutionCheckpointPath provides a mock function with given fields:
func (_m *ExecutableTaskNodeStatus) GetPreviousNodeExecutionCheckpointPath() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPreviousNodeExecutionCheckpointPath")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// ExecutableTaskNodeStatus_GetPreviousNodeExecutionCheckpointPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPreviousNodeExecutionCheckpointPath'
type ExecutableTaskNodeStatus_GetPreviousNodeExecutionCheckpointPath_Call struct {
	*mock.Call
}

// GetPreviousNodeExecutionCheckpointPath is a helper method to define mock.On call
func (_e *ExecutableTaskNodeStatus_Expecter) GetPreviousNodeExecutionCheckpointPath() *ExecutableTaskNodeStatus_GetPreviousNodeExecutionCheckpointPath_Call {
	return &ExecutableTaskNodeStatus_GetPreviousNodeExecutionCheckpointPath_Call{Call: _e.mock.On("GetPreviousNodeExecutionCheckpointPath")}
}

func (_c *ExecutableTaskNodeStatus_GetPreviousNodeExecutionCheckpointPath_Call) Run(run func()) *ExecutableTaskNodeStatus_GetPreviousNodeExecutionCheckpointPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetPreviousNodeExecutionCheckpointPath_Call) Return(_a0 storage.DataReference) *ExecutableTaskNodeStatus_GetPreviousNodeExecutionCheckpointPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableTaskNodeStatus_GetPreviousNodeExecutionCheckpointPath_Call) RunAndReturn(run func() storage.DataReference) *ExecutableTaskNodeStatus_GetPreviousNodeExecutionCheckpointPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutableTaskNodeStatus creates a new instance of ExecutableTaskNodeStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableTaskNodeStatus(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableTaskNodeStatus {
	mock := &ExecutableTaskNodeStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
