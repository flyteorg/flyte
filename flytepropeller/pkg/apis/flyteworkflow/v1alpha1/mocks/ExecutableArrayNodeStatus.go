// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	bitarray "github.com/flyteorg/flyte/flytestdlib/bitarray"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ExecutableArrayNodeStatus is an autogenerated mock type for the ExecutableArrayNodeStatus type
type ExecutableArrayNodeStatus struct {
	mock.Mock
}

type ExecutableArrayNodeStatus_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableArrayNodeStatus) EXPECT() *ExecutableArrayNodeStatus_Expecter {
	return &ExecutableArrayNodeStatus_Expecter{mock: &_m.Mock}
}

// GetArrayNodePhase provides a mock function with no fields
func (_m *ExecutableArrayNodeStatus) GetArrayNodePhase() v1alpha1.ArrayNodePhase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArrayNodePhase")
	}

	var r0 v1alpha1.ArrayNodePhase
	if rf, ok := ret.Get(0).(func() v1alpha1.ArrayNodePhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.ArrayNodePhase)
	}

	return r0
}

// ExecutableArrayNodeStatus_GetArrayNodePhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArrayNodePhase'
type ExecutableArrayNodeStatus_GetArrayNodePhase_Call struct {
	*mock.Call
}

// GetArrayNodePhase is a helper method to define mock.On call
func (_e *ExecutableArrayNodeStatus_Expecter) GetArrayNodePhase() *ExecutableArrayNodeStatus_GetArrayNodePhase_Call {
	return &ExecutableArrayNodeStatus_GetArrayNodePhase_Call{Call: _e.mock.On("GetArrayNodePhase")}
}

func (_c *ExecutableArrayNodeStatus_GetArrayNodePhase_Call) Run(run func()) *ExecutableArrayNodeStatus_GetArrayNodePhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetArrayNodePhase_Call) Return(_a0 v1alpha1.ArrayNodePhase) *ExecutableArrayNodeStatus_GetArrayNodePhase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetArrayNodePhase_Call) RunAndReturn(run func() v1alpha1.ArrayNodePhase) *ExecutableArrayNodeStatus_GetArrayNodePhase_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionError provides a mock function with no fields
func (_m *ExecutableArrayNodeStatus) GetExecutionError() *core.ExecutionError {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionError")
	}

	var r0 *core.ExecutionError
	if rf, ok := ret.Get(0).(func() *core.ExecutionError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ExecutionError)
		}
	}

	return r0
}

// ExecutableArrayNodeStatus_GetExecutionError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionError'
type ExecutableArrayNodeStatus_GetExecutionError_Call struct {
	*mock.Call
}

// GetExecutionError is a helper method to define mock.On call
func (_e *ExecutableArrayNodeStatus_Expecter) GetExecutionError() *ExecutableArrayNodeStatus_GetExecutionError_Call {
	return &ExecutableArrayNodeStatus_GetExecutionError_Call{Call: _e.mock.On("GetExecutionError")}
}

func (_c *ExecutableArrayNodeStatus_GetExecutionError_Call) Run(run func()) *ExecutableArrayNodeStatus_GetExecutionError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetExecutionError_Call) Return(_a0 *core.ExecutionError) *ExecutableArrayNodeStatus_GetExecutionError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetExecutionError_Call) RunAndReturn(run func() *core.ExecutionError) *ExecutableArrayNodeStatus_GetExecutionError_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubNodeDeltaTimestamps provides a mock function with no fields
func (_m *ExecutableArrayNodeStatus) GetSubNodeDeltaTimestamps() bitarray.CompactArray {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubNodeDeltaTimestamps")
	}

	var r0 bitarray.CompactArray
	if rf, ok := ret.Get(0).(func() bitarray.CompactArray); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bitarray.CompactArray)
	}

	return r0
}

// ExecutableArrayNodeStatus_GetSubNodeDeltaTimestamps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubNodeDeltaTimestamps'
type ExecutableArrayNodeStatus_GetSubNodeDeltaTimestamps_Call struct {
	*mock.Call
}

// GetSubNodeDeltaTimestamps is a helper method to define mock.On call
func (_e *ExecutableArrayNodeStatus_Expecter) GetSubNodeDeltaTimestamps() *ExecutableArrayNodeStatus_GetSubNodeDeltaTimestamps_Call {
	return &ExecutableArrayNodeStatus_GetSubNodeDeltaTimestamps_Call{Call: _e.mock.On("GetSubNodeDeltaTimestamps")}
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeDeltaTimestamps_Call) Run(run func()) *ExecutableArrayNodeStatus_GetSubNodeDeltaTimestamps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeDeltaTimestamps_Call) Return(_a0 bitarray.CompactArray) *ExecutableArrayNodeStatus_GetSubNodeDeltaTimestamps_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeDeltaTimestamps_Call) RunAndReturn(run func() bitarray.CompactArray) *ExecutableArrayNodeStatus_GetSubNodeDeltaTimestamps_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubNodePhases provides a mock function with no fields
func (_m *ExecutableArrayNodeStatus) GetSubNodePhases() bitarray.CompactArray {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubNodePhases")
	}

	var r0 bitarray.CompactArray
	if rf, ok := ret.Get(0).(func() bitarray.CompactArray); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bitarray.CompactArray)
	}

	return r0
}

// ExecutableArrayNodeStatus_GetSubNodePhases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubNodePhases'
type ExecutableArrayNodeStatus_GetSubNodePhases_Call struct {
	*mock.Call
}

// GetSubNodePhases is a helper method to define mock.On call
func (_e *ExecutableArrayNodeStatus_Expecter) GetSubNodePhases() *ExecutableArrayNodeStatus_GetSubNodePhases_Call {
	return &ExecutableArrayNodeStatus_GetSubNodePhases_Call{Call: _e.mock.On("GetSubNodePhases")}
}

func (_c *ExecutableArrayNodeStatus_GetSubNodePhases_Call) Run(run func()) *ExecutableArrayNodeStatus_GetSubNodePhases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetSubNodePhases_Call) Return(_a0 bitarray.CompactArray) *ExecutableArrayNodeStatus_GetSubNodePhases_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetSubNodePhases_Call) RunAndReturn(run func() bitarray.CompactArray) *ExecutableArrayNodeStatus_GetSubNodePhases_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubNodeRetryAttempts provides a mock function with no fields
func (_m *ExecutableArrayNodeStatus) GetSubNodeRetryAttempts() bitarray.CompactArray {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubNodeRetryAttempts")
	}

	var r0 bitarray.CompactArray
	if rf, ok := ret.Get(0).(func() bitarray.CompactArray); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bitarray.CompactArray)
	}

	return r0
}

// ExecutableArrayNodeStatus_GetSubNodeRetryAttempts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubNodeRetryAttempts'
type ExecutableArrayNodeStatus_GetSubNodeRetryAttempts_Call struct {
	*mock.Call
}

// GetSubNodeRetryAttempts is a helper method to define mock.On call
func (_e *ExecutableArrayNodeStatus_Expecter) GetSubNodeRetryAttempts() *ExecutableArrayNodeStatus_GetSubNodeRetryAttempts_Call {
	return &ExecutableArrayNodeStatus_GetSubNodeRetryAttempts_Call{Call: _e.mock.On("GetSubNodeRetryAttempts")}
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeRetryAttempts_Call) Run(run func()) *ExecutableArrayNodeStatus_GetSubNodeRetryAttempts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeRetryAttempts_Call) Return(_a0 bitarray.CompactArray) *ExecutableArrayNodeStatus_GetSubNodeRetryAttempts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeRetryAttempts_Call) RunAndReturn(run func() bitarray.CompactArray) *ExecutableArrayNodeStatus_GetSubNodeRetryAttempts_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubNodeSystemFailures provides a mock function with no fields
func (_m *ExecutableArrayNodeStatus) GetSubNodeSystemFailures() bitarray.CompactArray {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubNodeSystemFailures")
	}

	var r0 bitarray.CompactArray
	if rf, ok := ret.Get(0).(func() bitarray.CompactArray); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bitarray.CompactArray)
	}

	return r0
}

// ExecutableArrayNodeStatus_GetSubNodeSystemFailures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubNodeSystemFailures'
type ExecutableArrayNodeStatus_GetSubNodeSystemFailures_Call struct {
	*mock.Call
}

// GetSubNodeSystemFailures is a helper method to define mock.On call
func (_e *ExecutableArrayNodeStatus_Expecter) GetSubNodeSystemFailures() *ExecutableArrayNodeStatus_GetSubNodeSystemFailures_Call {
	return &ExecutableArrayNodeStatus_GetSubNodeSystemFailures_Call{Call: _e.mock.On("GetSubNodeSystemFailures")}
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeSystemFailures_Call) Run(run func()) *ExecutableArrayNodeStatus_GetSubNodeSystemFailures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeSystemFailures_Call) Return(_a0 bitarray.CompactArray) *ExecutableArrayNodeStatus_GetSubNodeSystemFailures_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeSystemFailures_Call) RunAndReturn(run func() bitarray.CompactArray) *ExecutableArrayNodeStatus_GetSubNodeSystemFailures_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubNodeTaskPhases provides a mock function with no fields
func (_m *ExecutableArrayNodeStatus) GetSubNodeTaskPhases() bitarray.CompactArray {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubNodeTaskPhases")
	}

	var r0 bitarray.CompactArray
	if rf, ok := ret.Get(0).(func() bitarray.CompactArray); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bitarray.CompactArray)
	}

	return r0
}

// ExecutableArrayNodeStatus_GetSubNodeTaskPhases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubNodeTaskPhases'
type ExecutableArrayNodeStatus_GetSubNodeTaskPhases_Call struct {
	*mock.Call
}

// GetSubNodeTaskPhases is a helper method to define mock.On call
func (_e *ExecutableArrayNodeStatus_Expecter) GetSubNodeTaskPhases() *ExecutableArrayNodeStatus_GetSubNodeTaskPhases_Call {
	return &ExecutableArrayNodeStatus_GetSubNodeTaskPhases_Call{Call: _e.mock.On("GetSubNodeTaskPhases")}
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeTaskPhases_Call) Run(run func()) *ExecutableArrayNodeStatus_GetSubNodeTaskPhases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeTaskPhases_Call) Return(_a0 bitarray.CompactArray) *ExecutableArrayNodeStatus_GetSubNodeTaskPhases_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetSubNodeTaskPhases_Call) RunAndReturn(run func() bitarray.CompactArray) *ExecutableArrayNodeStatus_GetSubNodeTaskPhases_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskPhaseVersion provides a mock function with no fields
func (_m *ExecutableArrayNodeStatus) GetTaskPhaseVersion() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskPhaseVersion")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutableArrayNodeStatus_GetTaskPhaseVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskPhaseVersion'
type ExecutableArrayNodeStatus_GetTaskPhaseVersion_Call struct {
	*mock.Call
}

// GetTaskPhaseVersion is a helper method to define mock.On call
func (_e *ExecutableArrayNodeStatus_Expecter) GetTaskPhaseVersion() *ExecutableArrayNodeStatus_GetTaskPhaseVersion_Call {
	return &ExecutableArrayNodeStatus_GetTaskPhaseVersion_Call{Call: _e.mock.On("GetTaskPhaseVersion")}
}

func (_c *ExecutableArrayNodeStatus_GetTaskPhaseVersion_Call) Run(run func()) *ExecutableArrayNodeStatus_GetTaskPhaseVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetTaskPhaseVersion_Call) Return(_a0 uint32) *ExecutableArrayNodeStatus_GetTaskPhaseVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNodeStatus_GetTaskPhaseVersion_Call) RunAndReturn(run func() uint32) *ExecutableArrayNodeStatus_GetTaskPhaseVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutableArrayNodeStatus creates a new instance of ExecutableArrayNodeStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableArrayNodeStatus(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableArrayNodeStatus {
	mock := &ExecutableArrayNodeStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
