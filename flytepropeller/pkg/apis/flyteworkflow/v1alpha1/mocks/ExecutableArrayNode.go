// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// ExecutableArrayNode is an autogenerated mock type for the ExecutableArrayNode type
type ExecutableArrayNode struct {
	mock.Mock
}

type ExecutableArrayNode_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableArrayNode) EXPECT() *ExecutableArrayNode_Expecter {
	return &ExecutableArrayNode_Expecter{mock: &_m.Mock}
}

// GetBoundInputs provides a mock function with no fields
func (_m *ExecutableArrayNode) GetBoundInputs() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBoundInputs")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ExecutableArrayNode_GetBoundInputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoundInputs'
type ExecutableArrayNode_GetBoundInputs_Call struct {
	*mock.Call
}

// GetBoundInputs is a helper method to define mock.On call
func (_e *ExecutableArrayNode_Expecter) GetBoundInputs() *ExecutableArrayNode_GetBoundInputs_Call {
	return &ExecutableArrayNode_GetBoundInputs_Call{Call: _e.mock.On("GetBoundInputs")}
}

func (_c *ExecutableArrayNode_GetBoundInputs_Call) Run(run func()) *ExecutableArrayNode_GetBoundInputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNode_GetBoundInputs_Call) Return(_a0 []string) *ExecutableArrayNode_GetBoundInputs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNode_GetBoundInputs_Call) RunAndReturn(run func() []string) *ExecutableArrayNode_GetBoundInputs_Call {
	_c.Call.Return(run)
	return _c
}

// GetMinSuccessRatio provides a mock function with no fields
func (_m *ExecutableArrayNode) GetMinSuccessRatio() *float32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMinSuccessRatio")
	}

	var r0 *float32
	if rf, ok := ret.Get(0).(func() *float32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*float32)
		}
	}

	return r0
}

// ExecutableArrayNode_GetMinSuccessRatio_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMinSuccessRatio'
type ExecutableArrayNode_GetMinSuccessRatio_Call struct {
	*mock.Call
}

// GetMinSuccessRatio is a helper method to define mock.On call
func (_e *ExecutableArrayNode_Expecter) GetMinSuccessRatio() *ExecutableArrayNode_GetMinSuccessRatio_Call {
	return &ExecutableArrayNode_GetMinSuccessRatio_Call{Call: _e.mock.On("GetMinSuccessRatio")}
}

func (_c *ExecutableArrayNode_GetMinSuccessRatio_Call) Run(run func()) *ExecutableArrayNode_GetMinSuccessRatio_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNode_GetMinSuccessRatio_Call) Return(_a0 *float32) *ExecutableArrayNode_GetMinSuccessRatio_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNode_GetMinSuccessRatio_Call) RunAndReturn(run func() *float32) *ExecutableArrayNode_GetMinSuccessRatio_Call {
	_c.Call.Return(run)
	return _c
}

// GetMinSuccesses provides a mock function with no fields
func (_m *ExecutableArrayNode) GetMinSuccesses() *uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMinSuccesses")
	}

	var r0 *uint32
	if rf, ok := ret.Get(0).(func() *uint32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint32)
		}
	}

	return r0
}

// ExecutableArrayNode_GetMinSuccesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMinSuccesses'
type ExecutableArrayNode_GetMinSuccesses_Call struct {
	*mock.Call
}

// GetMinSuccesses is a helper method to define mock.On call
func (_e *ExecutableArrayNode_Expecter) GetMinSuccesses() *ExecutableArrayNode_GetMinSuccesses_Call {
	return &ExecutableArrayNode_GetMinSuccesses_Call{Call: _e.mock.On("GetMinSuccesses")}
}

func (_c *ExecutableArrayNode_GetMinSuccesses_Call) Run(run func()) *ExecutableArrayNode_GetMinSuccesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNode_GetMinSuccesses_Call) Return(_a0 *uint32) *ExecutableArrayNode_GetMinSuccesses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNode_GetMinSuccesses_Call) RunAndReturn(run func() *uint32) *ExecutableArrayNode_GetMinSuccesses_Call {
	_c.Call.Return(run)
	return _c
}

// GetParallelism provides a mock function with no fields
func (_m *ExecutableArrayNode) GetParallelism() *uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParallelism")
	}

	var r0 *uint32
	if rf, ok := ret.Get(0).(func() *uint32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint32)
		}
	}

	return r0
}

// ExecutableArrayNode_GetParallelism_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParallelism'
type ExecutableArrayNode_GetParallelism_Call struct {
	*mock.Call
}

// GetParallelism is a helper method to define mock.On call
func (_e *ExecutableArrayNode_Expecter) GetParallelism() *ExecutableArrayNode_GetParallelism_Call {
	return &ExecutableArrayNode_GetParallelism_Call{Call: _e.mock.On("GetParallelism")}
}

func (_c *ExecutableArrayNode_GetParallelism_Call) Run(run func()) *ExecutableArrayNode_GetParallelism_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNode_GetParallelism_Call) Return(_a0 *uint32) *ExecutableArrayNode_GetParallelism_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNode_GetParallelism_Call) RunAndReturn(run func() *uint32) *ExecutableArrayNode_GetParallelism_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubNodeSpec provides a mock function with no fields
func (_m *ExecutableArrayNode) GetSubNodeSpec() *v1alpha1.NodeSpec {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubNodeSpec")
	}

	var r0 *v1alpha1.NodeSpec
	if rf, ok := ret.Get(0).(func() *v1alpha1.NodeSpec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.NodeSpec)
		}
	}

	return r0
}

// ExecutableArrayNode_GetSubNodeSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubNodeSpec'
type ExecutableArrayNode_GetSubNodeSpec_Call struct {
	*mock.Call
}

// GetSubNodeSpec is a helper method to define mock.On call
func (_e *ExecutableArrayNode_Expecter) GetSubNodeSpec() *ExecutableArrayNode_GetSubNodeSpec_Call {
	return &ExecutableArrayNode_GetSubNodeSpec_Call{Call: _e.mock.On("GetSubNodeSpec")}
}

func (_c *ExecutableArrayNode_GetSubNodeSpec_Call) Run(run func()) *ExecutableArrayNode_GetSubNodeSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableArrayNode_GetSubNodeSpec_Call) Return(_a0 *v1alpha1.NodeSpec) *ExecutableArrayNode_GetSubNodeSpec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableArrayNode_GetSubNodeSpec_Call) RunAndReturn(run func() *v1alpha1.NodeSpec) *ExecutableArrayNode_GetSubNodeSpec_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutableArrayNode creates a new instance of ExecutableArrayNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableArrayNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableArrayNode {
	mock := &ExecutableArrayNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
