// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ExecutionTimeInfo is an autogenerated mock type for the ExecutionTimeInfo type
type ExecutionTimeInfo struct {
	mock.Mock
}

type ExecutionTimeInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutionTimeInfo) EXPECT() *ExecutionTimeInfo_Expecter {
	return &ExecutionTimeInfo_Expecter{mock: &_m.Mock}
}

// GetLastUpdatedAt provides a mock function with given fields:
func (_m *ExecutionTimeInfo) GetLastUpdatedAt() *v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastUpdatedAt")
	}

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

// ExecutionTimeInfo_GetLastUpdatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastUpdatedAt'
type ExecutionTimeInfo_GetLastUpdatedAt_Call struct {
	*mock.Call
}

// GetLastUpdatedAt is a helper method to define mock.On call
func (_e *ExecutionTimeInfo_Expecter) GetLastUpdatedAt() *ExecutionTimeInfo_GetLastUpdatedAt_Call {
	return &ExecutionTimeInfo_GetLastUpdatedAt_Call{Call: _e.mock.On("GetLastUpdatedAt")}
}

func (_c *ExecutionTimeInfo_GetLastUpdatedAt_Call) Run(run func()) *ExecutionTimeInfo_GetLastUpdatedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionTimeInfo_GetLastUpdatedAt_Call) Return(_a0 *v1.Time) *ExecutionTimeInfo_GetLastUpdatedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionTimeInfo_GetLastUpdatedAt_Call) RunAndReturn(run func() *v1.Time) *ExecutionTimeInfo_GetLastUpdatedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartedAt provides a mock function with given fields:
func (_m *ExecutionTimeInfo) GetStartedAt() *v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStartedAt")
	}

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

// ExecutionTimeInfo_GetStartedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartedAt'
type ExecutionTimeInfo_GetStartedAt_Call struct {
	*mock.Call
}

// GetStartedAt is a helper method to define mock.On call
func (_e *ExecutionTimeInfo_Expecter) GetStartedAt() *ExecutionTimeInfo_GetStartedAt_Call {
	return &ExecutionTimeInfo_GetStartedAt_Call{Call: _e.mock.On("GetStartedAt")}
}

func (_c *ExecutionTimeInfo_GetStartedAt_Call) Run(run func()) *ExecutionTimeInfo_GetStartedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionTimeInfo_GetStartedAt_Call) Return(_a0 *v1.Time) *ExecutionTimeInfo_GetStartedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionTimeInfo_GetStartedAt_Call) RunAndReturn(run func() *v1.Time) *ExecutionTimeInfo_GetStartedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoppedAt provides a mock function with given fields:
func (_m *ExecutionTimeInfo) GetStoppedAt() *v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoppedAt")
	}

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

// ExecutionTimeInfo_GetStoppedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoppedAt'
type ExecutionTimeInfo_GetStoppedAt_Call struct {
	*mock.Call
}

// GetStoppedAt is a helper method to define mock.On call
func (_e *ExecutionTimeInfo_Expecter) GetStoppedAt() *ExecutionTimeInfo_GetStoppedAt_Call {
	return &ExecutionTimeInfo_GetStoppedAt_Call{Call: _e.mock.On("GetStoppedAt")}
}

func (_c *ExecutionTimeInfo_GetStoppedAt_Call) Run(run func()) *ExecutionTimeInfo_GetStoppedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutionTimeInfo_GetStoppedAt_Call) Return(_a0 *v1.Time) *ExecutionTimeInfo_GetStoppedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutionTimeInfo_GetStoppedAt_Call) RunAndReturn(run func() *v1.Time) *ExecutionTimeInfo_GetStoppedAt_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutionTimeInfo creates a new instance of ExecutionTimeInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionTimeInfo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionTimeInfo {
	mock := &ExecutionTimeInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
