// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// MutableDynamicNodeStatus is an autogenerated mock type for the MutableDynamicNodeStatus type
type MutableDynamicNodeStatus struct {
	mock.Mock
}

type MutableDynamicNodeStatus_Expecter struct {
	mock *mock.Mock
}

func (_m *MutableDynamicNodeStatus) EXPECT() *MutableDynamicNodeStatus_Expecter {
	return &MutableDynamicNodeStatus_Expecter{mock: &_m.Mock}
}

// GetDynamicNodePhase provides a mock function with given fields:
func (_m *MutableDynamicNodeStatus) GetDynamicNodePhase() v1alpha1.DynamicNodePhase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDynamicNodePhase")
	}

	var r0 v1alpha1.DynamicNodePhase
	if rf, ok := ret.Get(0).(func() v1alpha1.DynamicNodePhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.DynamicNodePhase)
	}

	return r0
}

// MutableDynamicNodeStatus_GetDynamicNodePhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamicNodePhase'
type MutableDynamicNodeStatus_GetDynamicNodePhase_Call struct {
	*mock.Call
}

// GetDynamicNodePhase is a helper method to define mock.On call
func (_e *MutableDynamicNodeStatus_Expecter) GetDynamicNodePhase() *MutableDynamicNodeStatus_GetDynamicNodePhase_Call {
	return &MutableDynamicNodeStatus_GetDynamicNodePhase_Call{Call: _e.mock.On("GetDynamicNodePhase")}
}

func (_c *MutableDynamicNodeStatus_GetDynamicNodePhase_Call) Run(run func()) *MutableDynamicNodeStatus_GetDynamicNodePhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableDynamicNodeStatus_GetDynamicNodePhase_Call) Return(_a0 v1alpha1.DynamicNodePhase) *MutableDynamicNodeStatus_GetDynamicNodePhase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableDynamicNodeStatus_GetDynamicNodePhase_Call) RunAndReturn(run func() v1alpha1.DynamicNodePhase) *MutableDynamicNodeStatus_GetDynamicNodePhase_Call {
	_c.Call.Return(run)
	return _c
}

// GetDynamicNodeReason provides a mock function with given fields:
func (_m *MutableDynamicNodeStatus) GetDynamicNodeReason() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDynamicNodeReason")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MutableDynamicNodeStatus_GetDynamicNodeReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamicNodeReason'
type MutableDynamicNodeStatus_GetDynamicNodeReason_Call struct {
	*mock.Call
}

// GetDynamicNodeReason is a helper method to define mock.On call
func (_e *MutableDynamicNodeStatus_Expecter) GetDynamicNodeReason() *MutableDynamicNodeStatus_GetDynamicNodeReason_Call {
	return &MutableDynamicNodeStatus_GetDynamicNodeReason_Call{Call: _e.mock.On("GetDynamicNodeReason")}
}

func (_c *MutableDynamicNodeStatus_GetDynamicNodeReason_Call) Run(run func()) *MutableDynamicNodeStatus_GetDynamicNodeReason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableDynamicNodeStatus_GetDynamicNodeReason_Call) Return(_a0 string) *MutableDynamicNodeStatus_GetDynamicNodeReason_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableDynamicNodeStatus_GetDynamicNodeReason_Call) RunAndReturn(run func() string) *MutableDynamicNodeStatus_GetDynamicNodeReason_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionError provides a mock function with given fields:
func (_m *MutableDynamicNodeStatus) GetExecutionError() *core.ExecutionError {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionError")
	}

	var r0 *core.ExecutionError
	if rf, ok := ret.Get(0).(func() *core.ExecutionError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ExecutionError)
		}
	}

	return r0
}

// MutableDynamicNodeStatus_GetExecutionError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionError'
type MutableDynamicNodeStatus_GetExecutionError_Call struct {
	*mock.Call
}

// GetExecutionError is a helper method to define mock.On call
func (_e *MutableDynamicNodeStatus_Expecter) GetExecutionError() *MutableDynamicNodeStatus_GetExecutionError_Call {
	return &MutableDynamicNodeStatus_GetExecutionError_Call{Call: _e.mock.On("GetExecutionError")}
}

func (_c *MutableDynamicNodeStatus_GetExecutionError_Call) Run(run func()) *MutableDynamicNodeStatus_GetExecutionError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableDynamicNodeStatus_GetExecutionError_Call) Return(_a0 *core.ExecutionError) *MutableDynamicNodeStatus_GetExecutionError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableDynamicNodeStatus_GetExecutionError_Call) RunAndReturn(run func() *core.ExecutionError) *MutableDynamicNodeStatus_GetExecutionError_Call {
	_c.Call.Return(run)
	return _c
}

// GetIsFailurePermanent provides a mock function with given fields:
func (_m *MutableDynamicNodeStatus) GetIsFailurePermanent() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIsFailurePermanent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MutableDynamicNodeStatus_GetIsFailurePermanent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIsFailurePermanent'
type MutableDynamicNodeStatus_GetIsFailurePermanent_Call struct {
	*mock.Call
}

// GetIsFailurePermanent is a helper method to define mock.On call
func (_e *MutableDynamicNodeStatus_Expecter) GetIsFailurePermanent() *MutableDynamicNodeStatus_GetIsFailurePermanent_Call {
	return &MutableDynamicNodeStatus_GetIsFailurePermanent_Call{Call: _e.mock.On("GetIsFailurePermanent")}
}

func (_c *MutableDynamicNodeStatus_GetIsFailurePermanent_Call) Run(run func()) *MutableDynamicNodeStatus_GetIsFailurePermanent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableDynamicNodeStatus_GetIsFailurePermanent_Call) Return(_a0 bool) *MutableDynamicNodeStatus_GetIsFailurePermanent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableDynamicNodeStatus_GetIsFailurePermanent_Call) RunAndReturn(run func() bool) *MutableDynamicNodeStatus_GetIsFailurePermanent_Call {
	_c.Call.Return(run)
	return _c
}

// IsDirty provides a mock function with given fields:
func (_m *MutableDynamicNodeStatus) IsDirty() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDirty")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MutableDynamicNodeStatus_IsDirty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDirty'
type MutableDynamicNodeStatus_IsDirty_Call struct {
	*mock.Call
}

// IsDirty is a helper method to define mock.On call
func (_e *MutableDynamicNodeStatus_Expecter) IsDirty() *MutableDynamicNodeStatus_IsDirty_Call {
	return &MutableDynamicNodeStatus_IsDirty_Call{Call: _e.mock.On("IsDirty")}
}

func (_c *MutableDynamicNodeStatus_IsDirty_Call) Run(run func()) *MutableDynamicNodeStatus_IsDirty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableDynamicNodeStatus_IsDirty_Call) Return(_a0 bool) *MutableDynamicNodeStatus_IsDirty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableDynamicNodeStatus_IsDirty_Call) RunAndReturn(run func() bool) *MutableDynamicNodeStatus_IsDirty_Call {
	_c.Call.Return(run)
	return _c
}

// SetDynamicNodePhase provides a mock function with given fields: phase
func (_m *MutableDynamicNodeStatus) SetDynamicNodePhase(phase v1alpha1.DynamicNodePhase) {
	_m.Called(phase)
}

// MutableDynamicNodeStatus_SetDynamicNodePhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDynamicNodePhase'
type MutableDynamicNodeStatus_SetDynamicNodePhase_Call struct {
	*mock.Call
}

// SetDynamicNodePhase is a helper method to define mock.On call
//   - phase v1alpha1.DynamicNodePhase
func (_e *MutableDynamicNodeStatus_Expecter) SetDynamicNodePhase(phase interface{}) *MutableDynamicNodeStatus_SetDynamicNodePhase_Call {
	return &MutableDynamicNodeStatus_SetDynamicNodePhase_Call{Call: _e.mock.On("SetDynamicNodePhase", phase)}
}

func (_c *MutableDynamicNodeStatus_SetDynamicNodePhase_Call) Run(run func(phase v1alpha1.DynamicNodePhase)) *MutableDynamicNodeStatus_SetDynamicNodePhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1alpha1.DynamicNodePhase))
	})
	return _c
}

func (_c *MutableDynamicNodeStatus_SetDynamicNodePhase_Call) Return() *MutableDynamicNodeStatus_SetDynamicNodePhase_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableDynamicNodeStatus_SetDynamicNodePhase_Call) RunAndReturn(run func(v1alpha1.DynamicNodePhase)) *MutableDynamicNodeStatus_SetDynamicNodePhase_Call {
	_c.Call.Return(run)
	return _c
}

// SetDynamicNodeReason provides a mock function with given fields: reason
func (_m *MutableDynamicNodeStatus) SetDynamicNodeReason(reason string) {
	_m.Called(reason)
}

// MutableDynamicNodeStatus_SetDynamicNodeReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDynamicNodeReason'
type MutableDynamicNodeStatus_SetDynamicNodeReason_Call struct {
	*mock.Call
}

// SetDynamicNodeReason is a helper method to define mock.On call
//   - reason string
func (_e *MutableDynamicNodeStatus_Expecter) SetDynamicNodeReason(reason interface{}) *MutableDynamicNodeStatus_SetDynamicNodeReason_Call {
	return &MutableDynamicNodeStatus_SetDynamicNodeReason_Call{Call: _e.mock.On("SetDynamicNodeReason", reason)}
}

func (_c *MutableDynamicNodeStatus_SetDynamicNodeReason_Call) Run(run func(reason string)) *MutableDynamicNodeStatus_SetDynamicNodeReason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MutableDynamicNodeStatus_SetDynamicNodeReason_Call) Return() *MutableDynamicNodeStatus_SetDynamicNodeReason_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableDynamicNodeStatus_SetDynamicNodeReason_Call) RunAndReturn(run func(string)) *MutableDynamicNodeStatus_SetDynamicNodeReason_Call {
	_c.Call.Return(run)
	return _c
}

// SetExecutionError provides a mock function with given fields: executionError
func (_m *MutableDynamicNodeStatus) SetExecutionError(executionError *core.ExecutionError) {
	_m.Called(executionError)
}

// MutableDynamicNodeStatus_SetExecutionError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetExecutionError'
type MutableDynamicNodeStatus_SetExecutionError_Call struct {
	*mock.Call
}

// SetExecutionError is a helper method to define mock.On call
//   - executionError *core.ExecutionError
func (_e *MutableDynamicNodeStatus_Expecter) SetExecutionError(executionError interface{}) *MutableDynamicNodeStatus_SetExecutionError_Call {
	return &MutableDynamicNodeStatus_SetExecutionError_Call{Call: _e.mock.On("SetExecutionError", executionError)}
}

func (_c *MutableDynamicNodeStatus_SetExecutionError_Call) Run(run func(executionError *core.ExecutionError)) *MutableDynamicNodeStatus_SetExecutionError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.ExecutionError))
	})
	return _c
}

func (_c *MutableDynamicNodeStatus_SetExecutionError_Call) Return() *MutableDynamicNodeStatus_SetExecutionError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableDynamicNodeStatus_SetExecutionError_Call) RunAndReturn(run func(*core.ExecutionError)) *MutableDynamicNodeStatus_SetExecutionError_Call {
	_c.Call.Return(run)
	return _c
}

// SetIsFailurePermanent provides a mock function with given fields: isFailurePermanent
func (_m *MutableDynamicNodeStatus) SetIsFailurePermanent(isFailurePermanent bool) {
	_m.Called(isFailurePermanent)
}

// MutableDynamicNodeStatus_SetIsFailurePermanent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIsFailurePermanent'
type MutableDynamicNodeStatus_SetIsFailurePermanent_Call struct {
	*mock.Call
}

// SetIsFailurePermanent is a helper method to define mock.On call
//   - isFailurePermanent bool
func (_e *MutableDynamicNodeStatus_Expecter) SetIsFailurePermanent(isFailurePermanent interface{}) *MutableDynamicNodeStatus_SetIsFailurePermanent_Call {
	return &MutableDynamicNodeStatus_SetIsFailurePermanent_Call{Call: _e.mock.On("SetIsFailurePermanent", isFailurePermanent)}
}

func (_c *MutableDynamicNodeStatus_SetIsFailurePermanent_Call) Run(run func(isFailurePermanent bool)) *MutableDynamicNodeStatus_SetIsFailurePermanent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MutableDynamicNodeStatus_SetIsFailurePermanent_Call) Return() *MutableDynamicNodeStatus_SetIsFailurePermanent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableDynamicNodeStatus_SetIsFailurePermanent_Call) RunAndReturn(run func(bool)) *MutableDynamicNodeStatus_SetIsFailurePermanent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMutableDynamicNodeStatus creates a new instance of MutableDynamicNodeStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMutableDynamicNodeStatus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MutableDynamicNodeStatus {
	mock := &MutableDynamicNodeStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
