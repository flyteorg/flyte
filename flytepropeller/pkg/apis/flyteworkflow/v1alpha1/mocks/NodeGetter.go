// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// NodeGetter is an autogenerated mock type for the NodeGetter type
type NodeGetter struct {
	mock.Mock
}

type NodeGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeGetter) EXPECT() *NodeGetter_Expecter {
	return &NodeGetter_Expecter{mock: &_m.Mock}
}

// GetNode provides a mock function with given fields: nodeID
func (_m *NodeGetter) GetNode(nodeID string) (v1alpha1.ExecutableNode, bool) {
	ret := _m.Called(nodeID)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 v1alpha1.ExecutableNode
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (v1alpha1.ExecutableNode, bool)); ok {
		return rf(nodeID)
	}
	if rf, ok := ret.Get(0).(func(string) v1alpha1.ExecutableNode); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNode)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NodeGetter_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type NodeGetter_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - nodeID string
func (_e *NodeGetter_Expecter) GetNode(nodeID interface{}) *NodeGetter_GetNode_Call {
	return &NodeGetter_GetNode_Call{Call: _e.mock.On("GetNode", nodeID)}
}

func (_c *NodeGetter_GetNode_Call) Run(run func(nodeID string)) *NodeGetter_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *NodeGetter_GetNode_Call) Return(_a0 v1alpha1.ExecutableNode, _a1 bool) *NodeGetter_GetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeGetter_GetNode_Call) RunAndReturn(run func(string) (v1alpha1.ExecutableNode, bool)) *NodeGetter_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeGetter creates a new instance of NodeGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeGetter {
	mock := &NodeGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
