// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// BaseNode is an autogenerated mock type for the BaseNode type
type BaseNode struct {
	mock.Mock
}

type BaseNode_Expecter struct {
	mock *mock.Mock
}

func (_m *BaseNode) EXPECT() *BaseNode_Expecter {
	return &BaseNode_Expecter{mock: &_m.Mock}
}

// GetID provides a mock function with given fields:
func (_m *BaseNode) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// BaseNode_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type BaseNode_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *BaseNode_Expecter) GetID() *BaseNode_GetID_Call {
	return &BaseNode_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *BaseNode_GetID_Call) Run(run func()) *BaseNode_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BaseNode_GetID_Call) Return(_a0 string) *BaseNode_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BaseNode_GetID_Call) RunAndReturn(run func() string) *BaseNode_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetKind provides a mock function with given fields:
func (_m *BaseNode) GetKind() v1alpha1.NodeKind {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetKind")
	}

	var r0 v1alpha1.NodeKind
	if rf, ok := ret.Get(0).(func() v1alpha1.NodeKind); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.NodeKind)
	}

	return r0
}

// BaseNode_GetKind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKind'
type BaseNode_GetKind_Call struct {
	*mock.Call
}

// GetKind is a helper method to define mock.On call
func (_e *BaseNode_Expecter) GetKind() *BaseNode_GetKind_Call {
	return &BaseNode_GetKind_Call{Call: _e.mock.On("GetKind")}
}

func (_c *BaseNode_GetKind_Call) Run(run func()) *BaseNode_GetKind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BaseNode_GetKind_Call) Return(_a0 v1alpha1.NodeKind) *BaseNode_GetKind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BaseNode_GetKind_Call) RunAndReturn(run func() v1alpha1.NodeKind) *BaseNode_GetKind_Call {
	_c.Call.Return(run)
	return _c
}

// NewBaseNode creates a new instance of BaseNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseNode {
	mock := &BaseNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
