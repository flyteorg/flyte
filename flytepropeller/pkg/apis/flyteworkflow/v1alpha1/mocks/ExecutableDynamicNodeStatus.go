// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ExecutableDynamicNodeStatus is an autogenerated mock type for the ExecutableDynamicNodeStatus type
type ExecutableDynamicNodeStatus struct {
	mock.Mock
}

type ExecutableDynamicNodeStatus_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableDynamicNodeStatus) EXPECT() *ExecutableDynamicNodeStatus_Expecter {
	return &ExecutableDynamicNodeStatus_Expecter{mock: &_m.Mock}
}

// GetDynamicNodePhase provides a mock function with given fields:
func (_m *ExecutableDynamicNodeStatus) GetDynamicNodePhase() v1alpha1.DynamicNodePhase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDynamicNodePhase")
	}

	var r0 v1alpha1.DynamicNodePhase
	if rf, ok := ret.Get(0).(func() v1alpha1.DynamicNodePhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.DynamicNodePhase)
	}

	return r0
}

// ExecutableDynamicNodeStatus_GetDynamicNodePhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamicNodePhase'
type ExecutableDynamicNodeStatus_GetDynamicNodePhase_Call struct {
	*mock.Call
}

// GetDynamicNodePhase is a helper method to define mock.On call
func (_e *ExecutableDynamicNodeStatus_Expecter) GetDynamicNodePhase() *ExecutableDynamicNodeStatus_GetDynamicNodePhase_Call {
	return &ExecutableDynamicNodeStatus_GetDynamicNodePhase_Call{Call: _e.mock.On("GetDynamicNodePhase")}
}

func (_c *ExecutableDynamicNodeStatus_GetDynamicNodePhase_Call) Run(run func()) *ExecutableDynamicNodeStatus_GetDynamicNodePhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableDynamicNodeStatus_GetDynamicNodePhase_Call) Return(_a0 v1alpha1.DynamicNodePhase) *ExecutableDynamicNodeStatus_GetDynamicNodePhase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableDynamicNodeStatus_GetDynamicNodePhase_Call) RunAndReturn(run func() v1alpha1.DynamicNodePhase) *ExecutableDynamicNodeStatus_GetDynamicNodePhase_Call {
	_c.Call.Return(run)
	return _c
}

// GetDynamicNodeReason provides a mock function with given fields:
func (_m *ExecutableDynamicNodeStatus) GetDynamicNodeReason() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDynamicNodeReason")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableDynamicNodeStatus_GetDynamicNodeReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamicNodeReason'
type ExecutableDynamicNodeStatus_GetDynamicNodeReason_Call struct {
	*mock.Call
}

// GetDynamicNodeReason is a helper method to define mock.On call
func (_e *ExecutableDynamicNodeStatus_Expecter) GetDynamicNodeReason() *ExecutableDynamicNodeStatus_GetDynamicNodeReason_Call {
	return &ExecutableDynamicNodeStatus_GetDynamicNodeReason_Call{Call: _e.mock.On("GetDynamicNodeReason")}
}

func (_c *ExecutableDynamicNodeStatus_GetDynamicNodeReason_Call) Run(run func()) *ExecutableDynamicNodeStatus_GetDynamicNodeReason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableDynamicNodeStatus_GetDynamicNodeReason_Call) Return(_a0 string) *ExecutableDynamicNodeStatus_GetDynamicNodeReason_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableDynamicNodeStatus_GetDynamicNodeReason_Call) RunAndReturn(run func() string) *ExecutableDynamicNodeStatus_GetDynamicNodeReason_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionError provides a mock function with given fields:
func (_m *ExecutableDynamicNodeStatus) GetExecutionError() *core.ExecutionError {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionError")
	}

	var r0 *core.ExecutionError
	if rf, ok := ret.Get(0).(func() *core.ExecutionError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ExecutionError)
		}
	}

	return r0
}

// ExecutableDynamicNodeStatus_GetExecutionError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionError'
type ExecutableDynamicNodeStatus_GetExecutionError_Call struct {
	*mock.Call
}

// GetExecutionError is a helper method to define mock.On call
func (_e *ExecutableDynamicNodeStatus_Expecter) GetExecutionError() *ExecutableDynamicNodeStatus_GetExecutionError_Call {
	return &ExecutableDynamicNodeStatus_GetExecutionError_Call{Call: _e.mock.On("GetExecutionError")}
}

func (_c *ExecutableDynamicNodeStatus_GetExecutionError_Call) Run(run func()) *ExecutableDynamicNodeStatus_GetExecutionError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableDynamicNodeStatus_GetExecutionError_Call) Return(_a0 *core.ExecutionError) *ExecutableDynamicNodeStatus_GetExecutionError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableDynamicNodeStatus_GetExecutionError_Call) RunAndReturn(run func() *core.ExecutionError) *ExecutableDynamicNodeStatus_GetExecutionError_Call {
	_c.Call.Return(run)
	return _c
}

// GetIsFailurePermanent provides a mock function with given fields:
func (_m *ExecutableDynamicNodeStatus) GetIsFailurePermanent() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIsFailurePermanent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutableDynamicNodeStatus_GetIsFailurePermanent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIsFailurePermanent'
type ExecutableDynamicNodeStatus_GetIsFailurePermanent_Call struct {
	*mock.Call
}

// GetIsFailurePermanent is a helper method to define mock.On call
func (_e *ExecutableDynamicNodeStatus_Expecter) GetIsFailurePermanent() *ExecutableDynamicNodeStatus_GetIsFailurePermanent_Call {
	return &ExecutableDynamicNodeStatus_GetIsFailurePermanent_Call{Call: _e.mock.On("GetIsFailurePermanent")}
}

func (_c *ExecutableDynamicNodeStatus_GetIsFailurePermanent_Call) Run(run func()) *ExecutableDynamicNodeStatus_GetIsFailurePermanent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableDynamicNodeStatus_GetIsFailurePermanent_Call) Return(_a0 bool) *ExecutableDynamicNodeStatus_GetIsFailurePermanent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableDynamicNodeStatus_GetIsFailurePermanent_Call) RunAndReturn(run func() bool) *ExecutableDynamicNodeStatus_GetIsFailurePermanent_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutableDynamicNodeStatus creates a new instance of ExecutableDynamicNodeStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableDynamicNodeStatus(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableDynamicNodeStatus {
	mock := &ExecutableDynamicNodeStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
