// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"
)

// ExecutableTask is an autogenerated mock type for the ExecutableTask type
type ExecutableTask struct {
	mock.Mock
}

type ExecutableTask_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableTask) EXPECT() *ExecutableTask_Expecter {
	return &ExecutableTask_Expecter{mock: &_m.Mock}
}

// CoreTask provides a mock function with given fields:
func (_m *ExecutableTask) CoreTask() *core.TaskTemplate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CoreTask")
	}

	var r0 *core.TaskTemplate
	if rf, ok := ret.Get(0).(func() *core.TaskTemplate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TaskTemplate)
		}
	}

	return r0
}

// ExecutableTask_CoreTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CoreTask'
type ExecutableTask_CoreTask_Call struct {
	*mock.Call
}

// CoreTask is a helper method to define mock.On call
func (_e *ExecutableTask_Expecter) CoreTask() *ExecutableTask_CoreTask_Call {
	return &ExecutableTask_CoreTask_Call{Call: _e.mock.On("CoreTask")}
}

func (_c *ExecutableTask_CoreTask_Call) Run(run func()) *ExecutableTask_CoreTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableTask_CoreTask_Call) Return(_a0 *core.TaskTemplate) *ExecutableTask_CoreTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableTask_CoreTask_Call) RunAndReturn(run func() *core.TaskTemplate) *ExecutableTask_CoreTask_Call {
	_c.Call.Return(run)
	return _c
}

// TaskType provides a mock function with given fields:
func (_m *ExecutableTask) TaskType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TaskType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableTask_TaskType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TaskType'
type ExecutableTask_TaskType_Call struct {
	*mock.Call
}

// TaskType is a helper method to define mock.On call
func (_e *ExecutableTask_Expecter) TaskType() *ExecutableTask_TaskType_Call {
	return &ExecutableTask_TaskType_Call{Call: _e.mock.On("TaskType")}
}

func (_c *ExecutableTask_TaskType_Call) Run(run func()) *ExecutableTask_TaskType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableTask_TaskType_Call) Return(_a0 string) *ExecutableTask_TaskType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableTask_TaskType_Call) RunAndReturn(run func() string) *ExecutableTask_TaskType_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutableTask creates a new instance of ExecutableTask. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableTask(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableTask {
	mock := &ExecutableTask{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
