// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// MutableSubWorkflowNodeStatus is an autogenerated mock type for the MutableSubWorkflowNodeStatus type
type MutableSubWorkflowNodeStatus struct {
	mock.Mock
}

type MutableSubWorkflowNodeStatus_Expecter struct {
	mock *mock.Mock
}

func (_m *MutableSubWorkflowNodeStatus) EXPECT() *MutableSubWorkflowNodeStatus_Expecter {
	return &MutableSubWorkflowNodeStatus_Expecter{mock: &_m.Mock}
}

// GetPhase provides a mock function with no fields
func (_m *MutableSubWorkflowNodeStatus) GetPhase() v1alpha1.WorkflowPhase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPhase")
	}

	var r0 v1alpha1.WorkflowPhase
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowPhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowPhase)
	}

	return r0
}

// MutableSubWorkflowNodeStatus_GetPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhase'
type MutableSubWorkflowNodeStatus_GetPhase_Call struct {
	*mock.Call
}

// GetPhase is a helper method to define mock.On call
func (_e *MutableSubWorkflowNodeStatus_Expecter) GetPhase() *MutableSubWorkflowNodeStatus_GetPhase_Call {
	return &MutableSubWorkflowNodeStatus_GetPhase_Call{Call: _e.mock.On("GetPhase")}
}

func (_c *MutableSubWorkflowNodeStatus_GetPhase_Call) Run(run func()) *MutableSubWorkflowNodeStatus_GetPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableSubWorkflowNodeStatus_GetPhase_Call) Return(_a0 v1alpha1.WorkflowPhase) *MutableSubWorkflowNodeStatus_GetPhase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableSubWorkflowNodeStatus_GetPhase_Call) RunAndReturn(run func() v1alpha1.WorkflowPhase) *MutableSubWorkflowNodeStatus_GetPhase_Call {
	_c.Call.Return(run)
	return _c
}

// IsDirty provides a mock function with no fields
func (_m *MutableSubWorkflowNodeStatus) IsDirty() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDirty")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MutableSubWorkflowNodeStatus_IsDirty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDirty'
type MutableSubWorkflowNodeStatus_IsDirty_Call struct {
	*mock.Call
}

// IsDirty is a helper method to define mock.On call
func (_e *MutableSubWorkflowNodeStatus_Expecter) IsDirty() *MutableSubWorkflowNodeStatus_IsDirty_Call {
	return &MutableSubWorkflowNodeStatus_IsDirty_Call{Call: _e.mock.On("IsDirty")}
}

func (_c *MutableSubWorkflowNodeStatus_IsDirty_Call) Run(run func()) *MutableSubWorkflowNodeStatus_IsDirty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableSubWorkflowNodeStatus_IsDirty_Call) Return(_a0 bool) *MutableSubWorkflowNodeStatus_IsDirty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableSubWorkflowNodeStatus_IsDirty_Call) RunAndReturn(run func() bool) *MutableSubWorkflowNodeStatus_IsDirty_Call {
	_c.Call.Return(run)
	return _c
}

// SetPhase provides a mock function with given fields: phase
func (_m *MutableSubWorkflowNodeStatus) SetPhase(phase v1alpha1.WorkflowPhase) {
	_m.Called(phase)
}

// MutableSubWorkflowNodeStatus_SetPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPhase'
type MutableSubWorkflowNodeStatus_SetPhase_Call struct {
	*mock.Call
}

// SetPhase is a helper method to define mock.On call
//   - phase v1alpha1.WorkflowPhase
func (_e *MutableSubWorkflowNodeStatus_Expecter) SetPhase(phase interface{}) *MutableSubWorkflowNodeStatus_SetPhase_Call {
	return &MutableSubWorkflowNodeStatus_SetPhase_Call{Call: _e.mock.On("SetPhase", phase)}
}

func (_c *MutableSubWorkflowNodeStatus_SetPhase_Call) Run(run func(phase v1alpha1.WorkflowPhase)) *MutableSubWorkflowNodeStatus_SetPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1alpha1.WorkflowPhase))
	})
	return _c
}

func (_c *MutableSubWorkflowNodeStatus_SetPhase_Call) Return() *MutableSubWorkflowNodeStatus_SetPhase_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableSubWorkflowNodeStatus_SetPhase_Call) RunAndReturn(run func(v1alpha1.WorkflowPhase)) *MutableSubWorkflowNodeStatus_SetPhase_Call {
	_c.Run(run)
	return _c
}

// NewMutableSubWorkflowNodeStatus creates a new instance of MutableSubWorkflowNodeStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMutableSubWorkflowNodeStatus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MutableSubWorkflowNodeStatus {
	mock := &MutableSubWorkflowNodeStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
