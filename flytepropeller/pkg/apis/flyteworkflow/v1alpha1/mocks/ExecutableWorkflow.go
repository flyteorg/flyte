// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ExecutableWorkflow is an autogenerated mock type for the ExecutableWorkflow type
type ExecutableWorkflow struct {
	mock.Mock
}

type ExecutableWorkflow_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableWorkflow) EXPECT() *ExecutableWorkflow_Expecter {
	return &ExecutableWorkflow_Expecter{mock: &_m.Mock}
}

// FindSubWorkflow provides a mock function with given fields: subID
func (_m *ExecutableWorkflow) FindSubWorkflow(subID string) v1alpha1.ExecutableSubWorkflow {
	ret := _m.Called(subID)

	if len(ret) == 0 {
		panic("no return value specified for FindSubWorkflow")
	}

	var r0 v1alpha1.ExecutableSubWorkflow
	if rf, ok := ret.Get(0).(func(string) v1alpha1.ExecutableSubWorkflow); ok {
		r0 = rf(subID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableSubWorkflow)
		}
	}

	return r0
}

// ExecutableWorkflow_FindSubWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSubWorkflow'
type ExecutableWorkflow_FindSubWorkflow_Call struct {
	*mock.Call
}

// FindSubWorkflow is a helper method to define mock.On call
//   - subID string
func (_e *ExecutableWorkflow_Expecter) FindSubWorkflow(subID interface{}) *ExecutableWorkflow_FindSubWorkflow_Call {
	return &ExecutableWorkflow_FindSubWorkflow_Call{Call: _e.mock.On("FindSubWorkflow", subID)}
}

func (_c *ExecutableWorkflow_FindSubWorkflow_Call) Run(run func(subID string)) *ExecutableWorkflow_FindSubWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutableWorkflow_FindSubWorkflow_Call) Return(_a0 v1alpha1.ExecutableSubWorkflow) *ExecutableWorkflow_FindSubWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_FindSubWorkflow_Call) RunAndReturn(run func(string) v1alpha1.ExecutableSubWorkflow) *ExecutableWorkflow_FindSubWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// FromNode provides a mock function with given fields: name
func (_m *ExecutableWorkflow) FromNode(name string) ([]string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FromNode")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutableWorkflow_FromNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromNode'
type ExecutableWorkflow_FromNode_Call struct {
	*mock.Call
}

// FromNode is a helper method to define mock.On call
//   - name string
func (_e *ExecutableWorkflow_Expecter) FromNode(name interface{}) *ExecutableWorkflow_FromNode_Call {
	return &ExecutableWorkflow_FromNode_Call{Call: _e.mock.On("FromNode", name)}
}

func (_c *ExecutableWorkflow_FromNode_Call) Run(run func(name string)) *ExecutableWorkflow_FromNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutableWorkflow_FromNode_Call) Return(_a0 []string, _a1 error) *ExecutableWorkflow_FromNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutableWorkflow_FromNode_Call) RunAndReturn(run func(string) ([]string, error)) *ExecutableWorkflow_FromNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnnotations provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetAnnotations() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAnnotations")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// ExecutableWorkflow_GetAnnotations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnnotations'
type ExecutableWorkflow_GetAnnotations_Call struct {
	*mock.Call
}

// GetAnnotations is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetAnnotations() *ExecutableWorkflow_GetAnnotations_Call {
	return &ExecutableWorkflow_GetAnnotations_Call{Call: _e.mock.On("GetAnnotations")}
}

func (_c *ExecutableWorkflow_GetAnnotations_Call) Run(run func()) *ExecutableWorkflow_GetAnnotations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetAnnotations_Call) Return(_a0 map[string]string) *ExecutableWorkflow_GetAnnotations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetAnnotations_Call) RunAndReturn(run func() map[string]string) *ExecutableWorkflow_GetAnnotations_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnections provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetConnections() *v1alpha1.Connections {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnections")
	}

	var r0 *v1alpha1.Connections
	if rf, ok := ret.Get(0).(func() *v1alpha1.Connections); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Connections)
		}
	}

	return r0
}

// ExecutableWorkflow_GetConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnections'
type ExecutableWorkflow_GetConnections_Call struct {
	*mock.Call
}

// GetConnections is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetConnections() *ExecutableWorkflow_GetConnections_Call {
	return &ExecutableWorkflow_GetConnections_Call{Call: _e.mock.On("GetConnections")}
}

func (_c *ExecutableWorkflow_GetConnections_Call) Run(run func()) *ExecutableWorkflow_GetConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetConnections_Call) Return(_a0 *v1alpha1.Connections) *ExecutableWorkflow_GetConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetConnections_Call) RunAndReturn(run func() *v1alpha1.Connections) *ExecutableWorkflow_GetConnections_Call {
	_c.Call.Return(run)
	return _c
}

// GetConsoleURL provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetConsoleURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConsoleURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableWorkflow_GetConsoleURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConsoleURL'
type ExecutableWorkflow_GetConsoleURL_Call struct {
	*mock.Call
}

// GetConsoleURL is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetConsoleURL() *ExecutableWorkflow_GetConsoleURL_Call {
	return &ExecutableWorkflow_GetConsoleURL_Call{Call: _e.mock.On("GetConsoleURL")}
}

func (_c *ExecutableWorkflow_GetConsoleURL_Call) Run(run func()) *ExecutableWorkflow_GetConsoleURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetConsoleURL_Call) Return(_a0 string) *ExecutableWorkflow_GetConsoleURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetConsoleURL_Call) RunAndReturn(run func() string) *ExecutableWorkflow_GetConsoleURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreationTimestamp provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetCreationTimestamp() v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCreationTimestamp")
	}

	var r0 v1.Time
	if rf, ok := ret.Get(0).(func() v1.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.Time)
	}

	return r0
}

// ExecutableWorkflow_GetCreationTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreationTimestamp'
type ExecutableWorkflow_GetCreationTimestamp_Call struct {
	*mock.Call
}

// GetCreationTimestamp is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetCreationTimestamp() *ExecutableWorkflow_GetCreationTimestamp_Call {
	return &ExecutableWorkflow_GetCreationTimestamp_Call{Call: _e.mock.On("GetCreationTimestamp")}
}

func (_c *ExecutableWorkflow_GetCreationTimestamp_Call) Run(run func()) *ExecutableWorkflow_GetCreationTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetCreationTimestamp_Call) Return(_a0 v1.Time) *ExecutableWorkflow_GetCreationTimestamp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetCreationTimestamp_Call) RunAndReturn(run func() v1.Time) *ExecutableWorkflow_GetCreationTimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefinitionVersion provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetDefinitionVersion() v1alpha1.WorkflowDefinitionVersion {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefinitionVersion")
	}

	var r0 v1alpha1.WorkflowDefinitionVersion
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowDefinitionVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowDefinitionVersion)
	}

	return r0
}

// ExecutableWorkflow_GetDefinitionVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefinitionVersion'
type ExecutableWorkflow_GetDefinitionVersion_Call struct {
	*mock.Call
}

// GetDefinitionVersion is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetDefinitionVersion() *ExecutableWorkflow_GetDefinitionVersion_Call {
	return &ExecutableWorkflow_GetDefinitionVersion_Call{Call: _e.mock.On("GetDefinitionVersion")}
}

func (_c *ExecutableWorkflow_GetDefinitionVersion_Call) Run(run func()) *ExecutableWorkflow_GetDefinitionVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetDefinitionVersion_Call) Return(_a0 v1alpha1.WorkflowDefinitionVersion) *ExecutableWorkflow_GetDefinitionVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetDefinitionVersion_Call) RunAndReturn(run func() v1alpha1.WorkflowDefinitionVersion) *ExecutableWorkflow_GetDefinitionVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventVersion provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetEventVersion() v1alpha1.EventVersion {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEventVersion")
	}

	var r0 v1alpha1.EventVersion
	if rf, ok := ret.Get(0).(func() v1alpha1.EventVersion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.EventVersion)
	}

	return r0
}

// ExecutableWorkflow_GetEventVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventVersion'
type ExecutableWorkflow_GetEventVersion_Call struct {
	*mock.Call
}

// GetEventVersion is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetEventVersion() *ExecutableWorkflow_GetEventVersion_Call {
	return &ExecutableWorkflow_GetEventVersion_Call{Call: _e.mock.On("GetEventVersion")}
}

func (_c *ExecutableWorkflow_GetEventVersion_Call) Run(run func()) *ExecutableWorkflow_GetEventVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetEventVersion_Call) Return(_a0 v1alpha1.EventVersion) *ExecutableWorkflow_GetEventVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetEventVersion_Call) RunAndReturn(run func() v1alpha1.EventVersion) *ExecutableWorkflow_GetEventVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionConfig provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetExecutionConfig() v1alpha1.ExecutionConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionConfig")
	}

	var r0 v1alpha1.ExecutionConfig
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutionConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.ExecutionConfig)
	}

	return r0
}

// ExecutableWorkflow_GetExecutionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionConfig'
type ExecutableWorkflow_GetExecutionConfig_Call struct {
	*mock.Call
}

// GetExecutionConfig is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetExecutionConfig() *ExecutableWorkflow_GetExecutionConfig_Call {
	return &ExecutableWorkflow_GetExecutionConfig_Call{Call: _e.mock.On("GetExecutionConfig")}
}

func (_c *ExecutableWorkflow_GetExecutionConfig_Call) Run(run func()) *ExecutableWorkflow_GetExecutionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetExecutionConfig_Call) Return(_a0 v1alpha1.ExecutionConfig) *ExecutableWorkflow_GetExecutionConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetExecutionConfig_Call) RunAndReturn(run func() v1alpha1.ExecutionConfig) *ExecutableWorkflow_GetExecutionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionID provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetExecutionID() v1alpha1.WorkflowExecutionIdentifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionID")
	}

	var r0 v1alpha1.WorkflowExecutionIdentifier
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowExecutionIdentifier); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowExecutionIdentifier)
	}

	return r0
}

// ExecutableWorkflow_GetExecutionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionID'
type ExecutableWorkflow_GetExecutionID_Call struct {
	*mock.Call
}

// GetExecutionID is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetExecutionID() *ExecutableWorkflow_GetExecutionID_Call {
	return &ExecutableWorkflow_GetExecutionID_Call{Call: _e.mock.On("GetExecutionID")}
}

func (_c *ExecutableWorkflow_GetExecutionID_Call) Run(run func()) *ExecutableWorkflow_GetExecutionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetExecutionID_Call) Return(_a0 v1alpha1.WorkflowExecutionIdentifier) *ExecutableWorkflow_GetExecutionID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetExecutionID_Call) RunAndReturn(run func() v1alpha1.WorkflowExecutionIdentifier) *ExecutableWorkflow_GetExecutionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionStatus provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetExecutionStatus() v1alpha1.ExecutableWorkflowStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionStatus")
	}

	var r0 v1alpha1.ExecutableWorkflowStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableWorkflowStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableWorkflowStatus)
		}
	}

	return r0
}

// ExecutableWorkflow_GetExecutionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionStatus'
type ExecutableWorkflow_GetExecutionStatus_Call struct {
	*mock.Call
}

// GetExecutionStatus is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetExecutionStatus() *ExecutableWorkflow_GetExecutionStatus_Call {
	return &ExecutableWorkflow_GetExecutionStatus_Call{Call: _e.mock.On("GetExecutionStatus")}
}

func (_c *ExecutableWorkflow_GetExecutionStatus_Call) Run(run func()) *ExecutableWorkflow_GetExecutionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetExecutionStatus_Call) Return(_a0 v1alpha1.ExecutableWorkflowStatus) *ExecutableWorkflow_GetExecutionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetExecutionStatus_Call) RunAndReturn(run func() v1alpha1.ExecutableWorkflowStatus) *ExecutableWorkflow_GetExecutionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableWorkflow_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type ExecutableWorkflow_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetID() *ExecutableWorkflow_GetID_Call {
	return &ExecutableWorkflow_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *ExecutableWorkflow_GetID_Call) Run(run func()) *ExecutableWorkflow_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetID_Call) Return(_a0 string) *ExecutableWorkflow_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetID_Call) RunAndReturn(run func() string) *ExecutableWorkflow_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetK8sWorkflowID provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetK8sWorkflowID() types.NamespacedName {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetK8sWorkflowID")
	}

	var r0 types.NamespacedName
	if rf, ok := ret.Get(0).(func() types.NamespacedName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.NamespacedName)
	}

	return r0
}

// ExecutableWorkflow_GetK8sWorkflowID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetK8sWorkflowID'
type ExecutableWorkflow_GetK8sWorkflowID_Call struct {
	*mock.Call
}

// GetK8sWorkflowID is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetK8sWorkflowID() *ExecutableWorkflow_GetK8sWorkflowID_Call {
	return &ExecutableWorkflow_GetK8sWorkflowID_Call{Call: _e.mock.On("GetK8sWorkflowID")}
}

func (_c *ExecutableWorkflow_GetK8sWorkflowID_Call) Run(run func()) *ExecutableWorkflow_GetK8sWorkflowID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetK8sWorkflowID_Call) Return(_a0 types.NamespacedName) *ExecutableWorkflow_GetK8sWorkflowID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetK8sWorkflowID_Call) RunAndReturn(run func() types.NamespacedName) *ExecutableWorkflow_GetK8sWorkflowID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLabels provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetLabels() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLabels")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// ExecutableWorkflow_GetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabels'
type ExecutableWorkflow_GetLabels_Call struct {
	*mock.Call
}

// GetLabels is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetLabels() *ExecutableWorkflow_GetLabels_Call {
	return &ExecutableWorkflow_GetLabels_Call{Call: _e.mock.On("GetLabels")}
}

func (_c *ExecutableWorkflow_GetLabels_Call) Run(run func()) *ExecutableWorkflow_GetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetLabels_Call) Return(_a0 map[string]string) *ExecutableWorkflow_GetLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetLabels_Call) RunAndReturn(run func() map[string]string) *ExecutableWorkflow_GetLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableWorkflow_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type ExecutableWorkflow_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetName() *ExecutableWorkflow_GetName_Call {
	return &ExecutableWorkflow_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *ExecutableWorkflow_GetName_Call) Run(run func()) *ExecutableWorkflow_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetName_Call) Return(_a0 string) *ExecutableWorkflow_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetName_Call) RunAndReturn(run func() string) *ExecutableWorkflow_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetNamespace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableWorkflow_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type ExecutableWorkflow_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetNamespace() *ExecutableWorkflow_GetNamespace_Call {
	return &ExecutableWorkflow_GetNamespace_Call{Call: _e.mock.On("GetNamespace")}
}

func (_c *ExecutableWorkflow_GetNamespace_Call) Run(run func()) *ExecutableWorkflow_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetNamespace_Call) Return(_a0 string) *ExecutableWorkflow_GetNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetNamespace_Call) RunAndReturn(run func() string) *ExecutableWorkflow_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetNode provides a mock function with given fields: nodeID
func (_m *ExecutableWorkflow) GetNode(nodeID string) (v1alpha1.ExecutableNode, bool) {
	ret := _m.Called(nodeID)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 v1alpha1.ExecutableNode
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (v1alpha1.ExecutableNode, bool)); ok {
		return rf(nodeID)
	}
	if rf, ok := ret.Get(0).(func(string) v1alpha1.ExecutableNode); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNode)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ExecutableWorkflow_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type ExecutableWorkflow_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - nodeID string
func (_e *ExecutableWorkflow_Expecter) GetNode(nodeID interface{}) *ExecutableWorkflow_GetNode_Call {
	return &ExecutableWorkflow_GetNode_Call{Call: _e.mock.On("GetNode", nodeID)}
}

func (_c *ExecutableWorkflow_GetNode_Call) Run(run func(nodeID string)) *ExecutableWorkflow_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutableWorkflow_GetNode_Call) Return(_a0 v1alpha1.ExecutableNode, _a1 bool) *ExecutableWorkflow_GetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutableWorkflow_GetNode_Call) RunAndReturn(run func(string) (v1alpha1.ExecutableNode, bool)) *ExecutableWorkflow_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeExecutionStatus provides a mock function with given fields: ctx, id
func (_m *ExecutableWorkflow) GetNodeExecutionStatus(ctx context.Context, id string) v1alpha1.ExecutableNodeStatus {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeExecutionStatus")
	}

	var r0 v1alpha1.ExecutableNodeStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) v1alpha1.ExecutableNodeStatus); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNodeStatus)
		}
	}

	return r0
}

// ExecutableWorkflow_GetNodeExecutionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeExecutionStatus'
type ExecutableWorkflow_GetNodeExecutionStatus_Call struct {
	*mock.Call
}

// GetNodeExecutionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ExecutableWorkflow_Expecter) GetNodeExecutionStatus(ctx interface{}, id interface{}) *ExecutableWorkflow_GetNodeExecutionStatus_Call {
	return &ExecutableWorkflow_GetNodeExecutionStatus_Call{Call: _e.mock.On("GetNodeExecutionStatus", ctx, id)}
}

func (_c *ExecutableWorkflow_GetNodeExecutionStatus_Call) Run(run func(ctx context.Context, id string)) *ExecutableWorkflow_GetNodeExecutionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ExecutableWorkflow_GetNodeExecutionStatus_Call) Return(_a0 v1alpha1.ExecutableNodeStatus) *ExecutableWorkflow_GetNodeExecutionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetNodeExecutionStatus_Call) RunAndReturn(run func(context.Context, string) v1alpha1.ExecutableNodeStatus) *ExecutableWorkflow_GetNodeExecutionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodes provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetNodes() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodes")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ExecutableWorkflow_GetNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodes'
type ExecutableWorkflow_GetNodes_Call struct {
	*mock.Call
}

// GetNodes is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetNodes() *ExecutableWorkflow_GetNodes_Call {
	return &ExecutableWorkflow_GetNodes_Call{Call: _e.mock.On("GetNodes")}
}

func (_c *ExecutableWorkflow_GetNodes_Call) Run(run func()) *ExecutableWorkflow_GetNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetNodes_Call) Return(_a0 []string) *ExecutableWorkflow_GetNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetNodes_Call) RunAndReturn(run func() []string) *ExecutableWorkflow_GetNodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetOnFailureNode provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetOnFailureNode() v1alpha1.ExecutableNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOnFailureNode")
	}

	var r0 v1alpha1.ExecutableNode
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNode)
		}
	}

	return r0
}

// ExecutableWorkflow_GetOnFailureNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOnFailureNode'
type ExecutableWorkflow_GetOnFailureNode_Call struct {
	*mock.Call
}

// GetOnFailureNode is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetOnFailureNode() *ExecutableWorkflow_GetOnFailureNode_Call {
	return &ExecutableWorkflow_GetOnFailureNode_Call{Call: _e.mock.On("GetOnFailureNode")}
}

func (_c *ExecutableWorkflow_GetOnFailureNode_Call) Run(run func()) *ExecutableWorkflow_GetOnFailureNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetOnFailureNode_Call) Return(_a0 v1alpha1.ExecutableNode) *ExecutableWorkflow_GetOnFailureNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetOnFailureNode_Call) RunAndReturn(run func() v1alpha1.ExecutableNode) *ExecutableWorkflow_GetOnFailureNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetOnFailurePolicy provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetOnFailurePolicy() v1alpha1.WorkflowOnFailurePolicy {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOnFailurePolicy")
	}

	var r0 v1alpha1.WorkflowOnFailurePolicy
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowOnFailurePolicy); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowOnFailurePolicy)
	}

	return r0
}

// ExecutableWorkflow_GetOnFailurePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOnFailurePolicy'
type ExecutableWorkflow_GetOnFailurePolicy_Call struct {
	*mock.Call
}

// GetOnFailurePolicy is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetOnFailurePolicy() *ExecutableWorkflow_GetOnFailurePolicy_Call {
	return &ExecutableWorkflow_GetOnFailurePolicy_Call{Call: _e.mock.On("GetOnFailurePolicy")}
}

func (_c *ExecutableWorkflow_GetOnFailurePolicy_Call) Run(run func()) *ExecutableWorkflow_GetOnFailurePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetOnFailurePolicy_Call) Return(_a0 v1alpha1.WorkflowOnFailurePolicy) *ExecutableWorkflow_GetOnFailurePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetOnFailurePolicy_Call) RunAndReturn(run func() v1alpha1.WorkflowOnFailurePolicy) *ExecutableWorkflow_GetOnFailurePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputBindings provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetOutputBindings() []*v1alpha1.Binding {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputBindings")
	}

	var r0 []*v1alpha1.Binding
	if rf, ok := ret.Get(0).(func() []*v1alpha1.Binding); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.Binding)
		}
	}

	return r0
}

// ExecutableWorkflow_GetOutputBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputBindings'
type ExecutableWorkflow_GetOutputBindings_Call struct {
	*mock.Call
}

// GetOutputBindings is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetOutputBindings() *ExecutableWorkflow_GetOutputBindings_Call {
	return &ExecutableWorkflow_GetOutputBindings_Call{Call: _e.mock.On("GetOutputBindings")}
}

func (_c *ExecutableWorkflow_GetOutputBindings_Call) Run(run func()) *ExecutableWorkflow_GetOutputBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetOutputBindings_Call) Return(_a0 []*v1alpha1.Binding) *ExecutableWorkflow_GetOutputBindings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetOutputBindings_Call) RunAndReturn(run func() []*v1alpha1.Binding) *ExecutableWorkflow_GetOutputBindings_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputs provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetOutputs() *v1alpha1.OutputVarMap {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputs")
	}

	var r0 *v1alpha1.OutputVarMap
	if rf, ok := ret.Get(0).(func() *v1alpha1.OutputVarMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.OutputVarMap)
		}
	}

	return r0
}

// ExecutableWorkflow_GetOutputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputs'
type ExecutableWorkflow_GetOutputs_Call struct {
	*mock.Call
}

// GetOutputs is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetOutputs() *ExecutableWorkflow_GetOutputs_Call {
	return &ExecutableWorkflow_GetOutputs_Call{Call: _e.mock.On("GetOutputs")}
}

func (_c *ExecutableWorkflow_GetOutputs_Call) Run(run func()) *ExecutableWorkflow_GetOutputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetOutputs_Call) Return(_a0 *v1alpha1.OutputVarMap) *ExecutableWorkflow_GetOutputs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetOutputs_Call) RunAndReturn(run func() *v1alpha1.OutputVarMap) *ExecutableWorkflow_GetOutputs_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwnerReference provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetOwnerReference() v1.OwnerReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOwnerReference")
	}

	var r0 v1.OwnerReference
	if rf, ok := ret.Get(0).(func() v1.OwnerReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.OwnerReference)
	}

	return r0
}

// ExecutableWorkflow_GetOwnerReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnerReference'
type ExecutableWorkflow_GetOwnerReference_Call struct {
	*mock.Call
}

// GetOwnerReference is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetOwnerReference() *ExecutableWorkflow_GetOwnerReference_Call {
	return &ExecutableWorkflow_GetOwnerReference_Call{Call: _e.mock.On("GetOwnerReference")}
}

func (_c *ExecutableWorkflow_GetOwnerReference_Call) Run(run func()) *ExecutableWorkflow_GetOwnerReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetOwnerReference_Call) Return(_a0 v1.OwnerReference) *ExecutableWorkflow_GetOwnerReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetOwnerReference_Call) RunAndReturn(run func() v1.OwnerReference) *ExecutableWorkflow_GetOwnerReference_Call {
	_c.Call.Return(run)
	return _c
}

// GetRawOutputDataConfig provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetRawOutputDataConfig() v1alpha1.RawOutputDataConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRawOutputDataConfig")
	}

	var r0 v1alpha1.RawOutputDataConfig
	if rf, ok := ret.Get(0).(func() v1alpha1.RawOutputDataConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.RawOutputDataConfig)
	}

	return r0
}

// ExecutableWorkflow_GetRawOutputDataConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawOutputDataConfig'
type ExecutableWorkflow_GetRawOutputDataConfig_Call struct {
	*mock.Call
}

// GetRawOutputDataConfig is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetRawOutputDataConfig() *ExecutableWorkflow_GetRawOutputDataConfig_Call {
	return &ExecutableWorkflow_GetRawOutputDataConfig_Call{Call: _e.mock.On("GetRawOutputDataConfig")}
}

func (_c *ExecutableWorkflow_GetRawOutputDataConfig_Call) Run(run func()) *ExecutableWorkflow_GetRawOutputDataConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetRawOutputDataConfig_Call) Return(_a0 v1alpha1.RawOutputDataConfig) *ExecutableWorkflow_GetRawOutputDataConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetRawOutputDataConfig_Call) RunAndReturn(run func() v1alpha1.RawOutputDataConfig) *ExecutableWorkflow_GetRawOutputDataConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecurityContext provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetSecurityContext() core.SecurityContext {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSecurityContext")
	}

	var r0 core.SecurityContext
	if rf, ok := ret.Get(0).(func() core.SecurityContext); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.SecurityContext)
	}

	return r0
}

// ExecutableWorkflow_GetSecurityContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecurityContext'
type ExecutableWorkflow_GetSecurityContext_Call struct {
	*mock.Call
}

// GetSecurityContext is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetSecurityContext() *ExecutableWorkflow_GetSecurityContext_Call {
	return &ExecutableWorkflow_GetSecurityContext_Call{Call: _e.mock.On("GetSecurityContext")}
}

func (_c *ExecutableWorkflow_GetSecurityContext_Call) Run(run func()) *ExecutableWorkflow_GetSecurityContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetSecurityContext_Call) Return(_a0 core.SecurityContext) *ExecutableWorkflow_GetSecurityContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetSecurityContext_Call) RunAndReturn(run func() core.SecurityContext) *ExecutableWorkflow_GetSecurityContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccountName provides a mock function with given fields:
func (_m *ExecutableWorkflow) GetServiceAccountName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccountName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableWorkflow_GetServiceAccountName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccountName'
type ExecutableWorkflow_GetServiceAccountName_Call struct {
	*mock.Call
}

// GetServiceAccountName is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) GetServiceAccountName() *ExecutableWorkflow_GetServiceAccountName_Call {
	return &ExecutableWorkflow_GetServiceAccountName_Call{Call: _e.mock.On("GetServiceAccountName")}
}

func (_c *ExecutableWorkflow_GetServiceAccountName_Call) Run(run func()) *ExecutableWorkflow_GetServiceAccountName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_GetServiceAccountName_Call) Return(_a0 string) *ExecutableWorkflow_GetServiceAccountName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_GetServiceAccountName_Call) RunAndReturn(run func() string) *ExecutableWorkflow_GetServiceAccountName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: id
func (_m *ExecutableWorkflow) GetTask(id string) (v1alpha1.ExecutableTask, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 v1alpha1.ExecutableTask
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (v1alpha1.ExecutableTask, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) v1alpha1.ExecutableTask); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableTask)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutableWorkflow_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type ExecutableWorkflow_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - id string
func (_e *ExecutableWorkflow_Expecter) GetTask(id interface{}) *ExecutableWorkflow_GetTask_Call {
	return &ExecutableWorkflow_GetTask_Call{Call: _e.mock.On("GetTask", id)}
}

func (_c *ExecutableWorkflow_GetTask_Call) Run(run func(id string)) *ExecutableWorkflow_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutableWorkflow_GetTask_Call) Return(_a0 v1alpha1.ExecutableTask, _a1 error) *ExecutableWorkflow_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutableWorkflow_GetTask_Call) RunAndReturn(run func(string) (v1alpha1.ExecutableTask, error)) *ExecutableWorkflow_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// IsInterruptible provides a mock function with given fields:
func (_m *ExecutableWorkflow) IsInterruptible() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInterruptible")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutableWorkflow_IsInterruptible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInterruptible'
type ExecutableWorkflow_IsInterruptible_Call struct {
	*mock.Call
}

// IsInterruptible is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) IsInterruptible() *ExecutableWorkflow_IsInterruptible_Call {
	return &ExecutableWorkflow_IsInterruptible_Call{Call: _e.mock.On("IsInterruptible")}
}

func (_c *ExecutableWorkflow_IsInterruptible_Call) Run(run func()) *ExecutableWorkflow_IsInterruptible_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_IsInterruptible_Call) Return(_a0 bool) *ExecutableWorkflow_IsInterruptible_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_IsInterruptible_Call) RunAndReturn(run func() bool) *ExecutableWorkflow_IsInterruptible_Call {
	_c.Call.Return(run)
	return _c
}

// StartNode provides a mock function with given fields:
func (_m *ExecutableWorkflow) StartNode() v1alpha1.ExecutableNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartNode")
	}

	var r0 v1alpha1.ExecutableNode
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNode)
		}
	}

	return r0
}

// ExecutableWorkflow_StartNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartNode'
type ExecutableWorkflow_StartNode_Call struct {
	*mock.Call
}

// StartNode is a helper method to define mock.On call
func (_e *ExecutableWorkflow_Expecter) StartNode() *ExecutableWorkflow_StartNode_Call {
	return &ExecutableWorkflow_StartNode_Call{Call: _e.mock.On("StartNode")}
}

func (_c *ExecutableWorkflow_StartNode_Call) Run(run func()) *ExecutableWorkflow_StartNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflow_StartNode_Call) Return(_a0 v1alpha1.ExecutableNode) *ExecutableWorkflow_StartNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflow_StartNode_Call) RunAndReturn(run func() v1alpha1.ExecutableNode) *ExecutableWorkflow_StartNode_Call {
	_c.Call.Return(run)
	return _c
}

// ToNode provides a mock function with given fields: name
func (_m *ExecutableWorkflow) ToNode(name string) ([]string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ToNode")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutableWorkflow_ToNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToNode'
type ExecutableWorkflow_ToNode_Call struct {
	*mock.Call
}

// ToNode is a helper method to define mock.On call
//   - name string
func (_e *ExecutableWorkflow_Expecter) ToNode(name interface{}) *ExecutableWorkflow_ToNode_Call {
	return &ExecutableWorkflow_ToNode_Call{Call: _e.mock.On("ToNode", name)}
}

func (_c *ExecutableWorkflow_ToNode_Call) Run(run func(name string)) *ExecutableWorkflow_ToNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutableWorkflow_ToNode_Call) Return(_a0 []string, _a1 error) *ExecutableWorkflow_ToNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutableWorkflow_ToNode_Call) RunAndReturn(run func(string) ([]string, error)) *ExecutableWorkflow_ToNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutableWorkflow creates a new instance of ExecutableWorkflow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableWorkflow(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableWorkflow {
	mock := &ExecutableWorkflow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
