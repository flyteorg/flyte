// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/flyteorg/flyte/flytestdlib/storage"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ExecutableNodeStatus is an autogenerated mock type for the ExecutableNodeStatus type
type ExecutableNodeStatus struct {
	mock.Mock
}

type ExecutableNodeStatus_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableNodeStatus) EXPECT() *ExecutableNodeStatus_Expecter {
	return &ExecutableNodeStatus_Expecter{mock: &_m.Mock}
}

// ClearArrayNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) ClearArrayNodeStatus() {
	_m.Called()
}

// ExecutableNodeStatus_ClearArrayNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearArrayNodeStatus'
type ExecutableNodeStatus_ClearArrayNodeStatus_Call struct {
	*mock.Call
}

// ClearArrayNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) ClearArrayNodeStatus() *ExecutableNodeStatus_ClearArrayNodeStatus_Call {
	return &ExecutableNodeStatus_ClearArrayNodeStatus_Call{Call: _e.mock.On("ClearArrayNodeStatus")}
}

func (_c *ExecutableNodeStatus_ClearArrayNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_ClearArrayNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_ClearArrayNodeStatus_Call) Return() *ExecutableNodeStatus_ClearArrayNodeStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_ClearArrayNodeStatus_Call) RunAndReturn(run func()) *ExecutableNodeStatus_ClearArrayNodeStatus_Call {
	_c.Run(run)
	return _c
}

// ClearDynamicNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) ClearDynamicNodeStatus() {
	_m.Called()
}

// ExecutableNodeStatus_ClearDynamicNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearDynamicNodeStatus'
type ExecutableNodeStatus_ClearDynamicNodeStatus_Call struct {
	*mock.Call
}

// ClearDynamicNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) ClearDynamicNodeStatus() *ExecutableNodeStatus_ClearDynamicNodeStatus_Call {
	return &ExecutableNodeStatus_ClearDynamicNodeStatus_Call{Call: _e.mock.On("ClearDynamicNodeStatus")}
}

func (_c *ExecutableNodeStatus_ClearDynamicNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_ClearDynamicNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_ClearDynamicNodeStatus_Call) Return() *ExecutableNodeStatus_ClearDynamicNodeStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_ClearDynamicNodeStatus_Call) RunAndReturn(run func()) *ExecutableNodeStatus_ClearDynamicNodeStatus_Call {
	_c.Run(run)
	return _c
}

// ClearGateNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) ClearGateNodeStatus() {
	_m.Called()
}

// ExecutableNodeStatus_ClearGateNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearGateNodeStatus'
type ExecutableNodeStatus_ClearGateNodeStatus_Call struct {
	*mock.Call
}

// ClearGateNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) ClearGateNodeStatus() *ExecutableNodeStatus_ClearGateNodeStatus_Call {
	return &ExecutableNodeStatus_ClearGateNodeStatus_Call{Call: _e.mock.On("ClearGateNodeStatus")}
}

func (_c *ExecutableNodeStatus_ClearGateNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_ClearGateNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_ClearGateNodeStatus_Call) Return() *ExecutableNodeStatus_ClearGateNodeStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_ClearGateNodeStatus_Call) RunAndReturn(run func()) *ExecutableNodeStatus_ClearGateNodeStatus_Call {
	_c.Run(run)
	return _c
}

// ClearLastAttemptStartedAt provides a mock function with no fields
func (_m *ExecutableNodeStatus) ClearLastAttemptStartedAt() {
	_m.Called()
}

// ExecutableNodeStatus_ClearLastAttemptStartedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearLastAttemptStartedAt'
type ExecutableNodeStatus_ClearLastAttemptStartedAt_Call struct {
	*mock.Call
}

// ClearLastAttemptStartedAt is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) ClearLastAttemptStartedAt() *ExecutableNodeStatus_ClearLastAttemptStartedAt_Call {
	return &ExecutableNodeStatus_ClearLastAttemptStartedAt_Call{Call: _e.mock.On("ClearLastAttemptStartedAt")}
}

func (_c *ExecutableNodeStatus_ClearLastAttemptStartedAt_Call) Run(run func()) *ExecutableNodeStatus_ClearLastAttemptStartedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_ClearLastAttemptStartedAt_Call) Return() *ExecutableNodeStatus_ClearLastAttemptStartedAt_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_ClearLastAttemptStartedAt_Call) RunAndReturn(run func()) *ExecutableNodeStatus_ClearLastAttemptStartedAt_Call {
	_c.Run(run)
	return _c
}

// ClearSubNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) ClearSubNodeStatus() {
	_m.Called()
}

// ExecutableNodeStatus_ClearSubNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearSubNodeStatus'
type ExecutableNodeStatus_ClearSubNodeStatus_Call struct {
	*mock.Call
}

// ClearSubNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) ClearSubNodeStatus() *ExecutableNodeStatus_ClearSubNodeStatus_Call {
	return &ExecutableNodeStatus_ClearSubNodeStatus_Call{Call: _e.mock.On("ClearSubNodeStatus")}
}

func (_c *ExecutableNodeStatus_ClearSubNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_ClearSubNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_ClearSubNodeStatus_Call) Return() *ExecutableNodeStatus_ClearSubNodeStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_ClearSubNodeStatus_Call) RunAndReturn(run func()) *ExecutableNodeStatus_ClearSubNodeStatus_Call {
	_c.Run(run)
	return _c
}

// ClearTaskStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) ClearTaskStatus() {
	_m.Called()
}

// ExecutableNodeStatus_ClearTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearTaskStatus'
type ExecutableNodeStatus_ClearTaskStatus_Call struct {
	*mock.Call
}

// ClearTaskStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) ClearTaskStatus() *ExecutableNodeStatus_ClearTaskStatus_Call {
	return &ExecutableNodeStatus_ClearTaskStatus_Call{Call: _e.mock.On("ClearTaskStatus")}
}

func (_c *ExecutableNodeStatus_ClearTaskStatus_Call) Run(run func()) *ExecutableNodeStatus_ClearTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_ClearTaskStatus_Call) Return() *ExecutableNodeStatus_ClearTaskStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_ClearTaskStatus_Call) RunAndReturn(run func()) *ExecutableNodeStatus_ClearTaskStatus_Call {
	_c.Run(run)
	return _c
}

// ClearWorkflowStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) ClearWorkflowStatus() {
	_m.Called()
}

// ExecutableNodeStatus_ClearWorkflowStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearWorkflowStatus'
type ExecutableNodeStatus_ClearWorkflowStatus_Call struct {
	*mock.Call
}

// ClearWorkflowStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) ClearWorkflowStatus() *ExecutableNodeStatus_ClearWorkflowStatus_Call {
	return &ExecutableNodeStatus_ClearWorkflowStatus_Call{Call: _e.mock.On("ClearWorkflowStatus")}
}

func (_c *ExecutableNodeStatus_ClearWorkflowStatus_Call) Run(run func()) *ExecutableNodeStatus_ClearWorkflowStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_ClearWorkflowStatus_Call) Return() *ExecutableNodeStatus_ClearWorkflowStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_ClearWorkflowStatus_Call) RunAndReturn(run func()) *ExecutableNodeStatus_ClearWorkflowStatus_Call {
	_c.Run(run)
	return _c
}

// GetArrayNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetArrayNodeStatus() v1alpha1.MutableArrayNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArrayNodeStatus")
	}

	var r0 v1alpha1.MutableArrayNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableArrayNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableArrayNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetArrayNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArrayNodeStatus'
type ExecutableNodeStatus_GetArrayNodeStatus_Call struct {
	*mock.Call
}

// GetArrayNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetArrayNodeStatus() *ExecutableNodeStatus_GetArrayNodeStatus_Call {
	return &ExecutableNodeStatus_GetArrayNodeStatus_Call{Call: _e.mock.On("GetArrayNodeStatus")}
}

func (_c *ExecutableNodeStatus_GetArrayNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_GetArrayNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetArrayNodeStatus_Call) Return(_a0 v1alpha1.MutableArrayNodeStatus) *ExecutableNodeStatus_GetArrayNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetArrayNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableArrayNodeStatus) *ExecutableNodeStatus_GetArrayNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetAttempts provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetAttempts() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAttempts")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutableNodeStatus_GetAttempts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAttempts'
type ExecutableNodeStatus_GetAttempts_Call struct {
	*mock.Call
}

// GetAttempts is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetAttempts() *ExecutableNodeStatus_GetAttempts_Call {
	return &ExecutableNodeStatus_GetAttempts_Call{Call: _e.mock.On("GetAttempts")}
}

func (_c *ExecutableNodeStatus_GetAttempts_Call) Run(run func()) *ExecutableNodeStatus_GetAttempts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetAttempts_Call) Return(_a0 uint32) *ExecutableNodeStatus_GetAttempts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetAttempts_Call) RunAndReturn(run func() uint32) *ExecutableNodeStatus_GetAttempts_Call {
	_c.Call.Return(run)
	return _c
}

// GetBranchStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetBranchStatus() v1alpha1.MutableBranchNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBranchStatus")
	}

	var r0 v1alpha1.MutableBranchNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableBranchNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableBranchNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetBranchStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBranchStatus'
type ExecutableNodeStatus_GetBranchStatus_Call struct {
	*mock.Call
}

// GetBranchStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetBranchStatus() *ExecutableNodeStatus_GetBranchStatus_Call {
	return &ExecutableNodeStatus_GetBranchStatus_Call{Call: _e.mock.On("GetBranchStatus")}
}

func (_c *ExecutableNodeStatus_GetBranchStatus_Call) Run(run func()) *ExecutableNodeStatus_GetBranchStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetBranchStatus_Call) Return(_a0 v1alpha1.MutableBranchNodeStatus) *ExecutableNodeStatus_GetBranchStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetBranchStatus_Call) RunAndReturn(run func() v1alpha1.MutableBranchNodeStatus) *ExecutableNodeStatus_GetBranchStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataDir provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetDataDir() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDataDir")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// ExecutableNodeStatus_GetDataDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataDir'
type ExecutableNodeStatus_GetDataDir_Call struct {
	*mock.Call
}

// GetDataDir is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetDataDir() *ExecutableNodeStatus_GetDataDir_Call {
	return &ExecutableNodeStatus_GetDataDir_Call{Call: _e.mock.On("GetDataDir")}
}

func (_c *ExecutableNodeStatus_GetDataDir_Call) Run(run func()) *ExecutableNodeStatus_GetDataDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetDataDir_Call) Return(_a0 storage.DataReference) *ExecutableNodeStatus_GetDataDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetDataDir_Call) RunAndReturn(run func() storage.DataReference) *ExecutableNodeStatus_GetDataDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetDynamicNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetDynamicNodeStatus() v1alpha1.MutableDynamicNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDynamicNodeStatus")
	}

	var r0 v1alpha1.MutableDynamicNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableDynamicNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableDynamicNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetDynamicNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamicNodeStatus'
type ExecutableNodeStatus_GetDynamicNodeStatus_Call struct {
	*mock.Call
}

// GetDynamicNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetDynamicNodeStatus() *ExecutableNodeStatus_GetDynamicNodeStatus_Call {
	return &ExecutableNodeStatus_GetDynamicNodeStatus_Call{Call: _e.mock.On("GetDynamicNodeStatus")}
}

func (_c *ExecutableNodeStatus_GetDynamicNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_GetDynamicNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetDynamicNodeStatus_Call) Return(_a0 v1alpha1.MutableDynamicNodeStatus) *ExecutableNodeStatus_GetDynamicNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetDynamicNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableDynamicNodeStatus) *ExecutableNodeStatus_GetDynamicNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionError provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetExecutionError() *core.ExecutionError {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionError")
	}

	var r0 *core.ExecutionError
	if rf, ok := ret.Get(0).(func() *core.ExecutionError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ExecutionError)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetExecutionError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionError'
type ExecutableNodeStatus_GetExecutionError_Call struct {
	*mock.Call
}

// GetExecutionError is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetExecutionError() *ExecutableNodeStatus_GetExecutionError_Call {
	return &ExecutableNodeStatus_GetExecutionError_Call{Call: _e.mock.On("GetExecutionError")}
}

func (_c *ExecutableNodeStatus_GetExecutionError_Call) Run(run func()) *ExecutableNodeStatus_GetExecutionError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetExecutionError_Call) Return(_a0 *core.ExecutionError) *ExecutableNodeStatus_GetExecutionError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetExecutionError_Call) RunAndReturn(run func() *core.ExecutionError) *ExecutableNodeStatus_GetExecutionError_Call {
	_c.Call.Return(run)
	return _c
}

// GetGateNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetGateNodeStatus() v1alpha1.MutableGateNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGateNodeStatus")
	}

	var r0 v1alpha1.MutableGateNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableGateNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableGateNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetGateNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGateNodeStatus'
type ExecutableNodeStatus_GetGateNodeStatus_Call struct {
	*mock.Call
}

// GetGateNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetGateNodeStatus() *ExecutableNodeStatus_GetGateNodeStatus_Call {
	return &ExecutableNodeStatus_GetGateNodeStatus_Call{Call: _e.mock.On("GetGateNodeStatus")}
}

func (_c *ExecutableNodeStatus_GetGateNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_GetGateNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetGateNodeStatus_Call) Return(_a0 v1alpha1.MutableGateNodeStatus) *ExecutableNodeStatus_GetGateNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetGateNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableGateNodeStatus) *ExecutableNodeStatus_GetGateNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastAttemptStartedAt provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetLastAttemptStartedAt() *v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastAttemptStartedAt")
	}

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetLastAttemptStartedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastAttemptStartedAt'
type ExecutableNodeStatus_GetLastAttemptStartedAt_Call struct {
	*mock.Call
}

// GetLastAttemptStartedAt is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetLastAttemptStartedAt() *ExecutableNodeStatus_GetLastAttemptStartedAt_Call {
	return &ExecutableNodeStatus_GetLastAttemptStartedAt_Call{Call: _e.mock.On("GetLastAttemptStartedAt")}
}

func (_c *ExecutableNodeStatus_GetLastAttemptStartedAt_Call) Run(run func()) *ExecutableNodeStatus_GetLastAttemptStartedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetLastAttemptStartedAt_Call) Return(_a0 *v1.Time) *ExecutableNodeStatus_GetLastAttemptStartedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetLastAttemptStartedAt_Call) RunAndReturn(run func() *v1.Time) *ExecutableNodeStatus_GetLastAttemptStartedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastUpdatedAt provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetLastUpdatedAt() *v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastUpdatedAt")
	}

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetLastUpdatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastUpdatedAt'
type ExecutableNodeStatus_GetLastUpdatedAt_Call struct {
	*mock.Call
}

// GetLastUpdatedAt is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetLastUpdatedAt() *ExecutableNodeStatus_GetLastUpdatedAt_Call {
	return &ExecutableNodeStatus_GetLastUpdatedAt_Call{Call: _e.mock.On("GetLastUpdatedAt")}
}

func (_c *ExecutableNodeStatus_GetLastUpdatedAt_Call) Run(run func()) *ExecutableNodeStatus_GetLastUpdatedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetLastUpdatedAt_Call) Return(_a0 *v1.Time) *ExecutableNodeStatus_GetLastUpdatedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetLastUpdatedAt_Call) RunAndReturn(run func() *v1.Time) *ExecutableNodeStatus_GetLastUpdatedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessage provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetMessage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableNodeStatus_GetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessage'
type ExecutableNodeStatus_GetMessage_Call struct {
	*mock.Call
}

// GetMessage is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetMessage() *ExecutableNodeStatus_GetMessage_Call {
	return &ExecutableNodeStatus_GetMessage_Call{Call: _e.mock.On("GetMessage")}
}

func (_c *ExecutableNodeStatus_GetMessage_Call) Run(run func()) *ExecutableNodeStatus_GetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetMessage_Call) Return(_a0 string) *ExecutableNodeStatus_GetMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetMessage_Call) RunAndReturn(run func() string) *ExecutableNodeStatus_GetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeExecutionStatus provides a mock function with given fields: ctx, id
func (_m *ExecutableNodeStatus) GetNodeExecutionStatus(ctx context.Context, id string) v1alpha1.ExecutableNodeStatus {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeExecutionStatus")
	}

	var r0 v1alpha1.ExecutableNodeStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) v1alpha1.ExecutableNodeStatus); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetNodeExecutionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeExecutionStatus'
type ExecutableNodeStatus_GetNodeExecutionStatus_Call struct {
	*mock.Call
}

// GetNodeExecutionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ExecutableNodeStatus_Expecter) GetNodeExecutionStatus(ctx interface{}, id interface{}) *ExecutableNodeStatus_GetNodeExecutionStatus_Call {
	return &ExecutableNodeStatus_GetNodeExecutionStatus_Call{Call: _e.mock.On("GetNodeExecutionStatus", ctx, id)}
}

func (_c *ExecutableNodeStatus_GetNodeExecutionStatus_Call) Run(run func(ctx context.Context, id string)) *ExecutableNodeStatus_GetNodeExecutionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetNodeExecutionStatus_Call) Return(_a0 v1alpha1.ExecutableNodeStatus) *ExecutableNodeStatus_GetNodeExecutionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetNodeExecutionStatus_Call) RunAndReturn(run func(context.Context, string) v1alpha1.ExecutableNodeStatus) *ExecutableNodeStatus_GetNodeExecutionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateArrayNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetOrCreateArrayNodeStatus() v1alpha1.MutableArrayNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateArrayNodeStatus")
	}

	var r0 v1alpha1.MutableArrayNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableArrayNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableArrayNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetOrCreateArrayNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateArrayNodeStatus'
type ExecutableNodeStatus_GetOrCreateArrayNodeStatus_Call struct {
	*mock.Call
}

// GetOrCreateArrayNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetOrCreateArrayNodeStatus() *ExecutableNodeStatus_GetOrCreateArrayNodeStatus_Call {
	return &ExecutableNodeStatus_GetOrCreateArrayNodeStatus_Call{Call: _e.mock.On("GetOrCreateArrayNodeStatus")}
}

func (_c *ExecutableNodeStatus_GetOrCreateArrayNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_GetOrCreateArrayNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateArrayNodeStatus_Call) Return(_a0 v1alpha1.MutableArrayNodeStatus) *ExecutableNodeStatus_GetOrCreateArrayNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateArrayNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableArrayNodeStatus) *ExecutableNodeStatus_GetOrCreateArrayNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateBranchStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetOrCreateBranchStatus() v1alpha1.MutableBranchNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateBranchStatus")
	}

	var r0 v1alpha1.MutableBranchNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableBranchNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableBranchNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetOrCreateBranchStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateBranchStatus'
type ExecutableNodeStatus_GetOrCreateBranchStatus_Call struct {
	*mock.Call
}

// GetOrCreateBranchStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetOrCreateBranchStatus() *ExecutableNodeStatus_GetOrCreateBranchStatus_Call {
	return &ExecutableNodeStatus_GetOrCreateBranchStatus_Call{Call: _e.mock.On("GetOrCreateBranchStatus")}
}

func (_c *ExecutableNodeStatus_GetOrCreateBranchStatus_Call) Run(run func()) *ExecutableNodeStatus_GetOrCreateBranchStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateBranchStatus_Call) Return(_a0 v1alpha1.MutableBranchNodeStatus) *ExecutableNodeStatus_GetOrCreateBranchStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateBranchStatus_Call) RunAndReturn(run func() v1alpha1.MutableBranchNodeStatus) *ExecutableNodeStatus_GetOrCreateBranchStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateDynamicNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetOrCreateDynamicNodeStatus() v1alpha1.MutableDynamicNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateDynamicNodeStatus")
	}

	var r0 v1alpha1.MutableDynamicNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableDynamicNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableDynamicNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetOrCreateDynamicNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateDynamicNodeStatus'
type ExecutableNodeStatus_GetOrCreateDynamicNodeStatus_Call struct {
	*mock.Call
}

// GetOrCreateDynamicNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetOrCreateDynamicNodeStatus() *ExecutableNodeStatus_GetOrCreateDynamicNodeStatus_Call {
	return &ExecutableNodeStatus_GetOrCreateDynamicNodeStatus_Call{Call: _e.mock.On("GetOrCreateDynamicNodeStatus")}
}

func (_c *ExecutableNodeStatus_GetOrCreateDynamicNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_GetOrCreateDynamicNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateDynamicNodeStatus_Call) Return(_a0 v1alpha1.MutableDynamicNodeStatus) *ExecutableNodeStatus_GetOrCreateDynamicNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateDynamicNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableDynamicNodeStatus) *ExecutableNodeStatus_GetOrCreateDynamicNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateGateNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetOrCreateGateNodeStatus() v1alpha1.MutableGateNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateGateNodeStatus")
	}

	var r0 v1alpha1.MutableGateNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableGateNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableGateNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetOrCreateGateNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateGateNodeStatus'
type ExecutableNodeStatus_GetOrCreateGateNodeStatus_Call struct {
	*mock.Call
}

// GetOrCreateGateNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetOrCreateGateNodeStatus() *ExecutableNodeStatus_GetOrCreateGateNodeStatus_Call {
	return &ExecutableNodeStatus_GetOrCreateGateNodeStatus_Call{Call: _e.mock.On("GetOrCreateGateNodeStatus")}
}

func (_c *ExecutableNodeStatus_GetOrCreateGateNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_GetOrCreateGateNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateGateNodeStatus_Call) Return(_a0 v1alpha1.MutableGateNodeStatus) *ExecutableNodeStatus_GetOrCreateGateNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateGateNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableGateNodeStatus) *ExecutableNodeStatus_GetOrCreateGateNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateTaskStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetOrCreateTaskStatus() v1alpha1.MutableTaskNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateTaskStatus")
	}

	var r0 v1alpha1.MutableTaskNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableTaskNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableTaskNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetOrCreateTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateTaskStatus'
type ExecutableNodeStatus_GetOrCreateTaskStatus_Call struct {
	*mock.Call
}

// GetOrCreateTaskStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetOrCreateTaskStatus() *ExecutableNodeStatus_GetOrCreateTaskStatus_Call {
	return &ExecutableNodeStatus_GetOrCreateTaskStatus_Call{Call: _e.mock.On("GetOrCreateTaskStatus")}
}

func (_c *ExecutableNodeStatus_GetOrCreateTaskStatus_Call) Run(run func()) *ExecutableNodeStatus_GetOrCreateTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateTaskStatus_Call) Return(_a0 v1alpha1.MutableTaskNodeStatus) *ExecutableNodeStatus_GetOrCreateTaskStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateTaskStatus_Call) RunAndReturn(run func() v1alpha1.MutableTaskNodeStatus) *ExecutableNodeStatus_GetOrCreateTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateWorkflowStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetOrCreateWorkflowStatus() v1alpha1.MutableWorkflowNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateWorkflowStatus")
	}

	var r0 v1alpha1.MutableWorkflowNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableWorkflowNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableWorkflowNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetOrCreateWorkflowStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateWorkflowStatus'
type ExecutableNodeStatus_GetOrCreateWorkflowStatus_Call struct {
	*mock.Call
}

// GetOrCreateWorkflowStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetOrCreateWorkflowStatus() *ExecutableNodeStatus_GetOrCreateWorkflowStatus_Call {
	return &ExecutableNodeStatus_GetOrCreateWorkflowStatus_Call{Call: _e.mock.On("GetOrCreateWorkflowStatus")}
}

func (_c *ExecutableNodeStatus_GetOrCreateWorkflowStatus_Call) Run(run func()) *ExecutableNodeStatus_GetOrCreateWorkflowStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateWorkflowStatus_Call) Return(_a0 v1alpha1.MutableWorkflowNodeStatus) *ExecutableNodeStatus_GetOrCreateWorkflowStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetOrCreateWorkflowStatus_Call) RunAndReturn(run func() v1alpha1.MutableWorkflowNodeStatus) *ExecutableNodeStatus_GetOrCreateWorkflowStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputDir provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetOutputDir() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputDir")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// ExecutableNodeStatus_GetOutputDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputDir'
type ExecutableNodeStatus_GetOutputDir_Call struct {
	*mock.Call
}

// GetOutputDir is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetOutputDir() *ExecutableNodeStatus_GetOutputDir_Call {
	return &ExecutableNodeStatus_GetOutputDir_Call{Call: _e.mock.On("GetOutputDir")}
}

func (_c *ExecutableNodeStatus_GetOutputDir_Call) Run(run func()) *ExecutableNodeStatus_GetOutputDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetOutputDir_Call) Return(_a0 storage.DataReference) *ExecutableNodeStatus_GetOutputDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetOutputDir_Call) RunAndReturn(run func() storage.DataReference) *ExecutableNodeStatus_GetOutputDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetParentNodeID provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetParentNodeID() *string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentNodeID")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetParentNodeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentNodeID'
type ExecutableNodeStatus_GetParentNodeID_Call struct {
	*mock.Call
}

// GetParentNodeID is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetParentNodeID() *ExecutableNodeStatus_GetParentNodeID_Call {
	return &ExecutableNodeStatus_GetParentNodeID_Call{Call: _e.mock.On("GetParentNodeID")}
}

func (_c *ExecutableNodeStatus_GetParentNodeID_Call) Run(run func()) *ExecutableNodeStatus_GetParentNodeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetParentNodeID_Call) Return(_a0 *string) *ExecutableNodeStatus_GetParentNodeID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetParentNodeID_Call) RunAndReturn(run func() *string) *ExecutableNodeStatus_GetParentNodeID_Call {
	_c.Call.Return(run)
	return _c
}

// GetParentTaskID provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetParentTaskID() *core.TaskExecutionIdentifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParentTaskID")
	}

	var r0 *core.TaskExecutionIdentifier
	if rf, ok := ret.Get(0).(func() *core.TaskExecutionIdentifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TaskExecutionIdentifier)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetParentTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParentTaskID'
type ExecutableNodeStatus_GetParentTaskID_Call struct {
	*mock.Call
}

// GetParentTaskID is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetParentTaskID() *ExecutableNodeStatus_GetParentTaskID_Call {
	return &ExecutableNodeStatus_GetParentTaskID_Call{Call: _e.mock.On("GetParentTaskID")}
}

func (_c *ExecutableNodeStatus_GetParentTaskID_Call) Run(run func()) *ExecutableNodeStatus_GetParentTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetParentTaskID_Call) Return(_a0 *core.TaskExecutionIdentifier) *ExecutableNodeStatus_GetParentTaskID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetParentTaskID_Call) RunAndReturn(run func() *core.TaskExecutionIdentifier) *ExecutableNodeStatus_GetParentTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhase provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetPhase() v1alpha1.NodePhase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPhase")
	}

	var r0 v1alpha1.NodePhase
	if rf, ok := ret.Get(0).(func() v1alpha1.NodePhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.NodePhase)
	}

	return r0
}

// ExecutableNodeStatus_GetPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhase'
type ExecutableNodeStatus_GetPhase_Call struct {
	*mock.Call
}

// GetPhase is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetPhase() *ExecutableNodeStatus_GetPhase_Call {
	return &ExecutableNodeStatus_GetPhase_Call{Call: _e.mock.On("GetPhase")}
}

func (_c *ExecutableNodeStatus_GetPhase_Call) Run(run func()) *ExecutableNodeStatus_GetPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetPhase_Call) Return(_a0 v1alpha1.NodePhase) *ExecutableNodeStatus_GetPhase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetPhase_Call) RunAndReturn(run func() v1alpha1.NodePhase) *ExecutableNodeStatus_GetPhase_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueuedAt provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetQueuedAt() *v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetQueuedAt")
	}

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetQueuedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueuedAt'
type ExecutableNodeStatus_GetQueuedAt_Call struct {
	*mock.Call
}

// GetQueuedAt is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetQueuedAt() *ExecutableNodeStatus_GetQueuedAt_Call {
	return &ExecutableNodeStatus_GetQueuedAt_Call{Call: _e.mock.On("GetQueuedAt")}
}

func (_c *ExecutableNodeStatus_GetQueuedAt_Call) Run(run func()) *ExecutableNodeStatus_GetQueuedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetQueuedAt_Call) Return(_a0 *v1.Time) *ExecutableNodeStatus_GetQueuedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetQueuedAt_Call) RunAndReturn(run func() *v1.Time) *ExecutableNodeStatus_GetQueuedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartedAt provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetStartedAt() *v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStartedAt")
	}

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetStartedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartedAt'
type ExecutableNodeStatus_GetStartedAt_Call struct {
	*mock.Call
}

// GetStartedAt is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetStartedAt() *ExecutableNodeStatus_GetStartedAt_Call {
	return &ExecutableNodeStatus_GetStartedAt_Call{Call: _e.mock.On("GetStartedAt")}
}

func (_c *ExecutableNodeStatus_GetStartedAt_Call) Run(run func()) *ExecutableNodeStatus_GetStartedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetStartedAt_Call) Return(_a0 *v1.Time) *ExecutableNodeStatus_GetStartedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetStartedAt_Call) RunAndReturn(run func() *v1.Time) *ExecutableNodeStatus_GetStartedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoppedAt provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetStoppedAt() *v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoppedAt")
	}

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetStoppedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoppedAt'
type ExecutableNodeStatus_GetStoppedAt_Call struct {
	*mock.Call
}

// GetStoppedAt is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetStoppedAt() *ExecutableNodeStatus_GetStoppedAt_Call {
	return &ExecutableNodeStatus_GetStoppedAt_Call{Call: _e.mock.On("GetStoppedAt")}
}

func (_c *ExecutableNodeStatus_GetStoppedAt_Call) Run(run func()) *ExecutableNodeStatus_GetStoppedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetStoppedAt_Call) Return(_a0 *v1.Time) *ExecutableNodeStatus_GetStoppedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetStoppedAt_Call) RunAndReturn(run func() *v1.Time) *ExecutableNodeStatus_GetStoppedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemFailures provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetSystemFailures() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSystemFailures")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutableNodeStatus_GetSystemFailures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemFailures'
type ExecutableNodeStatus_GetSystemFailures_Call struct {
	*mock.Call
}

// GetSystemFailures is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetSystemFailures() *ExecutableNodeStatus_GetSystemFailures_Call {
	return &ExecutableNodeStatus_GetSystemFailures_Call{Call: _e.mock.On("GetSystemFailures")}
}

func (_c *ExecutableNodeStatus_GetSystemFailures_Call) Run(run func()) *ExecutableNodeStatus_GetSystemFailures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetSystemFailures_Call) Return(_a0 uint32) *ExecutableNodeStatus_GetSystemFailures_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetSystemFailures_Call) RunAndReturn(run func() uint32) *ExecutableNodeStatus_GetSystemFailures_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetTaskNodeStatus() v1alpha1.ExecutableTaskNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskNodeStatus")
	}

	var r0 v1alpha1.ExecutableTaskNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableTaskNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableTaskNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetTaskNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskNodeStatus'
type ExecutableNodeStatus_GetTaskNodeStatus_Call struct {
	*mock.Call
}

// GetTaskNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetTaskNodeStatus() *ExecutableNodeStatus_GetTaskNodeStatus_Call {
	return &ExecutableNodeStatus_GetTaskNodeStatus_Call{Call: _e.mock.On("GetTaskNodeStatus")}
}

func (_c *ExecutableNodeStatus_GetTaskNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_GetTaskNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetTaskNodeStatus_Call) Return(_a0 v1alpha1.ExecutableTaskNodeStatus) *ExecutableNodeStatus_GetTaskNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetTaskNodeStatus_Call) RunAndReturn(run func() v1alpha1.ExecutableTaskNodeStatus) *ExecutableNodeStatus_GetTaskNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetTaskStatus() v1alpha1.MutableTaskNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskStatus")
	}

	var r0 v1alpha1.MutableTaskNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableTaskNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableTaskNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskStatus'
type ExecutableNodeStatus_GetTaskStatus_Call struct {
	*mock.Call
}

// GetTaskStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetTaskStatus() *ExecutableNodeStatus_GetTaskStatus_Call {
	return &ExecutableNodeStatus_GetTaskStatus_Call{Call: _e.mock.On("GetTaskStatus")}
}

func (_c *ExecutableNodeStatus_GetTaskStatus_Call) Run(run func()) *ExecutableNodeStatus_GetTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetTaskStatus_Call) Return(_a0 v1alpha1.MutableTaskNodeStatus) *ExecutableNodeStatus_GetTaskStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetTaskStatus_Call) RunAndReturn(run func() v1alpha1.MutableTaskNodeStatus) *ExecutableNodeStatus_GetTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowNodeStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetWorkflowNodeStatus() v1alpha1.ExecutableWorkflowNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowNodeStatus")
	}

	var r0 v1alpha1.ExecutableWorkflowNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableWorkflowNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableWorkflowNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetWorkflowNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowNodeStatus'
type ExecutableNodeStatus_GetWorkflowNodeStatus_Call struct {
	*mock.Call
}

// GetWorkflowNodeStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetWorkflowNodeStatus() *ExecutableNodeStatus_GetWorkflowNodeStatus_Call {
	return &ExecutableNodeStatus_GetWorkflowNodeStatus_Call{Call: _e.mock.On("GetWorkflowNodeStatus")}
}

func (_c *ExecutableNodeStatus_GetWorkflowNodeStatus_Call) Run(run func()) *ExecutableNodeStatus_GetWorkflowNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetWorkflowNodeStatus_Call) Return(_a0 v1alpha1.ExecutableWorkflowNodeStatus) *ExecutableNodeStatus_GetWorkflowNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetWorkflowNodeStatus_Call) RunAndReturn(run func() v1alpha1.ExecutableWorkflowNodeStatus) *ExecutableNodeStatus_GetWorkflowNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowStatus provides a mock function with no fields
func (_m *ExecutableNodeStatus) GetWorkflowStatus() v1alpha1.MutableWorkflowNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowStatus")
	}

	var r0 v1alpha1.MutableWorkflowNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableWorkflowNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableWorkflowNodeStatus)
		}
	}

	return r0
}

// ExecutableNodeStatus_GetWorkflowStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowStatus'
type ExecutableNodeStatus_GetWorkflowStatus_Call struct {
	*mock.Call
}

// GetWorkflowStatus is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) GetWorkflowStatus() *ExecutableNodeStatus_GetWorkflowStatus_Call {
	return &ExecutableNodeStatus_GetWorkflowStatus_Call{Call: _e.mock.On("GetWorkflowStatus")}
}

func (_c *ExecutableNodeStatus_GetWorkflowStatus_Call) Run(run func()) *ExecutableNodeStatus_GetWorkflowStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_GetWorkflowStatus_Call) Return(_a0 v1alpha1.MutableWorkflowNodeStatus) *ExecutableNodeStatus_GetWorkflowStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_GetWorkflowStatus_Call) RunAndReturn(run func() v1alpha1.MutableWorkflowNodeStatus) *ExecutableNodeStatus_GetWorkflowStatus_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementAttempts provides a mock function with no fields
func (_m *ExecutableNodeStatus) IncrementAttempts() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncrementAttempts")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutableNodeStatus_IncrementAttempts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementAttempts'
type ExecutableNodeStatus_IncrementAttempts_Call struct {
	*mock.Call
}

// IncrementAttempts is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) IncrementAttempts() *ExecutableNodeStatus_IncrementAttempts_Call {
	return &ExecutableNodeStatus_IncrementAttempts_Call{Call: _e.mock.On("IncrementAttempts")}
}

func (_c *ExecutableNodeStatus_IncrementAttempts_Call) Run(run func()) *ExecutableNodeStatus_IncrementAttempts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_IncrementAttempts_Call) Return(_a0 uint32) *ExecutableNodeStatus_IncrementAttempts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_IncrementAttempts_Call) RunAndReturn(run func() uint32) *ExecutableNodeStatus_IncrementAttempts_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementSystemFailures provides a mock function with no fields
func (_m *ExecutableNodeStatus) IncrementSystemFailures() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncrementSystemFailures")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// ExecutableNodeStatus_IncrementSystemFailures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementSystemFailures'
type ExecutableNodeStatus_IncrementSystemFailures_Call struct {
	*mock.Call
}

// IncrementSystemFailures is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) IncrementSystemFailures() *ExecutableNodeStatus_IncrementSystemFailures_Call {
	return &ExecutableNodeStatus_IncrementSystemFailures_Call{Call: _e.mock.On("IncrementSystemFailures")}
}

func (_c *ExecutableNodeStatus_IncrementSystemFailures_Call) Run(run func()) *ExecutableNodeStatus_IncrementSystemFailures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_IncrementSystemFailures_Call) Return(_a0 uint32) *ExecutableNodeStatus_IncrementSystemFailures_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_IncrementSystemFailures_Call) RunAndReturn(run func() uint32) *ExecutableNodeStatus_IncrementSystemFailures_Call {
	_c.Call.Return(run)
	return _c
}

// IsCached provides a mock function with no fields
func (_m *ExecutableNodeStatus) IsCached() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsCached")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutableNodeStatus_IsCached_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCached'
type ExecutableNodeStatus_IsCached_Call struct {
	*mock.Call
}

// IsCached is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) IsCached() *ExecutableNodeStatus_IsCached_Call {
	return &ExecutableNodeStatus_IsCached_Call{Call: _e.mock.On("IsCached")}
}

func (_c *ExecutableNodeStatus_IsCached_Call) Run(run func()) *ExecutableNodeStatus_IsCached_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_IsCached_Call) Return(_a0 bool) *ExecutableNodeStatus_IsCached_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_IsCached_Call) RunAndReturn(run func() bool) *ExecutableNodeStatus_IsCached_Call {
	_c.Call.Return(run)
	return _c
}

// IsDirty provides a mock function with no fields
func (_m *ExecutableNodeStatus) IsDirty() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDirty")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutableNodeStatus_IsDirty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDirty'
type ExecutableNodeStatus_IsDirty_Call struct {
	*mock.Call
}

// IsDirty is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) IsDirty() *ExecutableNodeStatus_IsDirty_Call {
	return &ExecutableNodeStatus_IsDirty_Call{Call: _e.mock.On("IsDirty")}
}

func (_c *ExecutableNodeStatus_IsDirty_Call) Run(run func()) *ExecutableNodeStatus_IsDirty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_IsDirty_Call) Return(_a0 bool) *ExecutableNodeStatus_IsDirty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNodeStatus_IsDirty_Call) RunAndReturn(run func() bool) *ExecutableNodeStatus_IsDirty_Call {
	_c.Call.Return(run)
	return _c
}

// ResetDirty provides a mock function with no fields
func (_m *ExecutableNodeStatus) ResetDirty() {
	_m.Called()
}

// ExecutableNodeStatus_ResetDirty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetDirty'
type ExecutableNodeStatus_ResetDirty_Call struct {
	*mock.Call
}

// ResetDirty is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) ResetDirty() *ExecutableNodeStatus_ResetDirty_Call {
	return &ExecutableNodeStatus_ResetDirty_Call{Call: _e.mock.On("ResetDirty")}
}

func (_c *ExecutableNodeStatus_ResetDirty_Call) Run(run func()) *ExecutableNodeStatus_ResetDirty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_ResetDirty_Call) Return() *ExecutableNodeStatus_ResetDirty_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_ResetDirty_Call) RunAndReturn(run func()) *ExecutableNodeStatus_ResetDirty_Call {
	_c.Run(run)
	return _c
}

// SetCached provides a mock function with no fields
func (_m *ExecutableNodeStatus) SetCached() {
	_m.Called()
}

// ExecutableNodeStatus_SetCached_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCached'
type ExecutableNodeStatus_SetCached_Call struct {
	*mock.Call
}

// SetCached is a helper method to define mock.On call
func (_e *ExecutableNodeStatus_Expecter) SetCached() *ExecutableNodeStatus_SetCached_Call {
	return &ExecutableNodeStatus_SetCached_Call{Call: _e.mock.On("SetCached")}
}

func (_c *ExecutableNodeStatus_SetCached_Call) Run(run func()) *ExecutableNodeStatus_SetCached_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNodeStatus_SetCached_Call) Return() *ExecutableNodeStatus_SetCached_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_SetCached_Call) RunAndReturn(run func()) *ExecutableNodeStatus_SetCached_Call {
	_c.Run(run)
	return _c
}

// SetDataDir provides a mock function with given fields: _a0
func (_m *ExecutableNodeStatus) SetDataDir(_a0 storage.DataReference) {
	_m.Called(_a0)
}

// ExecutableNodeStatus_SetDataDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDataDir'
type ExecutableNodeStatus_SetDataDir_Call struct {
	*mock.Call
}

// SetDataDir is a helper method to define mock.On call
//   - _a0 storage.DataReference
func (_e *ExecutableNodeStatus_Expecter) SetDataDir(_a0 interface{}) *ExecutableNodeStatus_SetDataDir_Call {
	return &ExecutableNodeStatus_SetDataDir_Call{Call: _e.mock.On("SetDataDir", _a0)}
}

func (_c *ExecutableNodeStatus_SetDataDir_Call) Run(run func(_a0 storage.DataReference)) *ExecutableNodeStatus_SetDataDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(storage.DataReference))
	})
	return _c
}

func (_c *ExecutableNodeStatus_SetDataDir_Call) Return() *ExecutableNodeStatus_SetDataDir_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_SetDataDir_Call) RunAndReturn(run func(storage.DataReference)) *ExecutableNodeStatus_SetDataDir_Call {
	_c.Run(run)
	return _c
}

// SetOutputDir provides a mock function with given fields: d
func (_m *ExecutableNodeStatus) SetOutputDir(d storage.DataReference) {
	_m.Called(d)
}

// ExecutableNodeStatus_SetOutputDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOutputDir'
type ExecutableNodeStatus_SetOutputDir_Call struct {
	*mock.Call
}

// SetOutputDir is a helper method to define mock.On call
//   - d storage.DataReference
func (_e *ExecutableNodeStatus_Expecter) SetOutputDir(d interface{}) *ExecutableNodeStatus_SetOutputDir_Call {
	return &ExecutableNodeStatus_SetOutputDir_Call{Call: _e.mock.On("SetOutputDir", d)}
}

func (_c *ExecutableNodeStatus_SetOutputDir_Call) Run(run func(d storage.DataReference)) *ExecutableNodeStatus_SetOutputDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(storage.DataReference))
	})
	return _c
}

func (_c *ExecutableNodeStatus_SetOutputDir_Call) Return() *ExecutableNodeStatus_SetOutputDir_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_SetOutputDir_Call) RunAndReturn(run func(storage.DataReference)) *ExecutableNodeStatus_SetOutputDir_Call {
	_c.Run(run)
	return _c
}

// SetParentNodeID provides a mock function with given fields: n
func (_m *ExecutableNodeStatus) SetParentNodeID(n *string) {
	_m.Called(n)
}

// ExecutableNodeStatus_SetParentNodeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParentNodeID'
type ExecutableNodeStatus_SetParentNodeID_Call struct {
	*mock.Call
}

// SetParentNodeID is a helper method to define mock.On call
//   - n *string
func (_e *ExecutableNodeStatus_Expecter) SetParentNodeID(n interface{}) *ExecutableNodeStatus_SetParentNodeID_Call {
	return &ExecutableNodeStatus_SetParentNodeID_Call{Call: _e.mock.On("SetParentNodeID", n)}
}

func (_c *ExecutableNodeStatus_SetParentNodeID_Call) Run(run func(n *string)) *ExecutableNodeStatus_SetParentNodeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *ExecutableNodeStatus_SetParentNodeID_Call) Return() *ExecutableNodeStatus_SetParentNodeID_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_SetParentNodeID_Call) RunAndReturn(run func(*string)) *ExecutableNodeStatus_SetParentNodeID_Call {
	_c.Run(run)
	return _c
}

// SetParentTaskID provides a mock function with given fields: t
func (_m *ExecutableNodeStatus) SetParentTaskID(t *core.TaskExecutionIdentifier) {
	_m.Called(t)
}

// ExecutableNodeStatus_SetParentTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParentTaskID'
type ExecutableNodeStatus_SetParentTaskID_Call struct {
	*mock.Call
}

// SetParentTaskID is a helper method to define mock.On call
//   - t *core.TaskExecutionIdentifier
func (_e *ExecutableNodeStatus_Expecter) SetParentTaskID(t interface{}) *ExecutableNodeStatus_SetParentTaskID_Call {
	return &ExecutableNodeStatus_SetParentTaskID_Call{Call: _e.mock.On("SetParentTaskID", t)}
}

func (_c *ExecutableNodeStatus_SetParentTaskID_Call) Run(run func(t *core.TaskExecutionIdentifier)) *ExecutableNodeStatus_SetParentTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.TaskExecutionIdentifier))
	})
	return _c
}

func (_c *ExecutableNodeStatus_SetParentTaskID_Call) Return() *ExecutableNodeStatus_SetParentTaskID_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_SetParentTaskID_Call) RunAndReturn(run func(*core.TaskExecutionIdentifier)) *ExecutableNodeStatus_SetParentTaskID_Call {
	_c.Run(run)
	return _c
}

// UpdatePhase provides a mock function with given fields: phase, occurredAt, reason, enableCRDebugMetadata, err
func (_m *ExecutableNodeStatus) UpdatePhase(phase v1alpha1.NodePhase, occurredAt v1.Time, reason string, enableCRDebugMetadata bool, err *core.ExecutionError) {
	_m.Called(phase, occurredAt, reason, enableCRDebugMetadata, err)
}

// ExecutableNodeStatus_UpdatePhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePhase'
type ExecutableNodeStatus_UpdatePhase_Call struct {
	*mock.Call
}

// UpdatePhase is a helper method to define mock.On call
//   - phase v1alpha1.NodePhase
//   - occurredAt v1.Time
//   - reason string
//   - enableCRDebugMetadata bool
//   - err *core.ExecutionError
func (_e *ExecutableNodeStatus_Expecter) UpdatePhase(phase interface{}, occurredAt interface{}, reason interface{}, enableCRDebugMetadata interface{}, err interface{}) *ExecutableNodeStatus_UpdatePhase_Call {
	return &ExecutableNodeStatus_UpdatePhase_Call{Call: _e.mock.On("UpdatePhase", phase, occurredAt, reason, enableCRDebugMetadata, err)}
}

func (_c *ExecutableNodeStatus_UpdatePhase_Call) Run(run func(phase v1alpha1.NodePhase, occurredAt v1.Time, reason string, enableCRDebugMetadata bool, err *core.ExecutionError)) *ExecutableNodeStatus_UpdatePhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1alpha1.NodePhase), args[1].(v1.Time), args[2].(string), args[3].(bool), args[4].(*core.ExecutionError))
	})
	return _c
}

func (_c *ExecutableNodeStatus_UpdatePhase_Call) Return() *ExecutableNodeStatus_UpdatePhase_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_UpdatePhase_Call) RunAndReturn(run func(v1alpha1.NodePhase, v1.Time, string, bool, *core.ExecutionError)) *ExecutableNodeStatus_UpdatePhase_Call {
	_c.Run(run)
	return _c
}

// VisitNodeStatuses provides a mock function with given fields: visitor
func (_m *ExecutableNodeStatus) VisitNodeStatuses(visitor func(string, v1alpha1.ExecutableNodeStatus)) {
	_m.Called(visitor)
}

// ExecutableNodeStatus_VisitNodeStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitNodeStatuses'
type ExecutableNodeStatus_VisitNodeStatuses_Call struct {
	*mock.Call
}

// VisitNodeStatuses is a helper method to define mock.On call
//   - visitor func(string , v1alpha1.ExecutableNodeStatus)
func (_e *ExecutableNodeStatus_Expecter) VisitNodeStatuses(visitor interface{}) *ExecutableNodeStatus_VisitNodeStatuses_Call {
	return &ExecutableNodeStatus_VisitNodeStatuses_Call{Call: _e.mock.On("VisitNodeStatuses", visitor)}
}

func (_c *ExecutableNodeStatus_VisitNodeStatuses_Call) Run(run func(visitor func(string, v1alpha1.ExecutableNodeStatus))) *ExecutableNodeStatus_VisitNodeStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string, v1alpha1.ExecutableNodeStatus)))
	})
	return _c
}

func (_c *ExecutableNodeStatus_VisitNodeStatuses_Call) Return() *ExecutableNodeStatus_VisitNodeStatuses_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableNodeStatus_VisitNodeStatuses_Call) RunAndReturn(run func(func(string, v1alpha1.ExecutableNodeStatus))) *ExecutableNodeStatus_VisitNodeStatuses_Call {
	_c.Run(run)
	return _c
}

// NewExecutableNodeStatus creates a new instance of ExecutableNodeStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableNodeStatus(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableNodeStatus {
	mock := &ExecutableNodeStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
