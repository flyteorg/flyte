// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ExecutableBranchNode is an autogenerated mock type for the ExecutableBranchNode type
type ExecutableBranchNode struct {
	mock.Mock
}

type ExecutableBranchNode_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableBranchNode) EXPECT() *ExecutableBranchNode_Expecter {
	return &ExecutableBranchNode_Expecter{mock: &_m.Mock}
}

// GetElse provides a mock function with given fields:
func (_m *ExecutableBranchNode) GetElse() *string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetElse")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// ExecutableBranchNode_GetElse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetElse'
type ExecutableBranchNode_GetElse_Call struct {
	*mock.Call
}

// GetElse is a helper method to define mock.On call
func (_e *ExecutableBranchNode_Expecter) GetElse() *ExecutableBranchNode_GetElse_Call {
	return &ExecutableBranchNode_GetElse_Call{Call: _e.mock.On("GetElse")}
}

func (_c *ExecutableBranchNode_GetElse_Call) Run(run func()) *ExecutableBranchNode_GetElse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableBranchNode_GetElse_Call) Return(_a0 *string) *ExecutableBranchNode_GetElse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableBranchNode_GetElse_Call) RunAndReturn(run func() *string) *ExecutableBranchNode_GetElse_Call {
	_c.Call.Return(run)
	return _c
}

// GetElseFail provides a mock function with given fields:
func (_m *ExecutableBranchNode) GetElseFail() *core.Error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetElseFail")
	}

	var r0 *core.Error
	if rf, ok := ret.Get(0).(func() *core.Error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Error)
		}
	}

	return r0
}

// ExecutableBranchNode_GetElseFail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetElseFail'
type ExecutableBranchNode_GetElseFail_Call struct {
	*mock.Call
}

// GetElseFail is a helper method to define mock.On call
func (_e *ExecutableBranchNode_Expecter) GetElseFail() *ExecutableBranchNode_GetElseFail_Call {
	return &ExecutableBranchNode_GetElseFail_Call{Call: _e.mock.On("GetElseFail")}
}

func (_c *ExecutableBranchNode_GetElseFail_Call) Run(run func()) *ExecutableBranchNode_GetElseFail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableBranchNode_GetElseFail_Call) Return(_a0 *core.Error) *ExecutableBranchNode_GetElseFail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableBranchNode_GetElseFail_Call) RunAndReturn(run func() *core.Error) *ExecutableBranchNode_GetElseFail_Call {
	_c.Call.Return(run)
	return _c
}

// GetElseIf provides a mock function with given fields:
func (_m *ExecutableBranchNode) GetElseIf() []v1alpha1.ExecutableIfBlock {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetElseIf")
	}

	var r0 []v1alpha1.ExecutableIfBlock
	if rf, ok := ret.Get(0).(func() []v1alpha1.ExecutableIfBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.ExecutableIfBlock)
		}
	}

	return r0
}

// ExecutableBranchNode_GetElseIf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetElseIf'
type ExecutableBranchNode_GetElseIf_Call struct {
	*mock.Call
}

// GetElseIf is a helper method to define mock.On call
func (_e *ExecutableBranchNode_Expecter) GetElseIf() *ExecutableBranchNode_GetElseIf_Call {
	return &ExecutableBranchNode_GetElseIf_Call{Call: _e.mock.On("GetElseIf")}
}

func (_c *ExecutableBranchNode_GetElseIf_Call) Run(run func()) *ExecutableBranchNode_GetElseIf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableBranchNode_GetElseIf_Call) Return(_a0 []v1alpha1.ExecutableIfBlock) *ExecutableBranchNode_GetElseIf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableBranchNode_GetElseIf_Call) RunAndReturn(run func() []v1alpha1.ExecutableIfBlock) *ExecutableBranchNode_GetElseIf_Call {
	_c.Call.Return(run)
	return _c
}

// GetIf provides a mock function with given fields:
func (_m *ExecutableBranchNode) GetIf() v1alpha1.ExecutableIfBlock {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIf")
	}

	var r0 v1alpha1.ExecutableIfBlock
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableIfBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableIfBlock)
		}
	}

	return r0
}

// ExecutableBranchNode_GetIf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIf'
type ExecutableBranchNode_GetIf_Call struct {
	*mock.Call
}

// GetIf is a helper method to define mock.On call
func (_e *ExecutableBranchNode_Expecter) GetIf() *ExecutableBranchNode_GetIf_Call {
	return &ExecutableBranchNode_GetIf_Call{Call: _e.mock.On("GetIf")}
}

func (_c *ExecutableBranchNode_GetIf_Call) Run(run func()) *ExecutableBranchNode_GetIf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableBranchNode_GetIf_Call) Return(_a0 v1alpha1.ExecutableIfBlock) *ExecutableBranchNode_GetIf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableBranchNode_GetIf_Call) RunAndReturn(run func() v1alpha1.ExecutableIfBlock) *ExecutableBranchNode_GetIf_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutableBranchNode creates a new instance of ExecutableBranchNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableBranchNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableBranchNode {
	mock := &ExecutableBranchNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
