// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// NodeStatusGetter is an autogenerated mock type for the NodeStatusGetter type
type NodeStatusGetter struct {
	mock.Mock
}

type NodeStatusGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeStatusGetter) EXPECT() *NodeStatusGetter_Expecter {
	return &NodeStatusGetter_Expecter{mock: &_m.Mock}
}

// GetNodeExecutionStatus provides a mock function with given fields: ctx, id
func (_m *NodeStatusGetter) GetNodeExecutionStatus(ctx context.Context, id string) v1alpha1.ExecutableNodeStatus {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeExecutionStatus")
	}

	var r0 v1alpha1.ExecutableNodeStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) v1alpha1.ExecutableNodeStatus); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNodeStatus)
		}
	}

	return r0
}

// NodeStatusGetter_GetNodeExecutionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeExecutionStatus'
type NodeStatusGetter_GetNodeExecutionStatus_Call struct {
	*mock.Call
}

// GetNodeExecutionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *NodeStatusGetter_Expecter) GetNodeExecutionStatus(ctx interface{}, id interface{}) *NodeStatusGetter_GetNodeExecutionStatus_Call {
	return &NodeStatusGetter_GetNodeExecutionStatus_Call{Call: _e.mock.On("GetNodeExecutionStatus", ctx, id)}
}

func (_c *NodeStatusGetter_GetNodeExecutionStatus_Call) Run(run func(ctx context.Context, id string)) *NodeStatusGetter_GetNodeExecutionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NodeStatusGetter_GetNodeExecutionStatus_Call) Return(_a0 v1alpha1.ExecutableNodeStatus) *NodeStatusGetter_GetNodeExecutionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeStatusGetter_GetNodeExecutionStatus_Call) RunAndReturn(run func(context.Context, string) v1alpha1.ExecutableNodeStatus) *NodeStatusGetter_GetNodeExecutionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeStatusGetter creates a new instance of NodeStatusGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeStatusGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeStatusGetter {
	mock := &NodeStatusGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
