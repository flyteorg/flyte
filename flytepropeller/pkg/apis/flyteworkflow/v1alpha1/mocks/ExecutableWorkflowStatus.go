// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/flyteorg/flyte/flytestdlib/storage"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ExecutableWorkflowStatus is an autogenerated mock type for the ExecutableWorkflowStatus type
type ExecutableWorkflowStatus struct {
	mock.Mock
}

type ExecutableWorkflowStatus_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableWorkflowStatus) EXPECT() *ExecutableWorkflowStatus_Expecter {
	return &ExecutableWorkflowStatus_Expecter{mock: &_m.Mock}
}

// ConstructNodeDataDir provides a mock function with given fields: ctx, name
func (_m *ExecutableWorkflowStatus) ConstructNodeDataDir(ctx context.Context, name string) (storage.DataReference, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ConstructNodeDataDir")
	}

	var r0 storage.DataReference
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (storage.DataReference, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) storage.DataReference); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutableWorkflowStatus_ConstructNodeDataDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConstructNodeDataDir'
type ExecutableWorkflowStatus_ConstructNodeDataDir_Call struct {
	*mock.Call
}

// ConstructNodeDataDir is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ExecutableWorkflowStatus_Expecter) ConstructNodeDataDir(ctx interface{}, name interface{}) *ExecutableWorkflowStatus_ConstructNodeDataDir_Call {
	return &ExecutableWorkflowStatus_ConstructNodeDataDir_Call{Call: _e.mock.On("ConstructNodeDataDir", ctx, name)}
}

func (_c *ExecutableWorkflowStatus_ConstructNodeDataDir_Call) Run(run func(ctx context.Context, name string)) *ExecutableWorkflowStatus_ConstructNodeDataDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_ConstructNodeDataDir_Call) Return(_a0 storage.DataReference, _a1 error) *ExecutableWorkflowStatus_ConstructNodeDataDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutableWorkflowStatus_ConstructNodeDataDir_Call) RunAndReturn(run func(context.Context, string) (storage.DataReference, error)) *ExecutableWorkflowStatus_ConstructNodeDataDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataDir provides a mock function with given fields:
func (_m *ExecutableWorkflowStatus) GetDataDir() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDataDir")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// ExecutableWorkflowStatus_GetDataDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataDir'
type ExecutableWorkflowStatus_GetDataDir_Call struct {
	*mock.Call
}

// GetDataDir is a helper method to define mock.On call
func (_e *ExecutableWorkflowStatus_Expecter) GetDataDir() *ExecutableWorkflowStatus_GetDataDir_Call {
	return &ExecutableWorkflowStatus_GetDataDir_Call{Call: _e.mock.On("GetDataDir")}
}

func (_c *ExecutableWorkflowStatus_GetDataDir_Call) Run(run func()) *ExecutableWorkflowStatus_GetDataDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_GetDataDir_Call) Return(_a0 storage.DataReference) *ExecutableWorkflowStatus_GetDataDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowStatus_GetDataDir_Call) RunAndReturn(run func() storage.DataReference) *ExecutableWorkflowStatus_GetDataDir_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionError provides a mock function with given fields:
func (_m *ExecutableWorkflowStatus) GetExecutionError() *core.ExecutionError {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionError")
	}

	var r0 *core.ExecutionError
	if rf, ok := ret.Get(0).(func() *core.ExecutionError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ExecutionError)
		}
	}

	return r0
}

// ExecutableWorkflowStatus_GetExecutionError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionError'
type ExecutableWorkflowStatus_GetExecutionError_Call struct {
	*mock.Call
}

// GetExecutionError is a helper method to define mock.On call
func (_e *ExecutableWorkflowStatus_Expecter) GetExecutionError() *ExecutableWorkflowStatus_GetExecutionError_Call {
	return &ExecutableWorkflowStatus_GetExecutionError_Call{Call: _e.mock.On("GetExecutionError")}
}

func (_c *ExecutableWorkflowStatus_GetExecutionError_Call) Run(run func()) *ExecutableWorkflowStatus_GetExecutionError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_GetExecutionError_Call) Return(_a0 *core.ExecutionError) *ExecutableWorkflowStatus_GetExecutionError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowStatus_GetExecutionError_Call) RunAndReturn(run func() *core.ExecutionError) *ExecutableWorkflowStatus_GetExecutionError_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastUpdatedAt provides a mock function with given fields:
func (_m *ExecutableWorkflowStatus) GetLastUpdatedAt() *v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastUpdatedAt")
	}

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

// ExecutableWorkflowStatus_GetLastUpdatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastUpdatedAt'
type ExecutableWorkflowStatus_GetLastUpdatedAt_Call struct {
	*mock.Call
}

// GetLastUpdatedAt is a helper method to define mock.On call
func (_e *ExecutableWorkflowStatus_Expecter) GetLastUpdatedAt() *ExecutableWorkflowStatus_GetLastUpdatedAt_Call {
	return &ExecutableWorkflowStatus_GetLastUpdatedAt_Call{Call: _e.mock.On("GetLastUpdatedAt")}
}

func (_c *ExecutableWorkflowStatus_GetLastUpdatedAt_Call) Run(run func()) *ExecutableWorkflowStatus_GetLastUpdatedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_GetLastUpdatedAt_Call) Return(_a0 *v1.Time) *ExecutableWorkflowStatus_GetLastUpdatedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowStatus_GetLastUpdatedAt_Call) RunAndReturn(run func() *v1.Time) *ExecutableWorkflowStatus_GetLastUpdatedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessage provides a mock function with given fields:
func (_m *ExecutableWorkflowStatus) GetMessage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableWorkflowStatus_GetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessage'
type ExecutableWorkflowStatus_GetMessage_Call struct {
	*mock.Call
}

// GetMessage is a helper method to define mock.On call
func (_e *ExecutableWorkflowStatus_Expecter) GetMessage() *ExecutableWorkflowStatus_GetMessage_Call {
	return &ExecutableWorkflowStatus_GetMessage_Call{Call: _e.mock.On("GetMessage")}
}

func (_c *ExecutableWorkflowStatus_GetMessage_Call) Run(run func()) *ExecutableWorkflowStatus_GetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_GetMessage_Call) Return(_a0 string) *ExecutableWorkflowStatus_GetMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowStatus_GetMessage_Call) RunAndReturn(run func() string) *ExecutableWorkflowStatus_GetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeExecutionStatus provides a mock function with given fields: ctx, id
func (_m *ExecutableWorkflowStatus) GetNodeExecutionStatus(ctx context.Context, id string) v1alpha1.ExecutableNodeStatus {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeExecutionStatus")
	}

	var r0 v1alpha1.ExecutableNodeStatus
	if rf, ok := ret.Get(0).(func(context.Context, string) v1alpha1.ExecutableNodeStatus); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNodeStatus)
		}
	}

	return r0
}

// ExecutableWorkflowStatus_GetNodeExecutionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeExecutionStatus'
type ExecutableWorkflowStatus_GetNodeExecutionStatus_Call struct {
	*mock.Call
}

// GetNodeExecutionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ExecutableWorkflowStatus_Expecter) GetNodeExecutionStatus(ctx interface{}, id interface{}) *ExecutableWorkflowStatus_GetNodeExecutionStatus_Call {
	return &ExecutableWorkflowStatus_GetNodeExecutionStatus_Call{Call: _e.mock.On("GetNodeExecutionStatus", ctx, id)}
}

func (_c *ExecutableWorkflowStatus_GetNodeExecutionStatus_Call) Run(run func(ctx context.Context, id string)) *ExecutableWorkflowStatus_GetNodeExecutionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_GetNodeExecutionStatus_Call) Return(_a0 v1alpha1.ExecutableNodeStatus) *ExecutableWorkflowStatus_GetNodeExecutionStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowStatus_GetNodeExecutionStatus_Call) RunAndReturn(run func(context.Context, string) v1alpha1.ExecutableNodeStatus) *ExecutableWorkflowStatus_GetNodeExecutionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputReference provides a mock function with given fields:
func (_m *ExecutableWorkflowStatus) GetOutputReference() storage.DataReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputReference")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// ExecutableWorkflowStatus_GetOutputReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputReference'
type ExecutableWorkflowStatus_GetOutputReference_Call struct {
	*mock.Call
}

// GetOutputReference is a helper method to define mock.On call
func (_e *ExecutableWorkflowStatus_Expecter) GetOutputReference() *ExecutableWorkflowStatus_GetOutputReference_Call {
	return &ExecutableWorkflowStatus_GetOutputReference_Call{Call: _e.mock.On("GetOutputReference")}
}

func (_c *ExecutableWorkflowStatus_GetOutputReference_Call) Run(run func()) *ExecutableWorkflowStatus_GetOutputReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_GetOutputReference_Call) Return(_a0 storage.DataReference) *ExecutableWorkflowStatus_GetOutputReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowStatus_GetOutputReference_Call) RunAndReturn(run func() storage.DataReference) *ExecutableWorkflowStatus_GetOutputReference_Call {
	_c.Call.Return(run)
	return _c
}

// GetPhase provides a mock function with given fields:
func (_m *ExecutableWorkflowStatus) GetPhase() v1alpha1.WorkflowPhase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPhase")
	}

	var r0 v1alpha1.WorkflowPhase
	if rf, ok := ret.Get(0).(func() v1alpha1.WorkflowPhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.WorkflowPhase)
	}

	return r0
}

// ExecutableWorkflowStatus_GetPhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPhase'
type ExecutableWorkflowStatus_GetPhase_Call struct {
	*mock.Call
}

// GetPhase is a helper method to define mock.On call
func (_e *ExecutableWorkflowStatus_Expecter) GetPhase() *ExecutableWorkflowStatus_GetPhase_Call {
	return &ExecutableWorkflowStatus_GetPhase_Call{Call: _e.mock.On("GetPhase")}
}

func (_c *ExecutableWorkflowStatus_GetPhase_Call) Run(run func()) *ExecutableWorkflowStatus_GetPhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_GetPhase_Call) Return(_a0 v1alpha1.WorkflowPhase) *ExecutableWorkflowStatus_GetPhase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowStatus_GetPhase_Call) RunAndReturn(run func() v1alpha1.WorkflowPhase) *ExecutableWorkflowStatus_GetPhase_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartedAt provides a mock function with given fields:
func (_m *ExecutableWorkflowStatus) GetStartedAt() *v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStartedAt")
	}

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

// ExecutableWorkflowStatus_GetStartedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartedAt'
type ExecutableWorkflowStatus_GetStartedAt_Call struct {
	*mock.Call
}

// GetStartedAt is a helper method to define mock.On call
func (_e *ExecutableWorkflowStatus_Expecter) GetStartedAt() *ExecutableWorkflowStatus_GetStartedAt_Call {
	return &ExecutableWorkflowStatus_GetStartedAt_Call{Call: _e.mock.On("GetStartedAt")}
}

func (_c *ExecutableWorkflowStatus_GetStartedAt_Call) Run(run func()) *ExecutableWorkflowStatus_GetStartedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_GetStartedAt_Call) Return(_a0 *v1.Time) *ExecutableWorkflowStatus_GetStartedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowStatus_GetStartedAt_Call) RunAndReturn(run func() *v1.Time) *ExecutableWorkflowStatus_GetStartedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoppedAt provides a mock function with given fields:
func (_m *ExecutableWorkflowStatus) GetStoppedAt() *v1.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoppedAt")
	}

	var r0 *v1.Time
	if rf, ok := ret.Get(0).(func() *v1.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Time)
		}
	}

	return r0
}

// ExecutableWorkflowStatus_GetStoppedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoppedAt'
type ExecutableWorkflowStatus_GetStoppedAt_Call struct {
	*mock.Call
}

// GetStoppedAt is a helper method to define mock.On call
func (_e *ExecutableWorkflowStatus_Expecter) GetStoppedAt() *ExecutableWorkflowStatus_GetStoppedAt_Call {
	return &ExecutableWorkflowStatus_GetStoppedAt_Call{Call: _e.mock.On("GetStoppedAt")}
}

func (_c *ExecutableWorkflowStatus_GetStoppedAt_Call) Run(run func()) *ExecutableWorkflowStatus_GetStoppedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_GetStoppedAt_Call) Return(_a0 *v1.Time) *ExecutableWorkflowStatus_GetStoppedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowStatus_GetStoppedAt_Call) RunAndReturn(run func() *v1.Time) *ExecutableWorkflowStatus_GetStoppedAt_Call {
	_c.Call.Return(run)
	return _c
}

// IncFailedAttempts provides a mock function with given fields:
func (_m *ExecutableWorkflowStatus) IncFailedAttempts() {
	_m.Called()
}

// ExecutableWorkflowStatus_IncFailedAttempts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncFailedAttempts'
type ExecutableWorkflowStatus_IncFailedAttempts_Call struct {
	*mock.Call
}

// IncFailedAttempts is a helper method to define mock.On call
func (_e *ExecutableWorkflowStatus_Expecter) IncFailedAttempts() *ExecutableWorkflowStatus_IncFailedAttempts_Call {
	return &ExecutableWorkflowStatus_IncFailedAttempts_Call{Call: _e.mock.On("IncFailedAttempts")}
}

func (_c *ExecutableWorkflowStatus_IncFailedAttempts_Call) Run(run func()) *ExecutableWorkflowStatus_IncFailedAttempts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_IncFailedAttempts_Call) Return() *ExecutableWorkflowStatus_IncFailedAttempts_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableWorkflowStatus_IncFailedAttempts_Call) RunAndReturn(run func()) *ExecutableWorkflowStatus_IncFailedAttempts_Call {
	_c.Call.Return(run)
	return _c
}

// IsTerminated provides a mock function with given fields:
func (_m *ExecutableWorkflowStatus) IsTerminated() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsTerminated")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutableWorkflowStatus_IsTerminated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTerminated'
type ExecutableWorkflowStatus_IsTerminated_Call struct {
	*mock.Call
}

// IsTerminated is a helper method to define mock.On call
func (_e *ExecutableWorkflowStatus_Expecter) IsTerminated() *ExecutableWorkflowStatus_IsTerminated_Call {
	return &ExecutableWorkflowStatus_IsTerminated_Call{Call: _e.mock.On("IsTerminated")}
}

func (_c *ExecutableWorkflowStatus_IsTerminated_Call) Run(run func()) *ExecutableWorkflowStatus_IsTerminated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_IsTerminated_Call) Return(_a0 bool) *ExecutableWorkflowStatus_IsTerminated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowStatus_IsTerminated_Call) RunAndReturn(run func() bool) *ExecutableWorkflowStatus_IsTerminated_Call {
	_c.Call.Return(run)
	return _c
}

// SetDataDir provides a mock function with given fields: _a0
func (_m *ExecutableWorkflowStatus) SetDataDir(_a0 storage.DataReference) {
	_m.Called(_a0)
}

// ExecutableWorkflowStatus_SetDataDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDataDir'
type ExecutableWorkflowStatus_SetDataDir_Call struct {
	*mock.Call
}

// SetDataDir is a helper method to define mock.On call
//   - _a0 storage.DataReference
func (_e *ExecutableWorkflowStatus_Expecter) SetDataDir(_a0 interface{}) *ExecutableWorkflowStatus_SetDataDir_Call {
	return &ExecutableWorkflowStatus_SetDataDir_Call{Call: _e.mock.On("SetDataDir", _a0)}
}

func (_c *ExecutableWorkflowStatus_SetDataDir_Call) Run(run func(_a0 storage.DataReference)) *ExecutableWorkflowStatus_SetDataDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(storage.DataReference))
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_SetDataDir_Call) Return() *ExecutableWorkflowStatus_SetDataDir_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableWorkflowStatus_SetDataDir_Call) RunAndReturn(run func(storage.DataReference)) *ExecutableWorkflowStatus_SetDataDir_Call {
	_c.Call.Return(run)
	return _c
}

// SetMessage provides a mock function with given fields: msg
func (_m *ExecutableWorkflowStatus) SetMessage(msg string) {
	_m.Called(msg)
}

// ExecutableWorkflowStatus_SetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMessage'
type ExecutableWorkflowStatus_SetMessage_Call struct {
	*mock.Call
}

// SetMessage is a helper method to define mock.On call
//   - msg string
func (_e *ExecutableWorkflowStatus_Expecter) SetMessage(msg interface{}) *ExecutableWorkflowStatus_SetMessage_Call {
	return &ExecutableWorkflowStatus_SetMessage_Call{Call: _e.mock.On("SetMessage", msg)}
}

func (_c *ExecutableWorkflowStatus_SetMessage_Call) Run(run func(msg string)) *ExecutableWorkflowStatus_SetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_SetMessage_Call) Return() *ExecutableWorkflowStatus_SetMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableWorkflowStatus_SetMessage_Call) RunAndReturn(run func(string)) *ExecutableWorkflowStatus_SetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SetOutputReference provides a mock function with given fields: reference
func (_m *ExecutableWorkflowStatus) SetOutputReference(reference storage.DataReference) {
	_m.Called(reference)
}

// ExecutableWorkflowStatus_SetOutputReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOutputReference'
type ExecutableWorkflowStatus_SetOutputReference_Call struct {
	*mock.Call
}

// SetOutputReference is a helper method to define mock.On call
//   - reference storage.DataReference
func (_e *ExecutableWorkflowStatus_Expecter) SetOutputReference(reference interface{}) *ExecutableWorkflowStatus_SetOutputReference_Call {
	return &ExecutableWorkflowStatus_SetOutputReference_Call{Call: _e.mock.On("SetOutputReference", reference)}
}

func (_c *ExecutableWorkflowStatus_SetOutputReference_Call) Run(run func(reference storage.DataReference)) *ExecutableWorkflowStatus_SetOutputReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(storage.DataReference))
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_SetOutputReference_Call) Return() *ExecutableWorkflowStatus_SetOutputReference_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableWorkflowStatus_SetOutputReference_Call) RunAndReturn(run func(storage.DataReference)) *ExecutableWorkflowStatus_SetOutputReference_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePhase provides a mock function with given fields: p, msg, err
func (_m *ExecutableWorkflowStatus) UpdatePhase(p v1alpha1.WorkflowPhase, msg string, err *core.ExecutionError) {
	_m.Called(p, msg, err)
}

// ExecutableWorkflowStatus_UpdatePhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePhase'
type ExecutableWorkflowStatus_UpdatePhase_Call struct {
	*mock.Call
}

// UpdatePhase is a helper method to define mock.On call
//   - p v1alpha1.WorkflowPhase
//   - msg string
//   - err *core.ExecutionError
func (_e *ExecutableWorkflowStatus_Expecter) UpdatePhase(p interface{}, msg interface{}, err interface{}) *ExecutableWorkflowStatus_UpdatePhase_Call {
	return &ExecutableWorkflowStatus_UpdatePhase_Call{Call: _e.mock.On("UpdatePhase", p, msg, err)}
}

func (_c *ExecutableWorkflowStatus_UpdatePhase_Call) Run(run func(p v1alpha1.WorkflowPhase, msg string, err *core.ExecutionError)) *ExecutableWorkflowStatus_UpdatePhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1alpha1.WorkflowPhase), args[1].(string), args[2].(*core.ExecutionError))
	})
	return _c
}

func (_c *ExecutableWorkflowStatus_UpdatePhase_Call) Return() *ExecutableWorkflowStatus_UpdatePhase_Call {
	_c.Call.Return()
	return _c
}

func (_c *ExecutableWorkflowStatus_UpdatePhase_Call) RunAndReturn(run func(v1alpha1.WorkflowPhase, string, *core.ExecutionError)) *ExecutableWorkflowStatus_UpdatePhase_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutableWorkflowStatus creates a new instance of ExecutableWorkflowStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableWorkflowStatus(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableWorkflowStatus {
	mock := &ExecutableWorkflowStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
