// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/flyteorg/flyte/flytestdlib/storage"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// MutableNodeStatus is an autogenerated mock type for the MutableNodeStatus type
type MutableNodeStatus struct {
	mock.Mock
}

type MutableNodeStatus_Expecter struct {
	mock *mock.Mock
}

func (_m *MutableNodeStatus) EXPECT() *MutableNodeStatus_Expecter {
	return &MutableNodeStatus_Expecter{mock: &_m.Mock}
}

// ClearArrayNodeStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) ClearArrayNodeStatus() {
	_m.Called()
}

// MutableNodeStatus_ClearArrayNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearArrayNodeStatus'
type MutableNodeStatus_ClearArrayNodeStatus_Call struct {
	*mock.Call
}

// ClearArrayNodeStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) ClearArrayNodeStatus() *MutableNodeStatus_ClearArrayNodeStatus_Call {
	return &MutableNodeStatus_ClearArrayNodeStatus_Call{Call: _e.mock.On("ClearArrayNodeStatus")}
}

func (_c *MutableNodeStatus_ClearArrayNodeStatus_Call) Run(run func()) *MutableNodeStatus_ClearArrayNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_ClearArrayNodeStatus_Call) Return() *MutableNodeStatus_ClearArrayNodeStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_ClearArrayNodeStatus_Call) RunAndReturn(run func()) *MutableNodeStatus_ClearArrayNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ClearDynamicNodeStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) ClearDynamicNodeStatus() {
	_m.Called()
}

// MutableNodeStatus_ClearDynamicNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearDynamicNodeStatus'
type MutableNodeStatus_ClearDynamicNodeStatus_Call struct {
	*mock.Call
}

// ClearDynamicNodeStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) ClearDynamicNodeStatus() *MutableNodeStatus_ClearDynamicNodeStatus_Call {
	return &MutableNodeStatus_ClearDynamicNodeStatus_Call{Call: _e.mock.On("ClearDynamicNodeStatus")}
}

func (_c *MutableNodeStatus_ClearDynamicNodeStatus_Call) Run(run func()) *MutableNodeStatus_ClearDynamicNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_ClearDynamicNodeStatus_Call) Return() *MutableNodeStatus_ClearDynamicNodeStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_ClearDynamicNodeStatus_Call) RunAndReturn(run func()) *MutableNodeStatus_ClearDynamicNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ClearGateNodeStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) ClearGateNodeStatus() {
	_m.Called()
}

// MutableNodeStatus_ClearGateNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearGateNodeStatus'
type MutableNodeStatus_ClearGateNodeStatus_Call struct {
	*mock.Call
}

// ClearGateNodeStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) ClearGateNodeStatus() *MutableNodeStatus_ClearGateNodeStatus_Call {
	return &MutableNodeStatus_ClearGateNodeStatus_Call{Call: _e.mock.On("ClearGateNodeStatus")}
}

func (_c *MutableNodeStatus_ClearGateNodeStatus_Call) Run(run func()) *MutableNodeStatus_ClearGateNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_ClearGateNodeStatus_Call) Return() *MutableNodeStatus_ClearGateNodeStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_ClearGateNodeStatus_Call) RunAndReturn(run func()) *MutableNodeStatus_ClearGateNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ClearLastAttemptStartedAt provides a mock function with given fields:
func (_m *MutableNodeStatus) ClearLastAttemptStartedAt() {
	_m.Called()
}

// MutableNodeStatus_ClearLastAttemptStartedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearLastAttemptStartedAt'
type MutableNodeStatus_ClearLastAttemptStartedAt_Call struct {
	*mock.Call
}

// ClearLastAttemptStartedAt is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) ClearLastAttemptStartedAt() *MutableNodeStatus_ClearLastAttemptStartedAt_Call {
	return &MutableNodeStatus_ClearLastAttemptStartedAt_Call{Call: _e.mock.On("ClearLastAttemptStartedAt")}
}

func (_c *MutableNodeStatus_ClearLastAttemptStartedAt_Call) Run(run func()) *MutableNodeStatus_ClearLastAttemptStartedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_ClearLastAttemptStartedAt_Call) Return() *MutableNodeStatus_ClearLastAttemptStartedAt_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_ClearLastAttemptStartedAt_Call) RunAndReturn(run func()) *MutableNodeStatus_ClearLastAttemptStartedAt_Call {
	_c.Call.Return(run)
	return _c
}

// ClearSubNodeStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) ClearSubNodeStatus() {
	_m.Called()
}

// MutableNodeStatus_ClearSubNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearSubNodeStatus'
type MutableNodeStatus_ClearSubNodeStatus_Call struct {
	*mock.Call
}

// ClearSubNodeStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) ClearSubNodeStatus() *MutableNodeStatus_ClearSubNodeStatus_Call {
	return &MutableNodeStatus_ClearSubNodeStatus_Call{Call: _e.mock.On("ClearSubNodeStatus")}
}

func (_c *MutableNodeStatus_ClearSubNodeStatus_Call) Run(run func()) *MutableNodeStatus_ClearSubNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_ClearSubNodeStatus_Call) Return() *MutableNodeStatus_ClearSubNodeStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_ClearSubNodeStatus_Call) RunAndReturn(run func()) *MutableNodeStatus_ClearSubNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ClearTaskStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) ClearTaskStatus() {
	_m.Called()
}

// MutableNodeStatus_ClearTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearTaskStatus'
type MutableNodeStatus_ClearTaskStatus_Call struct {
	*mock.Call
}

// ClearTaskStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) ClearTaskStatus() *MutableNodeStatus_ClearTaskStatus_Call {
	return &MutableNodeStatus_ClearTaskStatus_Call{Call: _e.mock.On("ClearTaskStatus")}
}

func (_c *MutableNodeStatus_ClearTaskStatus_Call) Run(run func()) *MutableNodeStatus_ClearTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_ClearTaskStatus_Call) Return() *MutableNodeStatus_ClearTaskStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_ClearTaskStatus_Call) RunAndReturn(run func()) *MutableNodeStatus_ClearTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ClearWorkflowStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) ClearWorkflowStatus() {
	_m.Called()
}

// MutableNodeStatus_ClearWorkflowStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearWorkflowStatus'
type MutableNodeStatus_ClearWorkflowStatus_Call struct {
	*mock.Call
}

// ClearWorkflowStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) ClearWorkflowStatus() *MutableNodeStatus_ClearWorkflowStatus_Call {
	return &MutableNodeStatus_ClearWorkflowStatus_Call{Call: _e.mock.On("ClearWorkflowStatus")}
}

func (_c *MutableNodeStatus_ClearWorkflowStatus_Call) Run(run func()) *MutableNodeStatus_ClearWorkflowStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_ClearWorkflowStatus_Call) Return() *MutableNodeStatus_ClearWorkflowStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_ClearWorkflowStatus_Call) RunAndReturn(run func()) *MutableNodeStatus_ClearWorkflowStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetArrayNodeStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetArrayNodeStatus() v1alpha1.MutableArrayNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArrayNodeStatus")
	}

	var r0 v1alpha1.MutableArrayNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableArrayNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableArrayNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetArrayNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArrayNodeStatus'
type MutableNodeStatus_GetArrayNodeStatus_Call struct {
	*mock.Call
}

// GetArrayNodeStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetArrayNodeStatus() *MutableNodeStatus_GetArrayNodeStatus_Call {
	return &MutableNodeStatus_GetArrayNodeStatus_Call{Call: _e.mock.On("GetArrayNodeStatus")}
}

func (_c *MutableNodeStatus_GetArrayNodeStatus_Call) Run(run func()) *MutableNodeStatus_GetArrayNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetArrayNodeStatus_Call) Return(_a0 v1alpha1.MutableArrayNodeStatus) *MutableNodeStatus_GetArrayNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetArrayNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableArrayNodeStatus) *MutableNodeStatus_GetArrayNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetBranchStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetBranchStatus() v1alpha1.MutableBranchNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBranchStatus")
	}

	var r0 v1alpha1.MutableBranchNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableBranchNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableBranchNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetBranchStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBranchStatus'
type MutableNodeStatus_GetBranchStatus_Call struct {
	*mock.Call
}

// GetBranchStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetBranchStatus() *MutableNodeStatus_GetBranchStatus_Call {
	return &MutableNodeStatus_GetBranchStatus_Call{Call: _e.mock.On("GetBranchStatus")}
}

func (_c *MutableNodeStatus_GetBranchStatus_Call) Run(run func()) *MutableNodeStatus_GetBranchStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetBranchStatus_Call) Return(_a0 v1alpha1.MutableBranchNodeStatus) *MutableNodeStatus_GetBranchStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetBranchStatus_Call) RunAndReturn(run func() v1alpha1.MutableBranchNodeStatus) *MutableNodeStatus_GetBranchStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetDynamicNodeStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetDynamicNodeStatus() v1alpha1.MutableDynamicNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDynamicNodeStatus")
	}

	var r0 v1alpha1.MutableDynamicNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableDynamicNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableDynamicNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetDynamicNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDynamicNodeStatus'
type MutableNodeStatus_GetDynamicNodeStatus_Call struct {
	*mock.Call
}

// GetDynamicNodeStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetDynamicNodeStatus() *MutableNodeStatus_GetDynamicNodeStatus_Call {
	return &MutableNodeStatus_GetDynamicNodeStatus_Call{Call: _e.mock.On("GetDynamicNodeStatus")}
}

func (_c *MutableNodeStatus_GetDynamicNodeStatus_Call) Run(run func()) *MutableNodeStatus_GetDynamicNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetDynamicNodeStatus_Call) Return(_a0 v1alpha1.MutableDynamicNodeStatus) *MutableNodeStatus_GetDynamicNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetDynamicNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableDynamicNodeStatus) *MutableNodeStatus_GetDynamicNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetGateNodeStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetGateNodeStatus() v1alpha1.MutableGateNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGateNodeStatus")
	}

	var r0 v1alpha1.MutableGateNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableGateNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableGateNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetGateNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGateNodeStatus'
type MutableNodeStatus_GetGateNodeStatus_Call struct {
	*mock.Call
}

// GetGateNodeStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetGateNodeStatus() *MutableNodeStatus_GetGateNodeStatus_Call {
	return &MutableNodeStatus_GetGateNodeStatus_Call{Call: _e.mock.On("GetGateNodeStatus")}
}

func (_c *MutableNodeStatus_GetGateNodeStatus_Call) Run(run func()) *MutableNodeStatus_GetGateNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetGateNodeStatus_Call) Return(_a0 v1alpha1.MutableGateNodeStatus) *MutableNodeStatus_GetGateNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetGateNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableGateNodeStatus) *MutableNodeStatus_GetGateNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateArrayNodeStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetOrCreateArrayNodeStatus() v1alpha1.MutableArrayNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateArrayNodeStatus")
	}

	var r0 v1alpha1.MutableArrayNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableArrayNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableArrayNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetOrCreateArrayNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateArrayNodeStatus'
type MutableNodeStatus_GetOrCreateArrayNodeStatus_Call struct {
	*mock.Call
}

// GetOrCreateArrayNodeStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetOrCreateArrayNodeStatus() *MutableNodeStatus_GetOrCreateArrayNodeStatus_Call {
	return &MutableNodeStatus_GetOrCreateArrayNodeStatus_Call{Call: _e.mock.On("GetOrCreateArrayNodeStatus")}
}

func (_c *MutableNodeStatus_GetOrCreateArrayNodeStatus_Call) Run(run func()) *MutableNodeStatus_GetOrCreateArrayNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateArrayNodeStatus_Call) Return(_a0 v1alpha1.MutableArrayNodeStatus) *MutableNodeStatus_GetOrCreateArrayNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateArrayNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableArrayNodeStatus) *MutableNodeStatus_GetOrCreateArrayNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateBranchStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetOrCreateBranchStatus() v1alpha1.MutableBranchNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateBranchStatus")
	}

	var r0 v1alpha1.MutableBranchNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableBranchNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableBranchNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetOrCreateBranchStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateBranchStatus'
type MutableNodeStatus_GetOrCreateBranchStatus_Call struct {
	*mock.Call
}

// GetOrCreateBranchStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetOrCreateBranchStatus() *MutableNodeStatus_GetOrCreateBranchStatus_Call {
	return &MutableNodeStatus_GetOrCreateBranchStatus_Call{Call: _e.mock.On("GetOrCreateBranchStatus")}
}

func (_c *MutableNodeStatus_GetOrCreateBranchStatus_Call) Run(run func()) *MutableNodeStatus_GetOrCreateBranchStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateBranchStatus_Call) Return(_a0 v1alpha1.MutableBranchNodeStatus) *MutableNodeStatus_GetOrCreateBranchStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateBranchStatus_Call) RunAndReturn(run func() v1alpha1.MutableBranchNodeStatus) *MutableNodeStatus_GetOrCreateBranchStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateDynamicNodeStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetOrCreateDynamicNodeStatus() v1alpha1.MutableDynamicNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateDynamicNodeStatus")
	}

	var r0 v1alpha1.MutableDynamicNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableDynamicNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableDynamicNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetOrCreateDynamicNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateDynamicNodeStatus'
type MutableNodeStatus_GetOrCreateDynamicNodeStatus_Call struct {
	*mock.Call
}

// GetOrCreateDynamicNodeStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetOrCreateDynamicNodeStatus() *MutableNodeStatus_GetOrCreateDynamicNodeStatus_Call {
	return &MutableNodeStatus_GetOrCreateDynamicNodeStatus_Call{Call: _e.mock.On("GetOrCreateDynamicNodeStatus")}
}

func (_c *MutableNodeStatus_GetOrCreateDynamicNodeStatus_Call) Run(run func()) *MutableNodeStatus_GetOrCreateDynamicNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateDynamicNodeStatus_Call) Return(_a0 v1alpha1.MutableDynamicNodeStatus) *MutableNodeStatus_GetOrCreateDynamicNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateDynamicNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableDynamicNodeStatus) *MutableNodeStatus_GetOrCreateDynamicNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateGateNodeStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetOrCreateGateNodeStatus() v1alpha1.MutableGateNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateGateNodeStatus")
	}

	var r0 v1alpha1.MutableGateNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableGateNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableGateNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetOrCreateGateNodeStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateGateNodeStatus'
type MutableNodeStatus_GetOrCreateGateNodeStatus_Call struct {
	*mock.Call
}

// GetOrCreateGateNodeStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetOrCreateGateNodeStatus() *MutableNodeStatus_GetOrCreateGateNodeStatus_Call {
	return &MutableNodeStatus_GetOrCreateGateNodeStatus_Call{Call: _e.mock.On("GetOrCreateGateNodeStatus")}
}

func (_c *MutableNodeStatus_GetOrCreateGateNodeStatus_Call) Run(run func()) *MutableNodeStatus_GetOrCreateGateNodeStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateGateNodeStatus_Call) Return(_a0 v1alpha1.MutableGateNodeStatus) *MutableNodeStatus_GetOrCreateGateNodeStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateGateNodeStatus_Call) RunAndReturn(run func() v1alpha1.MutableGateNodeStatus) *MutableNodeStatus_GetOrCreateGateNodeStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateTaskStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetOrCreateTaskStatus() v1alpha1.MutableTaskNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateTaskStatus")
	}

	var r0 v1alpha1.MutableTaskNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableTaskNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableTaskNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetOrCreateTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateTaskStatus'
type MutableNodeStatus_GetOrCreateTaskStatus_Call struct {
	*mock.Call
}

// GetOrCreateTaskStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetOrCreateTaskStatus() *MutableNodeStatus_GetOrCreateTaskStatus_Call {
	return &MutableNodeStatus_GetOrCreateTaskStatus_Call{Call: _e.mock.On("GetOrCreateTaskStatus")}
}

func (_c *MutableNodeStatus_GetOrCreateTaskStatus_Call) Run(run func()) *MutableNodeStatus_GetOrCreateTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateTaskStatus_Call) Return(_a0 v1alpha1.MutableTaskNodeStatus) *MutableNodeStatus_GetOrCreateTaskStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateTaskStatus_Call) RunAndReturn(run func() v1alpha1.MutableTaskNodeStatus) *MutableNodeStatus_GetOrCreateTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateWorkflowStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetOrCreateWorkflowStatus() v1alpha1.MutableWorkflowNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateWorkflowStatus")
	}

	var r0 v1alpha1.MutableWorkflowNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableWorkflowNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableWorkflowNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetOrCreateWorkflowStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateWorkflowStatus'
type MutableNodeStatus_GetOrCreateWorkflowStatus_Call struct {
	*mock.Call
}

// GetOrCreateWorkflowStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetOrCreateWorkflowStatus() *MutableNodeStatus_GetOrCreateWorkflowStatus_Call {
	return &MutableNodeStatus_GetOrCreateWorkflowStatus_Call{Call: _e.mock.On("GetOrCreateWorkflowStatus")}
}

func (_c *MutableNodeStatus_GetOrCreateWorkflowStatus_Call) Run(run func()) *MutableNodeStatus_GetOrCreateWorkflowStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateWorkflowStatus_Call) Return(_a0 v1alpha1.MutableWorkflowNodeStatus) *MutableNodeStatus_GetOrCreateWorkflowStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetOrCreateWorkflowStatus_Call) RunAndReturn(run func() v1alpha1.MutableWorkflowNodeStatus) *MutableNodeStatus_GetOrCreateWorkflowStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetTaskStatus() v1alpha1.MutableTaskNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskStatus")
	}

	var r0 v1alpha1.MutableTaskNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableTaskNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableTaskNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskStatus'
type MutableNodeStatus_GetTaskStatus_Call struct {
	*mock.Call
}

// GetTaskStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetTaskStatus() *MutableNodeStatus_GetTaskStatus_Call {
	return &MutableNodeStatus_GetTaskStatus_Call{Call: _e.mock.On("GetTaskStatus")}
}

func (_c *MutableNodeStatus_GetTaskStatus_Call) Run(run func()) *MutableNodeStatus_GetTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetTaskStatus_Call) Return(_a0 v1alpha1.MutableTaskNodeStatus) *MutableNodeStatus_GetTaskStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetTaskStatus_Call) RunAndReturn(run func() v1alpha1.MutableTaskNodeStatus) *MutableNodeStatus_GetTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowStatus provides a mock function with given fields:
func (_m *MutableNodeStatus) GetWorkflowStatus() v1alpha1.MutableWorkflowNodeStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowStatus")
	}

	var r0 v1alpha1.MutableWorkflowNodeStatus
	if rf, ok := ret.Get(0).(func() v1alpha1.MutableWorkflowNodeStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.MutableWorkflowNodeStatus)
		}
	}

	return r0
}

// MutableNodeStatus_GetWorkflowStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowStatus'
type MutableNodeStatus_GetWorkflowStatus_Call struct {
	*mock.Call
}

// GetWorkflowStatus is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) GetWorkflowStatus() *MutableNodeStatus_GetWorkflowStatus_Call {
	return &MutableNodeStatus_GetWorkflowStatus_Call{Call: _e.mock.On("GetWorkflowStatus")}
}

func (_c *MutableNodeStatus_GetWorkflowStatus_Call) Run(run func()) *MutableNodeStatus_GetWorkflowStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_GetWorkflowStatus_Call) Return(_a0 v1alpha1.MutableWorkflowNodeStatus) *MutableNodeStatus_GetWorkflowStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_GetWorkflowStatus_Call) RunAndReturn(run func() v1alpha1.MutableWorkflowNodeStatus) *MutableNodeStatus_GetWorkflowStatus_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementAttempts provides a mock function with given fields:
func (_m *MutableNodeStatus) IncrementAttempts() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncrementAttempts")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// MutableNodeStatus_IncrementAttempts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementAttempts'
type MutableNodeStatus_IncrementAttempts_Call struct {
	*mock.Call
}

// IncrementAttempts is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) IncrementAttempts() *MutableNodeStatus_IncrementAttempts_Call {
	return &MutableNodeStatus_IncrementAttempts_Call{Call: _e.mock.On("IncrementAttempts")}
}

func (_c *MutableNodeStatus_IncrementAttempts_Call) Run(run func()) *MutableNodeStatus_IncrementAttempts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_IncrementAttempts_Call) Return(_a0 uint32) *MutableNodeStatus_IncrementAttempts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_IncrementAttempts_Call) RunAndReturn(run func() uint32) *MutableNodeStatus_IncrementAttempts_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementSystemFailures provides a mock function with given fields:
func (_m *MutableNodeStatus) IncrementSystemFailures() uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IncrementSystemFailures")
	}

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// MutableNodeStatus_IncrementSystemFailures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementSystemFailures'
type MutableNodeStatus_IncrementSystemFailures_Call struct {
	*mock.Call
}

// IncrementSystemFailures is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) IncrementSystemFailures() *MutableNodeStatus_IncrementSystemFailures_Call {
	return &MutableNodeStatus_IncrementSystemFailures_Call{Call: _e.mock.On("IncrementSystemFailures")}
}

func (_c *MutableNodeStatus_IncrementSystemFailures_Call) Run(run func()) *MutableNodeStatus_IncrementSystemFailures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_IncrementSystemFailures_Call) Return(_a0 uint32) *MutableNodeStatus_IncrementSystemFailures_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_IncrementSystemFailures_Call) RunAndReturn(run func() uint32) *MutableNodeStatus_IncrementSystemFailures_Call {
	_c.Call.Return(run)
	return _c
}

// IsDirty provides a mock function with given fields:
func (_m *MutableNodeStatus) IsDirty() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDirty")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MutableNodeStatus_IsDirty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDirty'
type MutableNodeStatus_IsDirty_Call struct {
	*mock.Call
}

// IsDirty is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) IsDirty() *MutableNodeStatus_IsDirty_Call {
	return &MutableNodeStatus_IsDirty_Call{Call: _e.mock.On("IsDirty")}
}

func (_c *MutableNodeStatus_IsDirty_Call) Run(run func()) *MutableNodeStatus_IsDirty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_IsDirty_Call) Return(_a0 bool) *MutableNodeStatus_IsDirty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MutableNodeStatus_IsDirty_Call) RunAndReturn(run func() bool) *MutableNodeStatus_IsDirty_Call {
	_c.Call.Return(run)
	return _c
}

// ResetDirty provides a mock function with given fields:
func (_m *MutableNodeStatus) ResetDirty() {
	_m.Called()
}

// MutableNodeStatus_ResetDirty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetDirty'
type MutableNodeStatus_ResetDirty_Call struct {
	*mock.Call
}

// ResetDirty is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) ResetDirty() *MutableNodeStatus_ResetDirty_Call {
	return &MutableNodeStatus_ResetDirty_Call{Call: _e.mock.On("ResetDirty")}
}

func (_c *MutableNodeStatus_ResetDirty_Call) Run(run func()) *MutableNodeStatus_ResetDirty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_ResetDirty_Call) Return() *MutableNodeStatus_ResetDirty_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_ResetDirty_Call) RunAndReturn(run func()) *MutableNodeStatus_ResetDirty_Call {
	_c.Call.Return(run)
	return _c
}

// SetCached provides a mock function with given fields:
func (_m *MutableNodeStatus) SetCached() {
	_m.Called()
}

// MutableNodeStatus_SetCached_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCached'
type MutableNodeStatus_SetCached_Call struct {
	*mock.Call
}

// SetCached is a helper method to define mock.On call
func (_e *MutableNodeStatus_Expecter) SetCached() *MutableNodeStatus_SetCached_Call {
	return &MutableNodeStatus_SetCached_Call{Call: _e.mock.On("SetCached")}
}

func (_c *MutableNodeStatus_SetCached_Call) Run(run func()) *MutableNodeStatus_SetCached_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MutableNodeStatus_SetCached_Call) Return() *MutableNodeStatus_SetCached_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_SetCached_Call) RunAndReturn(run func()) *MutableNodeStatus_SetCached_Call {
	_c.Call.Return(run)
	return _c
}

// SetDataDir provides a mock function with given fields: _a0
func (_m *MutableNodeStatus) SetDataDir(_a0 storage.DataReference) {
	_m.Called(_a0)
}

// MutableNodeStatus_SetDataDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDataDir'
type MutableNodeStatus_SetDataDir_Call struct {
	*mock.Call
}

// SetDataDir is a helper method to define mock.On call
//   - _a0 storage.DataReference
func (_e *MutableNodeStatus_Expecter) SetDataDir(_a0 interface{}) *MutableNodeStatus_SetDataDir_Call {
	return &MutableNodeStatus_SetDataDir_Call{Call: _e.mock.On("SetDataDir", _a0)}
}

func (_c *MutableNodeStatus_SetDataDir_Call) Run(run func(_a0 storage.DataReference)) *MutableNodeStatus_SetDataDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(storage.DataReference))
	})
	return _c
}

func (_c *MutableNodeStatus_SetDataDir_Call) Return() *MutableNodeStatus_SetDataDir_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_SetDataDir_Call) RunAndReturn(run func(storage.DataReference)) *MutableNodeStatus_SetDataDir_Call {
	_c.Call.Return(run)
	return _c
}

// SetOutputDir provides a mock function with given fields: d
func (_m *MutableNodeStatus) SetOutputDir(d storage.DataReference) {
	_m.Called(d)
}

// MutableNodeStatus_SetOutputDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOutputDir'
type MutableNodeStatus_SetOutputDir_Call struct {
	*mock.Call
}

// SetOutputDir is a helper method to define mock.On call
//   - d storage.DataReference
func (_e *MutableNodeStatus_Expecter) SetOutputDir(d interface{}) *MutableNodeStatus_SetOutputDir_Call {
	return &MutableNodeStatus_SetOutputDir_Call{Call: _e.mock.On("SetOutputDir", d)}
}

func (_c *MutableNodeStatus_SetOutputDir_Call) Run(run func(d storage.DataReference)) *MutableNodeStatus_SetOutputDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(storage.DataReference))
	})
	return _c
}

func (_c *MutableNodeStatus_SetOutputDir_Call) Return() *MutableNodeStatus_SetOutputDir_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_SetOutputDir_Call) RunAndReturn(run func(storage.DataReference)) *MutableNodeStatus_SetOutputDir_Call {
	_c.Call.Return(run)
	return _c
}

// SetParentNodeID provides a mock function with given fields: n
func (_m *MutableNodeStatus) SetParentNodeID(n *string) {
	_m.Called(n)
}

// MutableNodeStatus_SetParentNodeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParentNodeID'
type MutableNodeStatus_SetParentNodeID_Call struct {
	*mock.Call
}

// SetParentNodeID is a helper method to define mock.On call
//   - n *string
func (_e *MutableNodeStatus_Expecter) SetParentNodeID(n interface{}) *MutableNodeStatus_SetParentNodeID_Call {
	return &MutableNodeStatus_SetParentNodeID_Call{Call: _e.mock.On("SetParentNodeID", n)}
}

func (_c *MutableNodeStatus_SetParentNodeID_Call) Run(run func(n *string)) *MutableNodeStatus_SetParentNodeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *MutableNodeStatus_SetParentNodeID_Call) Return() *MutableNodeStatus_SetParentNodeID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_SetParentNodeID_Call) RunAndReturn(run func(*string)) *MutableNodeStatus_SetParentNodeID_Call {
	_c.Call.Return(run)
	return _c
}

// SetParentTaskID provides a mock function with given fields: t
func (_m *MutableNodeStatus) SetParentTaskID(t *core.TaskExecutionIdentifier) {
	_m.Called(t)
}

// MutableNodeStatus_SetParentTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParentTaskID'
type MutableNodeStatus_SetParentTaskID_Call struct {
	*mock.Call
}

// SetParentTaskID is a helper method to define mock.On call
//   - t *core.TaskExecutionIdentifier
func (_e *MutableNodeStatus_Expecter) SetParentTaskID(t interface{}) *MutableNodeStatus_SetParentTaskID_Call {
	return &MutableNodeStatus_SetParentTaskID_Call{Call: _e.mock.On("SetParentTaskID", t)}
}

func (_c *MutableNodeStatus_SetParentTaskID_Call) Run(run func(t *core.TaskExecutionIdentifier)) *MutableNodeStatus_SetParentTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.TaskExecutionIdentifier))
	})
	return _c
}

func (_c *MutableNodeStatus_SetParentTaskID_Call) Return() *MutableNodeStatus_SetParentTaskID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_SetParentTaskID_Call) RunAndReturn(run func(*core.TaskExecutionIdentifier)) *MutableNodeStatus_SetParentTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePhase provides a mock function with given fields: phase, occurredAt, reason, enableCRDebugMetadata, err
func (_m *MutableNodeStatus) UpdatePhase(phase v1alpha1.NodePhase, occurredAt v1.Time, reason string, enableCRDebugMetadata bool, err *core.ExecutionError) {
	_m.Called(phase, occurredAt, reason, enableCRDebugMetadata, err)
}

// MutableNodeStatus_UpdatePhase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePhase'
type MutableNodeStatus_UpdatePhase_Call struct {
	*mock.Call
}

// UpdatePhase is a helper method to define mock.On call
//   - phase v1alpha1.NodePhase
//   - occurredAt v1.Time
//   - reason string
//   - enableCRDebugMetadata bool
//   - err *core.ExecutionError
func (_e *MutableNodeStatus_Expecter) UpdatePhase(phase interface{}, occurredAt interface{}, reason interface{}, enableCRDebugMetadata interface{}, err interface{}) *MutableNodeStatus_UpdatePhase_Call {
	return &MutableNodeStatus_UpdatePhase_Call{Call: _e.mock.On("UpdatePhase", phase, occurredAt, reason, enableCRDebugMetadata, err)}
}

func (_c *MutableNodeStatus_UpdatePhase_Call) Run(run func(phase v1alpha1.NodePhase, occurredAt v1.Time, reason string, enableCRDebugMetadata bool, err *core.ExecutionError)) *MutableNodeStatus_UpdatePhase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v1alpha1.NodePhase), args[1].(v1.Time), args[2].(string), args[3].(bool), args[4].(*core.ExecutionError))
	})
	return _c
}

func (_c *MutableNodeStatus_UpdatePhase_Call) Return() *MutableNodeStatus_UpdatePhase_Call {
	_c.Call.Return()
	return _c
}

func (_c *MutableNodeStatus_UpdatePhase_Call) RunAndReturn(run func(v1alpha1.NodePhase, v1.Time, string, bool, *core.ExecutionError)) *MutableNodeStatus_UpdatePhase_Call {
	_c.Call.Return(run)
	return _c
}

// NewMutableNodeStatus creates a new instance of MutableNodeStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMutableNodeStatus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MutableNodeStatus {
	mock := &MutableNodeStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
