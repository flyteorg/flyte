// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// ExecutableWorkflowNode is an autogenerated mock type for the ExecutableWorkflowNode type
type ExecutableWorkflowNode struct {
	mock.Mock
}

type ExecutableWorkflowNode_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableWorkflowNode) EXPECT() *ExecutableWorkflowNode_Expecter {
	return &ExecutableWorkflowNode_Expecter{mock: &_m.Mock}
}

// GetLaunchPlanRefID provides a mock function with given fields:
func (_m *ExecutableWorkflowNode) GetLaunchPlanRefID() *v1alpha1.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchPlanRefID")
	}

	var r0 *v1alpha1.Identifier
	if rf, ok := ret.Get(0).(func() *v1alpha1.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Identifier)
		}
	}

	return r0
}

// ExecutableWorkflowNode_GetLaunchPlanRefID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLaunchPlanRefID'
type ExecutableWorkflowNode_GetLaunchPlanRefID_Call struct {
	*mock.Call
}

// GetLaunchPlanRefID is a helper method to define mock.On call
func (_e *ExecutableWorkflowNode_Expecter) GetLaunchPlanRefID() *ExecutableWorkflowNode_GetLaunchPlanRefID_Call {
	return &ExecutableWorkflowNode_GetLaunchPlanRefID_Call{Call: _e.mock.On("GetLaunchPlanRefID")}
}

func (_c *ExecutableWorkflowNode_GetLaunchPlanRefID_Call) Run(run func()) *ExecutableWorkflowNode_GetLaunchPlanRefID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowNode_GetLaunchPlanRefID_Call) Return(_a0 *v1alpha1.Identifier) *ExecutableWorkflowNode_GetLaunchPlanRefID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowNode_GetLaunchPlanRefID_Call) RunAndReturn(run func() *v1alpha1.Identifier) *ExecutableWorkflowNode_GetLaunchPlanRefID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubWorkflowRef provides a mock function with given fields:
func (_m *ExecutableWorkflowNode) GetSubWorkflowRef() *string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubWorkflowRef")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// ExecutableWorkflowNode_GetSubWorkflowRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubWorkflowRef'
type ExecutableWorkflowNode_GetSubWorkflowRef_Call struct {
	*mock.Call
}

// GetSubWorkflowRef is a helper method to define mock.On call
func (_e *ExecutableWorkflowNode_Expecter) GetSubWorkflowRef() *ExecutableWorkflowNode_GetSubWorkflowRef_Call {
	return &ExecutableWorkflowNode_GetSubWorkflowRef_Call{Call: _e.mock.On("GetSubWorkflowRef")}
}

func (_c *ExecutableWorkflowNode_GetSubWorkflowRef_Call) Run(run func()) *ExecutableWorkflowNode_GetSubWorkflowRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableWorkflowNode_GetSubWorkflowRef_Call) Return(_a0 *string) *ExecutableWorkflowNode_GetSubWorkflowRef_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableWorkflowNode_GetSubWorkflowRef_Call) RunAndReturn(run func() *string) *ExecutableWorkflowNode_GetSubWorkflowRef_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutableWorkflowNode creates a new instance of ExecutableWorkflowNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableWorkflowNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableWorkflowNode {
	mock := &ExecutableWorkflowNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
