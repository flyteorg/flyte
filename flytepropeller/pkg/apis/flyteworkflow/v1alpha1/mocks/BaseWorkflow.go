// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// BaseWorkflow is an autogenerated mock type for the BaseWorkflow type
type BaseWorkflow struct {
	mock.Mock
}

type BaseWorkflow_Expecter struct {
	mock *mock.Mock
}

func (_m *BaseWorkflow) EXPECT() *BaseWorkflow_Expecter {
	return &BaseWorkflow_Expecter{mock: &_m.Mock}
}

// FromNode provides a mock function with given fields: name
func (_m *BaseWorkflow) FromNode(name string) ([]string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FromNode")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseWorkflow_FromNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromNode'
type BaseWorkflow_FromNode_Call struct {
	*mock.Call
}

// FromNode is a helper method to define mock.On call
//   - name string
func (_e *BaseWorkflow_Expecter) FromNode(name interface{}) *BaseWorkflow_FromNode_Call {
	return &BaseWorkflow_FromNode_Call{Call: _e.mock.On("FromNode", name)}
}

func (_c *BaseWorkflow_FromNode_Call) Run(run func(name string)) *BaseWorkflow_FromNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BaseWorkflow_FromNode_Call) Return(_a0 []string, _a1 error) *BaseWorkflow_FromNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BaseWorkflow_FromNode_Call) RunAndReturn(run func(string) ([]string, error)) *BaseWorkflow_FromNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *BaseWorkflow) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// BaseWorkflow_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type BaseWorkflow_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *BaseWorkflow_Expecter) GetID() *BaseWorkflow_GetID_Call {
	return &BaseWorkflow_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *BaseWorkflow_GetID_Call) Run(run func()) *BaseWorkflow_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BaseWorkflow_GetID_Call) Return(_a0 string) *BaseWorkflow_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BaseWorkflow_GetID_Call) RunAndReturn(run func() string) *BaseWorkflow_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetNode provides a mock function with given fields: nodeID
func (_m *BaseWorkflow) GetNode(nodeID string) (v1alpha1.ExecutableNode, bool) {
	ret := _m.Called(nodeID)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 v1alpha1.ExecutableNode
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (v1alpha1.ExecutableNode, bool)); ok {
		return rf(nodeID)
	}
	if rf, ok := ret.Get(0).(func(string) v1alpha1.ExecutableNode); ok {
		r0 = rf(nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNode)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(nodeID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// BaseWorkflow_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type BaseWorkflow_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - nodeID string
func (_e *BaseWorkflow_Expecter) GetNode(nodeID interface{}) *BaseWorkflow_GetNode_Call {
	return &BaseWorkflow_GetNode_Call{Call: _e.mock.On("GetNode", nodeID)}
}

func (_c *BaseWorkflow_GetNode_Call) Run(run func(nodeID string)) *BaseWorkflow_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BaseWorkflow_GetNode_Call) Return(_a0 v1alpha1.ExecutableNode, _a1 bool) *BaseWorkflow_GetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BaseWorkflow_GetNode_Call) RunAndReturn(run func(string) (v1alpha1.ExecutableNode, bool)) *BaseWorkflow_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// StartNode provides a mock function with given fields:
func (_m *BaseWorkflow) StartNode() v1alpha1.ExecutableNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartNode")
	}

	var r0 v1alpha1.ExecutableNode
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableNode)
		}
	}

	return r0
}

// BaseWorkflow_StartNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartNode'
type BaseWorkflow_StartNode_Call struct {
	*mock.Call
}

// StartNode is a helper method to define mock.On call
func (_e *BaseWorkflow_Expecter) StartNode() *BaseWorkflow_StartNode_Call {
	return &BaseWorkflow_StartNode_Call{Call: _e.mock.On("StartNode")}
}

func (_c *BaseWorkflow_StartNode_Call) Run(run func()) *BaseWorkflow_StartNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BaseWorkflow_StartNode_Call) Return(_a0 v1alpha1.ExecutableNode) *BaseWorkflow_StartNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BaseWorkflow_StartNode_Call) RunAndReturn(run func() v1alpha1.ExecutableNode) *BaseWorkflow_StartNode_Call {
	_c.Call.Return(run)
	return _c
}

// ToNode provides a mock function with given fields: name
func (_m *BaseWorkflow) ToNode(name string) ([]string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ToNode")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BaseWorkflow_ToNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToNode'
type BaseWorkflow_ToNode_Call struct {
	*mock.Call
}

// ToNode is a helper method to define mock.On call
//   - name string
func (_e *BaseWorkflow_Expecter) ToNode(name interface{}) *BaseWorkflow_ToNode_Call {
	return &BaseWorkflow_ToNode_Call{Call: _e.mock.On("ToNode", name)}
}

func (_c *BaseWorkflow_ToNode_Call) Run(run func(name string)) *BaseWorkflow_ToNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BaseWorkflow_ToNode_Call) Return(_a0 []string, _a1 error) *BaseWorkflow_ToNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BaseWorkflow_ToNode_Call) RunAndReturn(run func(string) ([]string, error)) *BaseWorkflow_ToNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewBaseWorkflow creates a new instance of BaseWorkflow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBaseWorkflow(t interface {
	mock.TestingT
	Cleanup(func())
}) *BaseWorkflow {
	mock := &BaseWorkflow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
