// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"
)

// ExecutableLaunchPlan is an autogenerated mock type for the ExecutableLaunchPlan type
type ExecutableLaunchPlan struct {
	mock.Mock
}

type ExecutableLaunchPlan_GetFixedInputs struct {
	*mock.Call
}

func (_m ExecutableLaunchPlan_GetFixedInputs) Return(_a0 *core.LiteralMap) *ExecutableLaunchPlan_GetFixedInputs {
	return &ExecutableLaunchPlan_GetFixedInputs{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableLaunchPlan) OnGetFixedInputs() *ExecutableLaunchPlan_GetFixedInputs {
	c_call := _m.On("GetFixedInputs")
	return &ExecutableLaunchPlan_GetFixedInputs{Call: c_call}
}

func (_m *ExecutableLaunchPlan) OnGetFixedInputsMatch(matchers ...interface{}) *ExecutableLaunchPlan_GetFixedInputs {
	c_call := _m.On("GetFixedInputs", matchers...)
	return &ExecutableLaunchPlan_GetFixedInputs{Call: c_call}
}

// GetFixedInputs provides a mock function with given fields:
func (_m *ExecutableLaunchPlan) GetFixedInputs() *core.LiteralMap {
	ret := _m.Called()

	var r0 *core.LiteralMap
	if rf, ok := ret.Get(0).(func() *core.LiteralMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.LiteralMap)
		}
	}

	return r0
}

type ExecutableLaunchPlan_GetId struct {
	*mock.Call
}

func (_m ExecutableLaunchPlan_GetId) Return(_a0 *core.Identifier) *ExecutableLaunchPlan_GetId {
	return &ExecutableLaunchPlan_GetId{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableLaunchPlan) OnGetId() *ExecutableLaunchPlan_GetId {
	c_call := _m.On("GetId")
	return &ExecutableLaunchPlan_GetId{Call: c_call}
}

func (_m *ExecutableLaunchPlan) OnGetIdMatch(matchers ...interface{}) *ExecutableLaunchPlan_GetId {
	c_call := _m.On("GetId", matchers...)
	return &ExecutableLaunchPlan_GetId{Call: c_call}
}

// GetId provides a mock function with given fields:
func (_m *ExecutableLaunchPlan) GetId() *core.Identifier {
	ret := _m.Called()

	var r0 *core.Identifier
	if rf, ok := ret.Get(0).(func() *core.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Identifier)
		}
	}

	return r0
}

type ExecutableLaunchPlan_GetInterface struct {
	*mock.Call
}

func (_m ExecutableLaunchPlan_GetInterface) Return(_a0 *core.TypedInterface) *ExecutableLaunchPlan_GetInterface {
	return &ExecutableLaunchPlan_GetInterface{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutableLaunchPlan) OnGetInterface() *ExecutableLaunchPlan_GetInterface {
	c_call := _m.On("GetInterface")
	return &ExecutableLaunchPlan_GetInterface{Call: c_call}
}

func (_m *ExecutableLaunchPlan) OnGetInterfaceMatch(matchers ...interface{}) *ExecutableLaunchPlan_GetInterface {
	c_call := _m.On("GetInterface", matchers...)
	return &ExecutableLaunchPlan_GetInterface{Call: c_call}
}

// GetInterface provides a mock function with given fields:
func (_m *ExecutableLaunchPlan) GetInterface() *core.TypedInterface {
	ret := _m.Called()

	var r0 *core.TypedInterface
	if rf, ok := ret.Get(0).(func() *core.TypedInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TypedInterface)
		}
	}

	return r0
}
