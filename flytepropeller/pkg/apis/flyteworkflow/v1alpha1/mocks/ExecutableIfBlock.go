// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"
)

// ExecutableIfBlock is an autogenerated mock type for the ExecutableIfBlock type
type ExecutableIfBlock struct {
	mock.Mock
}

type ExecutableIfBlock_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableIfBlock) EXPECT() *ExecutableIfBlock_Expecter {
	return &ExecutableIfBlock_Expecter{mock: &_m.Mock}
}

// GetCondition provides a mock function with given fields:
func (_m *ExecutableIfBlock) GetCondition() *core.BooleanExpression {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCondition")
	}

	var r0 *core.BooleanExpression
	if rf, ok := ret.Get(0).(func() *core.BooleanExpression); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.BooleanExpression)
		}
	}

	return r0
}

// ExecutableIfBlock_GetCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCondition'
type ExecutableIfBlock_GetCondition_Call struct {
	*mock.Call
}

// GetCondition is a helper method to define mock.On call
func (_e *ExecutableIfBlock_Expecter) GetCondition() *ExecutableIfBlock_GetCondition_Call {
	return &ExecutableIfBlock_GetCondition_Call{Call: _e.mock.On("GetCondition")}
}

func (_c *ExecutableIfBlock_GetCondition_Call) Run(run func()) *ExecutableIfBlock_GetCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableIfBlock_GetCondition_Call) Return(_a0 *core.BooleanExpression) *ExecutableIfBlock_GetCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableIfBlock_GetCondition_Call) RunAndReturn(run func() *core.BooleanExpression) *ExecutableIfBlock_GetCondition_Call {
	_c.Call.Return(run)
	return _c
}

// GetThenNode provides a mock function with given fields:
func (_m *ExecutableIfBlock) GetThenNode() *string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetThenNode")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// ExecutableIfBlock_GetThenNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThenNode'
type ExecutableIfBlock_GetThenNode_Call struct {
	*mock.Call
}

// GetThenNode is a helper method to define mock.On call
func (_e *ExecutableIfBlock_Expecter) GetThenNode() *ExecutableIfBlock_GetThenNode_Call {
	return &ExecutableIfBlock_GetThenNode_Call{Call: _e.mock.On("GetThenNode")}
}

func (_c *ExecutableIfBlock_GetThenNode_Call) Run(run func()) *ExecutableIfBlock_GetThenNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableIfBlock_GetThenNode_Call) Return(_a0 *string) *ExecutableIfBlock_GetThenNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableIfBlock_GetThenNode_Call) RunAndReturn(run func() *string) *ExecutableIfBlock_GetThenNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutableIfBlock creates a new instance of ExecutableIfBlock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableIfBlock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableIfBlock {
	mock := &ExecutableIfBlock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
