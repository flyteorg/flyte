// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"

	time "time"

	v1 "k8s.io/api/core/v1"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// ExecutableNode is an autogenerated mock type for the ExecutableNode type
type ExecutableNode struct {
	mock.Mock
}

type ExecutableNode_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutableNode) EXPECT() *ExecutableNode_Expecter {
	return &ExecutableNode_Expecter{mock: &_m.Mock}
}

// GetActiveDeadline provides a mock function with given fields:
func (_m *ExecutableNode) GetActiveDeadline() *time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActiveDeadline")
	}

	var r0 *time.Duration
	if rf, ok := ret.Get(0).(func() *time.Duration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Duration)
		}
	}

	return r0
}

// ExecutableNode_GetActiveDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveDeadline'
type ExecutableNode_GetActiveDeadline_Call struct {
	*mock.Call
}

// GetActiveDeadline is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetActiveDeadline() *ExecutableNode_GetActiveDeadline_Call {
	return &ExecutableNode_GetActiveDeadline_Call{Call: _e.mock.On("GetActiveDeadline")}
}

func (_c *ExecutableNode_GetActiveDeadline_Call) Run(run func()) *ExecutableNode_GetActiveDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetActiveDeadline_Call) Return(_a0 *time.Duration) *ExecutableNode_GetActiveDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetActiveDeadline_Call) RunAndReturn(run func() *time.Duration) *ExecutableNode_GetActiveDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// GetArrayNode provides a mock function with given fields:
func (_m *ExecutableNode) GetArrayNode() v1alpha1.ExecutableArrayNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArrayNode")
	}

	var r0 v1alpha1.ExecutableArrayNode
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableArrayNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableArrayNode)
		}
	}

	return r0
}

// ExecutableNode_GetArrayNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArrayNode'
type ExecutableNode_GetArrayNode_Call struct {
	*mock.Call
}

// GetArrayNode is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetArrayNode() *ExecutableNode_GetArrayNode_Call {
	return &ExecutableNode_GetArrayNode_Call{Call: _e.mock.On("GetArrayNode")}
}

func (_c *ExecutableNode_GetArrayNode_Call) Run(run func()) *ExecutableNode_GetArrayNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetArrayNode_Call) Return(_a0 v1alpha1.ExecutableArrayNode) *ExecutableNode_GetArrayNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetArrayNode_Call) RunAndReturn(run func() v1alpha1.ExecutableArrayNode) *ExecutableNode_GetArrayNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetBranchNode provides a mock function with given fields:
func (_m *ExecutableNode) GetBranchNode() v1alpha1.ExecutableBranchNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBranchNode")
	}

	var r0 v1alpha1.ExecutableBranchNode
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableBranchNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableBranchNode)
		}
	}

	return r0
}

// ExecutableNode_GetBranchNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBranchNode'
type ExecutableNode_GetBranchNode_Call struct {
	*mock.Call
}

// GetBranchNode is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetBranchNode() *ExecutableNode_GetBranchNode_Call {
	return &ExecutableNode_GetBranchNode_Call{Call: _e.mock.On("GetBranchNode")}
}

func (_c *ExecutableNode_GetBranchNode_Call) Run(run func()) *ExecutableNode_GetBranchNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetBranchNode_Call) Return(_a0 v1alpha1.ExecutableBranchNode) *ExecutableNode_GetBranchNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetBranchNode_Call) RunAndReturn(run func() v1alpha1.ExecutableBranchNode) *ExecutableNode_GetBranchNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with given fields:
func (_m *ExecutableNode) GetConfig() *v1.ConfigMap {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *v1.ConfigMap
	if rf, ok := ret.Get(0).(func() *v1.ConfigMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ConfigMap)
		}
	}

	return r0
}

// ExecutableNode_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type ExecutableNode_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetConfig() *ExecutableNode_GetConfig_Call {
	return &ExecutableNode_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *ExecutableNode_GetConfig_Call) Run(run func()) *ExecutableNode_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetConfig_Call) Return(_a0 *v1.ConfigMap) *ExecutableNode_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetConfig_Call) RunAndReturn(run func() *v1.ConfigMap) *ExecutableNode_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetContainerImage provides a mock function with given fields:
func (_m *ExecutableNode) GetContainerImage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContainerImage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableNode_GetContainerImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContainerImage'
type ExecutableNode_GetContainerImage_Call struct {
	*mock.Call
}

// GetContainerImage is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetContainerImage() *ExecutableNode_GetContainerImage_Call {
	return &ExecutableNode_GetContainerImage_Call{Call: _e.mock.On("GetContainerImage")}
}

func (_c *ExecutableNode_GetContainerImage_Call) Run(run func()) *ExecutableNode_GetContainerImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetContainerImage_Call) Return(_a0 string) *ExecutableNode_GetContainerImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetContainerImage_Call) RunAndReturn(run func() string) *ExecutableNode_GetContainerImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutionDeadline provides a mock function with given fields:
func (_m *ExecutableNode) GetExecutionDeadline() *time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionDeadline")
	}

	var r0 *time.Duration
	if rf, ok := ret.Get(0).(func() *time.Duration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Duration)
		}
	}

	return r0
}

// ExecutableNode_GetExecutionDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionDeadline'
type ExecutableNode_GetExecutionDeadline_Call struct {
	*mock.Call
}

// GetExecutionDeadline is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetExecutionDeadline() *ExecutableNode_GetExecutionDeadline_Call {
	return &ExecutableNode_GetExecutionDeadline_Call{Call: _e.mock.On("GetExecutionDeadline")}
}

func (_c *ExecutableNode_GetExecutionDeadline_Call) Run(run func()) *ExecutableNode_GetExecutionDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetExecutionDeadline_Call) Return(_a0 *time.Duration) *ExecutableNode_GetExecutionDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetExecutionDeadline_Call) RunAndReturn(run func() *time.Duration) *ExecutableNode_GetExecutionDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// GetExtendedResources provides a mock function with given fields:
func (_m *ExecutableNode) GetExtendedResources() *core.ExtendedResources {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExtendedResources")
	}

	var r0 *core.ExtendedResources
	if rf, ok := ret.Get(0).(func() *core.ExtendedResources); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ExtendedResources)
		}
	}

	return r0
}

// ExecutableNode_GetExtendedResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExtendedResources'
type ExecutableNode_GetExtendedResources_Call struct {
	*mock.Call
}

// GetExtendedResources is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetExtendedResources() *ExecutableNode_GetExtendedResources_Call {
	return &ExecutableNode_GetExtendedResources_Call{Call: _e.mock.On("GetExtendedResources")}
}

func (_c *ExecutableNode_GetExtendedResources_Call) Run(run func()) *ExecutableNode_GetExtendedResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetExtendedResources_Call) Return(_a0 *core.ExtendedResources) *ExecutableNode_GetExtendedResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetExtendedResources_Call) RunAndReturn(run func() *core.ExtendedResources) *ExecutableNode_GetExtendedResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetGateNode provides a mock function with given fields:
func (_m *ExecutableNode) GetGateNode() v1alpha1.ExecutableGateNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGateNode")
	}

	var r0 v1alpha1.ExecutableGateNode
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableGateNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableGateNode)
		}
	}

	return r0
}

// ExecutableNode_GetGateNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGateNode'
type ExecutableNode_GetGateNode_Call struct {
	*mock.Call
}

// GetGateNode is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetGateNode() *ExecutableNode_GetGateNode_Call {
	return &ExecutableNode_GetGateNode_Call{Call: _e.mock.On("GetGateNode")}
}

func (_c *ExecutableNode_GetGateNode_Call) Run(run func()) *ExecutableNode_GetGateNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetGateNode_Call) Return(_a0 v1alpha1.ExecutableGateNode) *ExecutableNode_GetGateNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetGateNode_Call) RunAndReturn(run func() v1alpha1.ExecutableGateNode) *ExecutableNode_GetGateNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *ExecutableNode) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableNode_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type ExecutableNode_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetID() *ExecutableNode_GetID_Call {
	return &ExecutableNode_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *ExecutableNode_GetID_Call) Run(run func()) *ExecutableNode_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetID_Call) Return(_a0 string) *ExecutableNode_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetID_Call) RunAndReturn(run func() string) *ExecutableNode_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetInputBindings provides a mock function with given fields:
func (_m *ExecutableNode) GetInputBindings() []*v1alpha1.Binding {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInputBindings")
	}

	var r0 []*v1alpha1.Binding
	if rf, ok := ret.Get(0).(func() []*v1alpha1.Binding); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.Binding)
		}
	}

	return r0
}

// ExecutableNode_GetInputBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInputBindings'
type ExecutableNode_GetInputBindings_Call struct {
	*mock.Call
}

// GetInputBindings is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetInputBindings() *ExecutableNode_GetInputBindings_Call {
	return &ExecutableNode_GetInputBindings_Call{Call: _e.mock.On("GetInputBindings")}
}

func (_c *ExecutableNode_GetInputBindings_Call) Run(run func()) *ExecutableNode_GetInputBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetInputBindings_Call) Return(_a0 []*v1alpha1.Binding) *ExecutableNode_GetInputBindings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetInputBindings_Call) RunAndReturn(run func() []*v1alpha1.Binding) *ExecutableNode_GetInputBindings_Call {
	_c.Call.Return(run)
	return _c
}

// GetKind provides a mock function with given fields:
func (_m *ExecutableNode) GetKind() v1alpha1.NodeKind {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetKind")
	}

	var r0 v1alpha1.NodeKind
	if rf, ok := ret.Get(0).(func() v1alpha1.NodeKind); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1alpha1.NodeKind)
	}

	return r0
}

// ExecutableNode_GetKind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKind'
type ExecutableNode_GetKind_Call struct {
	*mock.Call
}

// GetKind is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetKind() *ExecutableNode_GetKind_Call {
	return &ExecutableNode_GetKind_Call{Call: _e.mock.On("GetKind")}
}

func (_c *ExecutableNode_GetKind_Call) Run(run func()) *ExecutableNode_GetKind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetKind_Call) Return(_a0 v1alpha1.NodeKind) *ExecutableNode_GetKind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetKind_Call) RunAndReturn(run func() v1alpha1.NodeKind) *ExecutableNode_GetKind_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *ExecutableNode) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecutableNode_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type ExecutableNode_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetName() *ExecutableNode_GetName_Call {
	return &ExecutableNode_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *ExecutableNode_GetName_Call) Run(run func()) *ExecutableNode_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetName_Call) Return(_a0 string) *ExecutableNode_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetName_Call) RunAndReturn(run func() string) *ExecutableNode_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputAlias provides a mock function with given fields:
func (_m *ExecutableNode) GetOutputAlias() []v1alpha1.Alias {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputAlias")
	}

	var r0 []v1alpha1.Alias
	if rf, ok := ret.Get(0).(func() []v1alpha1.Alias); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1alpha1.Alias)
		}
	}

	return r0
}

// ExecutableNode_GetOutputAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputAlias'
type ExecutableNode_GetOutputAlias_Call struct {
	*mock.Call
}

// GetOutputAlias is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetOutputAlias() *ExecutableNode_GetOutputAlias_Call {
	return &ExecutableNode_GetOutputAlias_Call{Call: _e.mock.On("GetOutputAlias")}
}

func (_c *ExecutableNode_GetOutputAlias_Call) Run(run func()) *ExecutableNode_GetOutputAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetOutputAlias_Call) Return(_a0 []v1alpha1.Alias) *ExecutableNode_GetOutputAlias_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetOutputAlias_Call) RunAndReturn(run func() []v1alpha1.Alias) *ExecutableNode_GetOutputAlias_Call {
	_c.Call.Return(run)
	return _c
}

// GetPodTemplate provides a mock function with given fields:
func (_m *ExecutableNode) GetPodTemplate() *core.K8SPod {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPodTemplate")
	}

	var r0 *core.K8SPod
	if rf, ok := ret.Get(0).(func() *core.K8SPod); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.K8SPod)
		}
	}

	return r0
}

// ExecutableNode_GetPodTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPodTemplate'
type ExecutableNode_GetPodTemplate_Call struct {
	*mock.Call
}

// GetPodTemplate is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetPodTemplate() *ExecutableNode_GetPodTemplate_Call {
	return &ExecutableNode_GetPodTemplate_Call{Call: _e.mock.On("GetPodTemplate")}
}

func (_c *ExecutableNode_GetPodTemplate_Call) Run(run func()) *ExecutableNode_GetPodTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetPodTemplate_Call) Return(_a0 *core.K8SPod) *ExecutableNode_GetPodTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetPodTemplate_Call) RunAndReturn(run func() *core.K8SPod) *ExecutableNode_GetPodTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// GetResources provides a mock function with given fields:
func (_m *ExecutableNode) GetResources() *v1.ResourceRequirements {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 *v1.ResourceRequirements
	if rf, ok := ret.Get(0).(func() *v1.ResourceRequirements); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ResourceRequirements)
		}
	}

	return r0
}

// ExecutableNode_GetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResources'
type ExecutableNode_GetResources_Call struct {
	*mock.Call
}

// GetResources is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetResources() *ExecutableNode_GetResources_Call {
	return &ExecutableNode_GetResources_Call{Call: _e.mock.On("GetResources")}
}

func (_c *ExecutableNode_GetResources_Call) Run(run func()) *ExecutableNode_GetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetResources_Call) Return(_a0 *v1.ResourceRequirements) *ExecutableNode_GetResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetResources_Call) RunAndReturn(run func() *v1.ResourceRequirements) *ExecutableNode_GetResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetRetryStrategy provides a mock function with given fields:
func (_m *ExecutableNode) GetRetryStrategy() *v1alpha1.RetryStrategy {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRetryStrategy")
	}

	var r0 *v1alpha1.RetryStrategy
	if rf, ok := ret.Get(0).(func() *v1alpha1.RetryStrategy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.RetryStrategy)
		}
	}

	return r0
}

// ExecutableNode_GetRetryStrategy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRetryStrategy'
type ExecutableNode_GetRetryStrategy_Call struct {
	*mock.Call
}

// GetRetryStrategy is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetRetryStrategy() *ExecutableNode_GetRetryStrategy_Call {
	return &ExecutableNode_GetRetryStrategy_Call{Call: _e.mock.On("GetRetryStrategy")}
}

func (_c *ExecutableNode_GetRetryStrategy_Call) Run(run func()) *ExecutableNode_GetRetryStrategy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetRetryStrategy_Call) Return(_a0 *v1alpha1.RetryStrategy) *ExecutableNode_GetRetryStrategy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetRetryStrategy_Call) RunAndReturn(run func() *v1alpha1.RetryStrategy) *ExecutableNode_GetRetryStrategy_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskID provides a mock function with given fields:
func (_m *ExecutableNode) GetTaskID() *string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskID")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// ExecutableNode_GetTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskID'
type ExecutableNode_GetTaskID_Call struct {
	*mock.Call
}

// GetTaskID is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetTaskID() *ExecutableNode_GetTaskID_Call {
	return &ExecutableNode_GetTaskID_Call{Call: _e.mock.On("GetTaskID")}
}

func (_c *ExecutableNode_GetTaskID_Call) Run(run func()) *ExecutableNode_GetTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetTaskID_Call) Return(_a0 *string) *ExecutableNode_GetTaskID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetTaskID_Call) RunAndReturn(run func() *string) *ExecutableNode_GetTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowNode provides a mock function with given fields:
func (_m *ExecutableNode) GetWorkflowNode() v1alpha1.ExecutableWorkflowNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowNode")
	}

	var r0 v1alpha1.ExecutableWorkflowNode
	if rf, ok := ret.Get(0).(func() v1alpha1.ExecutableWorkflowNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.ExecutableWorkflowNode)
		}
	}

	return r0
}

// ExecutableNode_GetWorkflowNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowNode'
type ExecutableNode_GetWorkflowNode_Call struct {
	*mock.Call
}

// GetWorkflowNode is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) GetWorkflowNode() *ExecutableNode_GetWorkflowNode_Call {
	return &ExecutableNode_GetWorkflowNode_Call{Call: _e.mock.On("GetWorkflowNode")}
}

func (_c *ExecutableNode_GetWorkflowNode_Call) Run(run func()) *ExecutableNode_GetWorkflowNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_GetWorkflowNode_Call) Return(_a0 v1alpha1.ExecutableWorkflowNode) *ExecutableNode_GetWorkflowNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_GetWorkflowNode_Call) RunAndReturn(run func() v1alpha1.ExecutableWorkflowNode) *ExecutableNode_GetWorkflowNode_Call {
	_c.Call.Return(run)
	return _c
}

// IsEndNode provides a mock function with given fields:
func (_m *ExecutableNode) IsEndNode() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEndNode")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutableNode_IsEndNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEndNode'
type ExecutableNode_IsEndNode_Call struct {
	*mock.Call
}

// IsEndNode is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) IsEndNode() *ExecutableNode_IsEndNode_Call {
	return &ExecutableNode_IsEndNode_Call{Call: _e.mock.On("IsEndNode")}
}

func (_c *ExecutableNode_IsEndNode_Call) Run(run func()) *ExecutableNode_IsEndNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_IsEndNode_Call) Return(_a0 bool) *ExecutableNode_IsEndNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_IsEndNode_Call) RunAndReturn(run func() bool) *ExecutableNode_IsEndNode_Call {
	_c.Call.Return(run)
	return _c
}

// IsInterruptible provides a mock function with given fields:
func (_m *ExecutableNode) IsInterruptible() *bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInterruptible")
	}

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// ExecutableNode_IsInterruptible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInterruptible'
type ExecutableNode_IsInterruptible_Call struct {
	*mock.Call
}

// IsInterruptible is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) IsInterruptible() *ExecutableNode_IsInterruptible_Call {
	return &ExecutableNode_IsInterruptible_Call{Call: _e.mock.On("IsInterruptible")}
}

func (_c *ExecutableNode_IsInterruptible_Call) Run(run func()) *ExecutableNode_IsInterruptible_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_IsInterruptible_Call) Return(_a0 *bool) *ExecutableNode_IsInterruptible_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_IsInterruptible_Call) RunAndReturn(run func() *bool) *ExecutableNode_IsInterruptible_Call {
	_c.Call.Return(run)
	return _c
}

// IsStartNode provides a mock function with given fields:
func (_m *ExecutableNode) IsStartNode() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsStartNode")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecutableNode_IsStartNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStartNode'
type ExecutableNode_IsStartNode_Call struct {
	*mock.Call
}

// IsStartNode is a helper method to define mock.On call
func (_e *ExecutableNode_Expecter) IsStartNode() *ExecutableNode_IsStartNode_Call {
	return &ExecutableNode_IsStartNode_Call{Call: _e.mock.On("IsStartNode")}
}

func (_c *ExecutableNode_IsStartNode_Call) Run(run func()) *ExecutableNode_IsStartNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecutableNode_IsStartNode_Call) Return(_a0 bool) *ExecutableNode_IsStartNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecutableNode_IsStartNode_Call) RunAndReturn(run func() bool) *ExecutableNode_IsStartNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutableNode creates a new instance of ExecutableNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutableNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutableNode {
	mock := &ExecutableNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
