// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// Mutator is an autogenerated mock type for the Mutator type
type Mutator struct {
	mock.Mock
}

type Mutator_Expecter struct {
	mock *mock.Mock
}

func (_m *Mutator) EXPECT() *Mutator_Expecter {
	return &Mutator_Expecter{mock: &_m.Mock}
}

// ID provides a mock function with no fields
func (_m *Mutator) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Mutator_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type Mutator_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *Mutator_Expecter) ID() *Mutator_ID_Call {
	return &Mutator_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *Mutator_ID_Call) Run(run func()) *Mutator_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mutator_ID_Call) Return(_a0 string) *Mutator_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mutator_ID_Call) RunAndReturn(run func() string) *Mutator_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Mutate provides a mock function with given fields: ctx, p
func (_m *Mutator) Mutate(ctx context.Context, p *v1.Pod) (*v1.Pod, bool, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Mutate")
	}

	var r0 *v1.Pod
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Pod) (*v1.Pod, bool, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Pod) *v1.Pod); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Pod) bool); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *v1.Pod) error); ok {
		r2 = rf(ctx, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Mutator_Mutate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mutate'
type Mutator_Mutate_Call struct {
	*mock.Call
}

// Mutate is a helper method to define mock.On call
//   - ctx context.Context
//   - p *v1.Pod
func (_e *Mutator_Expecter) Mutate(ctx interface{}, p interface{}) *Mutator_Mutate_Call {
	return &Mutator_Mutate_Call{Call: _e.mock.On("Mutate", ctx, p)}
}

func (_c *Mutator_Mutate_Call) Run(run func(ctx context.Context, p *v1.Pod)) *Mutator_Mutate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Pod))
	})
	return _c
}

func (_c *Mutator_Mutate_Call) Return(newP *v1.Pod, changed bool, err error) *Mutator_Mutate_Call {
	_c.Call.Return(newP, changed, err)
	return _c
}

func (_c *Mutator_Mutate_Call) RunAndReturn(run func(context.Context, *v1.Pod) (*v1.Pod, bool, error)) *Mutator_Mutate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMutator creates a new instance of Mutator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMutator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mutator {
	mock := &Mutator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
