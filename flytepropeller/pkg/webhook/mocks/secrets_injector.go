// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/flyteorg/flyte/flytepropeller/pkg/webhook/config"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// SecretsInjector is an autogenerated mock type for the SecretsInjector type
type SecretsInjector struct {
	mock.Mock
}

type SecretsInjector_Expecter struct {
	mock *mock.Mock
}

func (_m *SecretsInjector) EXPECT() *SecretsInjector_Expecter {
	return &SecretsInjector_Expecter{mock: &_m.Mock}
}

// Inject provides a mock function with given fields: ctx, secrets, p
func (_m *SecretsInjector) Inject(ctx context.Context, secrets *core.Secret, p *v1.Pod) (*v1.Pod, bool, error) {
	ret := _m.Called(ctx, secrets, p)

	if len(ret) == 0 {
		panic("no return value specified for Inject")
	}

	var r0 *v1.Pod
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.Secret, *v1.Pod) (*v1.Pod, bool, error)); ok {
		return rf(ctx, secrets, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.Secret, *v1.Pod) *v1.Pod); ok {
		r0 = rf(ctx, secrets, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.Secret, *v1.Pod) bool); ok {
		r1 = rf(ctx, secrets, p)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *core.Secret, *v1.Pod) error); ok {
		r2 = rf(ctx, secrets, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SecretsInjector_Inject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inject'
type SecretsInjector_Inject_Call struct {
	*mock.Call
}

// Inject is a helper method to define mock.On call
//   - ctx context.Context
//   - secrets *core.Secret
//   - p *v1.Pod
func (_e *SecretsInjector_Expecter) Inject(ctx interface{}, secrets interface{}, p interface{}) *SecretsInjector_Inject_Call {
	return &SecretsInjector_Inject_Call{Call: _e.mock.On("Inject", ctx, secrets, p)}
}

func (_c *SecretsInjector_Inject_Call) Run(run func(ctx context.Context, secrets *core.Secret, p *v1.Pod)) *SecretsInjector_Inject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.Secret), args[2].(*v1.Pod))
	})
	return _c
}

func (_c *SecretsInjector_Inject_Call) Return(newP *v1.Pod, injected bool, err error) *SecretsInjector_Inject_Call {
	_c.Call.Return(newP, injected, err)
	return _c
}

func (_c *SecretsInjector_Inject_Call) RunAndReturn(run func(context.Context, *core.Secret, *v1.Pod) (*v1.Pod, bool, error)) *SecretsInjector_Inject_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *SecretsInjector) Type() config.SecretManagerType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 config.SecretManagerType
	if rf, ok := ret.Get(0).(func() config.SecretManagerType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.SecretManagerType)
	}

	return r0
}

// SecretsInjector_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type SecretsInjector_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *SecretsInjector_Expecter) Type() *SecretsInjector_Type_Call {
	return &SecretsInjector_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *SecretsInjector_Type_Call) Run(run func()) *SecretsInjector_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SecretsInjector_Type_Call) Return(_a0 config.SecretManagerType) *SecretsInjector_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecretsInjector_Type_Call) RunAndReturn(run func() config.SecretManagerType) *SecretsInjector_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecretsInjector creates a new instance of SecretsInjector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretsInjector(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretsInjector {
	mock := &SecretsInjector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
