// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"
)

// GlobalSecretProvider is an autogenerated mock type for the GlobalSecretProvider type
type GlobalSecretProvider struct {
	mock.Mock
}

type GlobalSecretProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *GlobalSecretProvider) EXPECT() *GlobalSecretProvider_Expecter {
	return &GlobalSecretProvider_Expecter{mock: &_m.Mock}
}

// GetForSecret provides a mock function with given fields: ctx, secret
func (_m *GlobalSecretProvider) GetForSecret(ctx context.Context, secret *core.Secret) (string, error) {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for GetForSecret")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.Secret) (string, error)); ok {
		return rf(ctx, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.Secret) string); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.Secret) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalSecretProvider_GetForSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetForSecret'
type GlobalSecretProvider_GetForSecret_Call struct {
	*mock.Call
}

// GetForSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - secret *core.Secret
func (_e *GlobalSecretProvider_Expecter) GetForSecret(ctx interface{}, secret interface{}) *GlobalSecretProvider_GetForSecret_Call {
	return &GlobalSecretProvider_GetForSecret_Call{Call: _e.mock.On("GetForSecret", ctx, secret)}
}

func (_c *GlobalSecretProvider_GetForSecret_Call) Run(run func(ctx context.Context, secret *core.Secret)) *GlobalSecretProvider_GetForSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.Secret))
	})
	return _c
}

func (_c *GlobalSecretProvider_GetForSecret_Call) Return(_a0 string, _a1 error) *GlobalSecretProvider_GetForSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GlobalSecretProvider_GetForSecret_Call) RunAndReturn(run func(context.Context, *core.Secret) (string, error)) *GlobalSecretProvider_GetForSecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewGlobalSecretProvider creates a new instance of GlobalSecretProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGlobalSecretProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *GlobalSecretProvider {
	mock := &GlobalSecretProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
