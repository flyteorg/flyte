// Code generated by "enumer --type=azureSecretValueType --trimprefix=azureSecretValueType -json -yaml"; DO NOT EDIT.

package secret

import (
	"encoding/json"
	"fmt"
)

const _azureSecretValueTypeName = "STRINGBINARY"

var _azureSecretValueTypeIndex = [...]uint8{0, 6, 12}

func (i azureSecretValueType) String() string {
	if i >= azureSecretValueType(len(_azureSecretValueTypeIndex)-1) {
		return fmt.Sprintf("azureSecretValueType(%d)", i)
	}
	return _azureSecretValueTypeName[_azureSecretValueTypeIndex[i]:_azureSecretValueTypeIndex[i+1]]
}

var _azureSecretValueTypeValues = []azureSecretValueType{0, 1}

var _azureSecretValueTypeNameToValueMap = map[string]azureSecretValueType{
	_azureSecretValueTypeName[0:6]:  0,
	_azureSecretValueTypeName[6:12]: 1,
}

// azureSecretValueTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func azureSecretValueTypeString(s string) (azureSecretValueType, error) {
	if val, ok := _azureSecretValueTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to azureSecretValueType values", s)
}

// azureSecretValueTypeValues returns all values of the enum
func azureSecretValueTypeValues() []azureSecretValueType {
	return _azureSecretValueTypeValues
}

// IsAazureSecretValueType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i azureSecretValueType) IsAazureSecretValueType() bool {
	for _, v := range _azureSecretValueTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for azureSecretValueType
func (i azureSecretValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for azureSecretValueType
func (i *azureSecretValueType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("azureSecretValueType should be a string, got %s", data)
	}

	var err error
	*i, err = azureSecretValueTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for azureSecretValueType
func (i azureSecretValueType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for azureSecretValueType
func (i *azureSecretValueType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = azureSecretValueTypeString(s)
	return err
}
