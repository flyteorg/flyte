// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	gax "github.com/googleapis/gax-go/v2"
	mock "github.com/stretchr/testify/mock"

	secretmanagerpb "cloud.google.com/go/secretmanager/apiv1/secretmanagerpb"
)

// GCPSecretsIface is an autogenerated mock type for the GCPSecretsIface type
type GCPSecretsIface struct {
	mock.Mock
}

type GCPSecretsIface_AccessSecretVersion struct {
	*mock.Call
}

func (_m GCPSecretsIface_AccessSecretVersion) Return(_a0 *secretmanagerpb.AccessSecretVersionResponse, _a1 error) *GCPSecretsIface_AccessSecretVersion {
	return &GCPSecretsIface_AccessSecretVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *GCPSecretsIface) OnAccessSecretVersion(ctx context.Context, req *secretmanagerpb.AccessSecretVersionRequest, opts ...gax.CallOption) *GCPSecretsIface_AccessSecretVersion {
	c_call := _m.On("AccessSecretVersion", ctx, req, opts)
	return &GCPSecretsIface_AccessSecretVersion{Call: c_call}
}

func (_m *GCPSecretsIface) OnAccessSecretVersionMatch(matchers ...interface{}) *GCPSecretsIface_AccessSecretVersion {
	c_call := _m.On("AccessSecretVersion", matchers...)
	return &GCPSecretsIface_AccessSecretVersion{Call: c_call}
}

// AccessSecretVersion provides a mock function with given fields: ctx, req, opts
func (_m *GCPSecretsIface) AccessSecretVersion(ctx context.Context, req *secretmanagerpb.AccessSecretVersionRequest, opts ...gax.CallOption) (*secretmanagerpb.AccessSecretVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretmanagerpb.AccessSecretVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *secretmanagerpb.AccessSecretVersionRequest, ...gax.CallOption) *secretmanagerpb.AccessSecretVersionResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretmanagerpb.AccessSecretVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretmanagerpb.AccessSecretVersionRequest, ...gax.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
