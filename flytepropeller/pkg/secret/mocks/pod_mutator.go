// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admission "sigs.k8s.io/controller-runtime/pkg/webhook/admission"

	corev1 "k8s.io/api/core/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PodMutator is an autogenerated mock type for the PodMutator type
type PodMutator struct {
	mock.Mock
}

type PodMutator_ID struct {
	*mock.Call
}

func (_m PodMutator_ID) Return(_a0 string) *PodMutator_ID {
	return &PodMutator_ID{Call: _m.Call.Return(_a0)}
}

func (_m *PodMutator) OnID() *PodMutator_ID {
	c_call := _m.On("ID")
	return &PodMutator_ID{Call: c_call}
}

func (_m *PodMutator) OnIDMatch(matchers ...interface{}) *PodMutator_ID {
	c_call := _m.On("ID", matchers...)
	return &PodMutator_ID{Call: c_call}
}

// ID provides a mock function with given fields:
func (_m *PodMutator) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type PodMutator_LabelSelector struct {
	*mock.Call
}

func (_m PodMutator_LabelSelector) Return(_a0 *v1.LabelSelector) *PodMutator_LabelSelector {
	return &PodMutator_LabelSelector{Call: _m.Call.Return(_a0)}
}

func (_m *PodMutator) OnLabelSelector() *PodMutator_LabelSelector {
	c_call := _m.On("LabelSelector")
	return &PodMutator_LabelSelector{Call: c_call}
}

func (_m *PodMutator) OnLabelSelectorMatch(matchers ...interface{}) *PodMutator_LabelSelector {
	c_call := _m.On("LabelSelector", matchers...)
	return &PodMutator_LabelSelector{Call: c_call}
}

// LabelSelector provides a mock function with given fields:
func (_m *PodMutator) LabelSelector() *v1.LabelSelector {
	ret := _m.Called()

	var r0 *v1.LabelSelector
	if rf, ok := ret.Get(0).(func() *v1.LabelSelector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.LabelSelector)
		}
	}

	return r0
}

type PodMutator_Mutate struct {
	*mock.Call
}

func (_m PodMutator_Mutate) Return(newP *corev1.Pod, changed bool, err *admission.Response) *PodMutator_Mutate {
	return &PodMutator_Mutate{Call: _m.Call.Return(newP, changed, err)}
}

func (_m *PodMutator) OnMutate(ctx context.Context, p *corev1.Pod) *PodMutator_Mutate {
	c_call := _m.On("Mutate", ctx, p)
	return &PodMutator_Mutate{Call: c_call}
}

func (_m *PodMutator) OnMutateMatch(matchers ...interface{}) *PodMutator_Mutate {
	c_call := _m.On("Mutate", matchers...)
	return &PodMutator_Mutate{Call: c_call}
}

// Mutate provides a mock function with given fields: ctx, p
func (_m *PodMutator) Mutate(ctx context.Context, p *corev1.Pod) (*corev1.Pod, bool, *admission.Response) {
	ret := _m.Called(ctx, p)

	var r0 *corev1.Pod
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Pod) *corev1.Pod); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Pod)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, *corev1.Pod) bool); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 *admission.Response
	if rf, ok := ret.Get(2).(func(context.Context, *corev1.Pod) *admission.Response); ok {
		r2 = rf(ctx, p)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*admission.Response)
		}
	}

	return r0, r1, r2
}
