// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	secretsmanager "github.com/aws/aws-sdk-go-v2/service/secretsmanager"
)

// AWSSecretsIface is an autogenerated mock type for the AWSSecretsIface type
type AWSSecretsIface struct {
	mock.Mock
}

type AWSSecretsIface_GetSecretValue struct {
	*mock.Call
}

func (_m AWSSecretsIface_GetSecretValue) Return(_a0 *secretsmanager.GetSecretValueOutput, _a1 error) *AWSSecretsIface_GetSecretValue {
	return &AWSSecretsIface_GetSecretValue{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AWSSecretsIface) OnGetSecretValue(_a0 context.Context, _a1 *secretsmanager.GetSecretValueInput, _a2 ...func(*secretsmanager.Options)) *AWSSecretsIface_GetSecretValue {
	c_call := _m.On("GetSecretValue", _a0, _a1, _a2)
	return &AWSSecretsIface_GetSecretValue{Call: c_call}
}

func (_m *AWSSecretsIface) OnGetSecretValueMatch(matchers ...interface{}) *AWSSecretsIface_GetSecretValue {
	c_call := _m.On("GetSecretValue", matchers...)
	return &AWSSecretsIface_GetSecretValue{Call: c_call}
}

// GetSecretValue provides a mock function with given fields: _a0, _a1, _a2
func (_m *AWSSecretsIface) GetSecretValue(_a0 context.Context, _a1 *secretsmanager.GetSecretValueInput, _a2 ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.GetSecretValueOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.GetSecretValueInput, ...func(*secretsmanager.Options)) *secretsmanager.GetSecretValueOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.GetSecretValueOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.GetSecretValueInput, ...func(*secretsmanager.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
