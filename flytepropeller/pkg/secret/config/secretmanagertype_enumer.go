// Code generated by "enumer --type=SecretManagerType --trimprefix=SecretManagerType -json -yaml"; DO NOT EDIT.

package config

import (
	"encoding/json"
	"fmt"
)

const _SecretManagerTypeName = "GlobalK8sAWSGCPVaultEmbedded"

var _SecretManagerTypeIndex = [...]uint8{0, 6, 9, 12, 15, 20, 28}

func (i SecretManagerType) String() string {
	if i < 0 || i >= SecretManagerType(len(_SecretManagerTypeIndex)-1) {
		return fmt.Sprintf("SecretManagerType(%d)", i)
	}
	return _SecretManagerTypeName[_SecretManagerTypeIndex[i]:_SecretManagerTypeIndex[i+1]]
}

var _SecretManagerTypeValues = []SecretManagerType{0, 1, 2, 3, 4, 5}

var _SecretManagerTypeNameToValueMap = map[string]SecretManagerType{
	_SecretManagerTypeName[0:6]:   0,
	_SecretManagerTypeName[6:9]:   1,
	_SecretManagerTypeName[9:12]:  2,
	_SecretManagerTypeName[12:15]: 3,
	_SecretManagerTypeName[15:20]: 4,
	_SecretManagerTypeName[20:28]: 5,
}

// SecretManagerTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SecretManagerTypeString(s string) (SecretManagerType, error) {
	if val, ok := _SecretManagerTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SecretManagerType values", s)
}

// SecretManagerTypeValues returns all values of the enum
func SecretManagerTypeValues() []SecretManagerType {
	return _SecretManagerTypeValues
}

// IsASecretManagerType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SecretManagerType) IsASecretManagerType() bool {
	for _, v := range _SecretManagerTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SecretManagerType
func (i SecretManagerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SecretManagerType
func (i *SecretManagerType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SecretManagerType should be a string, got %s", data)
	}

	var err error
	*i, err = SecretManagerTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for SecretManagerType
func (i SecretManagerType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SecretManagerType
func (i *SecretManagerType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SecretManagerTypeString(s)
	return err
}
