// Code generated by "enumer --type=EmbeddedSecretManagerType -json -yaml -trimprefix=EmbeddedSecretManagerType"; DO NOT EDIT.

package config

import (
	"encoding/json"
	"fmt"
)

const _EmbeddedSecretManagerTypeName = "AWSGCP"

var _EmbeddedSecretManagerTypeIndex = [...]uint8{0, 3, 6}

func (i EmbeddedSecretManagerType) String() string {
	if i >= EmbeddedSecretManagerType(len(_EmbeddedSecretManagerTypeIndex)-1) {
		return fmt.Sprintf("EmbeddedSecretManagerType(%d)", i)
	}
	return _EmbeddedSecretManagerTypeName[_EmbeddedSecretManagerTypeIndex[i]:_EmbeddedSecretManagerTypeIndex[i+1]]
}

var _EmbeddedSecretManagerTypeValues = []EmbeddedSecretManagerType{0, 1}

var _EmbeddedSecretManagerTypeNameToValueMap = map[string]EmbeddedSecretManagerType{
	_EmbeddedSecretManagerTypeName[0:3]: 0,
	_EmbeddedSecretManagerTypeName[3:6]: 1,
}

// EmbeddedSecretManagerTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EmbeddedSecretManagerTypeString(s string) (EmbeddedSecretManagerType, error) {
	if val, ok := _EmbeddedSecretManagerTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EmbeddedSecretManagerType values", s)
}

// EmbeddedSecretManagerTypeValues returns all values of the enum
func EmbeddedSecretManagerTypeValues() []EmbeddedSecretManagerType {
	return _EmbeddedSecretManagerTypeValues
}

// IsAEmbeddedSecretManagerType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EmbeddedSecretManagerType) IsAEmbeddedSecretManagerType() bool {
	for _, v := range _EmbeddedSecretManagerTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for EmbeddedSecretManagerType
func (i EmbeddedSecretManagerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for EmbeddedSecretManagerType
func (i *EmbeddedSecretManagerType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EmbeddedSecretManagerType should be a string, got %s", data)
	}

	var err error
	*i, err = EmbeddedSecretManagerTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for EmbeddedSecretManagerType
func (i EmbeddedSecretManagerType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for EmbeddedSecretManagerType
func (i *EmbeddedSecretManagerType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = EmbeddedSecretManagerTypeString(s)
	return err
}
