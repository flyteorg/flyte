// Code generated by "enumer --type=KVVersion --trimprefix=KVVersion -json -yaml"; DO NOT EDIT.

package config

import (
	"encoding/json"
	"fmt"
)

const _KVVersionName = "12"

var _KVVersionIndex = [...]uint8{0, 1, 2}

func (i KVVersion) String() string {
	if i < 0 || i >= KVVersion(len(_KVVersionIndex)-1) {
		return fmt.Sprintf("KVVersion(%d)", i)
	}
	return _KVVersionName[_KVVersionIndex[i]:_KVVersionIndex[i+1]]
}

var _KVVersionValues = []KVVersion{0, 1}

var _KVVersionNameToValueMap = map[string]KVVersion{
	_KVVersionName[0:1]: 0,
	_KVVersionName[1:2]: 1,
}

// KVVersionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KVVersionString(s string) (KVVersion, error) {
	if val, ok := _KVVersionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to KVVersion values", s)
}

// KVVersionValues returns all values of the enum
func KVVersionValues() []KVVersion {
	return _KVVersionValues
}

// IsAKVVersion returns "true" if the value is listed in the enum definition. "false" otherwise
func (i KVVersion) IsAKVVersion() bool {
	for _, v := range _KVVersionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for KVVersion
func (i KVVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for KVVersion
func (i *KVVersion) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("KVVersion should be a string, got %s", data)
	}

	var err error
	*i, err = KVVersionString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for KVVersion
func (i KVVersion) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for KVVersion
func (i *KVVersion) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = KVVersionString(s)
	return err
}
