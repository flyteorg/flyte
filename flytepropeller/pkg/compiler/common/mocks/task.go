// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"
)

// Task is an autogenerated mock type for the Task type
type Task struct {
	mock.Mock
}

type Task_GetCoreTask struct {
	*mock.Call
}

func (_m Task_GetCoreTask) Return(_a0 *core.TaskTemplate) *Task_GetCoreTask {
	return &Task_GetCoreTask{Call: _m.Call.Return(_a0)}
}

func (_m *Task) OnGetCoreTask() *Task_GetCoreTask {
	c_call := _m.On("GetCoreTask")
	return &Task_GetCoreTask{Call: c_call}
}

func (_m *Task) OnGetCoreTaskMatch(matchers ...interface{}) *Task_GetCoreTask {
	c_call := _m.On("GetCoreTask", matchers...)
	return &Task_GetCoreTask{Call: c_call}
}

// GetCoreTask provides a mock function with given fields:
func (_m *Task) GetCoreTask() *core.TaskTemplate {
	ret := _m.Called()

	var r0 *core.TaskTemplate
	if rf, ok := ret.Get(0).(func() *core.TaskTemplate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TaskTemplate)
		}
	}

	return r0
}

type Task_GetID struct {
	*mock.Call
}

func (_m Task_GetID) Return(_a0 *core.Identifier) *Task_GetID {
	return &Task_GetID{Call: _m.Call.Return(_a0)}
}

func (_m *Task) OnGetID() *Task_GetID {
	c_call := _m.On("GetID")
	return &Task_GetID{Call: c_call}
}

func (_m *Task) OnGetIDMatch(matchers ...interface{}) *Task_GetID {
	c_call := _m.On("GetID", matchers...)
	return &Task_GetID{Call: c_call}
}

// GetID provides a mock function with given fields:
func (_m *Task) GetID() *core.Identifier {
	ret := _m.Called()

	var r0 *core.Identifier
	if rf, ok := ret.Get(0).(func() *core.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Identifier)
		}
	}

	return r0
}

type Task_GetInterface struct {
	*mock.Call
}

func (_m Task_GetInterface) Return(_a0 *core.TypedInterface) *Task_GetInterface {
	return &Task_GetInterface{Call: _m.Call.Return(_a0)}
}

func (_m *Task) OnGetInterface() *Task_GetInterface {
	c_call := _m.On("GetInterface")
	return &Task_GetInterface{Call: c_call}
}

func (_m *Task) OnGetInterfaceMatch(matchers ...interface{}) *Task_GetInterface {
	c_call := _m.On("GetInterface", matchers...)
	return &Task_GetInterface{Call: c_call}
}

// GetInterface provides a mock function with given fields:
func (_m *Task) GetInterface() *core.TypedInterface {
	ret := _m.Called()

	var r0 *core.TypedInterface
	if rf, ok := ret.Get(0).(func() *core.TypedInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TypedInterface)
		}
	}

	return r0
}
