// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	common "github.com/flyteorg/flyte/flytepropeller/pkg/compiler/common"

	mock "github.com/stretchr/testify/mock"
)

// NodeBuilder is an autogenerated mock type for the NodeBuilder type
type NodeBuilder struct {
	mock.Mock
}

type NodeBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeBuilder) EXPECT() *NodeBuilder_Expecter {
	return &NodeBuilder_Expecter{mock: &_m.Mock}
}

// GetArrayNode provides a mock function with given fields:
func (_m *NodeBuilder) GetArrayNode() *core.ArrayNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArrayNode")
	}

	var r0 *core.ArrayNode
	if rf, ok := ret.Get(0).(func() *core.ArrayNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ArrayNode)
		}
	}

	return r0
}

// NodeBuilder_GetArrayNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArrayNode'
type NodeBuilder_GetArrayNode_Call struct {
	*mock.Call
}

// GetArrayNode is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetArrayNode() *NodeBuilder_GetArrayNode_Call {
	return &NodeBuilder_GetArrayNode_Call{Call: _e.mock.On("GetArrayNode")}
}

func (_c *NodeBuilder_GetArrayNode_Call) Run(run func()) *NodeBuilder_GetArrayNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetArrayNode_Call) Return(_a0 *core.ArrayNode) *NodeBuilder_GetArrayNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetArrayNode_Call) RunAndReturn(run func() *core.ArrayNode) *NodeBuilder_GetArrayNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetBranchNode provides a mock function with given fields:
func (_m *NodeBuilder) GetBranchNode() *core.BranchNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBranchNode")
	}

	var r0 *core.BranchNode
	if rf, ok := ret.Get(0).(func() *core.BranchNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.BranchNode)
		}
	}

	return r0
}

// NodeBuilder_GetBranchNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBranchNode'
type NodeBuilder_GetBranchNode_Call struct {
	*mock.Call
}

// GetBranchNode is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetBranchNode() *NodeBuilder_GetBranchNode_Call {
	return &NodeBuilder_GetBranchNode_Call{Call: _e.mock.On("GetBranchNode")}
}

func (_c *NodeBuilder_GetBranchNode_Call) Run(run func()) *NodeBuilder_GetBranchNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetBranchNode_Call) Return(_a0 *core.BranchNode) *NodeBuilder_GetBranchNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetBranchNode_Call) RunAndReturn(run func() *core.BranchNode) *NodeBuilder_GetBranchNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoreNode provides a mock function with given fields:
func (_m *NodeBuilder) GetCoreNode() *core.Node {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCoreNode")
	}

	var r0 *core.Node
	if rf, ok := ret.Get(0).(func() *core.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Node)
		}
	}

	return r0
}

// NodeBuilder_GetCoreNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoreNode'
type NodeBuilder_GetCoreNode_Call struct {
	*mock.Call
}

// GetCoreNode is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetCoreNode() *NodeBuilder_GetCoreNode_Call {
	return &NodeBuilder_GetCoreNode_Call{Call: _e.mock.On("GetCoreNode")}
}

func (_c *NodeBuilder_GetCoreNode_Call) Run(run func()) *NodeBuilder_GetCoreNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetCoreNode_Call) Return(_a0 *core.Node) *NodeBuilder_GetCoreNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetCoreNode_Call) RunAndReturn(run func() *core.Node) *NodeBuilder_GetCoreNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetGateNode provides a mock function with given fields:
func (_m *NodeBuilder) GetGateNode() *core.GateNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGateNode")
	}

	var r0 *core.GateNode
	if rf, ok := ret.Get(0).(func() *core.GateNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GateNode)
		}
	}

	return r0
}

// NodeBuilder_GetGateNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGateNode'
type NodeBuilder_GetGateNode_Call struct {
	*mock.Call
}

// GetGateNode is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetGateNode() *NodeBuilder_GetGateNode_Call {
	return &NodeBuilder_GetGateNode_Call{Call: _e.mock.On("GetGateNode")}
}

func (_c *NodeBuilder_GetGateNode_Call) Run(run func()) *NodeBuilder_GetGateNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetGateNode_Call) Return(_a0 *core.GateNode) *NodeBuilder_GetGateNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetGateNode_Call) RunAndReturn(run func() *core.GateNode) *NodeBuilder_GetGateNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetId provides a mock function with given fields:
func (_m *NodeBuilder) GetId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NodeBuilder_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type NodeBuilder_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetId() *NodeBuilder_GetId_Call {
	return &NodeBuilder_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *NodeBuilder_GetId_Call) Run(run func()) *NodeBuilder_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetId_Call) Return(_a0 string) *NodeBuilder_GetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetId_Call) RunAndReturn(run func() string) *NodeBuilder_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetInputs provides a mock function with given fields:
func (_m *NodeBuilder) GetInputs() []*core.Binding {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInputs")
	}

	var r0 []*core.Binding
	if rf, ok := ret.Get(0).(func() []*core.Binding); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*core.Binding)
		}
	}

	return r0
}

// NodeBuilder_GetInputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInputs'
type NodeBuilder_GetInputs_Call struct {
	*mock.Call
}

// GetInputs is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetInputs() *NodeBuilder_GetInputs_Call {
	return &NodeBuilder_GetInputs_Call{Call: _e.mock.On("GetInputs")}
}

func (_c *NodeBuilder_GetInputs_Call) Run(run func()) *NodeBuilder_GetInputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetInputs_Call) Return(_a0 []*core.Binding) *NodeBuilder_GetInputs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetInputs_Call) RunAndReturn(run func() []*core.Binding) *NodeBuilder_GetInputs_Call {
	_c.Call.Return(run)
	return _c
}

// GetInterface provides a mock function with given fields:
func (_m *NodeBuilder) GetInterface() *core.TypedInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInterface")
	}

	var r0 *core.TypedInterface
	if rf, ok := ret.Get(0).(func() *core.TypedInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TypedInterface)
		}
	}

	return r0
}

// NodeBuilder_GetInterface_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInterface'
type NodeBuilder_GetInterface_Call struct {
	*mock.Call
}

// GetInterface is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetInterface() *NodeBuilder_GetInterface_Call {
	return &NodeBuilder_GetInterface_Call{Call: _e.mock.On("GetInterface")}
}

func (_c *NodeBuilder_GetInterface_Call) Run(run func()) *NodeBuilder_GetInterface_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetInterface_Call) Return(_a0 *core.TypedInterface) *NodeBuilder_GetInterface_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetInterface_Call) RunAndReturn(run func() *core.TypedInterface) *NodeBuilder_GetInterface_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function with given fields:
func (_m *NodeBuilder) GetMetadata() *core.NodeMetadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 *core.NodeMetadata
	if rf, ok := ret.Get(0).(func() *core.NodeMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.NodeMetadata)
		}
	}

	return r0
}

// NodeBuilder_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type NodeBuilder_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetMetadata() *NodeBuilder_GetMetadata_Call {
	return &NodeBuilder_GetMetadata_Call{Call: _e.mock.On("GetMetadata")}
}

func (_c *NodeBuilder_GetMetadata_Call) Run(run func()) *NodeBuilder_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetMetadata_Call) Return(_a0 *core.NodeMetadata) *NodeBuilder_GetMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetMetadata_Call) RunAndReturn(run func() *core.NodeMetadata) *NodeBuilder_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputAliases provides a mock function with given fields:
func (_m *NodeBuilder) GetOutputAliases() []*core.Alias {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputAliases")
	}

	var r0 []*core.Alias
	if rf, ok := ret.Get(0).(func() []*core.Alias); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*core.Alias)
		}
	}

	return r0
}

// NodeBuilder_GetOutputAliases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputAliases'
type NodeBuilder_GetOutputAliases_Call struct {
	*mock.Call
}

// GetOutputAliases is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetOutputAliases() *NodeBuilder_GetOutputAliases_Call {
	return &NodeBuilder_GetOutputAliases_Call{Call: _e.mock.On("GetOutputAliases")}
}

func (_c *NodeBuilder_GetOutputAliases_Call) Run(run func()) *NodeBuilder_GetOutputAliases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetOutputAliases_Call) Return(_a0 []*core.Alias) *NodeBuilder_GetOutputAliases_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetOutputAliases_Call) RunAndReturn(run func() []*core.Alias) *NodeBuilder_GetOutputAliases_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubWorkflow provides a mock function with given fields:
func (_m *NodeBuilder) GetSubWorkflow() common.Workflow {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubWorkflow")
	}

	var r0 common.Workflow
	if rf, ok := ret.Get(0).(func() common.Workflow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Workflow)
		}
	}

	return r0
}

// NodeBuilder_GetSubWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubWorkflow'
type NodeBuilder_GetSubWorkflow_Call struct {
	*mock.Call
}

// GetSubWorkflow is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetSubWorkflow() *NodeBuilder_GetSubWorkflow_Call {
	return &NodeBuilder_GetSubWorkflow_Call{Call: _e.mock.On("GetSubWorkflow")}
}

func (_c *NodeBuilder_GetSubWorkflow_Call) Run(run func()) *NodeBuilder_GetSubWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetSubWorkflow_Call) Return(_a0 common.Workflow) *NodeBuilder_GetSubWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetSubWorkflow_Call) RunAndReturn(run func() common.Workflow) *NodeBuilder_GetSubWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields:
func (_m *NodeBuilder) GetTask() common.Task {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 common.Task
	if rf, ok := ret.Get(0).(func() common.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Task)
		}
	}

	return r0
}

// NodeBuilder_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type NodeBuilder_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetTask() *NodeBuilder_GetTask_Call {
	return &NodeBuilder_GetTask_Call{Call: _e.mock.On("GetTask")}
}

func (_c *NodeBuilder_GetTask_Call) Run(run func()) *NodeBuilder_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetTask_Call) Return(_a0 common.Task) *NodeBuilder_GetTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetTask_Call) RunAndReturn(run func() common.Task) *NodeBuilder_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskNode provides a mock function with given fields:
func (_m *NodeBuilder) GetTaskNode() *core.TaskNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskNode")
	}

	var r0 *core.TaskNode
	if rf, ok := ret.Get(0).(func() *core.TaskNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TaskNode)
		}
	}

	return r0
}

// NodeBuilder_GetTaskNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskNode'
type NodeBuilder_GetTaskNode_Call struct {
	*mock.Call
}

// GetTaskNode is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetTaskNode() *NodeBuilder_GetTaskNode_Call {
	return &NodeBuilder_GetTaskNode_Call{Call: _e.mock.On("GetTaskNode")}
}

func (_c *NodeBuilder_GetTaskNode_Call) Run(run func()) *NodeBuilder_GetTaskNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetTaskNode_Call) Return(_a0 *core.TaskNode) *NodeBuilder_GetTaskNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetTaskNode_Call) RunAndReturn(run func() *core.TaskNode) *NodeBuilder_GetTaskNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpstreamNodeIds provides a mock function with given fields:
func (_m *NodeBuilder) GetUpstreamNodeIds() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpstreamNodeIds")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NodeBuilder_GetUpstreamNodeIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpstreamNodeIds'
type NodeBuilder_GetUpstreamNodeIds_Call struct {
	*mock.Call
}

// GetUpstreamNodeIds is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetUpstreamNodeIds() *NodeBuilder_GetUpstreamNodeIds_Call {
	return &NodeBuilder_GetUpstreamNodeIds_Call{Call: _e.mock.On("GetUpstreamNodeIds")}
}

func (_c *NodeBuilder_GetUpstreamNodeIds_Call) Run(run func()) *NodeBuilder_GetUpstreamNodeIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetUpstreamNodeIds_Call) Return(_a0 []string) *NodeBuilder_GetUpstreamNodeIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetUpstreamNodeIds_Call) RunAndReturn(run func() []string) *NodeBuilder_GetUpstreamNodeIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowNode provides a mock function with given fields:
func (_m *NodeBuilder) GetWorkflowNode() *core.WorkflowNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowNode")
	}

	var r0 *core.WorkflowNode
	if rf, ok := ret.Get(0).(func() *core.WorkflowNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.WorkflowNode)
		}
	}

	return r0
}

// NodeBuilder_GetWorkflowNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowNode'
type NodeBuilder_GetWorkflowNode_Call struct {
	*mock.Call
}

// GetWorkflowNode is a helper method to define mock.On call
func (_e *NodeBuilder_Expecter) GetWorkflowNode() *NodeBuilder_GetWorkflowNode_Call {
	return &NodeBuilder_GetWorkflowNode_Call{Call: _e.mock.On("GetWorkflowNode")}
}

func (_c *NodeBuilder_GetWorkflowNode_Call) Run(run func()) *NodeBuilder_GetWorkflowNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeBuilder_GetWorkflowNode_Call) Return(_a0 *core.WorkflowNode) *NodeBuilder_GetWorkflowNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeBuilder_GetWorkflowNode_Call) RunAndReturn(run func() *core.WorkflowNode) *NodeBuilder_GetWorkflowNode_Call {
	_c.Call.Return(run)
	return _c
}

// SetID provides a mock function with given fields: id
func (_m *NodeBuilder) SetID(id string) {
	_m.Called(id)
}

// NodeBuilder_SetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetID'
type NodeBuilder_SetID_Call struct {
	*mock.Call
}

// SetID is a helper method to define mock.On call
//   - id string
func (_e *NodeBuilder_Expecter) SetID(id interface{}) *NodeBuilder_SetID_Call {
	return &NodeBuilder_SetID_Call{Call: _e.mock.On("SetID", id)}
}

func (_c *NodeBuilder_SetID_Call) Run(run func(id string)) *NodeBuilder_SetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *NodeBuilder_SetID_Call) Return() *NodeBuilder_SetID_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeBuilder_SetID_Call) RunAndReturn(run func(string)) *NodeBuilder_SetID_Call {
	_c.Call.Return(run)
	return _c
}

// SetInputs provides a mock function with given fields: inputs
func (_m *NodeBuilder) SetInputs(inputs []*core.Binding) {
	_m.Called(inputs)
}

// NodeBuilder_SetInputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInputs'
type NodeBuilder_SetInputs_Call struct {
	*mock.Call
}

// SetInputs is a helper method to define mock.On call
//   - inputs []*core.Binding
func (_e *NodeBuilder_Expecter) SetInputs(inputs interface{}) *NodeBuilder_SetInputs_Call {
	return &NodeBuilder_SetInputs_Call{Call: _e.mock.On("SetInputs", inputs)}
}

func (_c *NodeBuilder_SetInputs_Call) Run(run func(inputs []*core.Binding)) *NodeBuilder_SetInputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*core.Binding))
	})
	return _c
}

func (_c *NodeBuilder_SetInputs_Call) Return() *NodeBuilder_SetInputs_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeBuilder_SetInputs_Call) RunAndReturn(run func([]*core.Binding)) *NodeBuilder_SetInputs_Call {
	_c.Call.Return(run)
	return _c
}

// SetInterface provides a mock function with given fields: iface
func (_m *NodeBuilder) SetInterface(iface *core.TypedInterface) {
	_m.Called(iface)
}

// NodeBuilder_SetInterface_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInterface'
type NodeBuilder_SetInterface_Call struct {
	*mock.Call
}

// SetInterface is a helper method to define mock.On call
//   - iface *core.TypedInterface
func (_e *NodeBuilder_Expecter) SetInterface(iface interface{}) *NodeBuilder_SetInterface_Call {
	return &NodeBuilder_SetInterface_Call{Call: _e.mock.On("SetInterface", iface)}
}

func (_c *NodeBuilder_SetInterface_Call) Run(run func(iface *core.TypedInterface)) *NodeBuilder_SetInterface_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.TypedInterface))
	})
	return _c
}

func (_c *NodeBuilder_SetInterface_Call) Return() *NodeBuilder_SetInterface_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeBuilder_SetInterface_Call) RunAndReturn(run func(*core.TypedInterface)) *NodeBuilder_SetInterface_Call {
	_c.Call.Return(run)
	return _c
}

// SetSubWorkflow provides a mock function with given fields: wf
func (_m *NodeBuilder) SetSubWorkflow(wf common.Workflow) {
	_m.Called(wf)
}

// NodeBuilder_SetSubWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSubWorkflow'
type NodeBuilder_SetSubWorkflow_Call struct {
	*mock.Call
}

// SetSubWorkflow is a helper method to define mock.On call
//   - wf common.Workflow
func (_e *NodeBuilder_Expecter) SetSubWorkflow(wf interface{}) *NodeBuilder_SetSubWorkflow_Call {
	return &NodeBuilder_SetSubWorkflow_Call{Call: _e.mock.On("SetSubWorkflow", wf)}
}

func (_c *NodeBuilder_SetSubWorkflow_Call) Run(run func(wf common.Workflow)) *NodeBuilder_SetSubWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Workflow))
	})
	return _c
}

func (_c *NodeBuilder_SetSubWorkflow_Call) Return() *NodeBuilder_SetSubWorkflow_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeBuilder_SetSubWorkflow_Call) RunAndReturn(run func(common.Workflow)) *NodeBuilder_SetSubWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// SetTask provides a mock function with given fields: task
func (_m *NodeBuilder) SetTask(task common.Task) {
	_m.Called(task)
}

// NodeBuilder_SetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTask'
type NodeBuilder_SetTask_Call struct {
	*mock.Call
}

// SetTask is a helper method to define mock.On call
//   - task common.Task
func (_e *NodeBuilder_Expecter) SetTask(task interface{}) *NodeBuilder_SetTask_Call {
	return &NodeBuilder_SetTask_Call{Call: _e.mock.On("SetTask", task)}
}

func (_c *NodeBuilder_SetTask_Call) Run(run func(task common.Task)) *NodeBuilder_SetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Task))
	})
	return _c
}

func (_c *NodeBuilder_SetTask_Call) Return() *NodeBuilder_SetTask_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeBuilder_SetTask_Call) RunAndReturn(run func(common.Task)) *NodeBuilder_SetTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeBuilder creates a new instance of NodeBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeBuilder {
	mock := &NodeBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
