// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	common "github.com/flyteorg/flyte/flytepropeller/pkg/compiler/common"

	mock "github.com/stretchr/testify/mock"
)

// Workflow is an autogenerated mock type for the Workflow type
type Workflow struct {
	mock.Mock
}

type Workflow_Expecter struct {
	mock *mock.Mock
}

func (_m *Workflow) EXPECT() *Workflow_Expecter {
	return &Workflow_Expecter{mock: &_m.Mock}
}

// GetCompiledSubWorkflow provides a mock function with given fields: id
func (_m *Workflow) GetCompiledSubWorkflow(id *core.Identifier) (*core.CompiledWorkflow, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCompiledSubWorkflow")
	}

	var r0 *core.CompiledWorkflow
	var r1 bool
	if rf, ok := ret.Get(0).(func(*core.Identifier) (*core.CompiledWorkflow, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*core.Identifier) *core.CompiledWorkflow); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CompiledWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.Identifier) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Workflow_GetCompiledSubWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompiledSubWorkflow'
type Workflow_GetCompiledSubWorkflow_Call struct {
	*mock.Call
}

// GetCompiledSubWorkflow is a helper method to define mock.On call
//   - id *core.Identifier
func (_e *Workflow_Expecter) GetCompiledSubWorkflow(id interface{}) *Workflow_GetCompiledSubWorkflow_Call {
	return &Workflow_GetCompiledSubWorkflow_Call{Call: _e.mock.On("GetCompiledSubWorkflow", id)}
}

func (_c *Workflow_GetCompiledSubWorkflow_Call) Run(run func(id *core.Identifier)) *Workflow_GetCompiledSubWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Identifier))
	})
	return _c
}

func (_c *Workflow_GetCompiledSubWorkflow_Call) Return(wf *core.CompiledWorkflow, found bool) *Workflow_GetCompiledSubWorkflow_Call {
	_c.Call.Return(wf, found)
	return _c
}

func (_c *Workflow_GetCompiledSubWorkflow_Call) RunAndReturn(run func(*core.Identifier) (*core.CompiledWorkflow, bool)) *Workflow_GetCompiledSubWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoreWorkflow provides a mock function with no fields
func (_m *Workflow) GetCoreWorkflow() *core.CompiledWorkflow {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCoreWorkflow")
	}

	var r0 *core.CompiledWorkflow
	if rf, ok := ret.Get(0).(func() *core.CompiledWorkflow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CompiledWorkflow)
		}
	}

	return r0
}

// Workflow_GetCoreWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoreWorkflow'
type Workflow_GetCoreWorkflow_Call struct {
	*mock.Call
}

// GetCoreWorkflow is a helper method to define mock.On call
func (_e *Workflow_Expecter) GetCoreWorkflow() *Workflow_GetCoreWorkflow_Call {
	return &Workflow_GetCoreWorkflow_Call{Call: _e.mock.On("GetCoreWorkflow")}
}

func (_c *Workflow_GetCoreWorkflow_Call) Run(run func()) *Workflow_GetCoreWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_GetCoreWorkflow_Call) Return(_a0 *core.CompiledWorkflow) *Workflow_GetCoreWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_GetCoreWorkflow_Call) RunAndReturn(run func() *core.CompiledWorkflow) *Workflow_GetCoreWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetDownstreamNodes provides a mock function with no fields
func (_m *Workflow) GetDownstreamNodes() common.StringAdjacencyList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDownstreamNodes")
	}

	var r0 common.StringAdjacencyList
	if rf, ok := ret.Get(0).(func() common.StringAdjacencyList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.StringAdjacencyList)
		}
	}

	return r0
}

// Workflow_GetDownstreamNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownstreamNodes'
type Workflow_GetDownstreamNodes_Call struct {
	*mock.Call
}

// GetDownstreamNodes is a helper method to define mock.On call
func (_e *Workflow_Expecter) GetDownstreamNodes() *Workflow_GetDownstreamNodes_Call {
	return &Workflow_GetDownstreamNodes_Call{Call: _e.mock.On("GetDownstreamNodes")}
}

func (_c *Workflow_GetDownstreamNodes_Call) Run(run func()) *Workflow_GetDownstreamNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_GetDownstreamNodes_Call) Return(_a0 common.StringAdjacencyList) *Workflow_GetDownstreamNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_GetDownstreamNodes_Call) RunAndReturn(run func() common.StringAdjacencyList) *Workflow_GetDownstreamNodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetFailureNode provides a mock function with no fields
func (_m *Workflow) GetFailureNode() common.Node {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFailureNode")
	}

	var r0 common.Node
	if rf, ok := ret.Get(0).(func() common.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Node)
		}
	}

	return r0
}

// Workflow_GetFailureNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFailureNode'
type Workflow_GetFailureNode_Call struct {
	*mock.Call
}

// GetFailureNode is a helper method to define mock.On call
func (_e *Workflow_Expecter) GetFailureNode() *Workflow_GetFailureNode_Call {
	return &Workflow_GetFailureNode_Call{Call: _e.mock.On("GetFailureNode")}
}

func (_c *Workflow_GetFailureNode_Call) Run(run func()) *Workflow_GetFailureNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_GetFailureNode_Call) Return(_a0 common.Node) *Workflow_GetFailureNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_GetFailureNode_Call) RunAndReturn(run func() common.Node) *Workflow_GetFailureNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetLaunchPlan provides a mock function with given fields: id
func (_m *Workflow) GetLaunchPlan(id *core.Identifier) (common.InterfaceProvider, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchPlan")
	}

	var r0 common.InterfaceProvider
	var r1 bool
	if rf, ok := ret.Get(0).(func(*core.Identifier) (common.InterfaceProvider, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*core.Identifier) common.InterfaceProvider); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.InterfaceProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.Identifier) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Workflow_GetLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLaunchPlan'
type Workflow_GetLaunchPlan_Call struct {
	*mock.Call
}

// GetLaunchPlan is a helper method to define mock.On call
//   - id *core.Identifier
func (_e *Workflow_Expecter) GetLaunchPlan(id interface{}) *Workflow_GetLaunchPlan_Call {
	return &Workflow_GetLaunchPlan_Call{Call: _e.mock.On("GetLaunchPlan", id)}
}

func (_c *Workflow_GetLaunchPlan_Call) Run(run func(id *core.Identifier)) *Workflow_GetLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Identifier))
	})
	return _c
}

func (_c *Workflow_GetLaunchPlan_Call) Return(wf common.InterfaceProvider, found bool) *Workflow_GetLaunchPlan_Call {
	_c.Call.Return(wf, found)
	return _c
}

func (_c *Workflow_GetLaunchPlan_Call) RunAndReturn(run func(*core.Identifier) (common.InterfaceProvider, bool)) *Workflow_GetLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// GetNode provides a mock function with given fields: id
func (_m *Workflow) GetNode(id string) (common.NodeBuilder, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 common.NodeBuilder
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (common.NodeBuilder, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) common.NodeBuilder); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NodeBuilder)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Workflow_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type Workflow_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - id string
func (_e *Workflow_Expecter) GetNode(id interface{}) *Workflow_GetNode_Call {
	return &Workflow_GetNode_Call{Call: _e.mock.On("GetNode", id)}
}

func (_c *Workflow_GetNode_Call) Run(run func(id string)) *Workflow_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Workflow_GetNode_Call) Return(node common.NodeBuilder, found bool) *Workflow_GetNode_Call {
	_c.Call.Return(node, found)
	return _c
}

func (_c *Workflow_GetNode_Call) RunAndReturn(run func(string) (common.NodeBuilder, bool)) *Workflow_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodes provides a mock function with no fields
func (_m *Workflow) GetNodes() common.NodeIndex {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodes")
	}

	var r0 common.NodeIndex
	if rf, ok := ret.Get(0).(func() common.NodeIndex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NodeIndex)
		}
	}

	return r0
}

// Workflow_GetNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodes'
type Workflow_GetNodes_Call struct {
	*mock.Call
}

// GetNodes is a helper method to define mock.On call
func (_e *Workflow_Expecter) GetNodes() *Workflow_GetNodes_Call {
	return &Workflow_GetNodes_Call{Call: _e.mock.On("GetNodes")}
}

func (_c *Workflow_GetNodes_Call) Run(run func()) *Workflow_GetNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_GetNodes_Call) Return(_a0 common.NodeIndex) *Workflow_GetNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_GetNodes_Call) RunAndReturn(run func() common.NodeIndex) *Workflow_GetNodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubWorkflow provides a mock function with given fields: id
func (_m *Workflow) GetSubWorkflow(id *core.Identifier) (*core.CompiledWorkflow, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSubWorkflow")
	}

	var r0 *core.CompiledWorkflow
	var r1 bool
	if rf, ok := ret.Get(0).(func(*core.Identifier) (*core.CompiledWorkflow, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*core.Identifier) *core.CompiledWorkflow); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CompiledWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.Identifier) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Workflow_GetSubWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubWorkflow'
type Workflow_GetSubWorkflow_Call struct {
	*mock.Call
}

// GetSubWorkflow is a helper method to define mock.On call
//   - id *core.Identifier
func (_e *Workflow_Expecter) GetSubWorkflow(id interface{}) *Workflow_GetSubWorkflow_Call {
	return &Workflow_GetSubWorkflow_Call{Call: _e.mock.On("GetSubWorkflow", id)}
}

func (_c *Workflow_GetSubWorkflow_Call) Run(run func(id *core.Identifier)) *Workflow_GetSubWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Identifier))
	})
	return _c
}

func (_c *Workflow_GetSubWorkflow_Call) Return(wf *core.CompiledWorkflow, found bool) *Workflow_GetSubWorkflow_Call {
	_c.Call.Return(wf, found)
	return _c
}

func (_c *Workflow_GetSubWorkflow_Call) RunAndReturn(run func(*core.Identifier) (*core.CompiledWorkflow, bool)) *Workflow_GetSubWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: id
func (_m *Workflow) GetTask(id *core.Identifier) (common.Task, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 common.Task
	var r1 bool
	if rf, ok := ret.Get(0).(func(*core.Identifier) (common.Task, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*core.Identifier) common.Task); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.Identifier) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Workflow_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type Workflow_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - id *core.Identifier
func (_e *Workflow_Expecter) GetTask(id interface{}) *Workflow_GetTask_Call {
	return &Workflow_GetTask_Call{Call: _e.mock.On("GetTask", id)}
}

func (_c *Workflow_GetTask_Call) Run(run func(id *core.Identifier)) *Workflow_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Identifier))
	})
	return _c
}

func (_c *Workflow_GetTask_Call) Return(task common.Task, found bool) *Workflow_GetTask_Call {
	_c.Call.Return(task, found)
	return _c
}

func (_c *Workflow_GetTask_Call) RunAndReturn(run func(*core.Identifier) (common.Task, bool)) *Workflow_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasks provides a mock function with no fields
func (_m *Workflow) GetTasks() common.TaskIndex {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 common.TaskIndex
	if rf, ok := ret.Get(0).(func() common.TaskIndex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.TaskIndex)
		}
	}

	return r0
}

// Workflow_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type Workflow_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
func (_e *Workflow_Expecter) GetTasks() *Workflow_GetTasks_Call {
	return &Workflow_GetTasks_Call{Call: _e.mock.On("GetTasks")}
}

func (_c *Workflow_GetTasks_Call) Run(run func()) *Workflow_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_GetTasks_Call) Return(_a0 common.TaskIndex) *Workflow_GetTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_GetTasks_Call) RunAndReturn(run func() common.TaskIndex) *Workflow_GetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpstreamNodes provides a mock function with no fields
func (_m *Workflow) GetUpstreamNodes() common.StringAdjacencyList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpstreamNodes")
	}

	var r0 common.StringAdjacencyList
	if rf, ok := ret.Get(0).(func() common.StringAdjacencyList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.StringAdjacencyList)
		}
	}

	return r0
}

// Workflow_GetUpstreamNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpstreamNodes'
type Workflow_GetUpstreamNodes_Call struct {
	*mock.Call
}

// GetUpstreamNodes is a helper method to define mock.On call
func (_e *Workflow_Expecter) GetUpstreamNodes() *Workflow_GetUpstreamNodes_Call {
	return &Workflow_GetUpstreamNodes_Call{Call: _e.mock.On("GetUpstreamNodes")}
}

func (_c *Workflow_GetUpstreamNodes_Call) Run(run func()) *Workflow_GetUpstreamNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Workflow_GetUpstreamNodes_Call) Return(_a0 common.StringAdjacencyList) *Workflow_GetUpstreamNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Workflow_GetUpstreamNodes_Call) RunAndReturn(run func() common.StringAdjacencyList) *Workflow_GetUpstreamNodes_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkflow creates a new instance of Workflow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflow(t interface {
	mock.TestingT
	Cleanup(func())
}) *Workflow {
	mock := &Workflow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
