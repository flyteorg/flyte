// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"
)

// InterfaceProvider is an autogenerated mock type for the InterfaceProvider type
type InterfaceProvider struct {
	mock.Mock
}

type InterfaceProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *InterfaceProvider) EXPECT() *InterfaceProvider_Expecter {
	return &InterfaceProvider_Expecter{mock: &_m.Mock}
}

// GetExpectedInputs provides a mock function with given fields:
func (_m *InterfaceProvider) GetExpectedInputs() *core.ParameterMap {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExpectedInputs")
	}

	var r0 *core.ParameterMap
	if rf, ok := ret.Get(0).(func() *core.ParameterMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ParameterMap)
		}
	}

	return r0
}

// InterfaceProvider_GetExpectedInputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpectedInputs'
type InterfaceProvider_GetExpectedInputs_Call struct {
	*mock.Call
}

// GetExpectedInputs is a helper method to define mock.On call
func (_e *InterfaceProvider_Expecter) GetExpectedInputs() *InterfaceProvider_GetExpectedInputs_Call {
	return &InterfaceProvider_GetExpectedInputs_Call{Call: _e.mock.On("GetExpectedInputs")}
}

func (_c *InterfaceProvider_GetExpectedInputs_Call) Run(run func()) *InterfaceProvider_GetExpectedInputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceProvider_GetExpectedInputs_Call) Return(_a0 *core.ParameterMap) *InterfaceProvider_GetExpectedInputs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceProvider_GetExpectedInputs_Call) RunAndReturn(run func() *core.ParameterMap) *InterfaceProvider_GetExpectedInputs_Call {
	_c.Call.Return(run)
	return _c
}

// GetExpectedOutputs provides a mock function with given fields:
func (_m *InterfaceProvider) GetExpectedOutputs() *core.VariableMap {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExpectedOutputs")
	}

	var r0 *core.VariableMap
	if rf, ok := ret.Get(0).(func() *core.VariableMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.VariableMap)
		}
	}

	return r0
}

// InterfaceProvider_GetExpectedOutputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpectedOutputs'
type InterfaceProvider_GetExpectedOutputs_Call struct {
	*mock.Call
}

// GetExpectedOutputs is a helper method to define mock.On call
func (_e *InterfaceProvider_Expecter) GetExpectedOutputs() *InterfaceProvider_GetExpectedOutputs_Call {
	return &InterfaceProvider_GetExpectedOutputs_Call{Call: _e.mock.On("GetExpectedOutputs")}
}

func (_c *InterfaceProvider_GetExpectedOutputs_Call) Run(run func()) *InterfaceProvider_GetExpectedOutputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceProvider_GetExpectedOutputs_Call) Return(_a0 *core.VariableMap) *InterfaceProvider_GetExpectedOutputs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceProvider_GetExpectedOutputs_Call) RunAndReturn(run func() *core.VariableMap) *InterfaceProvider_GetExpectedOutputs_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with given fields:
func (_m *InterfaceProvider) GetID() *core.Identifier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 *core.Identifier
	if rf, ok := ret.Get(0).(func() *core.Identifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Identifier)
		}
	}

	return r0
}

// InterfaceProvider_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type InterfaceProvider_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *InterfaceProvider_Expecter) GetID() *InterfaceProvider_GetID_Call {
	return &InterfaceProvider_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *InterfaceProvider_GetID_Call) Run(run func()) *InterfaceProvider_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *InterfaceProvider_GetID_Call) Return(_a0 *core.Identifier) *InterfaceProvider_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceProvider_GetID_Call) RunAndReturn(run func() *core.Identifier) *InterfaceProvider_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterfaceProvider creates a new instance of InterfaceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterfaceProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *InterfaceProvider {
	mock := &InterfaceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
