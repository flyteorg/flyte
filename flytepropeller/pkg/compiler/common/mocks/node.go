// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	common "github.com/flyteorg/flyte/flytepropeller/pkg/compiler/common"

	mock "github.com/stretchr/testify/mock"
)

// Node is an autogenerated mock type for the Node type
type Node struct {
	mock.Mock
}

type Node_Expecter struct {
	mock *mock.Mock
}

func (_m *Node) EXPECT() *Node_Expecter {
	return &Node_Expecter{mock: &_m.Mock}
}

// GetArrayNode provides a mock function with no fields
func (_m *Node) GetArrayNode() *core.ArrayNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArrayNode")
	}

	var r0 *core.ArrayNode
	if rf, ok := ret.Get(0).(func() *core.ArrayNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.ArrayNode)
		}
	}

	return r0
}

// Node_GetArrayNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArrayNode'
type Node_GetArrayNode_Call struct {
	*mock.Call
}

// GetArrayNode is a helper method to define mock.On call
func (_e *Node_Expecter) GetArrayNode() *Node_GetArrayNode_Call {
	return &Node_GetArrayNode_Call{Call: _e.mock.On("GetArrayNode")}
}

func (_c *Node_GetArrayNode_Call) Run(run func()) *Node_GetArrayNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetArrayNode_Call) Return(_a0 *core.ArrayNode) *Node_GetArrayNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetArrayNode_Call) RunAndReturn(run func() *core.ArrayNode) *Node_GetArrayNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetBranchNode provides a mock function with no fields
func (_m *Node) GetBranchNode() *core.BranchNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBranchNode")
	}

	var r0 *core.BranchNode
	if rf, ok := ret.Get(0).(func() *core.BranchNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.BranchNode)
		}
	}

	return r0
}

// Node_GetBranchNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBranchNode'
type Node_GetBranchNode_Call struct {
	*mock.Call
}

// GetBranchNode is a helper method to define mock.On call
func (_e *Node_Expecter) GetBranchNode() *Node_GetBranchNode_Call {
	return &Node_GetBranchNode_Call{Call: _e.mock.On("GetBranchNode")}
}

func (_c *Node_GetBranchNode_Call) Run(run func()) *Node_GetBranchNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetBranchNode_Call) Return(_a0 *core.BranchNode) *Node_GetBranchNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetBranchNode_Call) RunAndReturn(run func() *core.BranchNode) *Node_GetBranchNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoreNode provides a mock function with no fields
func (_m *Node) GetCoreNode() *core.Node {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCoreNode")
	}

	var r0 *core.Node
	if rf, ok := ret.Get(0).(func() *core.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Node)
		}
	}

	return r0
}

// Node_GetCoreNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoreNode'
type Node_GetCoreNode_Call struct {
	*mock.Call
}

// GetCoreNode is a helper method to define mock.On call
func (_e *Node_Expecter) GetCoreNode() *Node_GetCoreNode_Call {
	return &Node_GetCoreNode_Call{Call: _e.mock.On("GetCoreNode")}
}

func (_c *Node_GetCoreNode_Call) Run(run func()) *Node_GetCoreNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetCoreNode_Call) Return(_a0 *core.Node) *Node_GetCoreNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetCoreNode_Call) RunAndReturn(run func() *core.Node) *Node_GetCoreNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetGateNode provides a mock function with no fields
func (_m *Node) GetGateNode() *core.GateNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGateNode")
	}

	var r0 *core.GateNode
	if rf, ok := ret.Get(0).(func() *core.GateNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.GateNode)
		}
	}

	return r0
}

// Node_GetGateNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGateNode'
type Node_GetGateNode_Call struct {
	*mock.Call
}

// GetGateNode is a helper method to define mock.On call
func (_e *Node_Expecter) GetGateNode() *Node_GetGateNode_Call {
	return &Node_GetGateNode_Call{Call: _e.mock.On("GetGateNode")}
}

func (_c *Node_GetGateNode_Call) Run(run func()) *Node_GetGateNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetGateNode_Call) Return(_a0 *core.GateNode) *Node_GetGateNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetGateNode_Call) RunAndReturn(run func() *core.GateNode) *Node_GetGateNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetId provides a mock function with no fields
func (_m *Node) GetId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Node_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type Node_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *Node_Expecter) GetId() *Node_GetId_Call {
	return &Node_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *Node_GetId_Call) Run(run func()) *Node_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetId_Call) Return(_a0 string) *Node_GetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetId_Call) RunAndReturn(run func() string) *Node_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetInputs provides a mock function with no fields
func (_m *Node) GetInputs() []*core.Binding {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInputs")
	}

	var r0 []*core.Binding
	if rf, ok := ret.Get(0).(func() []*core.Binding); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*core.Binding)
		}
	}

	return r0
}

// Node_GetInputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInputs'
type Node_GetInputs_Call struct {
	*mock.Call
}

// GetInputs is a helper method to define mock.On call
func (_e *Node_Expecter) GetInputs() *Node_GetInputs_Call {
	return &Node_GetInputs_Call{Call: _e.mock.On("GetInputs")}
}

func (_c *Node_GetInputs_Call) Run(run func()) *Node_GetInputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetInputs_Call) Return(_a0 []*core.Binding) *Node_GetInputs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetInputs_Call) RunAndReturn(run func() []*core.Binding) *Node_GetInputs_Call {
	_c.Call.Return(run)
	return _c
}

// GetInterface provides a mock function with no fields
func (_m *Node) GetInterface() *core.TypedInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInterface")
	}

	var r0 *core.TypedInterface
	if rf, ok := ret.Get(0).(func() *core.TypedInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TypedInterface)
		}
	}

	return r0
}

// Node_GetInterface_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInterface'
type Node_GetInterface_Call struct {
	*mock.Call
}

// GetInterface is a helper method to define mock.On call
func (_e *Node_Expecter) GetInterface() *Node_GetInterface_Call {
	return &Node_GetInterface_Call{Call: _e.mock.On("GetInterface")}
}

func (_c *Node_GetInterface_Call) Run(run func()) *Node_GetInterface_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetInterface_Call) Return(_a0 *core.TypedInterface) *Node_GetInterface_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetInterface_Call) RunAndReturn(run func() *core.TypedInterface) *Node_GetInterface_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function with no fields
func (_m *Node) GetMetadata() *core.NodeMetadata {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 *core.NodeMetadata
	if rf, ok := ret.Get(0).(func() *core.NodeMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.NodeMetadata)
		}
	}

	return r0
}

// Node_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type Node_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
func (_e *Node_Expecter) GetMetadata() *Node_GetMetadata_Call {
	return &Node_GetMetadata_Call{Call: _e.mock.On("GetMetadata")}
}

func (_c *Node_GetMetadata_Call) Run(run func()) *Node_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetMetadata_Call) Return(_a0 *core.NodeMetadata) *Node_GetMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetMetadata_Call) RunAndReturn(run func() *core.NodeMetadata) *Node_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputAliases provides a mock function with no fields
func (_m *Node) GetOutputAliases() []*core.Alias {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutputAliases")
	}

	var r0 []*core.Alias
	if rf, ok := ret.Get(0).(func() []*core.Alias); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*core.Alias)
		}
	}

	return r0
}

// Node_GetOutputAliases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputAliases'
type Node_GetOutputAliases_Call struct {
	*mock.Call
}

// GetOutputAliases is a helper method to define mock.On call
func (_e *Node_Expecter) GetOutputAliases() *Node_GetOutputAliases_Call {
	return &Node_GetOutputAliases_Call{Call: _e.mock.On("GetOutputAliases")}
}

func (_c *Node_GetOutputAliases_Call) Run(run func()) *Node_GetOutputAliases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetOutputAliases_Call) Return(_a0 []*core.Alias) *Node_GetOutputAliases_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetOutputAliases_Call) RunAndReturn(run func() []*core.Alias) *Node_GetOutputAliases_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubWorkflow provides a mock function with no fields
func (_m *Node) GetSubWorkflow() common.Workflow {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubWorkflow")
	}

	var r0 common.Workflow
	if rf, ok := ret.Get(0).(func() common.Workflow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Workflow)
		}
	}

	return r0
}

// Node_GetSubWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubWorkflow'
type Node_GetSubWorkflow_Call struct {
	*mock.Call
}

// GetSubWorkflow is a helper method to define mock.On call
func (_e *Node_Expecter) GetSubWorkflow() *Node_GetSubWorkflow_Call {
	return &Node_GetSubWorkflow_Call{Call: _e.mock.On("GetSubWorkflow")}
}

func (_c *Node_GetSubWorkflow_Call) Run(run func()) *Node_GetSubWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetSubWorkflow_Call) Return(_a0 common.Workflow) *Node_GetSubWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetSubWorkflow_Call) RunAndReturn(run func() common.Workflow) *Node_GetSubWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with no fields
func (_m *Node) GetTask() common.Task {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 common.Task
	if rf, ok := ret.Get(0).(func() common.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Task)
		}
	}

	return r0
}

// Node_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type Node_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
func (_e *Node_Expecter) GetTask() *Node_GetTask_Call {
	return &Node_GetTask_Call{Call: _e.mock.On("GetTask")}
}

func (_c *Node_GetTask_Call) Run(run func()) *Node_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetTask_Call) Return(_a0 common.Task) *Node_GetTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetTask_Call) RunAndReturn(run func() common.Task) *Node_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskNode provides a mock function with no fields
func (_m *Node) GetTaskNode() *core.TaskNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskNode")
	}

	var r0 *core.TaskNode
	if rf, ok := ret.Get(0).(func() *core.TaskNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.TaskNode)
		}
	}

	return r0
}

// Node_GetTaskNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskNode'
type Node_GetTaskNode_Call struct {
	*mock.Call
}

// GetTaskNode is a helper method to define mock.On call
func (_e *Node_Expecter) GetTaskNode() *Node_GetTaskNode_Call {
	return &Node_GetTaskNode_Call{Call: _e.mock.On("GetTaskNode")}
}

func (_c *Node_GetTaskNode_Call) Run(run func()) *Node_GetTaskNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetTaskNode_Call) Return(_a0 *core.TaskNode) *Node_GetTaskNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetTaskNode_Call) RunAndReturn(run func() *core.TaskNode) *Node_GetTaskNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpstreamNodeIds provides a mock function with no fields
func (_m *Node) GetUpstreamNodeIds() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpstreamNodeIds")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Node_GetUpstreamNodeIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpstreamNodeIds'
type Node_GetUpstreamNodeIds_Call struct {
	*mock.Call
}

// GetUpstreamNodeIds is a helper method to define mock.On call
func (_e *Node_Expecter) GetUpstreamNodeIds() *Node_GetUpstreamNodeIds_Call {
	return &Node_GetUpstreamNodeIds_Call{Call: _e.mock.On("GetUpstreamNodeIds")}
}

func (_c *Node_GetUpstreamNodeIds_Call) Run(run func()) *Node_GetUpstreamNodeIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetUpstreamNodeIds_Call) Return(_a0 []string) *Node_GetUpstreamNodeIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetUpstreamNodeIds_Call) RunAndReturn(run func() []string) *Node_GetUpstreamNodeIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowNode provides a mock function with no fields
func (_m *Node) GetWorkflowNode() *core.WorkflowNode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowNode")
	}

	var r0 *core.WorkflowNode
	if rf, ok := ret.Get(0).(func() *core.WorkflowNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.WorkflowNode)
		}
	}

	return r0
}

// Node_GetWorkflowNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowNode'
type Node_GetWorkflowNode_Call struct {
	*mock.Call
}

// GetWorkflowNode is a helper method to define mock.On call
func (_e *Node_Expecter) GetWorkflowNode() *Node_GetWorkflowNode_Call {
	return &Node_GetWorkflowNode_Call{Call: _e.mock.On("GetWorkflowNode")}
}

func (_c *Node_GetWorkflowNode_Call) Run(run func()) *Node_GetWorkflowNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Node_GetWorkflowNode_Call) Return(_a0 *core.WorkflowNode) *Node_GetWorkflowNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Node_GetWorkflowNode_Call) RunAndReturn(run func() *core.WorkflowNode) *Node_GetWorkflowNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewNode creates a new instance of Node. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *Node {
	mock := &Node{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
