// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	common "github.com/flyteorg/flyte/flytepropeller/pkg/compiler/common"

	errors "github.com/flyteorg/flyte/flytepropeller/pkg/compiler/errors"

	mock "github.com/stretchr/testify/mock"
)

// WorkflowBuilder is an autogenerated mock type for the WorkflowBuilder type
type WorkflowBuilder struct {
	mock.Mock
}

type WorkflowBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkflowBuilder) EXPECT() *WorkflowBuilder_Expecter {
	return &WorkflowBuilder_Expecter{mock: &_m.Mock}
}

// AddDownstreamEdge provides a mock function with given fields: nodeProvider, nodeDependent
func (_m *WorkflowBuilder) AddDownstreamEdge(nodeProvider string, nodeDependent string) {
	_m.Called(nodeProvider, nodeDependent)
}

// WorkflowBuilder_AddDownstreamEdge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDownstreamEdge'
type WorkflowBuilder_AddDownstreamEdge_Call struct {
	*mock.Call
}

// AddDownstreamEdge is a helper method to define mock.On call
//   - nodeProvider string
//   - nodeDependent string
func (_e *WorkflowBuilder_Expecter) AddDownstreamEdge(nodeProvider interface{}, nodeDependent interface{}) *WorkflowBuilder_AddDownstreamEdge_Call {
	return &WorkflowBuilder_AddDownstreamEdge_Call{Call: _e.mock.On("AddDownstreamEdge", nodeProvider, nodeDependent)}
}

func (_c *WorkflowBuilder_AddDownstreamEdge_Call) Run(run func(nodeProvider string, nodeDependent string)) *WorkflowBuilder_AddDownstreamEdge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *WorkflowBuilder_AddDownstreamEdge_Call) Return() *WorkflowBuilder_AddDownstreamEdge_Call {
	_c.Call.Return()
	return _c
}

func (_c *WorkflowBuilder_AddDownstreamEdge_Call) RunAndReturn(run func(string, string)) *WorkflowBuilder_AddDownstreamEdge_Call {
	_c.Call.Return(run)
	return _c
}

// AddEdges provides a mock function with given fields: n, edgeDirection, errs
func (_m *WorkflowBuilder) AddEdges(n common.NodeBuilder, edgeDirection common.EdgeDirection, errs errors.CompileErrors) bool {
	ret := _m.Called(n, edgeDirection, errs)

	if len(ret) == 0 {
		panic("no return value specified for AddEdges")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.NodeBuilder, common.EdgeDirection, errors.CompileErrors) bool); ok {
		r0 = rf(n, edgeDirection, errs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// WorkflowBuilder_AddEdges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEdges'
type WorkflowBuilder_AddEdges_Call struct {
	*mock.Call
}

// AddEdges is a helper method to define mock.On call
//   - n common.NodeBuilder
//   - edgeDirection common.EdgeDirection
//   - errs errors.CompileErrors
func (_e *WorkflowBuilder_Expecter) AddEdges(n interface{}, edgeDirection interface{}, errs interface{}) *WorkflowBuilder_AddEdges_Call {
	return &WorkflowBuilder_AddEdges_Call{Call: _e.mock.On("AddEdges", n, edgeDirection, errs)}
}

func (_c *WorkflowBuilder_AddEdges_Call) Run(run func(n common.NodeBuilder, edgeDirection common.EdgeDirection, errs errors.CompileErrors)) *WorkflowBuilder_AddEdges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.NodeBuilder), args[1].(common.EdgeDirection), args[2].(errors.CompileErrors))
	})
	return _c
}

func (_c *WorkflowBuilder_AddEdges_Call) Return(ok bool) *WorkflowBuilder_AddEdges_Call {
	_c.Call.Return(ok)
	return _c
}

func (_c *WorkflowBuilder_AddEdges_Call) RunAndReturn(run func(common.NodeBuilder, common.EdgeDirection, errors.CompileErrors) bool) *WorkflowBuilder_AddEdges_Call {
	_c.Call.Return(run)
	return _c
}

// AddExecutionEdge provides a mock function with given fields: nodeFrom, nodeTo
func (_m *WorkflowBuilder) AddExecutionEdge(nodeFrom string, nodeTo string) {
	_m.Called(nodeFrom, nodeTo)
}

// WorkflowBuilder_AddExecutionEdge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddExecutionEdge'
type WorkflowBuilder_AddExecutionEdge_Call struct {
	*mock.Call
}

// AddExecutionEdge is a helper method to define mock.On call
//   - nodeFrom string
//   - nodeTo string
func (_e *WorkflowBuilder_Expecter) AddExecutionEdge(nodeFrom interface{}, nodeTo interface{}) *WorkflowBuilder_AddExecutionEdge_Call {
	return &WorkflowBuilder_AddExecutionEdge_Call{Call: _e.mock.On("AddExecutionEdge", nodeFrom, nodeTo)}
}

func (_c *WorkflowBuilder_AddExecutionEdge_Call) Run(run func(nodeFrom string, nodeTo string)) *WorkflowBuilder_AddExecutionEdge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *WorkflowBuilder_AddExecutionEdge_Call) Return() *WorkflowBuilder_AddExecutionEdge_Call {
	_c.Call.Return()
	return _c
}

func (_c *WorkflowBuilder_AddExecutionEdge_Call) RunAndReturn(run func(string, string)) *WorkflowBuilder_AddExecutionEdge_Call {
	_c.Call.Return(run)
	return _c
}

// AddNode provides a mock function with given fields: n, errs
func (_m *WorkflowBuilder) AddNode(n common.NodeBuilder, errs errors.CompileErrors) (common.NodeBuilder, bool) {
	ret := _m.Called(n, errs)

	if len(ret) == 0 {
		panic("no return value specified for AddNode")
	}

	var r0 common.NodeBuilder
	var r1 bool
	if rf, ok := ret.Get(0).(func(common.NodeBuilder, errors.CompileErrors) (common.NodeBuilder, bool)); ok {
		return rf(n, errs)
	}
	if rf, ok := ret.Get(0).(func(common.NodeBuilder, errors.CompileErrors) common.NodeBuilder); ok {
		r0 = rf(n, errs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NodeBuilder)
		}
	}

	if rf, ok := ret.Get(1).(func(common.NodeBuilder, errors.CompileErrors) bool); ok {
		r1 = rf(n, errs)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// WorkflowBuilder_AddNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNode'
type WorkflowBuilder_AddNode_Call struct {
	*mock.Call
}

// AddNode is a helper method to define mock.On call
//   - n common.NodeBuilder
//   - errs errors.CompileErrors
func (_e *WorkflowBuilder_Expecter) AddNode(n interface{}, errs interface{}) *WorkflowBuilder_AddNode_Call {
	return &WorkflowBuilder_AddNode_Call{Call: _e.mock.On("AddNode", n, errs)}
}

func (_c *WorkflowBuilder_AddNode_Call) Run(run func(n common.NodeBuilder, errs errors.CompileErrors)) *WorkflowBuilder_AddNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.NodeBuilder), args[1].(errors.CompileErrors))
	})
	return _c
}

func (_c *WorkflowBuilder_AddNode_Call) Return(node common.NodeBuilder, ok bool) *WorkflowBuilder_AddNode_Call {
	_c.Call.Return(node, ok)
	return _c
}

func (_c *WorkflowBuilder_AddNode_Call) RunAndReturn(run func(common.NodeBuilder, errors.CompileErrors) (common.NodeBuilder, bool)) *WorkflowBuilder_AddNode_Call {
	_c.Call.Return(run)
	return _c
}

// AddUpstreamEdge provides a mock function with given fields: nodeProvider, nodeDependent
func (_m *WorkflowBuilder) AddUpstreamEdge(nodeProvider string, nodeDependent string) {
	_m.Called(nodeProvider, nodeDependent)
}

// WorkflowBuilder_AddUpstreamEdge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUpstreamEdge'
type WorkflowBuilder_AddUpstreamEdge_Call struct {
	*mock.Call
}

// AddUpstreamEdge is a helper method to define mock.On call
//   - nodeProvider string
//   - nodeDependent string
func (_e *WorkflowBuilder_Expecter) AddUpstreamEdge(nodeProvider interface{}, nodeDependent interface{}) *WorkflowBuilder_AddUpstreamEdge_Call {
	return &WorkflowBuilder_AddUpstreamEdge_Call{Call: _e.mock.On("AddUpstreamEdge", nodeProvider, nodeDependent)}
}

func (_c *WorkflowBuilder_AddUpstreamEdge_Call) Run(run func(nodeProvider string, nodeDependent string)) *WorkflowBuilder_AddUpstreamEdge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *WorkflowBuilder_AddUpstreamEdge_Call) Return() *WorkflowBuilder_AddUpstreamEdge_Call {
	_c.Call.Return()
	return _c
}

func (_c *WorkflowBuilder_AddUpstreamEdge_Call) RunAndReturn(run func(string, string)) *WorkflowBuilder_AddUpstreamEdge_Call {
	_c.Call.Return(run)
	return _c
}

// GetCompiledSubWorkflow provides a mock function with given fields: id
func (_m *WorkflowBuilder) GetCompiledSubWorkflow(id *core.Identifier) (*core.CompiledWorkflow, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCompiledSubWorkflow")
	}

	var r0 *core.CompiledWorkflow
	var r1 bool
	if rf, ok := ret.Get(0).(func(*core.Identifier) (*core.CompiledWorkflow, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*core.Identifier) *core.CompiledWorkflow); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CompiledWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.Identifier) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// WorkflowBuilder_GetCompiledSubWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompiledSubWorkflow'
type WorkflowBuilder_GetCompiledSubWorkflow_Call struct {
	*mock.Call
}

// GetCompiledSubWorkflow is a helper method to define mock.On call
//   - id *core.Identifier
func (_e *WorkflowBuilder_Expecter) GetCompiledSubWorkflow(id interface{}) *WorkflowBuilder_GetCompiledSubWorkflow_Call {
	return &WorkflowBuilder_GetCompiledSubWorkflow_Call{Call: _e.mock.On("GetCompiledSubWorkflow", id)}
}

func (_c *WorkflowBuilder_GetCompiledSubWorkflow_Call) Run(run func(id *core.Identifier)) *WorkflowBuilder_GetCompiledSubWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Identifier))
	})
	return _c
}

func (_c *WorkflowBuilder_GetCompiledSubWorkflow_Call) Return(wf *core.CompiledWorkflow, found bool) *WorkflowBuilder_GetCompiledSubWorkflow_Call {
	_c.Call.Return(wf, found)
	return _c
}

func (_c *WorkflowBuilder_GetCompiledSubWorkflow_Call) RunAndReturn(run func(*core.Identifier) (*core.CompiledWorkflow, bool)) *WorkflowBuilder_GetCompiledSubWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoreWorkflow provides a mock function with given fields:
func (_m *WorkflowBuilder) GetCoreWorkflow() *core.CompiledWorkflow {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCoreWorkflow")
	}

	var r0 *core.CompiledWorkflow
	if rf, ok := ret.Get(0).(func() *core.CompiledWorkflow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CompiledWorkflow)
		}
	}

	return r0
}

// WorkflowBuilder_GetCoreWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoreWorkflow'
type WorkflowBuilder_GetCoreWorkflow_Call struct {
	*mock.Call
}

// GetCoreWorkflow is a helper method to define mock.On call
func (_e *WorkflowBuilder_Expecter) GetCoreWorkflow() *WorkflowBuilder_GetCoreWorkflow_Call {
	return &WorkflowBuilder_GetCoreWorkflow_Call{Call: _e.mock.On("GetCoreWorkflow")}
}

func (_c *WorkflowBuilder_GetCoreWorkflow_Call) Run(run func()) *WorkflowBuilder_GetCoreWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowBuilder_GetCoreWorkflow_Call) Return(_a0 *core.CompiledWorkflow) *WorkflowBuilder_GetCoreWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowBuilder_GetCoreWorkflow_Call) RunAndReturn(run func() *core.CompiledWorkflow) *WorkflowBuilder_GetCoreWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetDownstreamNodes provides a mock function with given fields:
func (_m *WorkflowBuilder) GetDownstreamNodes() common.StringAdjacencyList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDownstreamNodes")
	}

	var r0 common.StringAdjacencyList
	if rf, ok := ret.Get(0).(func() common.StringAdjacencyList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.StringAdjacencyList)
		}
	}

	return r0
}

// WorkflowBuilder_GetDownstreamNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownstreamNodes'
type WorkflowBuilder_GetDownstreamNodes_Call struct {
	*mock.Call
}

// GetDownstreamNodes is a helper method to define mock.On call
func (_e *WorkflowBuilder_Expecter) GetDownstreamNodes() *WorkflowBuilder_GetDownstreamNodes_Call {
	return &WorkflowBuilder_GetDownstreamNodes_Call{Call: _e.mock.On("GetDownstreamNodes")}
}

func (_c *WorkflowBuilder_GetDownstreamNodes_Call) Run(run func()) *WorkflowBuilder_GetDownstreamNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowBuilder_GetDownstreamNodes_Call) Return(_a0 common.StringAdjacencyList) *WorkflowBuilder_GetDownstreamNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowBuilder_GetDownstreamNodes_Call) RunAndReturn(run func() common.StringAdjacencyList) *WorkflowBuilder_GetDownstreamNodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetFailureNode provides a mock function with given fields:
func (_m *WorkflowBuilder) GetFailureNode() common.Node {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFailureNode")
	}

	var r0 common.Node
	if rf, ok := ret.Get(0).(func() common.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Node)
		}
	}

	return r0
}

// WorkflowBuilder_GetFailureNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFailureNode'
type WorkflowBuilder_GetFailureNode_Call struct {
	*mock.Call
}

// GetFailureNode is a helper method to define mock.On call
func (_e *WorkflowBuilder_Expecter) GetFailureNode() *WorkflowBuilder_GetFailureNode_Call {
	return &WorkflowBuilder_GetFailureNode_Call{Call: _e.mock.On("GetFailureNode")}
}

func (_c *WorkflowBuilder_GetFailureNode_Call) Run(run func()) *WorkflowBuilder_GetFailureNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowBuilder_GetFailureNode_Call) Return(_a0 common.Node) *WorkflowBuilder_GetFailureNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowBuilder_GetFailureNode_Call) RunAndReturn(run func() common.Node) *WorkflowBuilder_GetFailureNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetLaunchPlan provides a mock function with given fields: id
func (_m *WorkflowBuilder) GetLaunchPlan(id *core.Identifier) (common.InterfaceProvider, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchPlan")
	}

	var r0 common.InterfaceProvider
	var r1 bool
	if rf, ok := ret.Get(0).(func(*core.Identifier) (common.InterfaceProvider, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*core.Identifier) common.InterfaceProvider); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.InterfaceProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.Identifier) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// WorkflowBuilder_GetLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLaunchPlan'
type WorkflowBuilder_GetLaunchPlan_Call struct {
	*mock.Call
}

// GetLaunchPlan is a helper method to define mock.On call
//   - id *core.Identifier
func (_e *WorkflowBuilder_Expecter) GetLaunchPlan(id interface{}) *WorkflowBuilder_GetLaunchPlan_Call {
	return &WorkflowBuilder_GetLaunchPlan_Call{Call: _e.mock.On("GetLaunchPlan", id)}
}

func (_c *WorkflowBuilder_GetLaunchPlan_Call) Run(run func(id *core.Identifier)) *WorkflowBuilder_GetLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Identifier))
	})
	return _c
}

func (_c *WorkflowBuilder_GetLaunchPlan_Call) Return(wf common.InterfaceProvider, found bool) *WorkflowBuilder_GetLaunchPlan_Call {
	_c.Call.Return(wf, found)
	return _c
}

func (_c *WorkflowBuilder_GetLaunchPlan_Call) RunAndReturn(run func(*core.Identifier) (common.InterfaceProvider, bool)) *WorkflowBuilder_GetLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// GetNode provides a mock function with given fields: id
func (_m *WorkflowBuilder) GetNode(id string) (common.NodeBuilder, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 common.NodeBuilder
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (common.NodeBuilder, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) common.NodeBuilder); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NodeBuilder)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// WorkflowBuilder_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type WorkflowBuilder_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - id string
func (_e *WorkflowBuilder_Expecter) GetNode(id interface{}) *WorkflowBuilder_GetNode_Call {
	return &WorkflowBuilder_GetNode_Call{Call: _e.mock.On("GetNode", id)}
}

func (_c *WorkflowBuilder_GetNode_Call) Run(run func(id string)) *WorkflowBuilder_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *WorkflowBuilder_GetNode_Call) Return(node common.NodeBuilder, found bool) *WorkflowBuilder_GetNode_Call {
	_c.Call.Return(node, found)
	return _c
}

func (_c *WorkflowBuilder_GetNode_Call) RunAndReturn(run func(string) (common.NodeBuilder, bool)) *WorkflowBuilder_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodes provides a mock function with given fields:
func (_m *WorkflowBuilder) GetNodes() common.NodeIndex {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodes")
	}

	var r0 common.NodeIndex
	if rf, ok := ret.Get(0).(func() common.NodeIndex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NodeIndex)
		}
	}

	return r0
}

// WorkflowBuilder_GetNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodes'
type WorkflowBuilder_GetNodes_Call struct {
	*mock.Call
}

// GetNodes is a helper method to define mock.On call
func (_e *WorkflowBuilder_Expecter) GetNodes() *WorkflowBuilder_GetNodes_Call {
	return &WorkflowBuilder_GetNodes_Call{Call: _e.mock.On("GetNodes")}
}

func (_c *WorkflowBuilder_GetNodes_Call) Run(run func()) *WorkflowBuilder_GetNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowBuilder_GetNodes_Call) Return(_a0 common.NodeIndex) *WorkflowBuilder_GetNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowBuilder_GetNodes_Call) RunAndReturn(run func() common.NodeIndex) *WorkflowBuilder_GetNodes_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateNodeBuilder provides a mock function with given fields: n
func (_m *WorkflowBuilder) GetOrCreateNodeBuilder(n *core.Node) common.NodeBuilder {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateNodeBuilder")
	}

	var r0 common.NodeBuilder
	if rf, ok := ret.Get(0).(func(*core.Node) common.NodeBuilder); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NodeBuilder)
		}
	}

	return r0
}

// WorkflowBuilder_GetOrCreateNodeBuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateNodeBuilder'
type WorkflowBuilder_GetOrCreateNodeBuilder_Call struct {
	*mock.Call
}

// GetOrCreateNodeBuilder is a helper method to define mock.On call
//   - n *core.Node
func (_e *WorkflowBuilder_Expecter) GetOrCreateNodeBuilder(n interface{}) *WorkflowBuilder_GetOrCreateNodeBuilder_Call {
	return &WorkflowBuilder_GetOrCreateNodeBuilder_Call{Call: _e.mock.On("GetOrCreateNodeBuilder", n)}
}

func (_c *WorkflowBuilder_GetOrCreateNodeBuilder_Call) Run(run func(n *core.Node)) *WorkflowBuilder_GetOrCreateNodeBuilder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Node))
	})
	return _c
}

func (_c *WorkflowBuilder_GetOrCreateNodeBuilder_Call) Return(_a0 common.NodeBuilder) *WorkflowBuilder_GetOrCreateNodeBuilder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowBuilder_GetOrCreateNodeBuilder_Call) RunAndReturn(run func(*core.Node) common.NodeBuilder) *WorkflowBuilder_GetOrCreateNodeBuilder_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubWorkflow provides a mock function with given fields: id
func (_m *WorkflowBuilder) GetSubWorkflow(id *core.Identifier) (*core.CompiledWorkflow, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSubWorkflow")
	}

	var r0 *core.CompiledWorkflow
	var r1 bool
	if rf, ok := ret.Get(0).(func(*core.Identifier) (*core.CompiledWorkflow, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*core.Identifier) *core.CompiledWorkflow); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CompiledWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.Identifier) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// WorkflowBuilder_GetSubWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubWorkflow'
type WorkflowBuilder_GetSubWorkflow_Call struct {
	*mock.Call
}

// GetSubWorkflow is a helper method to define mock.On call
//   - id *core.Identifier
func (_e *WorkflowBuilder_Expecter) GetSubWorkflow(id interface{}) *WorkflowBuilder_GetSubWorkflow_Call {
	return &WorkflowBuilder_GetSubWorkflow_Call{Call: _e.mock.On("GetSubWorkflow", id)}
}

func (_c *WorkflowBuilder_GetSubWorkflow_Call) Run(run func(id *core.Identifier)) *WorkflowBuilder_GetSubWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Identifier))
	})
	return _c
}

func (_c *WorkflowBuilder_GetSubWorkflow_Call) Return(wf *core.CompiledWorkflow, found bool) *WorkflowBuilder_GetSubWorkflow_Call {
	_c.Call.Return(wf, found)
	return _c
}

func (_c *WorkflowBuilder_GetSubWorkflow_Call) RunAndReturn(run func(*core.Identifier) (*core.CompiledWorkflow, bool)) *WorkflowBuilder_GetSubWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: id
func (_m *WorkflowBuilder) GetTask(id *core.Identifier) (common.Task, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 common.Task
	var r1 bool
	if rf, ok := ret.Get(0).(func(*core.Identifier) (common.Task, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*core.Identifier) common.Task); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.Identifier) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// WorkflowBuilder_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type WorkflowBuilder_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - id *core.Identifier
func (_e *WorkflowBuilder_Expecter) GetTask(id interface{}) *WorkflowBuilder_GetTask_Call {
	return &WorkflowBuilder_GetTask_Call{Call: _e.mock.On("GetTask", id)}
}

func (_c *WorkflowBuilder_GetTask_Call) Run(run func(id *core.Identifier)) *WorkflowBuilder_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Identifier))
	})
	return _c
}

func (_c *WorkflowBuilder_GetTask_Call) Return(task common.Task, found bool) *WorkflowBuilder_GetTask_Call {
	_c.Call.Return(task, found)
	return _c
}

func (_c *WorkflowBuilder_GetTask_Call) RunAndReturn(run func(*core.Identifier) (common.Task, bool)) *WorkflowBuilder_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasks provides a mock function with given fields:
func (_m *WorkflowBuilder) GetTasks() common.TaskIndex {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 common.TaskIndex
	if rf, ok := ret.Get(0).(func() common.TaskIndex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.TaskIndex)
		}
	}

	return r0
}

// WorkflowBuilder_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type WorkflowBuilder_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
func (_e *WorkflowBuilder_Expecter) GetTasks() *WorkflowBuilder_GetTasks_Call {
	return &WorkflowBuilder_GetTasks_Call{Call: _e.mock.On("GetTasks")}
}

func (_c *WorkflowBuilder_GetTasks_Call) Run(run func()) *WorkflowBuilder_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowBuilder_GetTasks_Call) Return(_a0 common.TaskIndex) *WorkflowBuilder_GetTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowBuilder_GetTasks_Call) RunAndReturn(run func() common.TaskIndex) *WorkflowBuilder_GetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpstreamNodes provides a mock function with given fields:
func (_m *WorkflowBuilder) GetUpstreamNodes() common.StringAdjacencyList {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpstreamNodes")
	}

	var r0 common.StringAdjacencyList
	if rf, ok := ret.Get(0).(func() common.StringAdjacencyList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.StringAdjacencyList)
		}
	}

	return r0
}

// WorkflowBuilder_GetUpstreamNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpstreamNodes'
type WorkflowBuilder_GetUpstreamNodes_Call struct {
	*mock.Call
}

// GetUpstreamNodes is a helper method to define mock.On call
func (_e *WorkflowBuilder_Expecter) GetUpstreamNodes() *WorkflowBuilder_GetUpstreamNodes_Call {
	return &WorkflowBuilder_GetUpstreamNodes_Call{Call: _e.mock.On("GetUpstreamNodes")}
}

func (_c *WorkflowBuilder_GetUpstreamNodes_Call) Run(run func()) *WorkflowBuilder_GetUpstreamNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowBuilder_GetUpstreamNodes_Call) Return(_a0 common.StringAdjacencyList) *WorkflowBuilder_GetUpstreamNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowBuilder_GetUpstreamNodes_Call) RunAndReturn(run func() common.StringAdjacencyList) *WorkflowBuilder_GetUpstreamNodes_Call {
	_c.Call.Return(run)
	return _c
}

// StoreCompiledSubWorkflow provides a mock function with given fields: id, compiledWorkflow
func (_m *WorkflowBuilder) StoreCompiledSubWorkflow(id *core.Identifier, compiledWorkflow *core.CompiledWorkflow) {
	_m.Called(id, compiledWorkflow)
}

// WorkflowBuilder_StoreCompiledSubWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreCompiledSubWorkflow'
type WorkflowBuilder_StoreCompiledSubWorkflow_Call struct {
	*mock.Call
}

// StoreCompiledSubWorkflow is a helper method to define mock.On call
//   - id *core.Identifier
//   - compiledWorkflow *core.CompiledWorkflow
func (_e *WorkflowBuilder_Expecter) StoreCompiledSubWorkflow(id interface{}, compiledWorkflow interface{}) *WorkflowBuilder_StoreCompiledSubWorkflow_Call {
	return &WorkflowBuilder_StoreCompiledSubWorkflow_Call{Call: _e.mock.On("StoreCompiledSubWorkflow", id, compiledWorkflow)}
}

func (_c *WorkflowBuilder_StoreCompiledSubWorkflow_Call) Run(run func(id *core.Identifier, compiledWorkflow *core.CompiledWorkflow)) *WorkflowBuilder_StoreCompiledSubWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Identifier), args[1].(*core.CompiledWorkflow))
	})
	return _c
}

func (_c *WorkflowBuilder_StoreCompiledSubWorkflow_Call) Return() *WorkflowBuilder_StoreCompiledSubWorkflow_Call {
	_c.Call.Return()
	return _c
}

func (_c *WorkflowBuilder_StoreCompiledSubWorkflow_Call) RunAndReturn(run func(*core.Identifier, *core.CompiledWorkflow)) *WorkflowBuilder_StoreCompiledSubWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateWorkflow provides a mock function with given fields: fg, errs
func (_m *WorkflowBuilder) ValidateWorkflow(fg *core.CompiledWorkflow, errs errors.CompileErrors) (common.Workflow, bool) {
	ret := _m.Called(fg, errs)

	if len(ret) == 0 {
		panic("no return value specified for ValidateWorkflow")
	}

	var r0 common.Workflow
	var r1 bool
	if rf, ok := ret.Get(0).(func(*core.CompiledWorkflow, errors.CompileErrors) (common.Workflow, bool)); ok {
		return rf(fg, errs)
	}
	if rf, ok := ret.Get(0).(func(*core.CompiledWorkflow, errors.CompileErrors) common.Workflow); ok {
		r0 = rf(fg, errs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.CompiledWorkflow, errors.CompileErrors) bool); ok {
		r1 = rf(fg, errs)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// WorkflowBuilder_ValidateWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateWorkflow'
type WorkflowBuilder_ValidateWorkflow_Call struct {
	*mock.Call
}

// ValidateWorkflow is a helper method to define mock.On call
//   - fg *core.CompiledWorkflow
//   - errs errors.CompileErrors
func (_e *WorkflowBuilder_Expecter) ValidateWorkflow(fg interface{}, errs interface{}) *WorkflowBuilder_ValidateWorkflow_Call {
	return &WorkflowBuilder_ValidateWorkflow_Call{Call: _e.mock.On("ValidateWorkflow", fg, errs)}
}

func (_c *WorkflowBuilder_ValidateWorkflow_Call) Run(run func(fg *core.CompiledWorkflow, errs errors.CompileErrors)) *WorkflowBuilder_ValidateWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.CompiledWorkflow), args[1].(errors.CompileErrors))
	})
	return _c
}

func (_c *WorkflowBuilder_ValidateWorkflow_Call) Return(_a0 common.Workflow, _a1 bool) *WorkflowBuilder_ValidateWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WorkflowBuilder_ValidateWorkflow_Call) RunAndReturn(run func(*core.CompiledWorkflow, errors.CompileErrors) (common.Workflow, bool)) *WorkflowBuilder_ValidateWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkflowBuilder creates a new instance of WorkflowBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflowBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkflowBuilder {
	mock := &WorkflowBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
