// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	protoiface "google.golang.org/protobuf/runtime/protoiface"
)

// EventSink is an autogenerated mock type for the EventSink type
type EventSink struct {
	mock.Mock
}

type EventSink_Expecter struct {
	mock *mock.Mock
}

func (_m *EventSink) EXPECT() *EventSink_Expecter {
	return &EventSink_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *EventSink) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventSink_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type EventSink_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *EventSink_Expecter) Close() *EventSink_Close_Call {
	return &EventSink_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *EventSink_Close_Call) Run(run func()) *EventSink_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventSink_Close_Call) Return(_a0 error) *EventSink_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventSink_Close_Call) RunAndReturn(run func() error) *EventSink_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Sink provides a mock function with given fields: ctx, message
func (_m *EventSink) Sink(ctx context.Context, message protoiface.MessageV1) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Sink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, protoiface.MessageV1) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventSink_Sink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sink'
type EventSink_Sink_Call struct {
	*mock.Call
}

// Sink is a helper method to define mock.On call
//   - ctx context.Context
//   - message protoiface.MessageV1
func (_e *EventSink_Expecter) Sink(ctx interface{}, message interface{}) *EventSink_Sink_Call {
	return &EventSink_Sink_Call{Call: _e.mock.On("Sink", ctx, message)}
}

func (_c *EventSink_Sink_Call) Run(run func(ctx context.Context, message protoiface.MessageV1)) *EventSink_Sink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(protoiface.MessageV1))
	})
	return _c
}

func (_c *EventSink_Sink_Call) Return(_a0 error) *EventSink_Sink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventSink_Sink_Call) RunAndReturn(run func(context.Context, protoiface.MessageV1) error) *EventSink_Sink_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventSink creates a new instance of EventSink. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventSink(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventSink {
	mock := &EventSink{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
