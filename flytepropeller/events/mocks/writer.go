// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// writer is an autogenerated mock type for the writer type
type writer struct {
	mock.Mock
}

type writer_Expecter struct {
	mock *mock.Mock
}

func (_m *writer) EXPECT() *writer_Expecter {
	return &writer_Expecter{mock: &_m.Mock}
}

// Flush provides a mock function with no fields
func (_m *writer) Flush() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// writer_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type writer_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *writer_Expecter) Flush() *writer_Flush_Call {
	return &writer_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *writer_Flush_Call) Run(run func()) *writer_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *writer_Flush_Call) Return(_a0 error) *writer_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *writer_Flush_Call) RunAndReturn(run func() error) *writer_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx, content
func (_m *writer) Write(ctx context.Context, content string) error {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// writer_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type writer_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - content string
func (_e *writer_Expecter) Write(ctx interface{}, content interface{}) *writer_Write_Call {
	return &writer_Write_Call{Call: _e.mock.On("Write", ctx, content)}
}

func (_c *writer_Write_Call) Run(run func(ctx context.Context, content string)) *writer_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *writer_Write_Call) Return(_a0 error) *writer_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *writer_Write_Call) RunAndReturn(run func(context.Context, string) error) *writer_Write_Call {
	_c.Call.Return(run)
	return _c
}

// newWriter creates a new instance of writer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *writer {
	mock := &writer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
