// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/repositories/interfaces"
	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/flyteadmin/pkg/repositories/models"
)

// NamedEntityRepoInterface is an autogenerated mock type for the NamedEntityRepoInterface type
type NamedEntityRepoInterface struct {
	mock.Mock
}

type NamedEntityRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *NamedEntityRepoInterface) EXPECT() *NamedEntityRepoInterface_Expecter {
	return &NamedEntityRepoInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, input
func (_m *NamedEntityRepoInterface) Get(ctx context.Context, input interfaces.GetNamedEntityInput) (models.NamedEntity, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.NamedEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.GetNamedEntityInput) (models.NamedEntity, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.GetNamedEntityInput) models.NamedEntity); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(models.NamedEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.GetNamedEntityInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamedEntityRepoInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type NamedEntityRepoInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - input interfaces.GetNamedEntityInput
func (_e *NamedEntityRepoInterface_Expecter) Get(ctx interface{}, input interface{}) *NamedEntityRepoInterface_Get_Call {
	return &NamedEntityRepoInterface_Get_Call{Call: _e.mock.On("Get", ctx, input)}
}

func (_c *NamedEntityRepoInterface_Get_Call) Run(run func(ctx context.Context, input interfaces.GetNamedEntityInput)) *NamedEntityRepoInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.GetNamedEntityInput))
	})
	return _c
}

func (_c *NamedEntityRepoInterface_Get_Call) Return(_a0 models.NamedEntity, _a1 error) *NamedEntityRepoInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamedEntityRepoInterface_Get_Call) RunAndReturn(run func(context.Context, interfaces.GetNamedEntityInput) (models.NamedEntity, error)) *NamedEntityRepoInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, input
func (_m *NamedEntityRepoInterface) List(ctx context.Context, input interfaces.ListNamedEntityInput) (interfaces.NamedEntityCollectionOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 interfaces.NamedEntityCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ListNamedEntityInput) (interfaces.NamedEntityCollectionOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ListNamedEntityInput) interfaces.NamedEntityCollectionOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(interfaces.NamedEntityCollectionOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.ListNamedEntityInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamedEntityRepoInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type NamedEntityRepoInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - input interfaces.ListNamedEntityInput
func (_e *NamedEntityRepoInterface_Expecter) List(ctx interface{}, input interface{}) *NamedEntityRepoInterface_List_Call {
	return &NamedEntityRepoInterface_List_Call{Call: _e.mock.On("List", ctx, input)}
}

func (_c *NamedEntityRepoInterface_List_Call) Run(run func(ctx context.Context, input interfaces.ListNamedEntityInput)) *NamedEntityRepoInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.ListNamedEntityInput))
	})
	return _c
}

func (_c *NamedEntityRepoInterface_List_Call) Return(_a0 interfaces.NamedEntityCollectionOutput, _a1 error) *NamedEntityRepoInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamedEntityRepoInterface_List_Call) RunAndReturn(run func(context.Context, interfaces.ListNamedEntityInput) (interfaces.NamedEntityCollectionOutput, error)) *NamedEntityRepoInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input
func (_m *NamedEntityRepoInterface) Update(ctx context.Context, input models.NamedEntity) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.NamedEntity) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamedEntityRepoInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type NamedEntityRepoInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input models.NamedEntity
func (_e *NamedEntityRepoInterface_Expecter) Update(ctx interface{}, input interface{}) *NamedEntityRepoInterface_Update_Call {
	return &NamedEntityRepoInterface_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *NamedEntityRepoInterface_Update_Call) Run(run func(ctx context.Context, input models.NamedEntity)) *NamedEntityRepoInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.NamedEntity))
	})
	return _c
}

func (_c *NamedEntityRepoInterface_Update_Call) Return(_a0 error) *NamedEntityRepoInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NamedEntityRepoInterface_Update_Call) RunAndReturn(run func(context.Context, models.NamedEntity) error) *NamedEntityRepoInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewNamedEntityRepoInterface creates a new instance of NamedEntityRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNamedEntityRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *NamedEntityRepoInterface {
	mock := &NamedEntityRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
