// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/repositories/interfaces"
	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/flyteadmin/pkg/repositories/models"
)

// ExecutionRepoInterface is an autogenerated mock type for the ExecutionRepoInterface type
type ExecutionRepoInterface struct {
	mock.Mock
}

type ExecutionRepoInterface_Count struct {
	*mock.Call
}

func (_m ExecutionRepoInterface_Count) Return(_a0 int64, _a1 error) *ExecutionRepoInterface_Count {
	return &ExecutionRepoInterface_Count{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ExecutionRepoInterface) OnCount(ctx context.Context, input interfaces.CountResourceInput) *ExecutionRepoInterface_Count {
	c_call := _m.On("Count", ctx, input)
	return &ExecutionRepoInterface_Count{Call: c_call}
}

func (_m *ExecutionRepoInterface) OnCountMatch(matchers ...interface{}) *ExecutionRepoInterface_Count {
	c_call := _m.On("Count", matchers...)
	return &ExecutionRepoInterface_Count{Call: c_call}
}

// Count provides a mock function with given fields: ctx, input
func (_m *ExecutionRepoInterface) Count(ctx context.Context, input interfaces.CountResourceInput) (int64, error) {
	ret := _m.Called(ctx, input)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.CountResourceInput) int64); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interfaces.CountResourceInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ExecutionRepoInterface_CountByPhase struct {
	*mock.Call
}

func (_m ExecutionRepoInterface_CountByPhase) Return(_a0 interfaces.ExecutionCountsByPhaseOutput, _a1 error) *ExecutionRepoInterface_CountByPhase {
	return &ExecutionRepoInterface_CountByPhase{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ExecutionRepoInterface) OnCountByPhase(ctx context.Context, input interfaces.CountResourceInput) *ExecutionRepoInterface_CountByPhase {
	c_call := _m.On("CountByPhase", ctx, input)
	return &ExecutionRepoInterface_CountByPhase{Call: c_call}
}

func (_m *ExecutionRepoInterface) OnCountByPhaseMatch(matchers ...interface{}) *ExecutionRepoInterface_CountByPhase {
	c_call := _m.On("CountByPhase", matchers...)
	return &ExecutionRepoInterface_CountByPhase{Call: c_call}
}

// CountByPhase provides a mock function with given fields: ctx, input
func (_m *ExecutionRepoInterface) CountByPhase(ctx context.Context, input interfaces.CountResourceInput) (interfaces.ExecutionCountsByPhaseOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 interfaces.ExecutionCountsByPhaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.CountResourceInput) interfaces.ExecutionCountsByPhaseOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ExecutionCountsByPhaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interfaces.CountResourceInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ExecutionRepoInterface_Create struct {
	*mock.Call
}

func (_m ExecutionRepoInterface_Create) Return(_a0 error) *ExecutionRepoInterface_Create {
	return &ExecutionRepoInterface_Create{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutionRepoInterface) OnCreate(ctx context.Context, input models.Execution, executionTagModel []*models.ExecutionTag) *ExecutionRepoInterface_Create {
	c_call := _m.On("Create", ctx, input, executionTagModel)
	return &ExecutionRepoInterface_Create{Call: c_call}
}

func (_m *ExecutionRepoInterface) OnCreateMatch(matchers ...interface{}) *ExecutionRepoInterface_Create {
	c_call := _m.On("Create", matchers...)
	return &ExecutionRepoInterface_Create{Call: c_call}
}

// Create provides a mock function with given fields: ctx, input, executionTagModel
func (_m *ExecutionRepoInterface) Create(ctx context.Context, input models.Execution, executionTagModel []*models.ExecutionTag) error {
	ret := _m.Called(ctx, input, executionTagModel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Execution, []*models.ExecutionTag) error); ok {
		r0 = rf(ctx, input, executionTagModel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ExecutionRepoInterface_FindNextStatusUpdatesCheckpoint struct {
	*mock.Call
}

func (_m ExecutionRepoInterface_FindNextStatusUpdatesCheckpoint) Return(_a0 uint, _a1 error) *ExecutionRepoInterface_FindNextStatusUpdatesCheckpoint {
	return &ExecutionRepoInterface_FindNextStatusUpdatesCheckpoint{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ExecutionRepoInterface) OnFindNextStatusUpdatesCheckpoint(ctx context.Context, cluster string, checkpoint uint) *ExecutionRepoInterface_FindNextStatusUpdatesCheckpoint {
	c_call := _m.On("FindNextStatusUpdatesCheckpoint", ctx, cluster, checkpoint)
	return &ExecutionRepoInterface_FindNextStatusUpdatesCheckpoint{Call: c_call}
}

func (_m *ExecutionRepoInterface) OnFindNextStatusUpdatesCheckpointMatch(matchers ...interface{}) *ExecutionRepoInterface_FindNextStatusUpdatesCheckpoint {
	c_call := _m.On("FindNextStatusUpdatesCheckpoint", matchers...)
	return &ExecutionRepoInterface_FindNextStatusUpdatesCheckpoint{Call: c_call}
}

// FindNextStatusUpdatesCheckpoint provides a mock function with given fields: ctx, cluster, checkpoint
func (_m *ExecutionRepoInterface) FindNextStatusUpdatesCheckpoint(ctx context.Context, cluster string, checkpoint uint) (uint, error) {
	ret := _m.Called(ctx, cluster, checkpoint)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, string, uint) uint); ok {
		r0 = rf(ctx, cluster, checkpoint)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint) error); ok {
		r1 = rf(ctx, cluster, checkpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ExecutionRepoInterface_FindStatusUpdates struct {
	*mock.Call
}

func (_m ExecutionRepoInterface_FindStatusUpdates) Return(_a0 []interfaces.ExecutionStatus, _a1 error) *ExecutionRepoInterface_FindStatusUpdates {
	return &ExecutionRepoInterface_FindStatusUpdates{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ExecutionRepoInterface) OnFindStatusUpdates(ctx context.Context, cluster string, checkpoint uint, limit int, offset int) *ExecutionRepoInterface_FindStatusUpdates {
	c_call := _m.On("FindStatusUpdates", ctx, cluster, checkpoint, limit, offset)
	return &ExecutionRepoInterface_FindStatusUpdates{Call: c_call}
}

func (_m *ExecutionRepoInterface) OnFindStatusUpdatesMatch(matchers ...interface{}) *ExecutionRepoInterface_FindStatusUpdates {
	c_call := _m.On("FindStatusUpdates", matchers...)
	return &ExecutionRepoInterface_FindStatusUpdates{Call: c_call}
}

// FindStatusUpdates provides a mock function with given fields: ctx, cluster, checkpoint, limit, offset
func (_m *ExecutionRepoInterface) FindStatusUpdates(ctx context.Context, cluster string, checkpoint uint, limit int, offset int) ([]interfaces.ExecutionStatus, error) {
	ret := _m.Called(ctx, cluster, checkpoint, limit, offset)

	var r0 []interfaces.ExecutionStatus
	if rf, ok := ret.Get(0).(func(context.Context, string, uint, int, int) []interfaces.ExecutionStatus); ok {
		r0 = rf(ctx, cluster, checkpoint, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.ExecutionStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint, int, int) error); ok {
		r1 = rf(ctx, cluster, checkpoint, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ExecutionRepoInterface_Get struct {
	*mock.Call
}

func (_m ExecutionRepoInterface_Get) Return(_a0 models.Execution, _a1 error) *ExecutionRepoInterface_Get {
	return &ExecutionRepoInterface_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ExecutionRepoInterface) OnGet(ctx context.Context, input interfaces.Identifier) *ExecutionRepoInterface_Get {
	c_call := _m.On("Get", ctx, input)
	return &ExecutionRepoInterface_Get{Call: c_call}
}

func (_m *ExecutionRepoInterface) OnGetMatch(matchers ...interface{}) *ExecutionRepoInterface_Get {
	c_call := _m.On("Get", matchers...)
	return &ExecutionRepoInterface_Get{Call: c_call}
}

// Get provides a mock function with given fields: ctx, input
func (_m *ExecutionRepoInterface) Get(ctx context.Context, input interfaces.Identifier) (models.Execution, error) {
	ret := _m.Called(ctx, input)

	var r0 models.Execution
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Identifier) models.Execution); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(models.Execution)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Identifier) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ExecutionRepoInterface_List struct {
	*mock.Call
}

func (_m ExecutionRepoInterface_List) Return(_a0 interfaces.ExecutionCollectionOutput, _a1 error) *ExecutionRepoInterface_List {
	return &ExecutionRepoInterface_List{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ExecutionRepoInterface) OnList(ctx context.Context, input interfaces.ListResourceInput) *ExecutionRepoInterface_List {
	c_call := _m.On("List", ctx, input)
	return &ExecutionRepoInterface_List{Call: c_call}
}

func (_m *ExecutionRepoInterface) OnListMatch(matchers ...interface{}) *ExecutionRepoInterface_List {
	c_call := _m.On("List", matchers...)
	return &ExecutionRepoInterface_List{Call: c_call}
}

// List provides a mock function with given fields: ctx, input
func (_m *ExecutionRepoInterface) List(ctx context.Context, input interfaces.ListResourceInput) (interfaces.ExecutionCollectionOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 interfaces.ExecutionCollectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ListResourceInput) interfaces.ExecutionCollectionOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(interfaces.ExecutionCollectionOutput)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interfaces.ListResourceInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ExecutionRepoInterface_Update struct {
	*mock.Call
}

func (_m ExecutionRepoInterface_Update) Return(_a0 error) *ExecutionRepoInterface_Update {
	return &ExecutionRepoInterface_Update{Call: _m.Call.Return(_a0)}
}

func (_m *ExecutionRepoInterface) OnUpdate(ctx context.Context, execution models.Execution) *ExecutionRepoInterface_Update {
	c_call := _m.On("Update", ctx, execution)
	return &ExecutionRepoInterface_Update{Call: c_call}
}

func (_m *ExecutionRepoInterface) OnUpdateMatch(matchers ...interface{}) *ExecutionRepoInterface_Update {
	c_call := _m.On("Update", matchers...)
	return &ExecutionRepoInterface_Update{Call: c_call}
}

// Update provides a mock function with given fields: ctx, execution
func (_m *ExecutionRepoInterface) Update(ctx context.Context, execution models.Execution) error {
	ret := _m.Called(ctx, execution)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Execution) error); ok {
		r0 = rf(ctx, execution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
