// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/repositories/interfaces"
	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/flyteadmin/pkg/repositories/models"
)

// DescriptionEntityRepoInterface is an autogenerated mock type for the DescriptionEntityRepoInterface type
type DescriptionEntityRepoInterface struct {
	mock.Mock
}

type DescriptionEntityRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DescriptionEntityRepoInterface) EXPECT() *DescriptionEntityRepoInterface_Expecter {
	return &DescriptionEntityRepoInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, input
func (_m *DescriptionEntityRepoInterface) Get(ctx context.Context, input interfaces.GetDescriptionEntityInput) (models.DescriptionEntity, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.DescriptionEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.GetDescriptionEntityInput) (models.DescriptionEntity, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.GetDescriptionEntityInput) models.DescriptionEntity); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(models.DescriptionEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.GetDescriptionEntityInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescriptionEntityRepoInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type DescriptionEntityRepoInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - input interfaces.GetDescriptionEntityInput
func (_e *DescriptionEntityRepoInterface_Expecter) Get(ctx interface{}, input interface{}) *DescriptionEntityRepoInterface_Get_Call {
	return &DescriptionEntityRepoInterface_Get_Call{Call: _e.mock.On("Get", ctx, input)}
}

func (_c *DescriptionEntityRepoInterface_Get_Call) Run(run func(ctx context.Context, input interfaces.GetDescriptionEntityInput)) *DescriptionEntityRepoInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.GetDescriptionEntityInput))
	})
	return _c
}

func (_c *DescriptionEntityRepoInterface_Get_Call) Return(_a0 models.DescriptionEntity, _a1 error) *DescriptionEntityRepoInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DescriptionEntityRepoInterface_Get_Call) RunAndReturn(run func(context.Context, interfaces.GetDescriptionEntityInput) (models.DescriptionEntity, error)) *DescriptionEntityRepoInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, input
func (_m *DescriptionEntityRepoInterface) List(ctx context.Context, input interfaces.ListResourceInput) (interfaces.DescriptionEntityCollectionOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 interfaces.DescriptionEntityCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ListResourceInput) (interfaces.DescriptionEntityCollectionOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ListResourceInput) interfaces.DescriptionEntityCollectionOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(interfaces.DescriptionEntityCollectionOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.ListResourceInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescriptionEntityRepoInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type DescriptionEntityRepoInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - input interfaces.ListResourceInput
func (_e *DescriptionEntityRepoInterface_Expecter) List(ctx interface{}, input interface{}) *DescriptionEntityRepoInterface_List_Call {
	return &DescriptionEntityRepoInterface_List_Call{Call: _e.mock.On("List", ctx, input)}
}

func (_c *DescriptionEntityRepoInterface_List_Call) Run(run func(ctx context.Context, input interfaces.ListResourceInput)) *DescriptionEntityRepoInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.ListResourceInput))
	})
	return _c
}

func (_c *DescriptionEntityRepoInterface_List_Call) Return(_a0 interfaces.DescriptionEntityCollectionOutput, _a1 error) *DescriptionEntityRepoInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DescriptionEntityRepoInterface_List_Call) RunAndReturn(run func(context.Context, interfaces.ListResourceInput) (interfaces.DescriptionEntityCollectionOutput, error)) *DescriptionEntityRepoInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewDescriptionEntityRepoInterface creates a new instance of DescriptionEntityRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDescriptionEntityRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DescriptionEntityRepoInterface {
	mock := &DescriptionEntityRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
