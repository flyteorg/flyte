// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/repositories/interfaces"
	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/flyteadmin/pkg/repositories/models"
)

// SignalRepoInterface is an autogenerated mock type for the SignalRepoInterface type
type SignalRepoInterface struct {
	mock.Mock
}

type SignalRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *SignalRepoInterface) EXPECT() *SignalRepoInterface_Expecter {
	return &SignalRepoInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, input
func (_m *SignalRepoInterface) Get(ctx context.Context, input models.SignalKey) (models.Signal, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Signal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SignalKey) (models.Signal, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SignalKey) models.Signal); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(models.Signal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SignalKey) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignalRepoInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SignalRepoInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - input models.SignalKey
func (_e *SignalRepoInterface_Expecter) Get(ctx interface{}, input interface{}) *SignalRepoInterface_Get_Call {
	return &SignalRepoInterface_Get_Call{Call: _e.mock.On("Get", ctx, input)}
}

func (_c *SignalRepoInterface_Get_Call) Run(run func(ctx context.Context, input models.SignalKey)) *SignalRepoInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SignalKey))
	})
	return _c
}

func (_c *SignalRepoInterface_Get_Call) Return(_a0 models.Signal, _a1 error) *SignalRepoInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SignalRepoInterface_Get_Call) RunAndReturn(run func(context.Context, models.SignalKey) (models.Signal, error)) *SignalRepoInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreate provides a mock function with given fields: ctx, input
func (_m *SignalRepoInterface) GetOrCreate(ctx context.Context, input *models.Signal) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Signal) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignalRepoInterface_GetOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreate'
type SignalRepoInterface_GetOrCreate_Call struct {
	*mock.Call
}

// GetOrCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - input *models.Signal
func (_e *SignalRepoInterface_Expecter) GetOrCreate(ctx interface{}, input interface{}) *SignalRepoInterface_GetOrCreate_Call {
	return &SignalRepoInterface_GetOrCreate_Call{Call: _e.mock.On("GetOrCreate", ctx, input)}
}

func (_c *SignalRepoInterface_GetOrCreate_Call) Run(run func(ctx context.Context, input *models.Signal)) *SignalRepoInterface_GetOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Signal))
	})
	return _c
}

func (_c *SignalRepoInterface_GetOrCreate_Call) Return(_a0 error) *SignalRepoInterface_GetOrCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SignalRepoInterface_GetOrCreate_Call) RunAndReturn(run func(context.Context, *models.Signal) error) *SignalRepoInterface_GetOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, input
func (_m *SignalRepoInterface) List(ctx context.Context, input interfaces.ListResourceInput) ([]models.Signal, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Signal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ListResourceInput) ([]models.Signal, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ListResourceInput) []models.Signal); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Signal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.ListResourceInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignalRepoInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type SignalRepoInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - input interfaces.ListResourceInput
func (_e *SignalRepoInterface_Expecter) List(ctx interface{}, input interface{}) *SignalRepoInterface_List_Call {
	return &SignalRepoInterface_List_Call{Call: _e.mock.On("List", ctx, input)}
}

func (_c *SignalRepoInterface_List_Call) Run(run func(ctx context.Context, input interfaces.ListResourceInput)) *SignalRepoInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.ListResourceInput))
	})
	return _c
}

func (_c *SignalRepoInterface_List_Call) Return(_a0 []models.Signal, _a1 error) *SignalRepoInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SignalRepoInterface_List_Call) RunAndReturn(run func(context.Context, interfaces.ListResourceInput) ([]models.Signal, error)) *SignalRepoInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input, value
func (_m *SignalRepoInterface) Update(ctx context.Context, input models.SignalKey, value []byte) error {
	ret := _m.Called(ctx, input, value)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SignalKey, []byte) error); ok {
		r0 = rf(ctx, input, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignalRepoInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type SignalRepoInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input models.SignalKey
//   - value []byte
func (_e *SignalRepoInterface_Expecter) Update(ctx interface{}, input interface{}, value interface{}) *SignalRepoInterface_Update_Call {
	return &SignalRepoInterface_Update_Call{Call: _e.mock.On("Update", ctx, input, value)}
}

func (_c *SignalRepoInterface_Update_Call) Run(run func(ctx context.Context, input models.SignalKey, value []byte)) *SignalRepoInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SignalKey), args[2].([]byte))
	})
	return _c
}

func (_c *SignalRepoInterface_Update_Call) Return(_a0 error) *SignalRepoInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SignalRepoInterface_Update_Call) RunAndReturn(run func(context.Context, models.SignalKey, []byte) error) *SignalRepoInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewSignalRepoInterface creates a new instance of SignalRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignalRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SignalRepoInterface {
	mock := &SignalRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
