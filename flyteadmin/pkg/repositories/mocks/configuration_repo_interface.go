// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/repositories/interfaces"
	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/flyteadmin/pkg/repositories/models"
)

// ConfigurationRepoInterface is an autogenerated mock type for the ConfigurationRepoInterface type
type ConfigurationRepoInterface struct {
	mock.Mock
}

type ConfigurationRepoInterface_Create struct {
	*mock.Call
}

func (_m ConfigurationRepoInterface_Create) Return(_a0 error) *ConfigurationRepoInterface_Create {
	return &ConfigurationRepoInterface_Create{Call: _m.Call.Return(_a0)}
}

func (_m *ConfigurationRepoInterface) OnCreate(ctx context.Context, input *models.ConfigurationDocumentMetadata) *ConfigurationRepoInterface_Create {
	c_call := _m.On("Create", ctx, input)
	return &ConfigurationRepoInterface_Create{Call: c_call}
}

func (_m *ConfigurationRepoInterface) OnCreateMatch(matchers ...interface{}) *ConfigurationRepoInterface_Create {
	c_call := _m.On("Create", matchers...)
	return &ConfigurationRepoInterface_Create{Call: c_call}
}

// Create provides a mock function with given fields: ctx, input
func (_m *ConfigurationRepoInterface) Create(ctx context.Context, input *models.ConfigurationDocumentMetadata) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ConfigurationDocumentMetadata) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ConfigurationRepoInterface_GetActive struct {
	*mock.Call
}

func (_m ConfigurationRepoInterface_GetActive) Return(_a0 models.ConfigurationDocumentMetadata, _a1 error) *ConfigurationRepoInterface_GetActive {
	return &ConfigurationRepoInterface_GetActive{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConfigurationRepoInterface) OnGetActive(ctx context.Context) *ConfigurationRepoInterface_GetActive {
	c_call := _m.On("GetActive", ctx)
	return &ConfigurationRepoInterface_GetActive{Call: c_call}
}

func (_m *ConfigurationRepoInterface) OnGetActiveMatch(matchers ...interface{}) *ConfigurationRepoInterface_GetActive {
	c_call := _m.On("GetActive", matchers...)
	return &ConfigurationRepoInterface_GetActive{Call: c_call}
}

// GetActive provides a mock function with given fields: ctx
func (_m *ConfigurationRepoInterface) GetActive(ctx context.Context) (models.ConfigurationDocumentMetadata, error) {
	ret := _m.Called(ctx)

	var r0 models.ConfigurationDocumentMetadata
	if rf, ok := ret.Get(0).(func(context.Context) models.ConfigurationDocumentMetadata); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.ConfigurationDocumentMetadata)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ConfigurationRepoInterface_Update struct {
	*mock.Call
}

func (_m ConfigurationRepoInterface_Update) Return(_a0 error) *ConfigurationRepoInterface_Update {
	return &ConfigurationRepoInterface_Update{Call: _m.Call.Return(_a0)}
}

func (_m *ConfigurationRepoInterface) OnUpdate(ctx context.Context, input *interfaces.UpdateConfigurationInput) *ConfigurationRepoInterface_Update {
	c_call := _m.On("Update", ctx, input)
	return &ConfigurationRepoInterface_Update{Call: c_call}
}

func (_m *ConfigurationRepoInterface) OnUpdateMatch(matchers ...interface{}) *ConfigurationRepoInterface_Update {
	c_call := _m.On("Update", matchers...)
	return &ConfigurationRepoInterface_Update{Call: c_call}
}

// Update provides a mock function with given fields: ctx, input
func (_m *ConfigurationRepoInterface) Update(ctx context.Context, input *interfaces.UpdateConfigurationInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *interfaces.UpdateConfigurationInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
