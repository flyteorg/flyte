// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	compiler "github.com/flyteorg/flyte/flytepropeller/pkg/compiler"
	common "github.com/flyteorg/flyte/flytepropeller/pkg/compiler/common"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"
)

// Compiler is an autogenerated mock type for the Compiler type
type Compiler struct {
	mock.Mock
}

// CompileTask provides a mock function with given fields: task
func (_m *Compiler) CompileTask(task *core.TaskTemplate) (*core.CompiledTask, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for CompileTask")
	}

	var r0 *core.CompiledTask
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.TaskTemplate) (*core.CompiledTask, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(*core.TaskTemplate) *core.CompiledTask); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CompiledTask)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.TaskTemplate) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompileWorkflow provides a mock function with given fields: primaryWf, subworkflows, tasks, launchPlans
func (_m *Compiler) CompileWorkflow(primaryWf *core.WorkflowTemplate, subworkflows []*core.WorkflowTemplate, tasks []*core.CompiledTask, launchPlans []common.InterfaceProvider) (*core.CompiledWorkflowClosure, error) {
	ret := _m.Called(primaryWf, subworkflows, tasks, launchPlans)

	if len(ret) == 0 {
		panic("no return value specified for CompileWorkflow")
	}

	var r0 *core.CompiledWorkflowClosure
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.WorkflowTemplate, []*core.WorkflowTemplate, []*core.CompiledTask, []common.InterfaceProvider) (*core.CompiledWorkflowClosure, error)); ok {
		return rf(primaryWf, subworkflows, tasks, launchPlans)
	}
	if rf, ok := ret.Get(0).(func(*core.WorkflowTemplate, []*core.WorkflowTemplate, []*core.CompiledTask, []common.InterfaceProvider) *core.CompiledWorkflowClosure); ok {
		r0 = rf(primaryWf, subworkflows, tasks, launchPlans)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CompiledWorkflowClosure)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.WorkflowTemplate, []*core.WorkflowTemplate, []*core.CompiledTask, []common.InterfaceProvider) error); ok {
		r1 = rf(primaryWf, subworkflows, tasks, launchPlans)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequirements provides a mock function with given fields: fg, subWfs
func (_m *Compiler) GetRequirements(fg *core.WorkflowTemplate, subWfs []*core.WorkflowTemplate) (compiler.WorkflowExecutionRequirements, error) {
	ret := _m.Called(fg, subWfs)

	if len(ret) == 0 {
		panic("no return value specified for GetRequirements")
	}

	var r0 compiler.WorkflowExecutionRequirements
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.WorkflowTemplate, []*core.WorkflowTemplate) (compiler.WorkflowExecutionRequirements, error)); ok {
		return rf(fg, subWfs)
	}
	if rf, ok := ret.Get(0).(func(*core.WorkflowTemplate, []*core.WorkflowTemplate) compiler.WorkflowExecutionRequirements); ok {
		r0 = rf(fg, subWfs)
	} else {
		r0 = ret.Get(0).(compiler.WorkflowExecutionRequirements)
	}

	if rf, ok := ret.Get(1).(func(*core.WorkflowTemplate, []*core.WorkflowTemplate) error); ok {
		r1 = rf(fg, subWfs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCompiler creates a new instance of Compiler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCompiler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Compiler {
	mock := &Compiler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
