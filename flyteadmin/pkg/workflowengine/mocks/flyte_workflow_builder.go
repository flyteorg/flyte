// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/flyteorg/flyte/flytepropeller/pkg/apis/flyteworkflow/v1alpha1"
)

// FlyteWorkflowBuilder is an autogenerated mock type for the FlyteWorkflowBuilder type
type FlyteWorkflowBuilder struct {
	mock.Mock
}

type FlyteWorkflowBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *FlyteWorkflowBuilder) EXPECT() *FlyteWorkflowBuilder_Expecter {
	return &FlyteWorkflowBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: wfClosure, inputs, executionID, namespace
func (_m *FlyteWorkflowBuilder) Build(wfClosure *core.CompiledWorkflowClosure, inputs *core.LiteralMap, executionID *core.WorkflowExecutionIdentifier, namespace string) (*v1alpha1.FlyteWorkflow, error) {
	ret := _m.Called(wfClosure, inputs, executionID, namespace)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *v1alpha1.FlyteWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.CompiledWorkflowClosure, *core.LiteralMap, *core.WorkflowExecutionIdentifier, string) (*v1alpha1.FlyteWorkflow, error)); ok {
		return rf(wfClosure, inputs, executionID, namespace)
	}
	if rf, ok := ret.Get(0).(func(*core.CompiledWorkflowClosure, *core.LiteralMap, *core.WorkflowExecutionIdentifier, string) *v1alpha1.FlyteWorkflow); ok {
		r0 = rf(wfClosure, inputs, executionID, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.FlyteWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.CompiledWorkflowClosure, *core.LiteralMap, *core.WorkflowExecutionIdentifier, string) error); ok {
		r1 = rf(wfClosure, inputs, executionID, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlyteWorkflowBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type FlyteWorkflowBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - wfClosure *core.CompiledWorkflowClosure
//   - inputs *core.LiteralMap
//   - executionID *core.WorkflowExecutionIdentifier
//   - namespace string
func (_e *FlyteWorkflowBuilder_Expecter) Build(wfClosure interface{}, inputs interface{}, executionID interface{}, namespace interface{}) *FlyteWorkflowBuilder_Build_Call {
	return &FlyteWorkflowBuilder_Build_Call{Call: _e.mock.On("Build", wfClosure, inputs, executionID, namespace)}
}

func (_c *FlyteWorkflowBuilder_Build_Call) Run(run func(wfClosure *core.CompiledWorkflowClosure, inputs *core.LiteralMap, executionID *core.WorkflowExecutionIdentifier, namespace string)) *FlyteWorkflowBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.CompiledWorkflowClosure), args[1].(*core.LiteralMap), args[2].(*core.WorkflowExecutionIdentifier), args[3].(string))
	})
	return _c
}

func (_c *FlyteWorkflowBuilder_Build_Call) Return(_a0 *v1alpha1.FlyteWorkflow, _a1 error) *FlyteWorkflowBuilder_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlyteWorkflowBuilder_Build_Call) RunAndReturn(run func(*core.CompiledWorkflowClosure, *core.LiteralMap, *core.WorkflowExecutionIdentifier, string) (*v1alpha1.FlyteWorkflow, error)) *FlyteWorkflowBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// NewFlyteWorkflowBuilder creates a new instance of FlyteWorkflowBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlyteWorkflowBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlyteWorkflowBuilder {
	mock := &FlyteWorkflowBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
