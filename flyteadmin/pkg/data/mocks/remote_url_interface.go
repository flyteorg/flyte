// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// RemoteURLInterface is an autogenerated mock type for the RemoteURLInterface type
type RemoteURLInterface struct {
	mock.Mock
}

type RemoteURLInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RemoteURLInterface) EXPECT() *RemoteURLInterface_Expecter {
	return &RemoteURLInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, uri
func (_m *RemoteURLInterface) Get(ctx context.Context, uri string) (*admin.UrlBlob, error) {
	ret := _m.Called(ctx, uri)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *admin.UrlBlob
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*admin.UrlBlob, error)); ok {
		return rf(ctx, uri)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *admin.UrlBlob); ok {
		r0 = rf(ctx, uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UrlBlob)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uri)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteURLInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RemoteURLInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uri string
func (_e *RemoteURLInterface_Expecter) Get(ctx interface{}, uri interface{}) *RemoteURLInterface_Get_Call {
	return &RemoteURLInterface_Get_Call{Call: _e.mock.On("Get", ctx, uri)}
}

func (_c *RemoteURLInterface_Get_Call) Run(run func(ctx context.Context, uri string)) *RemoteURLInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RemoteURLInterface_Get_Call) Return(_a0 *admin.UrlBlob, _a1 error) *RemoteURLInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteURLInterface_Get_Call) RunAndReturn(run func(context.Context, string) (*admin.UrlBlob, error)) *RemoteURLInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewRemoteURLInterface creates a new instance of RemoteURLInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRemoteURLInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RemoteURLInterface {
	mock := &RemoteURLInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
