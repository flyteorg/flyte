// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// FlyteAdminDataProvider is an autogenerated mock type for the FlyteAdminDataProvider type
type FlyteAdminDataProvider struct {
	mock.Mock
}

type FlyteAdminDataProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *FlyteAdminDataProvider) EXPECT() *FlyteAdminDataProvider_Expecter {
	return &FlyteAdminDataProvider_Expecter{mock: &_m.Mock}
}

// GetClusterResourceAttributes provides a mock function with given fields: ctx, project, domain
func (_m *FlyteAdminDataProvider) GetClusterResourceAttributes(ctx context.Context, project string, domain string) (*admin.ClusterResourceAttributes, error) {
	ret := _m.Called(ctx, project, domain)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterResourceAttributes")
	}

	var r0 *admin.ClusterResourceAttributes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*admin.ClusterResourceAttributes, error)); ok {
		return rf(ctx, project, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *admin.ClusterResourceAttributes); ok {
		r0 = rf(ctx, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterResourceAttributes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlyteAdminDataProvider_GetClusterResourceAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterResourceAttributes'
type FlyteAdminDataProvider_GetClusterResourceAttributes_Call struct {
	*mock.Call
}

// GetClusterResourceAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - domain string
func (_e *FlyteAdminDataProvider_Expecter) GetClusterResourceAttributes(ctx interface{}, project interface{}, domain interface{}) *FlyteAdminDataProvider_GetClusterResourceAttributes_Call {
	return &FlyteAdminDataProvider_GetClusterResourceAttributes_Call{Call: _e.mock.On("GetClusterResourceAttributes", ctx, project, domain)}
}

func (_c *FlyteAdminDataProvider_GetClusterResourceAttributes_Call) Run(run func(ctx context.Context, project string, domain string)) *FlyteAdminDataProvider_GetClusterResourceAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FlyteAdminDataProvider_GetClusterResourceAttributes_Call) Return(_a0 *admin.ClusterResourceAttributes, _a1 error) *FlyteAdminDataProvider_GetClusterResourceAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlyteAdminDataProvider_GetClusterResourceAttributes_Call) RunAndReturn(run func(context.Context, string, string) (*admin.ClusterResourceAttributes, error)) *FlyteAdminDataProvider_GetClusterResourceAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjects provides a mock function with given fields: ctx
func (_m *FlyteAdminDataProvider) GetProjects(ctx context.Context) (*admin.Projects, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProjects")
	}

	var r0 *admin.Projects
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*admin.Projects, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *admin.Projects); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Projects)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlyteAdminDataProvider_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type FlyteAdminDataProvider_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FlyteAdminDataProvider_Expecter) GetProjects(ctx interface{}) *FlyteAdminDataProvider_GetProjects_Call {
	return &FlyteAdminDataProvider_GetProjects_Call{Call: _e.mock.On("GetProjects", ctx)}
}

func (_c *FlyteAdminDataProvider_GetProjects_Call) Run(run func(ctx context.Context)) *FlyteAdminDataProvider_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FlyteAdminDataProvider_GetProjects_Call) Return(_a0 *admin.Projects, _a1 error) *FlyteAdminDataProvider_GetProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FlyteAdminDataProvider_GetProjects_Call) RunAndReturn(run func(context.Context) (*admin.Projects, error)) *FlyteAdminDataProvider_GetProjects_Call {
	_c.Call.Return(run)
	return _c
}

// NewFlyteAdminDataProvider creates a new instance of FlyteAdminDataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlyteAdminDataProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlyteAdminDataProvider {
	mock := &FlyteAdminDataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
