// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	plugin "github.com/flyteorg/flyte/flyteadmin/pkg/clusterresource/plugin"
	mock "github.com/stretchr/testify/mock"
)

// ClusterResourcePlugin is an autogenerated mock type for the ClusterResourcePlugin type
type ClusterResourcePlugin struct {
	mock.Mock
}

type ClusterResourcePlugin_BatchUpdateClusterResourceState struct {
	*mock.Call
}

func (_m ClusterResourcePlugin_BatchUpdateClusterResourceState) Return(_a0 plugin.BatchUpdateClusterResourceStateOutput, _a1 []plugin.BatchUpdateClusterResourceStateError, _a2 error) *ClusterResourcePlugin_BatchUpdateClusterResourceState {
	return &ClusterResourcePlugin_BatchUpdateClusterResourceState{Call: _m.Call.Return(_a0, _a1, _a2)}
}

func (_m *ClusterResourcePlugin) OnBatchUpdateClusterResourceState(ctx context.Context, input *plugin.BatchUpdateClusterResourceStateInput) *ClusterResourcePlugin_BatchUpdateClusterResourceState {
	c_call := _m.On("BatchUpdateClusterResourceState", ctx, input)
	return &ClusterResourcePlugin_BatchUpdateClusterResourceState{Call: c_call}
}

func (_m *ClusterResourcePlugin) OnBatchUpdateClusterResourceStateMatch(matchers ...interface{}) *ClusterResourcePlugin_BatchUpdateClusterResourceState {
	c_call := _m.On("BatchUpdateClusterResourceState", matchers...)
	return &ClusterResourcePlugin_BatchUpdateClusterResourceState{Call: c_call}
}

// BatchUpdateClusterResourceState provides a mock function with given fields: ctx, input
func (_m *ClusterResourcePlugin) BatchUpdateClusterResourceState(ctx context.Context, input *plugin.BatchUpdateClusterResourceStateInput) (plugin.BatchUpdateClusterResourceStateOutput, []plugin.BatchUpdateClusterResourceStateError, error) {
	ret := _m.Called(ctx, input)

	var r0 plugin.BatchUpdateClusterResourceStateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *plugin.BatchUpdateClusterResourceStateInput) plugin.BatchUpdateClusterResourceStateOutput); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(plugin.BatchUpdateClusterResourceStateOutput)
	}

	var r1 []plugin.BatchUpdateClusterResourceStateError
	if rf, ok := ret.Get(1).(func(context.Context, *plugin.BatchUpdateClusterResourceStateInput) []plugin.BatchUpdateClusterResourceStateError); ok {
		r1 = rf(ctx, input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]plugin.BatchUpdateClusterResourceStateError)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *plugin.BatchUpdateClusterResourceStateInput) error); ok {
		r2 = rf(ctx, input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
