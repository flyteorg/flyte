// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/runtime/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// ClusterConfiguration is an autogenerated mock type for the ClusterConfiguration type
type ClusterConfiguration struct {
	mock.Mock
}

type ClusterConfiguration_Expecter struct {
	mock *mock.Mock
}

func (_m *ClusterConfiguration) EXPECT() *ClusterConfiguration_Expecter {
	return &ClusterConfiguration_Expecter{mock: &_m.Mock}
}

// GetClusterConfigs provides a mock function with no fields
func (_m *ClusterConfiguration) GetClusterConfigs() []interfaces.ClusterConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterConfigs")
	}

	var r0 []interfaces.ClusterConfig
	if rf, ok := ret.Get(0).(func() []interfaces.ClusterConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.ClusterConfig)
		}
	}

	return r0
}

// ClusterConfiguration_GetClusterConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterConfigs'
type ClusterConfiguration_GetClusterConfigs_Call struct {
	*mock.Call
}

// GetClusterConfigs is a helper method to define mock.On call
func (_e *ClusterConfiguration_Expecter) GetClusterConfigs() *ClusterConfiguration_GetClusterConfigs_Call {
	return &ClusterConfiguration_GetClusterConfigs_Call{Call: _e.mock.On("GetClusterConfigs")}
}

func (_c *ClusterConfiguration_GetClusterConfigs_Call) Run(run func()) *ClusterConfiguration_GetClusterConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClusterConfiguration_GetClusterConfigs_Call) Return(_a0 []interfaces.ClusterConfig) *ClusterConfiguration_GetClusterConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterConfiguration_GetClusterConfigs_Call) RunAndReturn(run func() []interfaces.ClusterConfig) *ClusterConfiguration_GetClusterConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultExecutionLabel provides a mock function with no fields
func (_m *ClusterConfiguration) GetDefaultExecutionLabel() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultExecutionLabel")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ClusterConfiguration_GetDefaultExecutionLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultExecutionLabel'
type ClusterConfiguration_GetDefaultExecutionLabel_Call struct {
	*mock.Call
}

// GetDefaultExecutionLabel is a helper method to define mock.On call
func (_e *ClusterConfiguration_Expecter) GetDefaultExecutionLabel() *ClusterConfiguration_GetDefaultExecutionLabel_Call {
	return &ClusterConfiguration_GetDefaultExecutionLabel_Call{Call: _e.mock.On("GetDefaultExecutionLabel")}
}

func (_c *ClusterConfiguration_GetDefaultExecutionLabel_Call) Run(run func()) *ClusterConfiguration_GetDefaultExecutionLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClusterConfiguration_GetDefaultExecutionLabel_Call) Return(_a0 string) *ClusterConfiguration_GetDefaultExecutionLabel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterConfiguration_GetDefaultExecutionLabel_Call) RunAndReturn(run func() string) *ClusterConfiguration_GetDefaultExecutionLabel_Call {
	_c.Call.Return(run)
	return _c
}

// GetLabelClusterMap provides a mock function with no fields
func (_m *ClusterConfiguration) GetLabelClusterMap() map[string][]interfaces.ClusterEntity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLabelClusterMap")
	}

	var r0 map[string][]interfaces.ClusterEntity
	if rf, ok := ret.Get(0).(func() map[string][]interfaces.ClusterEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]interfaces.ClusterEntity)
		}
	}

	return r0
}

// ClusterConfiguration_GetLabelClusterMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabelClusterMap'
type ClusterConfiguration_GetLabelClusterMap_Call struct {
	*mock.Call
}

// GetLabelClusterMap is a helper method to define mock.On call
func (_e *ClusterConfiguration_Expecter) GetLabelClusterMap() *ClusterConfiguration_GetLabelClusterMap_Call {
	return &ClusterConfiguration_GetLabelClusterMap_Call{Call: _e.mock.On("GetLabelClusterMap")}
}

func (_c *ClusterConfiguration_GetLabelClusterMap_Call) Run(run func()) *ClusterConfiguration_GetLabelClusterMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClusterConfiguration_GetLabelClusterMap_Call) Return(_a0 map[string][]interfaces.ClusterEntity) *ClusterConfiguration_GetLabelClusterMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterConfiguration_GetLabelClusterMap_Call) RunAndReturn(run func() map[string][]interfaces.ClusterEntity) *ClusterConfiguration_GetLabelClusterMap_Call {
	_c.Call.Return(run)
	return _c
}

// NewClusterConfiguration creates a new instance of ClusterConfiguration. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClusterConfiguration(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClusterConfiguration {
	mock := &ClusterConfiguration{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
