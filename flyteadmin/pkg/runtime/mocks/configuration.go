// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/runtime/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// Configuration is an autogenerated mock type for the Configuration type
type Configuration struct {
	mock.Mock
}

type Configuration_ApplicationConfiguration struct {
	*mock.Call
}

func (_m Configuration_ApplicationConfiguration) Return(_a0 interfaces.ApplicationConfiguration) *Configuration_ApplicationConfiguration {
	return &Configuration_ApplicationConfiguration{Call: _m.Call.Return(_a0)}
}

func (_m *Configuration) OnApplicationConfiguration() *Configuration_ApplicationConfiguration {
	c_call := _m.On("ApplicationConfiguration")
	return &Configuration_ApplicationConfiguration{Call: c_call}
}

func (_m *Configuration) OnApplicationConfigurationMatch(matchers ...interface{}) *Configuration_ApplicationConfiguration {
	c_call := _m.On("ApplicationConfiguration", matchers...)
	return &Configuration_ApplicationConfiguration{Call: c_call}
}

// ApplicationConfiguration provides a mock function with given fields:
func (_m *Configuration) ApplicationConfiguration() interfaces.ApplicationConfiguration {
	ret := _m.Called()

	var r0 interfaces.ApplicationConfiguration
	if rf, ok := ret.Get(0).(func() interfaces.ApplicationConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ApplicationConfiguration)
		}
	}

	return r0
}

type Configuration_ClusterConfiguration struct {
	*mock.Call
}

func (_m Configuration_ClusterConfiguration) Return(_a0 interfaces.ClusterConfiguration) *Configuration_ClusterConfiguration {
	return &Configuration_ClusterConfiguration{Call: _m.Call.Return(_a0)}
}

func (_m *Configuration) OnClusterConfiguration() *Configuration_ClusterConfiguration {
	c_call := _m.On("ClusterConfiguration")
	return &Configuration_ClusterConfiguration{Call: c_call}
}

func (_m *Configuration) OnClusterConfigurationMatch(matchers ...interface{}) *Configuration_ClusterConfiguration {
	c_call := _m.On("ClusterConfiguration", matchers...)
	return &Configuration_ClusterConfiguration{Call: c_call}
}

// ClusterConfiguration provides a mock function with given fields:
func (_m *Configuration) ClusterConfiguration() interfaces.ClusterConfiguration {
	ret := _m.Called()

	var r0 interfaces.ClusterConfiguration
	if rf, ok := ret.Get(0).(func() interfaces.ClusterConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ClusterConfiguration)
		}
	}

	return r0
}

type Configuration_ClusterPoolAssignmentConfiguration struct {
	*mock.Call
}

func (_m Configuration_ClusterPoolAssignmentConfiguration) Return(_a0 interfaces.ClusterPoolAssignmentConfiguration) *Configuration_ClusterPoolAssignmentConfiguration {
	return &Configuration_ClusterPoolAssignmentConfiguration{Call: _m.Call.Return(_a0)}
}

func (_m *Configuration) OnClusterPoolAssignmentConfiguration() *Configuration_ClusterPoolAssignmentConfiguration {
	c_call := _m.On("ClusterPoolAssignmentConfiguration")
	return &Configuration_ClusterPoolAssignmentConfiguration{Call: c_call}
}

func (_m *Configuration) OnClusterPoolAssignmentConfigurationMatch(matchers ...interface{}) *Configuration_ClusterPoolAssignmentConfiguration {
	c_call := _m.On("ClusterPoolAssignmentConfiguration", matchers...)
	return &Configuration_ClusterPoolAssignmentConfiguration{Call: c_call}
}

// ClusterPoolAssignmentConfiguration provides a mock function with given fields:
func (_m *Configuration) ClusterPoolAssignmentConfiguration() interfaces.ClusterPoolAssignmentConfiguration {
	ret := _m.Called()

	var r0 interfaces.ClusterPoolAssignmentConfiguration
	if rf, ok := ret.Get(0).(func() interfaces.ClusterPoolAssignmentConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ClusterPoolAssignmentConfiguration)
		}
	}

	return r0
}

type Configuration_ClusterResourceConfiguration struct {
	*mock.Call
}

func (_m Configuration_ClusterResourceConfiguration) Return(_a0 interfaces.ClusterResourceConfiguration) *Configuration_ClusterResourceConfiguration {
	return &Configuration_ClusterResourceConfiguration{Call: _m.Call.Return(_a0)}
}

func (_m *Configuration) OnClusterResourceConfiguration() *Configuration_ClusterResourceConfiguration {
	c_call := _m.On("ClusterResourceConfiguration")
	return &Configuration_ClusterResourceConfiguration{Call: c_call}
}

func (_m *Configuration) OnClusterResourceConfigurationMatch(matchers ...interface{}) *Configuration_ClusterResourceConfiguration {
	c_call := _m.On("ClusterResourceConfiguration", matchers...)
	return &Configuration_ClusterResourceConfiguration{Call: c_call}
}

// ClusterResourceConfiguration provides a mock function with given fields:
func (_m *Configuration) ClusterResourceConfiguration() interfaces.ClusterResourceConfiguration {
	ret := _m.Called()

	var r0 interfaces.ClusterResourceConfiguration
	if rf, ok := ret.Get(0).(func() interfaces.ClusterResourceConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ClusterResourceConfiguration)
		}
	}

	return r0
}

type Configuration_NamespaceMappingConfiguration struct {
	*mock.Call
}

func (_m Configuration_NamespaceMappingConfiguration) Return(_a0 interfaces.NamespaceMappingConfiguration) *Configuration_NamespaceMappingConfiguration {
	return &Configuration_NamespaceMappingConfiguration{Call: _m.Call.Return(_a0)}
}

func (_m *Configuration) OnNamespaceMappingConfiguration() *Configuration_NamespaceMappingConfiguration {
	c_call := _m.On("NamespaceMappingConfiguration")
	return &Configuration_NamespaceMappingConfiguration{Call: c_call}
}

func (_m *Configuration) OnNamespaceMappingConfigurationMatch(matchers ...interface{}) *Configuration_NamespaceMappingConfiguration {
	c_call := _m.On("NamespaceMappingConfiguration", matchers...)
	return &Configuration_NamespaceMappingConfiguration{Call: c_call}
}

// NamespaceMappingConfiguration provides a mock function with given fields:
func (_m *Configuration) NamespaceMappingConfiguration() interfaces.NamespaceMappingConfiguration {
	ret := _m.Called()

	var r0 interfaces.NamespaceMappingConfiguration
	if rf, ok := ret.Get(0).(func() interfaces.NamespaceMappingConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.NamespaceMappingConfiguration)
		}
	}

	return r0
}

type Configuration_QualityOfServiceConfiguration struct {
	*mock.Call
}

func (_m Configuration_QualityOfServiceConfiguration) Return(_a0 interfaces.QualityOfServiceConfiguration) *Configuration_QualityOfServiceConfiguration {
	return &Configuration_QualityOfServiceConfiguration{Call: _m.Call.Return(_a0)}
}

func (_m *Configuration) OnQualityOfServiceConfiguration() *Configuration_QualityOfServiceConfiguration {
	c_call := _m.On("QualityOfServiceConfiguration")
	return &Configuration_QualityOfServiceConfiguration{Call: c_call}
}

func (_m *Configuration) OnQualityOfServiceConfigurationMatch(matchers ...interface{}) *Configuration_QualityOfServiceConfiguration {
	c_call := _m.On("QualityOfServiceConfiguration", matchers...)
	return &Configuration_QualityOfServiceConfiguration{Call: c_call}
}

// QualityOfServiceConfiguration provides a mock function with given fields:
func (_m *Configuration) QualityOfServiceConfiguration() interfaces.QualityOfServiceConfiguration {
	ret := _m.Called()

	var r0 interfaces.QualityOfServiceConfiguration
	if rf, ok := ret.Get(0).(func() interfaces.QualityOfServiceConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.QualityOfServiceConfiguration)
		}
	}

	return r0
}

type Configuration_QueueConfiguration struct {
	*mock.Call
}

func (_m Configuration_QueueConfiguration) Return(_a0 interfaces.QueueConfiguration) *Configuration_QueueConfiguration {
	return &Configuration_QueueConfiguration{Call: _m.Call.Return(_a0)}
}

func (_m *Configuration) OnQueueConfiguration() *Configuration_QueueConfiguration {
	c_call := _m.On("QueueConfiguration")
	return &Configuration_QueueConfiguration{Call: c_call}
}

func (_m *Configuration) OnQueueConfigurationMatch(matchers ...interface{}) *Configuration_QueueConfiguration {
	c_call := _m.On("QueueConfiguration", matchers...)
	return &Configuration_QueueConfiguration{Call: c_call}
}

// QueueConfiguration provides a mock function with given fields:
func (_m *Configuration) QueueConfiguration() interfaces.QueueConfiguration {
	ret := _m.Called()

	var r0 interfaces.QueueConfiguration
	if rf, ok := ret.Get(0).(func() interfaces.QueueConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.QueueConfiguration)
		}
	}

	return r0
}

type Configuration_RegistrationValidationConfiguration struct {
	*mock.Call
}

func (_m Configuration_RegistrationValidationConfiguration) Return(_a0 interfaces.RegistrationValidationConfiguration) *Configuration_RegistrationValidationConfiguration {
	return &Configuration_RegistrationValidationConfiguration{Call: _m.Call.Return(_a0)}
}

func (_m *Configuration) OnRegistrationValidationConfiguration() *Configuration_RegistrationValidationConfiguration {
	c_call := _m.On("RegistrationValidationConfiguration")
	return &Configuration_RegistrationValidationConfiguration{Call: c_call}
}

func (_m *Configuration) OnRegistrationValidationConfigurationMatch(matchers ...interface{}) *Configuration_RegistrationValidationConfiguration {
	c_call := _m.On("RegistrationValidationConfiguration", matchers...)
	return &Configuration_RegistrationValidationConfiguration{Call: c_call}
}

// RegistrationValidationConfiguration provides a mock function with given fields:
func (_m *Configuration) RegistrationValidationConfiguration() interfaces.RegistrationValidationConfiguration {
	ret := _m.Called()

	var r0 interfaces.RegistrationValidationConfiguration
	if rf, ok := ret.Get(0).(func() interfaces.RegistrationValidationConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.RegistrationValidationConfiguration)
		}
	}

	return r0
}

type Configuration_TaskResourceConfiguration struct {
	*mock.Call
}

func (_m Configuration_TaskResourceConfiguration) Return(_a0 interfaces.TaskResourceConfiguration) *Configuration_TaskResourceConfiguration {
	return &Configuration_TaskResourceConfiguration{Call: _m.Call.Return(_a0)}
}

func (_m *Configuration) OnTaskResourceConfiguration() *Configuration_TaskResourceConfiguration {
	c_call := _m.On("TaskResourceConfiguration")
	return &Configuration_TaskResourceConfiguration{Call: c_call}
}

func (_m *Configuration) OnTaskResourceConfigurationMatch(matchers ...interface{}) *Configuration_TaskResourceConfiguration {
	c_call := _m.On("TaskResourceConfiguration", matchers...)
	return &Configuration_TaskResourceConfiguration{Call: c_call}
}

// TaskResourceConfiguration provides a mock function with given fields:
func (_m *Configuration) TaskResourceConfiguration() interfaces.TaskResourceConfiguration {
	ret := _m.Called()

	var r0 interfaces.TaskResourceConfiguration
	if rf, ok := ret.Get(0).(func() interfaces.TaskResourceConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.TaskResourceConfiguration)
		}
	}

	return r0
}

type Configuration_WhitelistConfiguration struct {
	*mock.Call
}

func (_m Configuration_WhitelistConfiguration) Return(_a0 interfaces.WhitelistConfiguration) *Configuration_WhitelistConfiguration {
	return &Configuration_WhitelistConfiguration{Call: _m.Call.Return(_a0)}
}

func (_m *Configuration) OnWhitelistConfiguration() *Configuration_WhitelistConfiguration {
	c_call := _m.On("WhitelistConfiguration")
	return &Configuration_WhitelistConfiguration{Call: c_call}
}

func (_m *Configuration) OnWhitelistConfigurationMatch(matchers ...interface{}) *Configuration_WhitelistConfiguration {
	c_call := _m.On("WhitelistConfiguration", matchers...)
	return &Configuration_WhitelistConfiguration{Call: c_call}
}

// WhitelistConfiguration provides a mock function with given fields:
func (_m *Configuration) WhitelistConfiguration() interfaces.WhitelistConfiguration {
	ret := _m.Called()

	var r0 interfaces.WhitelistConfiguration
	if rf, ok := ret.Get(0).(func() interfaces.WhitelistConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.WhitelistConfiguration)
		}
	}

	return r0
}
