// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/runtime/interfaces"
	database "github.com/flyteorg/flyte/flytestdlib/database"

	mock "github.com/stretchr/testify/mock"
)

// ApplicationConfiguration is an autogenerated mock type for the ApplicationConfiguration type
type ApplicationConfiguration struct {
	mock.Mock
}

type ApplicationConfiguration_GetCloudEventsConfig struct {
	*mock.Call
}

func (_m ApplicationConfiguration_GetCloudEventsConfig) Return(_a0 *interfaces.CloudEventsConfig) *ApplicationConfiguration_GetCloudEventsConfig {
	return &ApplicationConfiguration_GetCloudEventsConfig{Call: _m.Call.Return(_a0)}
}

func (_m *ApplicationConfiguration) OnGetCloudEventsConfig() *ApplicationConfiguration_GetCloudEventsConfig {
	c_call := _m.On("GetCloudEventsConfig")
	return &ApplicationConfiguration_GetCloudEventsConfig{Call: c_call}
}

func (_m *ApplicationConfiguration) OnGetCloudEventsConfigMatch(matchers ...interface{}) *ApplicationConfiguration_GetCloudEventsConfig {
	c_call := _m.On("GetCloudEventsConfig", matchers...)
	return &ApplicationConfiguration_GetCloudEventsConfig{Call: c_call}
}

// GetCloudEventsConfig provides a mock function with given fields:
func (_m *ApplicationConfiguration) GetCloudEventsConfig() *interfaces.CloudEventsConfig {
	ret := _m.Called()

	var r0 *interfaces.CloudEventsConfig
	if rf, ok := ret.Get(0).(func() *interfaces.CloudEventsConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.CloudEventsConfig)
		}
	}

	return r0
}

type ApplicationConfiguration_GetDbConfig struct {
	*mock.Call
}

func (_m ApplicationConfiguration_GetDbConfig) Return(_a0 *database.DbConfig) *ApplicationConfiguration_GetDbConfig {
	return &ApplicationConfiguration_GetDbConfig{Call: _m.Call.Return(_a0)}
}

func (_m *ApplicationConfiguration) OnGetDbConfig() *ApplicationConfiguration_GetDbConfig {
	c_call := _m.On("GetDbConfig")
	return &ApplicationConfiguration_GetDbConfig{Call: c_call}
}

func (_m *ApplicationConfiguration) OnGetDbConfigMatch(matchers ...interface{}) *ApplicationConfiguration_GetDbConfig {
	c_call := _m.On("GetDbConfig", matchers...)
	return &ApplicationConfiguration_GetDbConfig{Call: c_call}
}

// GetDbConfig provides a mock function with given fields:
func (_m *ApplicationConfiguration) GetDbConfig() *database.DbConfig {
	ret := _m.Called()

	var r0 *database.DbConfig
	if rf, ok := ret.Get(0).(func() *database.DbConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DbConfig)
		}
	}

	return r0
}

type ApplicationConfiguration_GetDomainsConfig struct {
	*mock.Call
}

func (_m ApplicationConfiguration_GetDomainsConfig) Return(_a0 *[]interfaces.Domain) *ApplicationConfiguration_GetDomainsConfig {
	return &ApplicationConfiguration_GetDomainsConfig{Call: _m.Call.Return(_a0)}
}

func (_m *ApplicationConfiguration) OnGetDomainsConfig() *ApplicationConfiguration_GetDomainsConfig {
	c_call := _m.On("GetDomainsConfig")
	return &ApplicationConfiguration_GetDomainsConfig{Call: c_call}
}

func (_m *ApplicationConfiguration) OnGetDomainsConfigMatch(matchers ...interface{}) *ApplicationConfiguration_GetDomainsConfig {
	c_call := _m.On("GetDomainsConfig", matchers...)
	return &ApplicationConfiguration_GetDomainsConfig{Call: c_call}
}

// GetDomainsConfig provides a mock function with given fields:
func (_m *ApplicationConfiguration) GetDomainsConfig() *[]interfaces.Domain {
	ret := _m.Called()

	var r0 *[]interfaces.Domain
	if rf, ok := ret.Get(0).(func() *[]interfaces.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]interfaces.Domain)
		}
	}

	return r0
}

type ApplicationConfiguration_GetExternalEventsConfig struct {
	*mock.Call
}

func (_m ApplicationConfiguration_GetExternalEventsConfig) Return(_a0 *interfaces.ExternalEventsConfig) *ApplicationConfiguration_GetExternalEventsConfig {
	return &ApplicationConfiguration_GetExternalEventsConfig{Call: _m.Call.Return(_a0)}
}

func (_m *ApplicationConfiguration) OnGetExternalEventsConfig() *ApplicationConfiguration_GetExternalEventsConfig {
	c_call := _m.On("GetExternalEventsConfig")
	return &ApplicationConfiguration_GetExternalEventsConfig{Call: c_call}
}

func (_m *ApplicationConfiguration) OnGetExternalEventsConfigMatch(matchers ...interface{}) *ApplicationConfiguration_GetExternalEventsConfig {
	c_call := _m.On("GetExternalEventsConfig", matchers...)
	return &ApplicationConfiguration_GetExternalEventsConfig{Call: c_call}
}

// GetExternalEventsConfig provides a mock function with given fields:
func (_m *ApplicationConfiguration) GetExternalEventsConfig() *interfaces.ExternalEventsConfig {
	ret := _m.Called()

	var r0 *interfaces.ExternalEventsConfig
	if rf, ok := ret.Get(0).(func() *interfaces.ExternalEventsConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ExternalEventsConfig)
		}
	}

	return r0
}

type ApplicationConfiguration_GetNotificationsConfig struct {
	*mock.Call
}

func (_m ApplicationConfiguration_GetNotificationsConfig) Return(_a0 *interfaces.NotificationsConfig) *ApplicationConfiguration_GetNotificationsConfig {
	return &ApplicationConfiguration_GetNotificationsConfig{Call: _m.Call.Return(_a0)}
}

func (_m *ApplicationConfiguration) OnGetNotificationsConfig() *ApplicationConfiguration_GetNotificationsConfig {
	c_call := _m.On("GetNotificationsConfig")
	return &ApplicationConfiguration_GetNotificationsConfig{Call: c_call}
}

func (_m *ApplicationConfiguration) OnGetNotificationsConfigMatch(matchers ...interface{}) *ApplicationConfiguration_GetNotificationsConfig {
	c_call := _m.On("GetNotificationsConfig", matchers...)
	return &ApplicationConfiguration_GetNotificationsConfig{Call: c_call}
}

// GetNotificationsConfig provides a mock function with given fields:
func (_m *ApplicationConfiguration) GetNotificationsConfig() *interfaces.NotificationsConfig {
	ret := _m.Called()

	var r0 *interfaces.NotificationsConfig
	if rf, ok := ret.Get(0).(func() *interfaces.NotificationsConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.NotificationsConfig)
		}
	}

	return r0
}

type ApplicationConfiguration_GetRemoteDataConfig struct {
	*mock.Call
}

func (_m ApplicationConfiguration_GetRemoteDataConfig) Return(_a0 *interfaces.RemoteDataConfig) *ApplicationConfiguration_GetRemoteDataConfig {
	return &ApplicationConfiguration_GetRemoteDataConfig{Call: _m.Call.Return(_a0)}
}

func (_m *ApplicationConfiguration) OnGetRemoteDataConfig() *ApplicationConfiguration_GetRemoteDataConfig {
	c_call := _m.On("GetRemoteDataConfig")
	return &ApplicationConfiguration_GetRemoteDataConfig{Call: c_call}
}

func (_m *ApplicationConfiguration) OnGetRemoteDataConfigMatch(matchers ...interface{}) *ApplicationConfiguration_GetRemoteDataConfig {
	c_call := _m.On("GetRemoteDataConfig", matchers...)
	return &ApplicationConfiguration_GetRemoteDataConfig{Call: c_call}
}

// GetRemoteDataConfig provides a mock function with given fields:
func (_m *ApplicationConfiguration) GetRemoteDataConfig() *interfaces.RemoteDataConfig {
	ret := _m.Called()

	var r0 *interfaces.RemoteDataConfig
	if rf, ok := ret.Get(0).(func() *interfaces.RemoteDataConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.RemoteDataConfig)
		}
	}

	return r0
}

type ApplicationConfiguration_GetSchedulerConfig struct {
	*mock.Call
}

func (_m ApplicationConfiguration_GetSchedulerConfig) Return(_a0 *interfaces.SchedulerConfig) *ApplicationConfiguration_GetSchedulerConfig {
	return &ApplicationConfiguration_GetSchedulerConfig{Call: _m.Call.Return(_a0)}
}

func (_m *ApplicationConfiguration) OnGetSchedulerConfig() *ApplicationConfiguration_GetSchedulerConfig {
	c_call := _m.On("GetSchedulerConfig")
	return &ApplicationConfiguration_GetSchedulerConfig{Call: c_call}
}

func (_m *ApplicationConfiguration) OnGetSchedulerConfigMatch(matchers ...interface{}) *ApplicationConfiguration_GetSchedulerConfig {
	c_call := _m.On("GetSchedulerConfig", matchers...)
	return &ApplicationConfiguration_GetSchedulerConfig{Call: c_call}
}

// GetSchedulerConfig provides a mock function with given fields:
func (_m *ApplicationConfiguration) GetSchedulerConfig() *interfaces.SchedulerConfig {
	ret := _m.Called()

	var r0 *interfaces.SchedulerConfig
	if rf, ok := ret.Get(0).(func() *interfaces.SchedulerConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.SchedulerConfig)
		}
	}

	return r0
}

type ApplicationConfiguration_GetTopLevelConfig struct {
	*mock.Call
}

func (_m ApplicationConfiguration_GetTopLevelConfig) Return(_a0 *interfaces.ApplicationConfig) *ApplicationConfiguration_GetTopLevelConfig {
	return &ApplicationConfiguration_GetTopLevelConfig{Call: _m.Call.Return(_a0)}
}

func (_m *ApplicationConfiguration) OnGetTopLevelConfig() *ApplicationConfiguration_GetTopLevelConfig {
	c_call := _m.On("GetTopLevelConfig")
	return &ApplicationConfiguration_GetTopLevelConfig{Call: c_call}
}

func (_m *ApplicationConfiguration) OnGetTopLevelConfigMatch(matchers ...interface{}) *ApplicationConfiguration_GetTopLevelConfig {
	c_call := _m.On("GetTopLevelConfig", matchers...)
	return &ApplicationConfiguration_GetTopLevelConfig{Call: c_call}
}

// GetTopLevelConfig provides a mock function with given fields:
func (_m *ApplicationConfiguration) GetTopLevelConfig() *interfaces.ApplicationConfig {
	ret := _m.Called()

	var r0 *interfaces.ApplicationConfig
	if rf, ok := ret.Get(0).(func() *interfaces.ApplicationConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ApplicationConfig)
		}
	}

	return r0
}
