// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// TaskInterface is an autogenerated mock type for the TaskInterface type
type TaskInterface struct {
	mock.Mock
}

type TaskInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskInterface) EXPECT() *TaskInterface_Expecter {
	return &TaskInterface_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: ctx, request
func (_m *TaskInterface) CreateTask(ctx context.Context, request *admin.TaskCreateRequest) (*admin.TaskCreateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *admin.TaskCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskCreateRequest) (*admin.TaskCreateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.TaskCreateRequest) *admin.TaskCreateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.TaskCreateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskInterface_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type TaskInterface_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.TaskCreateRequest
func (_e *TaskInterface_Expecter) CreateTask(ctx interface{}, request interface{}) *TaskInterface_CreateTask_Call {
	return &TaskInterface_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, request)}
}

func (_c *TaskInterface_CreateTask_Call) Run(run func(ctx context.Context, request *admin.TaskCreateRequest)) *TaskInterface_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.TaskCreateRequest))
	})
	return _c
}

func (_c *TaskInterface_CreateTask_Call) Return(_a0 *admin.TaskCreateResponse, _a1 error) *TaskInterface_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskInterface_CreateTask_Call) RunAndReturn(run func(context.Context, *admin.TaskCreateRequest) (*admin.TaskCreateResponse, error)) *TaskInterface_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: ctx, request
func (_m *TaskInterface) GetTask(ctx context.Context, request *admin.ObjectGetRequest) (*admin.Task, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *admin.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) (*admin.Task, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) *admin.Task); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ObjectGetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskInterface_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type TaskInterface_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ObjectGetRequest
func (_e *TaskInterface_Expecter) GetTask(ctx interface{}, request interface{}) *TaskInterface_GetTask_Call {
	return &TaskInterface_GetTask_Call{Call: _e.mock.On("GetTask", ctx, request)}
}

func (_c *TaskInterface_GetTask_Call) Run(run func(ctx context.Context, request *admin.ObjectGetRequest)) *TaskInterface_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ObjectGetRequest))
	})
	return _c
}

func (_c *TaskInterface_GetTask_Call) Return(_a0 *admin.Task, _a1 error) *TaskInterface_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskInterface_GetTask_Call) RunAndReturn(run func(context.Context, *admin.ObjectGetRequest) (*admin.Task, error)) *TaskInterface_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// ListTasks provides a mock function with given fields: ctx, request
func (_m *TaskInterface) ListTasks(ctx context.Context, request *admin.ResourceListRequest) (*admin.TaskList, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *admin.TaskList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) (*admin.TaskList, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) *admin.TaskList); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ResourceListRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskInterface_ListTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTasks'
type TaskInterface_ListTasks_Call struct {
	*mock.Call
}

// ListTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ResourceListRequest
func (_e *TaskInterface_Expecter) ListTasks(ctx interface{}, request interface{}) *TaskInterface_ListTasks_Call {
	return &TaskInterface_ListTasks_Call{Call: _e.mock.On("ListTasks", ctx, request)}
}

func (_c *TaskInterface_ListTasks_Call) Run(run func(ctx context.Context, request *admin.ResourceListRequest)) *TaskInterface_ListTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ResourceListRequest))
	})
	return _c
}

func (_c *TaskInterface_ListTasks_Call) Return(_a0 *admin.TaskList, _a1 error) *TaskInterface_ListTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskInterface_ListTasks_Call) RunAndReturn(run func(context.Context, *admin.ResourceListRequest) (*admin.TaskList, error)) *TaskInterface_ListTasks_Call {
	_c.Call.Return(run)
	return _c
}

// ListUniqueTaskIdentifiers provides a mock function with given fields: ctx, request
func (_m *TaskInterface) ListUniqueTaskIdentifiers(ctx context.Context, request *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListUniqueTaskIdentifiers")
	}

	var r0 *admin.NamedEntityIdentifierList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest) *admin.NamedEntityIdentifierList); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityIdentifierList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityIdentifierListRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskInterface_ListUniqueTaskIdentifiers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUniqueTaskIdentifiers'
type TaskInterface_ListUniqueTaskIdentifiers_Call struct {
	*mock.Call
}

// ListUniqueTaskIdentifiers is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.NamedEntityIdentifierListRequest
func (_e *TaskInterface_Expecter) ListUniqueTaskIdentifiers(ctx interface{}, request interface{}) *TaskInterface_ListUniqueTaskIdentifiers_Call {
	return &TaskInterface_ListUniqueTaskIdentifiers_Call{Call: _e.mock.On("ListUniqueTaskIdentifiers", ctx, request)}
}

func (_c *TaskInterface_ListUniqueTaskIdentifiers_Call) Run(run func(ctx context.Context, request *admin.NamedEntityIdentifierListRequest)) *TaskInterface_ListUniqueTaskIdentifiers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NamedEntityIdentifierListRequest))
	})
	return _c
}

func (_c *TaskInterface_ListUniqueTaskIdentifiers_Call) Return(_a0 *admin.NamedEntityIdentifierList, _a1 error) *TaskInterface_ListUniqueTaskIdentifiers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskInterface_ListUniqueTaskIdentifiers_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)) *TaskInterface_ListUniqueTaskIdentifiers_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskInterface creates a new instance of TaskInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskInterface {
	mock := &TaskInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
