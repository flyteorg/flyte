// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/manager/interfaces"

	mock "github.com/stretchr/testify/mock"
)

// ResourceInterface is an autogenerated mock type for the ResourceInterface type
type ResourceInterface struct {
	mock.Mock
}

type ResourceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceInterface) EXPECT() *ResourceInterface_Expecter {
	return &ResourceInterface_Expecter{mock: &_m.Mock}
}

// DeleteProjectAttributes provides a mock function with given fields: ctx, request
func (_m *ResourceInterface) DeleteProjectAttributes(ctx context.Context, request *admin.ProjectAttributesDeleteRequest) (*admin.ProjectAttributesDeleteResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectAttributes")
	}

	var r0 *admin.ProjectAttributesDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesDeleteRequest) (*admin.ProjectAttributesDeleteResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesDeleteRequest) *admin.ProjectAttributesDeleteResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectAttributesDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectAttributesDeleteRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_DeleteProjectAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectAttributes'
type ResourceInterface_DeleteProjectAttributes_Call struct {
	*mock.Call
}

// DeleteProjectAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ProjectAttributesDeleteRequest
func (_e *ResourceInterface_Expecter) DeleteProjectAttributes(ctx interface{}, request interface{}) *ResourceInterface_DeleteProjectAttributes_Call {
	return &ResourceInterface_DeleteProjectAttributes_Call{Call: _e.mock.On("DeleteProjectAttributes", ctx, request)}
}

func (_c *ResourceInterface_DeleteProjectAttributes_Call) Run(run func(ctx context.Context, request *admin.ProjectAttributesDeleteRequest)) *ResourceInterface_DeleteProjectAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectAttributesDeleteRequest))
	})
	return _c
}

func (_c *ResourceInterface_DeleteProjectAttributes_Call) Return(_a0 *admin.ProjectAttributesDeleteResponse, _a1 error) *ResourceInterface_DeleteProjectAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_DeleteProjectAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectAttributesDeleteRequest) (*admin.ProjectAttributesDeleteResponse, error)) *ResourceInterface_DeleteProjectAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectDomainAttributes provides a mock function with given fields: ctx, request
func (_m *ResourceInterface) DeleteProjectDomainAttributes(ctx context.Context, request *admin.ProjectDomainAttributesDeleteRequest) (*admin.ProjectDomainAttributesDeleteResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectDomainAttributes")
	}

	var r0 *admin.ProjectDomainAttributesDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesDeleteRequest) (*admin.ProjectDomainAttributesDeleteResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesDeleteRequest) *admin.ProjectDomainAttributesDeleteResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectDomainAttributesDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectDomainAttributesDeleteRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_DeleteProjectDomainAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectDomainAttributes'
type ResourceInterface_DeleteProjectDomainAttributes_Call struct {
	*mock.Call
}

// DeleteProjectDomainAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ProjectDomainAttributesDeleteRequest
func (_e *ResourceInterface_Expecter) DeleteProjectDomainAttributes(ctx interface{}, request interface{}) *ResourceInterface_DeleteProjectDomainAttributes_Call {
	return &ResourceInterface_DeleteProjectDomainAttributes_Call{Call: _e.mock.On("DeleteProjectDomainAttributes", ctx, request)}
}

func (_c *ResourceInterface_DeleteProjectDomainAttributes_Call) Run(run func(ctx context.Context, request *admin.ProjectDomainAttributesDeleteRequest)) *ResourceInterface_DeleteProjectDomainAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectDomainAttributesDeleteRequest))
	})
	return _c
}

func (_c *ResourceInterface_DeleteProjectDomainAttributes_Call) Return(_a0 *admin.ProjectDomainAttributesDeleteResponse, _a1 error) *ResourceInterface_DeleteProjectDomainAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_DeleteProjectDomainAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectDomainAttributesDeleteRequest) (*admin.ProjectDomainAttributesDeleteResponse, error)) *ResourceInterface_DeleteProjectDomainAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkflowAttributes provides a mock function with given fields: ctx, request
func (_m *ResourceInterface) DeleteWorkflowAttributes(ctx context.Context, request *admin.WorkflowAttributesDeleteRequest) (*admin.WorkflowAttributesDeleteResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflowAttributes")
	}

	var r0 *admin.WorkflowAttributesDeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesDeleteRequest) (*admin.WorkflowAttributesDeleteResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesDeleteRequest) *admin.WorkflowAttributesDeleteResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowAttributesDeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowAttributesDeleteRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_DeleteWorkflowAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkflowAttributes'
type ResourceInterface_DeleteWorkflowAttributes_Call struct {
	*mock.Call
}

// DeleteWorkflowAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.WorkflowAttributesDeleteRequest
func (_e *ResourceInterface_Expecter) DeleteWorkflowAttributes(ctx interface{}, request interface{}) *ResourceInterface_DeleteWorkflowAttributes_Call {
	return &ResourceInterface_DeleteWorkflowAttributes_Call{Call: _e.mock.On("DeleteWorkflowAttributes", ctx, request)}
}

func (_c *ResourceInterface_DeleteWorkflowAttributes_Call) Run(run func(ctx context.Context, request *admin.WorkflowAttributesDeleteRequest)) *ResourceInterface_DeleteWorkflowAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WorkflowAttributesDeleteRequest))
	})
	return _c
}

func (_c *ResourceInterface_DeleteWorkflowAttributes_Call) Return(_a0 *admin.WorkflowAttributesDeleteResponse, _a1 error) *ResourceInterface_DeleteWorkflowAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_DeleteWorkflowAttributes_Call) RunAndReturn(run func(context.Context, *admin.WorkflowAttributesDeleteRequest) (*admin.WorkflowAttributesDeleteResponse, error)) *ResourceInterface_DeleteWorkflowAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectAttributes provides a mock function with given fields: ctx, request
func (_m *ResourceInterface) GetProjectAttributes(ctx context.Context, request *admin.ProjectAttributesGetRequest) (*admin.ProjectAttributesGetResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectAttributes")
	}

	var r0 *admin.ProjectAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesGetRequest) (*admin.ProjectAttributesGetResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesGetRequest) *admin.ProjectAttributesGetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectAttributesGetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_GetProjectAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectAttributes'
type ResourceInterface_GetProjectAttributes_Call struct {
	*mock.Call
}

// GetProjectAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ProjectAttributesGetRequest
func (_e *ResourceInterface_Expecter) GetProjectAttributes(ctx interface{}, request interface{}) *ResourceInterface_GetProjectAttributes_Call {
	return &ResourceInterface_GetProjectAttributes_Call{Call: _e.mock.On("GetProjectAttributes", ctx, request)}
}

func (_c *ResourceInterface_GetProjectAttributes_Call) Run(run func(ctx context.Context, request *admin.ProjectAttributesGetRequest)) *ResourceInterface_GetProjectAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectAttributesGetRequest))
	})
	return _c
}

func (_c *ResourceInterface_GetProjectAttributes_Call) Return(_a0 *admin.ProjectAttributesGetResponse, _a1 error) *ResourceInterface_GetProjectAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_GetProjectAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectAttributesGetRequest) (*admin.ProjectAttributesGetResponse, error)) *ResourceInterface_GetProjectAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectDomainAttributes provides a mock function with given fields: ctx, request
func (_m *ResourceInterface) GetProjectDomainAttributes(ctx context.Context, request *admin.ProjectDomainAttributesGetRequest) (*admin.ProjectDomainAttributesGetResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectDomainAttributes")
	}

	var r0 *admin.ProjectDomainAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesGetRequest) (*admin.ProjectDomainAttributesGetResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesGetRequest) *admin.ProjectDomainAttributesGetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectDomainAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectDomainAttributesGetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_GetProjectDomainAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectDomainAttributes'
type ResourceInterface_GetProjectDomainAttributes_Call struct {
	*mock.Call
}

// GetProjectDomainAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ProjectDomainAttributesGetRequest
func (_e *ResourceInterface_Expecter) GetProjectDomainAttributes(ctx interface{}, request interface{}) *ResourceInterface_GetProjectDomainAttributes_Call {
	return &ResourceInterface_GetProjectDomainAttributes_Call{Call: _e.mock.On("GetProjectDomainAttributes", ctx, request)}
}

func (_c *ResourceInterface_GetProjectDomainAttributes_Call) Run(run func(ctx context.Context, request *admin.ProjectDomainAttributesGetRequest)) *ResourceInterface_GetProjectDomainAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectDomainAttributesGetRequest))
	})
	return _c
}

func (_c *ResourceInterface_GetProjectDomainAttributes_Call) Return(_a0 *admin.ProjectDomainAttributesGetResponse, _a1 error) *ResourceInterface_GetProjectDomainAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_GetProjectDomainAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectDomainAttributesGetRequest) (*admin.ProjectDomainAttributesGetResponse, error)) *ResourceInterface_GetProjectDomainAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetResource provides a mock function with given fields: ctx, request
func (_m *ResourceInterface) GetResource(ctx context.Context, request interfaces.ResourceRequest) (*interfaces.ResourceResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetResource")
	}

	var r0 *interfaces.ResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ResourceRequest) (*interfaces.ResourceResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.ResourceRequest) *interfaces.ResourceResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.ResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.ResourceRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_GetResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResource'
type ResourceInterface_GetResource_Call struct {
	*mock.Call
}

// GetResource is a helper method to define mock.On call
//   - ctx context.Context
//   - request interfaces.ResourceRequest
func (_e *ResourceInterface_Expecter) GetResource(ctx interface{}, request interface{}) *ResourceInterface_GetResource_Call {
	return &ResourceInterface_GetResource_Call{Call: _e.mock.On("GetResource", ctx, request)}
}

func (_c *ResourceInterface_GetResource_Call) Run(run func(ctx context.Context, request interfaces.ResourceRequest)) *ResourceInterface_GetResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.ResourceRequest))
	})
	return _c
}

func (_c *ResourceInterface_GetResource_Call) Return(_a0 *interfaces.ResourceResponse, _a1 error) *ResourceInterface_GetResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_GetResource_Call) RunAndReturn(run func(context.Context, interfaces.ResourceRequest) (*interfaces.ResourceResponse, error)) *ResourceInterface_GetResource_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowAttributes provides a mock function with given fields: ctx, request
func (_m *ResourceInterface) GetWorkflowAttributes(ctx context.Context, request *admin.WorkflowAttributesGetRequest) (*admin.WorkflowAttributesGetResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowAttributes")
	}

	var r0 *admin.WorkflowAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesGetRequest) (*admin.WorkflowAttributesGetResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesGetRequest) *admin.WorkflowAttributesGetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowAttributesGetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_GetWorkflowAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowAttributes'
type ResourceInterface_GetWorkflowAttributes_Call struct {
	*mock.Call
}

// GetWorkflowAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.WorkflowAttributesGetRequest
func (_e *ResourceInterface_Expecter) GetWorkflowAttributes(ctx interface{}, request interface{}) *ResourceInterface_GetWorkflowAttributes_Call {
	return &ResourceInterface_GetWorkflowAttributes_Call{Call: _e.mock.On("GetWorkflowAttributes", ctx, request)}
}

func (_c *ResourceInterface_GetWorkflowAttributes_Call) Run(run func(ctx context.Context, request *admin.WorkflowAttributesGetRequest)) *ResourceInterface_GetWorkflowAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WorkflowAttributesGetRequest))
	})
	return _c
}

func (_c *ResourceInterface_GetWorkflowAttributes_Call) Return(_a0 *admin.WorkflowAttributesGetResponse, _a1 error) *ResourceInterface_GetWorkflowAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_GetWorkflowAttributes_Call) RunAndReturn(run func(context.Context, *admin.WorkflowAttributesGetRequest) (*admin.WorkflowAttributesGetResponse, error)) *ResourceInterface_GetWorkflowAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// ListAll provides a mock function with given fields: ctx, request
func (_m *ResourceInterface) ListAll(ctx context.Context, request *admin.ListMatchableAttributesRequest) (*admin.ListMatchableAttributesResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 *admin.ListMatchableAttributesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListMatchableAttributesRequest) (*admin.ListMatchableAttributesResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListMatchableAttributesRequest) *admin.ListMatchableAttributesResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ListMatchableAttributesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ListMatchableAttributesRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_ListAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAll'
type ResourceInterface_ListAll_Call struct {
	*mock.Call
}

// ListAll is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ListMatchableAttributesRequest
func (_e *ResourceInterface_Expecter) ListAll(ctx interface{}, request interface{}) *ResourceInterface_ListAll_Call {
	return &ResourceInterface_ListAll_Call{Call: _e.mock.On("ListAll", ctx, request)}
}

func (_c *ResourceInterface_ListAll_Call) Run(run func(ctx context.Context, request *admin.ListMatchableAttributesRequest)) *ResourceInterface_ListAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListMatchableAttributesRequest))
	})
	return _c
}

func (_c *ResourceInterface_ListAll_Call) Return(_a0 *admin.ListMatchableAttributesResponse, _a1 error) *ResourceInterface_ListAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_ListAll_Call) RunAndReturn(run func(context.Context, *admin.ListMatchableAttributesRequest) (*admin.ListMatchableAttributesResponse, error)) *ResourceInterface_ListAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectAttributes provides a mock function with given fields: ctx, request
func (_m *ResourceInterface) UpdateProjectAttributes(ctx context.Context, request *admin.ProjectAttributesUpdateRequest) (*admin.ProjectAttributesUpdateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectAttributes")
	}

	var r0 *admin.ProjectAttributesUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesUpdateRequest) (*admin.ProjectAttributesUpdateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectAttributesUpdateRequest) *admin.ProjectAttributesUpdateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectAttributesUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectAttributesUpdateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_UpdateProjectAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectAttributes'
type ResourceInterface_UpdateProjectAttributes_Call struct {
	*mock.Call
}

// UpdateProjectAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ProjectAttributesUpdateRequest
func (_e *ResourceInterface_Expecter) UpdateProjectAttributes(ctx interface{}, request interface{}) *ResourceInterface_UpdateProjectAttributes_Call {
	return &ResourceInterface_UpdateProjectAttributes_Call{Call: _e.mock.On("UpdateProjectAttributes", ctx, request)}
}

func (_c *ResourceInterface_UpdateProjectAttributes_Call) Run(run func(ctx context.Context, request *admin.ProjectAttributesUpdateRequest)) *ResourceInterface_UpdateProjectAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectAttributesUpdateRequest))
	})
	return _c
}

func (_c *ResourceInterface_UpdateProjectAttributes_Call) Return(_a0 *admin.ProjectAttributesUpdateResponse, _a1 error) *ResourceInterface_UpdateProjectAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_UpdateProjectAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectAttributesUpdateRequest) (*admin.ProjectAttributesUpdateResponse, error)) *ResourceInterface_UpdateProjectAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectDomainAttributes provides a mock function with given fields: ctx, request
func (_m *ResourceInterface) UpdateProjectDomainAttributes(ctx context.Context, request *admin.ProjectDomainAttributesUpdateRequest) (*admin.ProjectDomainAttributesUpdateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectDomainAttributes")
	}

	var r0 *admin.ProjectDomainAttributesUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesUpdateRequest) (*admin.ProjectDomainAttributesUpdateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectDomainAttributesUpdateRequest) *admin.ProjectDomainAttributesUpdateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectDomainAttributesUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectDomainAttributesUpdateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_UpdateProjectDomainAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectDomainAttributes'
type ResourceInterface_UpdateProjectDomainAttributes_Call struct {
	*mock.Call
}

// UpdateProjectDomainAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ProjectDomainAttributesUpdateRequest
func (_e *ResourceInterface_Expecter) UpdateProjectDomainAttributes(ctx interface{}, request interface{}) *ResourceInterface_UpdateProjectDomainAttributes_Call {
	return &ResourceInterface_UpdateProjectDomainAttributes_Call{Call: _e.mock.On("UpdateProjectDomainAttributes", ctx, request)}
}

func (_c *ResourceInterface_UpdateProjectDomainAttributes_Call) Run(run func(ctx context.Context, request *admin.ProjectDomainAttributesUpdateRequest)) *ResourceInterface_UpdateProjectDomainAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectDomainAttributesUpdateRequest))
	})
	return _c
}

func (_c *ResourceInterface_UpdateProjectDomainAttributes_Call) Return(_a0 *admin.ProjectDomainAttributesUpdateResponse, _a1 error) *ResourceInterface_UpdateProjectDomainAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_UpdateProjectDomainAttributes_Call) RunAndReturn(run func(context.Context, *admin.ProjectDomainAttributesUpdateRequest) (*admin.ProjectDomainAttributesUpdateResponse, error)) *ResourceInterface_UpdateProjectDomainAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkflowAttributes provides a mock function with given fields: ctx, request
func (_m *ResourceInterface) UpdateWorkflowAttributes(ctx context.Context, request *admin.WorkflowAttributesUpdateRequest) (*admin.WorkflowAttributesUpdateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkflowAttributes")
	}

	var r0 *admin.WorkflowAttributesUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesUpdateRequest) (*admin.WorkflowAttributesUpdateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowAttributesUpdateRequest) *admin.WorkflowAttributesUpdateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowAttributesUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowAttributesUpdateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceInterface_UpdateWorkflowAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflowAttributes'
type ResourceInterface_UpdateWorkflowAttributes_Call struct {
	*mock.Call
}

// UpdateWorkflowAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.WorkflowAttributesUpdateRequest
func (_e *ResourceInterface_Expecter) UpdateWorkflowAttributes(ctx interface{}, request interface{}) *ResourceInterface_UpdateWorkflowAttributes_Call {
	return &ResourceInterface_UpdateWorkflowAttributes_Call{Call: _e.mock.On("UpdateWorkflowAttributes", ctx, request)}
}

func (_c *ResourceInterface_UpdateWorkflowAttributes_Call) Run(run func(ctx context.Context, request *admin.WorkflowAttributesUpdateRequest)) *ResourceInterface_UpdateWorkflowAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.WorkflowAttributesUpdateRequest))
	})
	return _c
}

func (_c *ResourceInterface_UpdateWorkflowAttributes_Call) Return(_a0 *admin.WorkflowAttributesUpdateResponse, _a1 error) *ResourceInterface_UpdateWorkflowAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceInterface_UpdateWorkflowAttributes_Call) RunAndReturn(run func(context.Context, *admin.WorkflowAttributesUpdateRequest) (*admin.WorkflowAttributesUpdateResponse, error)) *ResourceInterface_UpdateWorkflowAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceInterface creates a new instance of ResourceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceInterface {
	mock := &ResourceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
