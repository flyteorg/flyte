// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// VersionInterface is an autogenerated mock type for the VersionInterface type
type VersionInterface struct {
	mock.Mock
}

type VersionInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *VersionInterface) EXPECT() *VersionInterface_Expecter {
	return &VersionInterface_Expecter{mock: &_m.Mock}
}

// GetVersion provides a mock function with given fields: ctx, r
func (_m *VersionInterface) GetVersion(ctx context.Context, r *admin.GetVersionRequest) (*admin.GetVersionResponse, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 *admin.GetVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetVersionRequest) (*admin.GetVersionResponse, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetVersionRequest) *admin.GetVersionResponse); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.GetVersionRequest) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionInterface_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type VersionInterface_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - r *admin.GetVersionRequest
func (_e *VersionInterface_Expecter) GetVersion(ctx interface{}, r interface{}) *VersionInterface_GetVersion_Call {
	return &VersionInterface_GetVersion_Call{Call: _e.mock.On("GetVersion", ctx, r)}
}

func (_c *VersionInterface_GetVersion_Call) Run(run func(ctx context.Context, r *admin.GetVersionRequest)) *VersionInterface_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetVersionRequest))
	})
	return _c
}

func (_c *VersionInterface_GetVersion_Call) Return(_a0 *admin.GetVersionResponse, _a1 error) *VersionInterface_GetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VersionInterface_GetVersion_Call) RunAndReturn(run func(context.Context, *admin.GetVersionRequest) (*admin.GetVersionResponse, error)) *VersionInterface_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// NewVersionInterface creates a new instance of VersionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVersionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *VersionInterface {
	mock := &VersionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
