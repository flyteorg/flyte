// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// ProjectInterface is an autogenerated mock type for the ProjectInterface type
type ProjectInterface struct {
	mock.Mock
}

type ProjectInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectInterface) EXPECT() *ProjectInterface_Expecter {
	return &ProjectInterface_Expecter{mock: &_m.Mock}
}

// CreateProject provides a mock function with given fields: ctx, request
func (_m *ProjectInterface) CreateProject(ctx context.Context, request *admin.ProjectRegisterRequest) (*admin.ProjectRegisterResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *admin.ProjectRegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectRegisterRequest) (*admin.ProjectRegisterResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectRegisterRequest) *admin.ProjectRegisterResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectRegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectRegisterRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectInterface_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type ProjectInterface_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ProjectRegisterRequest
func (_e *ProjectInterface_Expecter) CreateProject(ctx interface{}, request interface{}) *ProjectInterface_CreateProject_Call {
	return &ProjectInterface_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, request)}
}

func (_c *ProjectInterface_CreateProject_Call) Run(run func(ctx context.Context, request *admin.ProjectRegisterRequest)) *ProjectInterface_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectRegisterRequest))
	})
	return _c
}

func (_c *ProjectInterface_CreateProject_Call) Return(_a0 *admin.ProjectRegisterResponse, _a1 error) *ProjectInterface_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectInterface_CreateProject_Call) RunAndReturn(run func(context.Context, *admin.ProjectRegisterRequest) (*admin.ProjectRegisterResponse, error)) *ProjectInterface_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomains provides a mock function with given fields: ctx, request
func (_m *ProjectInterface) GetDomains(ctx context.Context, request *admin.GetDomainRequest) *admin.GetDomainsResponse {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetDomains")
	}

	var r0 *admin.GetDomainsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetDomainRequest) *admin.GetDomainsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetDomainsResponse)
		}
	}

	return r0
}

// ProjectInterface_GetDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomains'
type ProjectInterface_GetDomains_Call struct {
	*mock.Call
}

// GetDomains is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.GetDomainRequest
func (_e *ProjectInterface_Expecter) GetDomains(ctx interface{}, request interface{}) *ProjectInterface_GetDomains_Call {
	return &ProjectInterface_GetDomains_Call{Call: _e.mock.On("GetDomains", ctx, request)}
}

func (_c *ProjectInterface_GetDomains_Call) Run(run func(ctx context.Context, request *admin.GetDomainRequest)) *ProjectInterface_GetDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetDomainRequest))
	})
	return _c
}

func (_c *ProjectInterface_GetDomains_Call) Return(_a0 *admin.GetDomainsResponse) *ProjectInterface_GetDomains_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectInterface_GetDomains_Call) RunAndReturn(run func(context.Context, *admin.GetDomainRequest) *admin.GetDomainsResponse) *ProjectInterface_GetDomains_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: ctx, request
func (_m *ProjectInterface) GetProject(ctx context.Context, request *admin.ProjectGetRequest) (*admin.Project, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *admin.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectGetRequest) (*admin.Project, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectGetRequest) *admin.Project); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectGetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectInterface_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type ProjectInterface_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ProjectGetRequest
func (_e *ProjectInterface_Expecter) GetProject(ctx interface{}, request interface{}) *ProjectInterface_GetProject_Call {
	return &ProjectInterface_GetProject_Call{Call: _e.mock.On("GetProject", ctx, request)}
}

func (_c *ProjectInterface_GetProject_Call) Run(run func(ctx context.Context, request *admin.ProjectGetRequest)) *ProjectInterface_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectGetRequest))
	})
	return _c
}

func (_c *ProjectInterface_GetProject_Call) Return(_a0 *admin.Project, _a1 error) *ProjectInterface_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectInterface_GetProject_Call) RunAndReturn(run func(context.Context, *admin.ProjectGetRequest) (*admin.Project, error)) *ProjectInterface_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function with given fields: ctx, request
func (_m *ProjectInterface) ListProjects(ctx context.Context, request *admin.ProjectListRequest) (*admin.Projects, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 *admin.Projects
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectListRequest) (*admin.Projects, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ProjectListRequest) *admin.Projects); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Projects)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ProjectListRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectInterface_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type ProjectInterface_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ProjectListRequest
func (_e *ProjectInterface_Expecter) ListProjects(ctx interface{}, request interface{}) *ProjectInterface_ListProjects_Call {
	return &ProjectInterface_ListProjects_Call{Call: _e.mock.On("ListProjects", ctx, request)}
}

func (_c *ProjectInterface_ListProjects_Call) Run(run func(ctx context.Context, request *admin.ProjectListRequest)) *ProjectInterface_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ProjectListRequest))
	})
	return _c
}

func (_c *ProjectInterface_ListProjects_Call) Return(_a0 *admin.Projects, _a1 error) *ProjectInterface_ListProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectInterface_ListProjects_Call) RunAndReturn(run func(context.Context, *admin.ProjectListRequest) (*admin.Projects, error)) *ProjectInterface_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: ctx, request
func (_m *ProjectInterface) UpdateProject(ctx context.Context, request *admin.Project) (*admin.ProjectUpdateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *admin.ProjectUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.Project) (*admin.ProjectUpdateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.Project) *admin.ProjectUpdateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.Project) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectInterface_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type ProjectInterface_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.Project
func (_e *ProjectInterface_Expecter) UpdateProject(ctx interface{}, request interface{}) *ProjectInterface_UpdateProject_Call {
	return &ProjectInterface_UpdateProject_Call{Call: _e.mock.On("UpdateProject", ctx, request)}
}

func (_c *ProjectInterface_UpdateProject_Call) Run(run func(ctx context.Context, request *admin.Project)) *ProjectInterface_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.Project))
	})
	return _c
}

func (_c *ProjectInterface_UpdateProject_Call) Return(_a0 *admin.ProjectUpdateResponse, _a1 error) *ProjectInterface_UpdateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectInterface_UpdateProject_Call) RunAndReturn(run func(context.Context, *admin.Project) (*admin.ProjectUpdateResponse, error)) *ProjectInterface_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectInterface creates a new instance of ProjectInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectInterface {
	mock := &ProjectInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
