// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// LaunchPlanInterface is an autogenerated mock type for the LaunchPlanInterface type
type LaunchPlanInterface struct {
	mock.Mock
}

type LaunchPlanInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *LaunchPlanInterface) EXPECT() *LaunchPlanInterface_Expecter {
	return &LaunchPlanInterface_Expecter{mock: &_m.Mock}
}

// CreateLaunchPlan provides a mock function with given fields: ctx, request
func (_m *LaunchPlanInterface) CreateLaunchPlan(ctx context.Context, request *admin.LaunchPlanCreateRequest) (*admin.LaunchPlanCreateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateLaunchPlan")
	}

	var r0 *admin.LaunchPlanCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanCreateRequest) (*admin.LaunchPlanCreateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanCreateRequest) *admin.LaunchPlanCreateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.LaunchPlanCreateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchPlanInterface_CreateLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLaunchPlan'
type LaunchPlanInterface_CreateLaunchPlan_Call struct {
	*mock.Call
}

// CreateLaunchPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.LaunchPlanCreateRequest
func (_e *LaunchPlanInterface_Expecter) CreateLaunchPlan(ctx interface{}, request interface{}) *LaunchPlanInterface_CreateLaunchPlan_Call {
	return &LaunchPlanInterface_CreateLaunchPlan_Call{Call: _e.mock.On("CreateLaunchPlan", ctx, request)}
}

func (_c *LaunchPlanInterface_CreateLaunchPlan_Call) Run(run func(ctx context.Context, request *admin.LaunchPlanCreateRequest)) *LaunchPlanInterface_CreateLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.LaunchPlanCreateRequest))
	})
	return _c
}

func (_c *LaunchPlanInterface_CreateLaunchPlan_Call) Return(_a0 *admin.LaunchPlanCreateResponse, _a1 error) *LaunchPlanInterface_CreateLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LaunchPlanInterface_CreateLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.LaunchPlanCreateRequest) (*admin.LaunchPlanCreateResponse, error)) *LaunchPlanInterface_CreateLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveLaunchPlan provides a mock function with given fields: ctx, request
func (_m *LaunchPlanInterface) GetActiveLaunchPlan(ctx context.Context, request *admin.ActiveLaunchPlanRequest) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveLaunchPlan")
	}

	var r0 *admin.LaunchPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanRequest) (*admin.LaunchPlan, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanRequest) *admin.LaunchPlan); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ActiveLaunchPlanRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchPlanInterface_GetActiveLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveLaunchPlan'
type LaunchPlanInterface_GetActiveLaunchPlan_Call struct {
	*mock.Call
}

// GetActiveLaunchPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ActiveLaunchPlanRequest
func (_e *LaunchPlanInterface_Expecter) GetActiveLaunchPlan(ctx interface{}, request interface{}) *LaunchPlanInterface_GetActiveLaunchPlan_Call {
	return &LaunchPlanInterface_GetActiveLaunchPlan_Call{Call: _e.mock.On("GetActiveLaunchPlan", ctx, request)}
}

func (_c *LaunchPlanInterface_GetActiveLaunchPlan_Call) Run(run func(ctx context.Context, request *admin.ActiveLaunchPlanRequest)) *LaunchPlanInterface_GetActiveLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ActiveLaunchPlanRequest))
	})
	return _c
}

func (_c *LaunchPlanInterface_GetActiveLaunchPlan_Call) Return(_a0 *admin.LaunchPlan, _a1 error) *LaunchPlanInterface_GetActiveLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LaunchPlanInterface_GetActiveLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.ActiveLaunchPlanRequest) (*admin.LaunchPlan, error)) *LaunchPlanInterface_GetActiveLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// GetLaunchPlan provides a mock function with given fields: ctx, request
func (_m *LaunchPlanInterface) GetLaunchPlan(ctx context.Context, request *admin.ObjectGetRequest) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchPlan")
	}

	var r0 *admin.LaunchPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) (*admin.LaunchPlan, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ObjectGetRequest) *admin.LaunchPlan); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ObjectGetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchPlanInterface_GetLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLaunchPlan'
type LaunchPlanInterface_GetLaunchPlan_Call struct {
	*mock.Call
}

// GetLaunchPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ObjectGetRequest
func (_e *LaunchPlanInterface_Expecter) GetLaunchPlan(ctx interface{}, request interface{}) *LaunchPlanInterface_GetLaunchPlan_Call {
	return &LaunchPlanInterface_GetLaunchPlan_Call{Call: _e.mock.On("GetLaunchPlan", ctx, request)}
}

func (_c *LaunchPlanInterface_GetLaunchPlan_Call) Run(run func(ctx context.Context, request *admin.ObjectGetRequest)) *LaunchPlanInterface_GetLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ObjectGetRequest))
	})
	return _c
}

func (_c *LaunchPlanInterface_GetLaunchPlan_Call) Return(_a0 *admin.LaunchPlan, _a1 error) *LaunchPlanInterface_GetLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LaunchPlanInterface_GetLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.ObjectGetRequest) (*admin.LaunchPlan, error)) *LaunchPlanInterface_GetLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// ListActiveLaunchPlans provides a mock function with given fields: ctx, request
func (_m *LaunchPlanInterface) ListActiveLaunchPlans(ctx context.Context, request *admin.ActiveLaunchPlanListRequest) (*admin.LaunchPlanList, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListActiveLaunchPlans")
	}

	var r0 *admin.LaunchPlanList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanListRequest) (*admin.LaunchPlanList, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ActiveLaunchPlanListRequest) *admin.LaunchPlanList); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ActiveLaunchPlanListRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchPlanInterface_ListActiveLaunchPlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListActiveLaunchPlans'
type LaunchPlanInterface_ListActiveLaunchPlans_Call struct {
	*mock.Call
}

// ListActiveLaunchPlans is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ActiveLaunchPlanListRequest
func (_e *LaunchPlanInterface_Expecter) ListActiveLaunchPlans(ctx interface{}, request interface{}) *LaunchPlanInterface_ListActiveLaunchPlans_Call {
	return &LaunchPlanInterface_ListActiveLaunchPlans_Call{Call: _e.mock.On("ListActiveLaunchPlans", ctx, request)}
}

func (_c *LaunchPlanInterface_ListActiveLaunchPlans_Call) Run(run func(ctx context.Context, request *admin.ActiveLaunchPlanListRequest)) *LaunchPlanInterface_ListActiveLaunchPlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ActiveLaunchPlanListRequest))
	})
	return _c
}

func (_c *LaunchPlanInterface_ListActiveLaunchPlans_Call) Return(_a0 *admin.LaunchPlanList, _a1 error) *LaunchPlanInterface_ListActiveLaunchPlans_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LaunchPlanInterface_ListActiveLaunchPlans_Call) RunAndReturn(run func(context.Context, *admin.ActiveLaunchPlanListRequest) (*admin.LaunchPlanList, error)) *LaunchPlanInterface_ListActiveLaunchPlans_Call {
	_c.Call.Return(run)
	return _c
}

// ListLaunchPlanIds provides a mock function with given fields: ctx, request
func (_m *LaunchPlanInterface) ListLaunchPlanIds(ctx context.Context, request *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListLaunchPlanIds")
	}

	var r0 *admin.NamedEntityIdentifierList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.NamedEntityIdentifierListRequest) *admin.NamedEntityIdentifierList); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NamedEntityIdentifierList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.NamedEntityIdentifierListRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchPlanInterface_ListLaunchPlanIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLaunchPlanIds'
type LaunchPlanInterface_ListLaunchPlanIds_Call struct {
	*mock.Call
}

// ListLaunchPlanIds is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.NamedEntityIdentifierListRequest
func (_e *LaunchPlanInterface_Expecter) ListLaunchPlanIds(ctx interface{}, request interface{}) *LaunchPlanInterface_ListLaunchPlanIds_Call {
	return &LaunchPlanInterface_ListLaunchPlanIds_Call{Call: _e.mock.On("ListLaunchPlanIds", ctx, request)}
}

func (_c *LaunchPlanInterface_ListLaunchPlanIds_Call) Run(run func(ctx context.Context, request *admin.NamedEntityIdentifierListRequest)) *LaunchPlanInterface_ListLaunchPlanIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.NamedEntityIdentifierListRequest))
	})
	return _c
}

func (_c *LaunchPlanInterface_ListLaunchPlanIds_Call) Return(_a0 *admin.NamedEntityIdentifierList, _a1 error) *LaunchPlanInterface_ListLaunchPlanIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LaunchPlanInterface_ListLaunchPlanIds_Call) RunAndReturn(run func(context.Context, *admin.NamedEntityIdentifierListRequest) (*admin.NamedEntityIdentifierList, error)) *LaunchPlanInterface_ListLaunchPlanIds_Call {
	_c.Call.Return(run)
	return _c
}

// ListLaunchPlans provides a mock function with given fields: ctx, request
func (_m *LaunchPlanInterface) ListLaunchPlans(ctx context.Context, request *admin.ResourceListRequest) (*admin.LaunchPlanList, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ListLaunchPlans")
	}

	var r0 *admin.LaunchPlanList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) (*admin.LaunchPlanList, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ResourceListRequest) *admin.LaunchPlanList); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ResourceListRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchPlanInterface_ListLaunchPlans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLaunchPlans'
type LaunchPlanInterface_ListLaunchPlans_Call struct {
	*mock.Call
}

// ListLaunchPlans is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.ResourceListRequest
func (_e *LaunchPlanInterface_Expecter) ListLaunchPlans(ctx interface{}, request interface{}) *LaunchPlanInterface_ListLaunchPlans_Call {
	return &LaunchPlanInterface_ListLaunchPlans_Call{Call: _e.mock.On("ListLaunchPlans", ctx, request)}
}

func (_c *LaunchPlanInterface_ListLaunchPlans_Call) Run(run func(ctx context.Context, request *admin.ResourceListRequest)) *LaunchPlanInterface_ListLaunchPlans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ResourceListRequest))
	})
	return _c
}

func (_c *LaunchPlanInterface_ListLaunchPlans_Call) Return(_a0 *admin.LaunchPlanList, _a1 error) *LaunchPlanInterface_ListLaunchPlans_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LaunchPlanInterface_ListLaunchPlans_Call) RunAndReturn(run func(context.Context, *admin.ResourceListRequest) (*admin.LaunchPlanList, error)) *LaunchPlanInterface_ListLaunchPlans_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLaunchPlan provides a mock function with given fields: ctx, request
func (_m *LaunchPlanInterface) UpdateLaunchPlan(ctx context.Context, request *admin.LaunchPlanUpdateRequest) (*admin.LaunchPlanUpdateResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLaunchPlan")
	}

	var r0 *admin.LaunchPlanUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanUpdateRequest) (*admin.LaunchPlanUpdateResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.LaunchPlanUpdateRequest) *admin.LaunchPlanUpdateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlanUpdateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.LaunchPlanUpdateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchPlanInterface_UpdateLaunchPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLaunchPlan'
type LaunchPlanInterface_UpdateLaunchPlan_Call struct {
	*mock.Call
}

// UpdateLaunchPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - request *admin.LaunchPlanUpdateRequest
func (_e *LaunchPlanInterface_Expecter) UpdateLaunchPlan(ctx interface{}, request interface{}) *LaunchPlanInterface_UpdateLaunchPlan_Call {
	return &LaunchPlanInterface_UpdateLaunchPlan_Call{Call: _e.mock.On("UpdateLaunchPlan", ctx, request)}
}

func (_c *LaunchPlanInterface_UpdateLaunchPlan_Call) Run(run func(ctx context.Context, request *admin.LaunchPlanUpdateRequest)) *LaunchPlanInterface_UpdateLaunchPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.LaunchPlanUpdateRequest))
	})
	return _c
}

func (_c *LaunchPlanInterface_UpdateLaunchPlan_Call) Return(_a0 *admin.LaunchPlanUpdateResponse, _a1 error) *LaunchPlanInterface_UpdateLaunchPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LaunchPlanInterface_UpdateLaunchPlan_Call) RunAndReturn(run func(context.Context, *admin.LaunchPlanUpdateRequest) (*admin.LaunchPlanUpdateResponse, error)) *LaunchPlanInterface_UpdateLaunchPlan_Call {
	_c.Call.Return(run)
	return _c
}

// NewLaunchPlanInterface creates a new instance of LaunchPlanInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLaunchPlanInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LaunchPlanInterface {
	mock := &LaunchPlanInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
