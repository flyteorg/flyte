// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// ConfigurationInterface is an autogenerated mock type for the ConfigurationInterface type
type ConfigurationInterface struct {
	mock.Mock
}

type ConfigurationInterface_GetConfiguration struct {
	*mock.Call
}

func (_m ConfigurationInterface_GetConfiguration) Return(_a0 *admin.ConfigurationGetResponse, _a1 error) *ConfigurationInterface_GetConfiguration {
	return &ConfigurationInterface_GetConfiguration{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConfigurationInterface) OnGetConfiguration(ctx context.Context, request admin.ConfigurationGetRequest) *ConfigurationInterface_GetConfiguration {
	c_call := _m.On("GetConfiguration", ctx, request)
	return &ConfigurationInterface_GetConfiguration{Call: c_call}
}

func (_m *ConfigurationInterface) OnGetConfigurationMatch(matchers ...interface{}) *ConfigurationInterface_GetConfiguration {
	c_call := _m.On("GetConfiguration", matchers...)
	return &ConfigurationInterface_GetConfiguration{Call: c_call}
}

// GetConfiguration provides a mock function with given fields: ctx, request
func (_m *ConfigurationInterface) GetConfiguration(ctx context.Context, request admin.ConfigurationGetRequest) (*admin.ConfigurationGetResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *admin.ConfigurationGetResponse
	if rf, ok := ret.Get(0).(func(context.Context, admin.ConfigurationGetRequest) *admin.ConfigurationGetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ConfigurationGetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, admin.ConfigurationGetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ConfigurationInterface_GetEditableActiveDocument struct {
	*mock.Call
}

func (_m ConfigurationInterface_GetEditableActiveDocument) Return(_a0 admin.ConfigurationDocument, _a1 error) *ConfigurationInterface_GetEditableActiveDocument {
	return &ConfigurationInterface_GetEditableActiveDocument{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConfigurationInterface) OnGetEditableActiveDocument(ctx context.Context) *ConfigurationInterface_GetEditableActiveDocument {
	c_call := _m.On("GetEditableActiveDocument", ctx)
	return &ConfigurationInterface_GetEditableActiveDocument{Call: c_call}
}

func (_m *ConfigurationInterface) OnGetEditableActiveDocumentMatch(matchers ...interface{}) *ConfigurationInterface_GetEditableActiveDocument {
	c_call := _m.On("GetEditableActiveDocument", matchers...)
	return &ConfigurationInterface_GetEditableActiveDocument{Call: c_call}
}

// GetEditableActiveDocument provides a mock function with given fields: ctx
func (_m *ConfigurationInterface) GetEditableActiveDocument(ctx context.Context) (admin.ConfigurationDocument, error) {
	ret := _m.Called(ctx)

	var r0 admin.ConfigurationDocument
	if rf, ok := ret.Get(0).(func(context.Context) admin.ConfigurationDocument); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.ConfigurationDocument)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ConfigurationInterface_GetReadOnlyActiveDocument struct {
	*mock.Call
}

func (_m ConfigurationInterface_GetReadOnlyActiveDocument) Return(_a0 admin.ConfigurationDocument, _a1 error) *ConfigurationInterface_GetReadOnlyActiveDocument {
	return &ConfigurationInterface_GetReadOnlyActiveDocument{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConfigurationInterface) OnGetReadOnlyActiveDocument(ctx context.Context) *ConfigurationInterface_GetReadOnlyActiveDocument {
	c_call := _m.On("GetReadOnlyActiveDocument", ctx)
	return &ConfigurationInterface_GetReadOnlyActiveDocument{Call: c_call}
}

func (_m *ConfigurationInterface) OnGetReadOnlyActiveDocumentMatch(matchers ...interface{}) *ConfigurationInterface_GetReadOnlyActiveDocument {
	c_call := _m.On("GetReadOnlyActiveDocument", matchers...)
	return &ConfigurationInterface_GetReadOnlyActiveDocument{Call: c_call}
}

// GetReadOnlyActiveDocument provides a mock function with given fields: ctx
func (_m *ConfigurationInterface) GetReadOnlyActiveDocument(ctx context.Context) (admin.ConfigurationDocument, error) {
	ret := _m.Called(ctx)

	var r0 admin.ConfigurationDocument
	if rf, ok := ret.Get(0).(func(context.Context) admin.ConfigurationDocument); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.ConfigurationDocument)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ConfigurationInterface_UpdateConfiguration struct {
	*mock.Call
}

func (_m ConfigurationInterface_UpdateConfiguration) Return(_a0 *admin.ConfigurationUpdateResponse, _a1 error) *ConfigurationInterface_UpdateConfiguration {
	return &ConfigurationInterface_UpdateConfiguration{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConfigurationInterface) OnUpdateConfiguration(ctx context.Context, request admin.ConfigurationUpdateRequest) *ConfigurationInterface_UpdateConfiguration {
	c_call := _m.On("UpdateConfiguration", ctx, request)
	return &ConfigurationInterface_UpdateConfiguration{Call: c_call}
}

func (_m *ConfigurationInterface) OnUpdateConfigurationMatch(matchers ...interface{}) *ConfigurationInterface_UpdateConfiguration {
	c_call := _m.On("UpdateConfiguration", matchers...)
	return &ConfigurationInterface_UpdateConfiguration{Call: c_call}
}

// UpdateConfiguration provides a mock function with given fields: ctx, request
func (_m *ConfigurationInterface) UpdateConfiguration(ctx context.Context, request admin.ConfigurationUpdateRequest) (*admin.ConfigurationUpdateResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *admin.ConfigurationUpdateResponse
	if rf, ok := ret.Get(0).(func(context.Context, admin.ConfigurationUpdateRequest) *admin.ConfigurationUpdateResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ConfigurationUpdateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, admin.ConfigurationUpdateRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
