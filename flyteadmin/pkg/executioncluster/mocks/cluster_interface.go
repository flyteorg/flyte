// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	executioncluster "github.com/flyteorg/flyte/flyteadmin/pkg/executioncluster"

	mock "github.com/stretchr/testify/mock"
)

// ClusterInterface is an autogenerated mock type for the ClusterInterface type
type ClusterInterface struct {
	mock.Mock
}

type ClusterInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ClusterInterface) EXPECT() *ClusterInterface_Expecter {
	return &ClusterInterface_Expecter{mock: &_m.Mock}
}

// GetAllTargets provides a mock function with no fields
func (_m *ClusterInterface) GetAllTargets() map[string]*executioncluster.ExecutionTarget {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTargets")
	}

	var r0 map[string]*executioncluster.ExecutionTarget
	if rf, ok := ret.Get(0).(func() map[string]*executioncluster.ExecutionTarget); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*executioncluster.ExecutionTarget)
		}
	}

	return r0
}

// ClusterInterface_GetAllTargets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTargets'
type ClusterInterface_GetAllTargets_Call struct {
	*mock.Call
}

// GetAllTargets is a helper method to define mock.On call
func (_e *ClusterInterface_Expecter) GetAllTargets() *ClusterInterface_GetAllTargets_Call {
	return &ClusterInterface_GetAllTargets_Call{Call: _e.mock.On("GetAllTargets")}
}

func (_c *ClusterInterface_GetAllTargets_Call) Run(run func()) *ClusterInterface_GetAllTargets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClusterInterface_GetAllTargets_Call) Return(_a0 map[string]*executioncluster.ExecutionTarget) *ClusterInterface_GetAllTargets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterInterface_GetAllTargets_Call) RunAndReturn(run func() map[string]*executioncluster.ExecutionTarget) *ClusterInterface_GetAllTargets_Call {
	_c.Call.Return(run)
	return _c
}

// GetTarget provides a mock function with given fields: _a0, _a1
func (_m *ClusterInterface) GetTarget(_a0 context.Context, _a1 *executioncluster.ExecutionTargetSpec) (*executioncluster.ExecutionTarget, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTarget")
	}

	var r0 *executioncluster.ExecutionTarget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *executioncluster.ExecutionTargetSpec) (*executioncluster.ExecutionTarget, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *executioncluster.ExecutionTargetSpec) *executioncluster.ExecutionTarget); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*executioncluster.ExecutionTarget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *executioncluster.ExecutionTargetSpec) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterInterface_GetTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTarget'
type ClusterInterface_GetTarget_Call struct {
	*mock.Call
}

// GetTarget is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *executioncluster.ExecutionTargetSpec
func (_e *ClusterInterface_Expecter) GetTarget(_a0 interface{}, _a1 interface{}) *ClusterInterface_GetTarget_Call {
	return &ClusterInterface_GetTarget_Call{Call: _e.mock.On("GetTarget", _a0, _a1)}
}

func (_c *ClusterInterface_GetTarget_Call) Run(run func(_a0 context.Context, _a1 *executioncluster.ExecutionTargetSpec)) *ClusterInterface_GetTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*executioncluster.ExecutionTargetSpec))
	})
	return _c
}

func (_c *ClusterInterface_GetTarget_Call) Return(_a0 *executioncluster.ExecutionTarget, _a1 error) *ClusterInterface_GetTarget_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClusterInterface_GetTarget_Call) RunAndReturn(run func(context.Context, *executioncluster.ExecutionTargetSpec) (*executioncluster.ExecutionTarget, error)) *ClusterInterface_GetTarget_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidTargets provides a mock function with no fields
func (_m *ClusterInterface) GetValidTargets() map[string]*executioncluster.ExecutionTarget {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidTargets")
	}

	var r0 map[string]*executioncluster.ExecutionTarget
	if rf, ok := ret.Get(0).(func() map[string]*executioncluster.ExecutionTarget); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*executioncluster.ExecutionTarget)
		}
	}

	return r0
}

// ClusterInterface_GetValidTargets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidTargets'
type ClusterInterface_GetValidTargets_Call struct {
	*mock.Call
}

// GetValidTargets is a helper method to define mock.On call
func (_e *ClusterInterface_Expecter) GetValidTargets() *ClusterInterface_GetValidTargets_Call {
	return &ClusterInterface_GetValidTargets_Call{Call: _e.mock.On("GetValidTargets")}
}

func (_c *ClusterInterface_GetValidTargets_Call) Run(run func()) *ClusterInterface_GetValidTargets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClusterInterface_GetValidTargets_Call) Return(_a0 map[string]*executioncluster.ExecutionTarget) *ClusterInterface_GetValidTargets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClusterInterface_GetValidTargets_Call) RunAndReturn(run func() map[string]*executioncluster.ExecutionTarget) *ClusterInterface_GetValidTargets_Call {
	_c.Call.Return(run)
	return _c
}

// NewClusterInterface creates a new instance of ClusterInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClusterInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClusterInterface {
	mock := &ClusterInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
