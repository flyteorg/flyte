// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	executioncluster "github.com/flyteorg/flyte/flyteadmin/pkg/executioncluster"

	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/runtime/interfaces"

	mock "github.com/stretchr/testify/mock"

	prometheus "github.com/prometheus/client_golang/prometheus"
)

// ExecutionTargetProvider is an autogenerated mock type for the ExecutionTargetProvider type
type ExecutionTargetProvider struct {
	mock.Mock
}

type ExecutionTargetProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecutionTargetProvider) EXPECT() *ExecutionTargetProvider_Expecter {
	return &ExecutionTargetProvider_Expecter{mock: &_m.Mock}
}

// GetExecutionTarget provides a mock function with given fields: initializationErrorCounter, k8sCluster
func (_m *ExecutionTargetProvider) GetExecutionTarget(initializationErrorCounter prometheus.Counter, k8sCluster interfaces.ClusterConfig) (*executioncluster.ExecutionTarget, error) {
	ret := _m.Called(initializationErrorCounter, k8sCluster)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutionTarget")
	}

	var r0 *executioncluster.ExecutionTarget
	var r1 error
	if rf, ok := ret.Get(0).(func(prometheus.Counter, interfaces.ClusterConfig) (*executioncluster.ExecutionTarget, error)); ok {
		return rf(initializationErrorCounter, k8sCluster)
	}
	if rf, ok := ret.Get(0).(func(prometheus.Counter, interfaces.ClusterConfig) *executioncluster.ExecutionTarget); ok {
		r0 = rf(initializationErrorCounter, k8sCluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*executioncluster.ExecutionTarget)
		}
	}

	if rf, ok := ret.Get(1).(func(prometheus.Counter, interfaces.ClusterConfig) error); ok {
		r1 = rf(initializationErrorCounter, k8sCluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecutionTargetProvider_GetExecutionTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutionTarget'
type ExecutionTargetProvider_GetExecutionTarget_Call struct {
	*mock.Call
}

// GetExecutionTarget is a helper method to define mock.On call
//   - initializationErrorCounter prometheus.Counter
//   - k8sCluster interfaces.ClusterConfig
func (_e *ExecutionTargetProvider_Expecter) GetExecutionTarget(initializationErrorCounter interface{}, k8sCluster interface{}) *ExecutionTargetProvider_GetExecutionTarget_Call {
	return &ExecutionTargetProvider_GetExecutionTarget_Call{Call: _e.mock.On("GetExecutionTarget", initializationErrorCounter, k8sCluster)}
}

func (_c *ExecutionTargetProvider_GetExecutionTarget_Call) Run(run func(initializationErrorCounter prometheus.Counter, k8sCluster interfaces.ClusterConfig)) *ExecutionTargetProvider_GetExecutionTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(prometheus.Counter), args[1].(interfaces.ClusterConfig))
	})
	return _c
}

func (_c *ExecutionTargetProvider_GetExecutionTarget_Call) Return(_a0 *executioncluster.ExecutionTarget, _a1 error) *ExecutionTargetProvider_GetExecutionTarget_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecutionTargetProvider_GetExecutionTarget_Call) RunAndReturn(run func(prometheus.Counter, interfaces.ClusterConfig) (*executioncluster.ExecutionTarget, error)) *ExecutionTargetProvider_GetExecutionTarget_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutionTargetProvider creates a new instance of ExecutionTargetProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutionTargetProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExecutionTargetProvider {
	mock := &ExecutionTargetProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
