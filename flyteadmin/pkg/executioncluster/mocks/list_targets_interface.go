// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	executioncluster "github.com/flyteorg/flyte/flyteadmin/pkg/executioncluster"

	mock "github.com/stretchr/testify/mock"
)

// ListTargetsInterface is an autogenerated mock type for the ListTargetsInterface type
type ListTargetsInterface struct {
	mock.Mock
}

type ListTargetsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ListTargetsInterface) EXPECT() *ListTargetsInterface_Expecter {
	return &ListTargetsInterface_Expecter{mock: &_m.Mock}
}

// GetAllTargets provides a mock function with no fields
func (_m *ListTargetsInterface) GetAllTargets() map[string]*executioncluster.ExecutionTarget {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTargets")
	}

	var r0 map[string]*executioncluster.ExecutionTarget
	if rf, ok := ret.Get(0).(func() map[string]*executioncluster.ExecutionTarget); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*executioncluster.ExecutionTarget)
		}
	}

	return r0
}

// ListTargetsInterface_GetAllTargets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTargets'
type ListTargetsInterface_GetAllTargets_Call struct {
	*mock.Call
}

// GetAllTargets is a helper method to define mock.On call
func (_e *ListTargetsInterface_Expecter) GetAllTargets() *ListTargetsInterface_GetAllTargets_Call {
	return &ListTargetsInterface_GetAllTargets_Call{Call: _e.mock.On("GetAllTargets")}
}

func (_c *ListTargetsInterface_GetAllTargets_Call) Run(run func()) *ListTargetsInterface_GetAllTargets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ListTargetsInterface_GetAllTargets_Call) Return(_a0 map[string]*executioncluster.ExecutionTarget) *ListTargetsInterface_GetAllTargets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListTargetsInterface_GetAllTargets_Call) RunAndReturn(run func() map[string]*executioncluster.ExecutionTarget) *ListTargetsInterface_GetAllTargets_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidTargets provides a mock function with no fields
func (_m *ListTargetsInterface) GetValidTargets() map[string]*executioncluster.ExecutionTarget {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidTargets")
	}

	var r0 map[string]*executioncluster.ExecutionTarget
	if rf, ok := ret.Get(0).(func() map[string]*executioncluster.ExecutionTarget); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*executioncluster.ExecutionTarget)
		}
	}

	return r0
}

// ListTargetsInterface_GetValidTargets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidTargets'
type ListTargetsInterface_GetValidTargets_Call struct {
	*mock.Call
}

// GetValidTargets is a helper method to define mock.On call
func (_e *ListTargetsInterface_Expecter) GetValidTargets() *ListTargetsInterface_GetValidTargets_Call {
	return &ListTargetsInterface_GetValidTargets_Call{Call: _e.mock.On("GetValidTargets")}
}

func (_c *ListTargetsInterface_GetValidTargets_Call) Run(run func()) *ListTargetsInterface_GetValidTargets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ListTargetsInterface_GetValidTargets_Call) Return(_a0 map[string]*executioncluster.ExecutionTarget) *ListTargetsInterface_GetValidTargets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListTargetsInterface_GetValidTargets_Call) RunAndReturn(run func() map[string]*executioncluster.ExecutionTarget) *ListTargetsInterface_GetValidTargets_Call {
	_c.Call.Return(run)
	return _c
}

// NewListTargetsInterface creates a new instance of ListTargetsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListTargetsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListTargetsInterface {
	mock := &ListTargetsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
