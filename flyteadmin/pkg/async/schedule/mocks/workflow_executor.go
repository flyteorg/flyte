// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// WorkflowExecutor is an autogenerated mock type for the WorkflowExecutor type
type WorkflowExecutor struct {
	mock.Mock
}

type WorkflowExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkflowExecutor) EXPECT() *WorkflowExecutor_Expecter {
	return &WorkflowExecutor_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields:
func (_m *WorkflowExecutor) Run() {
	_m.Called()
}

// WorkflowExecutor_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type WorkflowExecutor_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *WorkflowExecutor_Expecter) Run() *WorkflowExecutor_Run_Call {
	return &WorkflowExecutor_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *WorkflowExecutor_Run_Call) Run(run func()) *WorkflowExecutor_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowExecutor_Run_Call) Return() *WorkflowExecutor_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *WorkflowExecutor_Run_Call) RunAndReturn(run func()) *WorkflowExecutor_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *WorkflowExecutor) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WorkflowExecutor_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type WorkflowExecutor_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *WorkflowExecutor_Expecter) Stop() *WorkflowExecutor_Stop_Call {
	return &WorkflowExecutor_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *WorkflowExecutor_Stop_Call) Run(run func()) *WorkflowExecutor_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowExecutor_Stop_Call) Return(_a0 error) *WorkflowExecutor_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WorkflowExecutor_Stop_Call) RunAndReturn(run func() error) *WorkflowExecutor_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkflowExecutor creates a new instance of WorkflowExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflowExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkflowExecutor {
	mock := &WorkflowExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
