// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	interfaces "github.com/flyteorg/flyte/flyteadmin/pkg/async/schedule/interfaces"

	mock "github.com/stretchr/testify/mock"

	runtimeinterfaces "github.com/flyteorg/flyte/flyteadmin/pkg/runtime/interfaces"
)

// EventScheduler is an autogenerated mock type for the EventScheduler type
type EventScheduler struct {
	mock.Mock
}

type EventScheduler_Expecter struct {
	mock *mock.Mock
}

func (_m *EventScheduler) EXPECT() *EventScheduler_Expecter {
	return &EventScheduler_Expecter{mock: &_m.Mock}
}

// AddSchedule provides a mock function with given fields: ctx, input
func (_m *EventScheduler) AddSchedule(ctx context.Context, input interfaces.AddScheduleInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for AddSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.AddScheduleInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventScheduler_AddSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSchedule'
type EventScheduler_AddSchedule_Call struct {
	*mock.Call
}

// AddSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - input interfaces.AddScheduleInput
func (_e *EventScheduler_Expecter) AddSchedule(ctx interface{}, input interface{}) *EventScheduler_AddSchedule_Call {
	return &EventScheduler_AddSchedule_Call{Call: _e.mock.On("AddSchedule", ctx, input)}
}

func (_c *EventScheduler_AddSchedule_Call) Run(run func(ctx context.Context, input interfaces.AddScheduleInput)) *EventScheduler_AddSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.AddScheduleInput))
	})
	return _c
}

func (_c *EventScheduler_AddSchedule_Call) Return(_a0 error) *EventScheduler_AddSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventScheduler_AddSchedule_Call) RunAndReturn(run func(context.Context, interfaces.AddScheduleInput) error) *EventScheduler_AddSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScheduleInput provides a mock function with given fields: ctx, appConfig, identifier, schedule
func (_m *EventScheduler) CreateScheduleInput(ctx context.Context, appConfig *runtimeinterfaces.SchedulerConfig, identifier *core.Identifier, schedule *admin.Schedule) (interfaces.AddScheduleInput, error) {
	ret := _m.Called(ctx, appConfig, identifier, schedule)

	if len(ret) == 0 {
		panic("no return value specified for CreateScheduleInput")
	}

	var r0 interfaces.AddScheduleInput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runtimeinterfaces.SchedulerConfig, *core.Identifier, *admin.Schedule) (interfaces.AddScheduleInput, error)); ok {
		return rf(ctx, appConfig, identifier, schedule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runtimeinterfaces.SchedulerConfig, *core.Identifier, *admin.Schedule) interfaces.AddScheduleInput); ok {
		r0 = rf(ctx, appConfig, identifier, schedule)
	} else {
		r0 = ret.Get(0).(interfaces.AddScheduleInput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runtimeinterfaces.SchedulerConfig, *core.Identifier, *admin.Schedule) error); ok {
		r1 = rf(ctx, appConfig, identifier, schedule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventScheduler_CreateScheduleInput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScheduleInput'
type EventScheduler_CreateScheduleInput_Call struct {
	*mock.Call
}

// CreateScheduleInput is a helper method to define mock.On call
//   - ctx context.Context
//   - appConfig *runtimeinterfaces.SchedulerConfig
//   - identifier *core.Identifier
//   - schedule *admin.Schedule
func (_e *EventScheduler_Expecter) CreateScheduleInput(ctx interface{}, appConfig interface{}, identifier interface{}, schedule interface{}) *EventScheduler_CreateScheduleInput_Call {
	return &EventScheduler_CreateScheduleInput_Call{Call: _e.mock.On("CreateScheduleInput", ctx, appConfig, identifier, schedule)}
}

func (_c *EventScheduler_CreateScheduleInput_Call) Run(run func(ctx context.Context, appConfig *runtimeinterfaces.SchedulerConfig, identifier *core.Identifier, schedule *admin.Schedule)) *EventScheduler_CreateScheduleInput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runtimeinterfaces.SchedulerConfig), args[2].(*core.Identifier), args[3].(*admin.Schedule))
	})
	return _c
}

func (_c *EventScheduler_CreateScheduleInput_Call) Return(_a0 interfaces.AddScheduleInput, _a1 error) *EventScheduler_CreateScheduleInput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EventScheduler_CreateScheduleInput_Call) RunAndReturn(run func(context.Context, *runtimeinterfaces.SchedulerConfig, *core.Identifier, *admin.Schedule) (interfaces.AddScheduleInput, error)) *EventScheduler_CreateScheduleInput_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSchedule provides a mock function with given fields: ctx, input
func (_m *EventScheduler) RemoveSchedule(ctx context.Context, input interfaces.RemoveScheduleInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.RemoveScheduleInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventScheduler_RemoveSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSchedule'
type EventScheduler_RemoveSchedule_Call struct {
	*mock.Call
}

// RemoveSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - input interfaces.RemoveScheduleInput
func (_e *EventScheduler_Expecter) RemoveSchedule(ctx interface{}, input interface{}) *EventScheduler_RemoveSchedule_Call {
	return &EventScheduler_RemoveSchedule_Call{Call: _e.mock.On("RemoveSchedule", ctx, input)}
}

func (_c *EventScheduler_RemoveSchedule_Call) Run(run func(ctx context.Context, input interfaces.RemoveScheduleInput)) *EventScheduler_RemoveSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interfaces.RemoveScheduleInput))
	})
	return _c
}

func (_c *EventScheduler_RemoveSchedule_Call) Return(_a0 error) *EventScheduler_RemoveSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventScheduler_RemoveSchedule_Call) RunAndReturn(run func(context.Context, interfaces.RemoveScheduleInput) error) *EventScheduler_RemoveSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventScheduler creates a new instance of EventScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventScheduler(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventScheduler {
	mock := &EventScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
