// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// NodeExecutionEventWriter is an autogenerated mock type for the NodeExecutionEventWriter type
type NodeExecutionEventWriter struct {
	mock.Mock
}

type NodeExecutionEventWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeExecutionEventWriter) EXPECT() *NodeExecutionEventWriter_Expecter {
	return &NodeExecutionEventWriter_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields:
func (_m *NodeExecutionEventWriter) Run() {
	_m.Called()
}

// NodeExecutionEventWriter_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type NodeExecutionEventWriter_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *NodeExecutionEventWriter_Expecter) Run() *NodeExecutionEventWriter_Run_Call {
	return &NodeExecutionEventWriter_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *NodeExecutionEventWriter_Run_Call) Run(run func()) *NodeExecutionEventWriter_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NodeExecutionEventWriter_Run_Call) Return() *NodeExecutionEventWriter_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeExecutionEventWriter_Run_Call) RunAndReturn(run func()) *NodeExecutionEventWriter_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: nodeExecutionEvent
func (_m *NodeExecutionEventWriter) Write(nodeExecutionEvent *admin.NodeExecutionEventRequest) {
	_m.Called(nodeExecutionEvent)
}

// NodeExecutionEventWriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type NodeExecutionEventWriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - nodeExecutionEvent *admin.NodeExecutionEventRequest
func (_e *NodeExecutionEventWriter_Expecter) Write(nodeExecutionEvent interface{}) *NodeExecutionEventWriter_Write_Call {
	return &NodeExecutionEventWriter_Write_Call{Call: _e.mock.On("Write", nodeExecutionEvent)}
}

func (_c *NodeExecutionEventWriter_Write_Call) Run(run func(nodeExecutionEvent *admin.NodeExecutionEventRequest)) *NodeExecutionEventWriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*admin.NodeExecutionEventRequest))
	})
	return _c
}

func (_c *NodeExecutionEventWriter_Write_Call) Return() *NodeExecutionEventWriter_Write_Call {
	_c.Call.Return()
	return _c
}

func (_c *NodeExecutionEventWriter_Write_Call) RunAndReturn(run func(*admin.NodeExecutionEventRequest)) *NodeExecutionEventWriter_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeExecutionEventWriter creates a new instance of NodeExecutionEventWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeExecutionEventWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeExecutionEventWriter {
	mock := &NodeExecutionEventWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
