// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"
)

// WorkflowExecutionEventWriter is an autogenerated mock type for the WorkflowExecutionEventWriter type
type WorkflowExecutionEventWriter struct {
	mock.Mock
}

type WorkflowExecutionEventWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkflowExecutionEventWriter) EXPECT() *WorkflowExecutionEventWriter_Expecter {
	return &WorkflowExecutionEventWriter_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields:
func (_m *WorkflowExecutionEventWriter) Run() {
	_m.Called()
}

// WorkflowExecutionEventWriter_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type WorkflowExecutionEventWriter_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *WorkflowExecutionEventWriter_Expecter) Run() *WorkflowExecutionEventWriter_Run_Call {
	return &WorkflowExecutionEventWriter_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *WorkflowExecutionEventWriter_Run_Call) Run(run func()) *WorkflowExecutionEventWriter_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WorkflowExecutionEventWriter_Run_Call) Return() *WorkflowExecutionEventWriter_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *WorkflowExecutionEventWriter_Run_Call) RunAndReturn(run func()) *WorkflowExecutionEventWriter_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: workflowExecutionEvent
func (_m *WorkflowExecutionEventWriter) Write(workflowExecutionEvent *admin.WorkflowExecutionEventRequest) {
	_m.Called(workflowExecutionEvent)
}

// WorkflowExecutionEventWriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type WorkflowExecutionEventWriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - workflowExecutionEvent *admin.WorkflowExecutionEventRequest
func (_e *WorkflowExecutionEventWriter_Expecter) Write(workflowExecutionEvent interface{}) *WorkflowExecutionEventWriter_Write_Call {
	return &WorkflowExecutionEventWriter_Write_Call{Call: _e.mock.On("Write", workflowExecutionEvent)}
}

func (_c *WorkflowExecutionEventWriter_Write_Call) Run(run func(workflowExecutionEvent *admin.WorkflowExecutionEventRequest)) *WorkflowExecutionEventWriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*admin.WorkflowExecutionEventRequest))
	})
	return _c
}

func (_c *WorkflowExecutionEventWriter_Write_Call) Return() *WorkflowExecutionEventWriter_Write_Call {
	_c.Call.Return()
	return _c
}

func (_c *WorkflowExecutionEventWriter_Write_Call) RunAndReturn(run func(*admin.WorkflowExecutionEventRequest)) *WorkflowExecutionEventWriter_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkflowExecutionEventWriter creates a new instance of WorkflowExecutionEventWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflowExecutionEventWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkflowExecutionEventWriter {
	mock := &WorkflowExecutionEventWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
