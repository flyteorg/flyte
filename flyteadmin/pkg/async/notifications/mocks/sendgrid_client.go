// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	mail "github.com/sendgrid/sendgrid-go/helpers/mail"
	mock "github.com/stretchr/testify/mock"

	rest "github.com/sendgrid/rest"
)

// SendgridClient is an autogenerated mock type for the SendgridClient type
type SendgridClient struct {
	mock.Mock
}

type SendgridClient_Send struct {
	*mock.Call
}

func (_m SendgridClient_Send) Return(_a0 *rest.Response, _a1 error) *SendgridClient_Send {
	return &SendgridClient_Send{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *SendgridClient) OnSend(email *mail.SGMailV3) *SendgridClient_Send {
	c_call := _m.On("Send", email)
	return &SendgridClient_Send{Call: c_call}
}

func (_m *SendgridClient) OnSendMatch(matchers ...interface{}) *SendgridClient_Send {
	c_call := _m.On("Send", matchers...)
	return &SendgridClient_Send{Call: c_call}
}

// Send provides a mock function with given fields: email
func (_m *SendgridClient) Send(email *mail.SGMailV3) (*rest.Response, error) {
	ret := _m.Called(email)

	var r0 *rest.Response
	if rf, ok := ret.Get(0).(func(*mail.SGMailV3) *rest.Response); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mail.SGMailV3) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
