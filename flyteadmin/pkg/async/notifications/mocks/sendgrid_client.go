// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mail "github.com/sendgrid/sendgrid-go/helpers/mail"
	mock "github.com/stretchr/testify/mock"

	rest "github.com/sendgrid/rest"
)

// SendgridClient is an autogenerated mock type for the SendgridClient type
type SendgridClient struct {
	mock.Mock
}

type SendgridClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SendgridClient) EXPECT() *SendgridClient_Expecter {
	return &SendgridClient_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: email
func (_m *SendgridClient) Send(email *mail.SGMailV3) (*rest.Response, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *rest.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*mail.SGMailV3) (*rest.Response, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(*mail.SGMailV3) *rest.Response); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*mail.SGMailV3) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendgridClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type SendgridClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - email *mail.SGMailV3
func (_e *SendgridClient_Expecter) Send(email interface{}) *SendgridClient_Send_Call {
	return &SendgridClient_Send_Call{Call: _e.mock.On("Send", email)}
}

func (_c *SendgridClient_Send_Call) Run(run func(email *mail.SGMailV3)) *SendgridClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mail.SGMailV3))
	})
	return _c
}

func (_c *SendgridClient_Send_Call) Return(_a0 *rest.Response, _a1 error) *SendgridClient_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SendgridClient_Send_Call) RunAndReturn(run func(*mail.SGMailV3) (*rest.Response, error)) *SendgridClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewSendgridClient creates a new instance of SendgridClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSendgridClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SendgridClient {
	mock := &SendgridClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
