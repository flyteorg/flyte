// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"

	sets "k8s.io/apimachinery/pkg/util/sets"

	time "time"
)

// IdentityContext is an autogenerated mock type for the IdentityContext type
type IdentityContext struct {
	mock.Mock
}

type IdentityContext_Expecter struct {
	mock *mock.Mock
}

func (_m *IdentityContext) EXPECT() *IdentityContext_Expecter {
	return &IdentityContext_Expecter{mock: &_m.Mock}
}

// AppID provides a mock function with no fields
func (_m *IdentityContext) AppID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AppID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IdentityContext_AppID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppID'
type IdentityContext_AppID_Call struct {
	*mock.Call
}

// AppID is a helper method to define mock.On call
func (_e *IdentityContext_Expecter) AppID() *IdentityContext_AppID_Call {
	return &IdentityContext_AppID_Call{Call: _e.mock.On("AppID")}
}

func (_c *IdentityContext_AppID_Call) Run(run func()) *IdentityContext_AppID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IdentityContext_AppID_Call) Return(_a0 string) *IdentityContext_AppID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityContext_AppID_Call) RunAndReturn(run func() string) *IdentityContext_AppID_Call {
	_c.Call.Return(run)
	return _c
}

// Audience provides a mock function with no fields
func (_m *IdentityContext) Audience() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Audience")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IdentityContext_Audience_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Audience'
type IdentityContext_Audience_Call struct {
	*mock.Call
}

// Audience is a helper method to define mock.On call
func (_e *IdentityContext_Expecter) Audience() *IdentityContext_Audience_Call {
	return &IdentityContext_Audience_Call{Call: _e.mock.On("Audience")}
}

func (_c *IdentityContext_Audience_Call) Run(run func()) *IdentityContext_Audience_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IdentityContext_Audience_Call) Return(_a0 string) *IdentityContext_Audience_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityContext_Audience_Call) RunAndReturn(run func() string) *IdentityContext_Audience_Call {
	_c.Call.Return(run)
	return _c
}

// AuthenticatedAt provides a mock function with no fields
func (_m *IdentityContext) AuthenticatedAt() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthenticatedAt")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// IdentityContext_AuthenticatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticatedAt'
type IdentityContext_AuthenticatedAt_Call struct {
	*mock.Call
}

// AuthenticatedAt is a helper method to define mock.On call
func (_e *IdentityContext_Expecter) AuthenticatedAt() *IdentityContext_AuthenticatedAt_Call {
	return &IdentityContext_AuthenticatedAt_Call{Call: _e.mock.On("AuthenticatedAt")}
}

func (_c *IdentityContext_AuthenticatedAt_Call) Run(run func()) *IdentityContext_AuthenticatedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IdentityContext_AuthenticatedAt_Call) Return(_a0 time.Time) *IdentityContext_AuthenticatedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityContext_AuthenticatedAt_Call) RunAndReturn(run func() time.Time) *IdentityContext_AuthenticatedAt_Call {
	_c.Call.Return(run)
	return _c
}

// Claims provides a mock function with no fields
func (_m *IdentityContext) Claims() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Claims")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// IdentityContext_Claims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Claims'
type IdentityContext_Claims_Call struct {
	*mock.Call
}

// Claims is a helper method to define mock.On call
func (_e *IdentityContext_Expecter) Claims() *IdentityContext_Claims_Call {
	return &IdentityContext_Claims_Call{Call: _e.mock.On("Claims")}
}

func (_c *IdentityContext_Claims_Call) Run(run func()) *IdentityContext_Claims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IdentityContext_Claims_Call) Return(_a0 map[string]interface{}) *IdentityContext_Claims_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityContext_Claims_Call) RunAndReturn(run func() map[string]interface{}) *IdentityContext_Claims_Call {
	_c.Call.Return(run)
	return _c
}

// IsEmpty provides a mock function with no fields
func (_m *IdentityContext) IsEmpty() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IdentityContext_IsEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmpty'
type IdentityContext_IsEmpty_Call struct {
	*mock.Call
}

// IsEmpty is a helper method to define mock.On call
func (_e *IdentityContext_Expecter) IsEmpty() *IdentityContext_IsEmpty_Call {
	return &IdentityContext_IsEmpty_Call{Call: _e.mock.On("IsEmpty")}
}

func (_c *IdentityContext_IsEmpty_Call) Run(run func()) *IdentityContext_IsEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IdentityContext_IsEmpty_Call) Return(_a0 bool) *IdentityContext_IsEmpty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityContext_IsEmpty_Call) RunAndReturn(run func() bool) *IdentityContext_IsEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// Scopes provides a mock function with no fields
func (_m *IdentityContext) Scopes() sets.String {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scopes")
	}

	var r0 sets.String
	if rf, ok := ret.Get(0).(func() sets.String); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sets.String)
		}
	}

	return r0
}

// IdentityContext_Scopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scopes'
type IdentityContext_Scopes_Call struct {
	*mock.Call
}

// Scopes is a helper method to define mock.On call
func (_e *IdentityContext_Expecter) Scopes() *IdentityContext_Scopes_Call {
	return &IdentityContext_Scopes_Call{Call: _e.mock.On("Scopes")}
}

func (_c *IdentityContext_Scopes_Call) Run(run func()) *IdentityContext_Scopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IdentityContext_Scopes_Call) Return(_a0 sets.String) *IdentityContext_Scopes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityContext_Scopes_Call) RunAndReturn(run func() sets.String) *IdentityContext_Scopes_Call {
	_c.Call.Return(run)
	return _c
}

// UserID provides a mock function with no fields
func (_m *IdentityContext) UserID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IdentityContext_UserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserID'
type IdentityContext_UserID_Call struct {
	*mock.Call
}

// UserID is a helper method to define mock.On call
func (_e *IdentityContext_Expecter) UserID() *IdentityContext_UserID_Call {
	return &IdentityContext_UserID_Call{Call: _e.mock.On("UserID")}
}

func (_c *IdentityContext_UserID_Call) Run(run func()) *IdentityContext_UserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IdentityContext_UserID_Call) Return(_a0 string) *IdentityContext_UserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityContext_UserID_Call) RunAndReturn(run func() string) *IdentityContext_UserID_Call {
	_c.Call.Return(run)
	return _c
}

// UserInfo provides a mock function with no fields
func (_m *IdentityContext) UserInfo() *service.UserInfoResponse {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserInfo")
	}

	var r0 *service.UserInfoResponse
	if rf, ok := ret.Get(0).(func() *service.UserInfoResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.UserInfoResponse)
		}
	}

	return r0
}

// IdentityContext_UserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserInfo'
type IdentityContext_UserInfo_Call struct {
	*mock.Call
}

// UserInfo is a helper method to define mock.On call
func (_e *IdentityContext_Expecter) UserInfo() *IdentityContext_UserInfo_Call {
	return &IdentityContext_UserInfo_Call{Call: _e.mock.On("UserInfo")}
}

func (_c *IdentityContext_UserInfo_Call) Run(run func()) *IdentityContext_UserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IdentityContext_UserInfo_Call) Return(_a0 *service.UserInfoResponse) *IdentityContext_UserInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityContext_UserInfo_Call) RunAndReturn(run func() *service.UserInfoResponse) *IdentityContext_UserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *IdentityContext) WithContext(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// IdentityContext_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type IdentityContext_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IdentityContext_Expecter) WithContext(ctx interface{}) *IdentityContext_WithContext_Call {
	return &IdentityContext_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *IdentityContext_WithContext_Call) Run(run func(ctx context.Context)) *IdentityContext_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IdentityContext_WithContext_Call) Return(_a0 context.Context) *IdentityContext_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IdentityContext_WithContext_Call) RunAndReturn(run func(context.Context) context.Context) *IdentityContext_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewIdentityContext creates a new instance of IdentityContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIdentityContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *IdentityContext {
	mock := &IdentityContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
