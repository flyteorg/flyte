// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
)

// CookieHandler is an autogenerated mock type for the CookieHandler type
type CookieHandler struct {
	mock.Mock
}

type CookieHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *CookieHandler) EXPECT() *CookieHandler_Expecter {
	return &CookieHandler_Expecter{mock: &_m.Mock}
}

// DeleteCookies provides a mock function with given fields: ctx, writer
func (_m *CookieHandler) DeleteCookies(ctx context.Context, writer http.ResponseWriter) {
	_m.Called(ctx, writer)
}

// CookieHandler_DeleteCookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCookies'
type CookieHandler_DeleteCookies_Call struct {
	*mock.Call
}

// DeleteCookies is a helper method to define mock.On call
//   - ctx context.Context
//   - writer http.ResponseWriter
func (_e *CookieHandler_Expecter) DeleteCookies(ctx interface{}, writer interface{}) *CookieHandler_DeleteCookies_Call {
	return &CookieHandler_DeleteCookies_Call{Call: _e.mock.On("DeleteCookies", ctx, writer)}
}

func (_c *CookieHandler_DeleteCookies_Call) Run(run func(ctx context.Context, writer http.ResponseWriter)) *CookieHandler_DeleteCookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(http.ResponseWriter))
	})
	return _c
}

func (_c *CookieHandler_DeleteCookies_Call) Return() *CookieHandler_DeleteCookies_Call {
	_c.Call.Return()
	return _c
}

func (_c *CookieHandler_DeleteCookies_Call) RunAndReturn(run func(context.Context, http.ResponseWriter)) *CookieHandler_DeleteCookies_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAuthCodeRequest provides a mock function with given fields: ctx, request
func (_m *CookieHandler) RetrieveAuthCodeRequest(ctx context.Context, request *http.Request) (string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAuthCodeRequest")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) (string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) string); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CookieHandler_RetrieveAuthCodeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAuthCodeRequest'
type CookieHandler_RetrieveAuthCodeRequest_Call struct {
	*mock.Call
}

// RetrieveAuthCodeRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - request *http.Request
func (_e *CookieHandler_Expecter) RetrieveAuthCodeRequest(ctx interface{}, request interface{}) *CookieHandler_RetrieveAuthCodeRequest_Call {
	return &CookieHandler_RetrieveAuthCodeRequest_Call{Call: _e.mock.On("RetrieveAuthCodeRequest", ctx, request)}
}

func (_c *CookieHandler_RetrieveAuthCodeRequest_Call) Run(run func(ctx context.Context, request *http.Request)) *CookieHandler_RetrieveAuthCodeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*http.Request))
	})
	return _c
}

func (_c *CookieHandler_RetrieveAuthCodeRequest_Call) Return(authRequestURL string, err error) *CookieHandler_RetrieveAuthCodeRequest_Call {
	_c.Call.Return(authRequestURL, err)
	return _c
}

func (_c *CookieHandler_RetrieveAuthCodeRequest_Call) RunAndReturn(run func(context.Context, *http.Request) (string, error)) *CookieHandler_RetrieveAuthCodeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveTokenValues provides a mock function with given fields: ctx, request
func (_m *CookieHandler) RetrieveTokenValues(ctx context.Context, request *http.Request) (string, string, string, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveTokenValues")
	}

	var r0 string
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) (string, string, string, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) string); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) string); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *http.Request) string); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, *http.Request) error); ok {
		r3 = rf(ctx, request)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// CookieHandler_RetrieveTokenValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveTokenValues'
type CookieHandler_RetrieveTokenValues_Call struct {
	*mock.Call
}

// RetrieveTokenValues is a helper method to define mock.On call
//   - ctx context.Context
//   - request *http.Request
func (_e *CookieHandler_Expecter) RetrieveTokenValues(ctx interface{}, request interface{}) *CookieHandler_RetrieveTokenValues_Call {
	return &CookieHandler_RetrieveTokenValues_Call{Call: _e.mock.On("RetrieveTokenValues", ctx, request)}
}

func (_c *CookieHandler_RetrieveTokenValues_Call) Run(run func(ctx context.Context, request *http.Request)) *CookieHandler_RetrieveTokenValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*http.Request))
	})
	return _c
}

func (_c *CookieHandler_RetrieveTokenValues_Call) Return(idToken string, accessToken string, refreshToken string, err error) *CookieHandler_RetrieveTokenValues_Call {
	_c.Call.Return(idToken, accessToken, refreshToken, err)
	return _c
}

func (_c *CookieHandler_RetrieveTokenValues_Call) RunAndReturn(run func(context.Context, *http.Request) (string, string, string, error)) *CookieHandler_RetrieveTokenValues_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveUserInfo provides a mock function with given fields: ctx, request
func (_m *CookieHandler) RetrieveUserInfo(ctx context.Context, request *http.Request) (*service.UserInfoResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveUserInfo")
	}

	var r0 *service.UserInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) (*service.UserInfoResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) *service.UserInfoResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.UserInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CookieHandler_RetrieveUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveUserInfo'
type CookieHandler_RetrieveUserInfo_Call struct {
	*mock.Call
}

// RetrieveUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - request *http.Request
func (_e *CookieHandler_Expecter) RetrieveUserInfo(ctx interface{}, request interface{}) *CookieHandler_RetrieveUserInfo_Call {
	return &CookieHandler_RetrieveUserInfo_Call{Call: _e.mock.On("RetrieveUserInfo", ctx, request)}
}

func (_c *CookieHandler_RetrieveUserInfo_Call) Run(run func(ctx context.Context, request *http.Request)) *CookieHandler_RetrieveUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*http.Request))
	})
	return _c
}

func (_c *CookieHandler_RetrieveUserInfo_Call) Return(_a0 *service.UserInfoResponse, _a1 error) *CookieHandler_RetrieveUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CookieHandler_RetrieveUserInfo_Call) RunAndReturn(run func(context.Context, *http.Request) (*service.UserInfoResponse, error)) *CookieHandler_RetrieveUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetAuthCodeCookie provides a mock function with given fields: ctx, writer, authRequestURL
func (_m *CookieHandler) SetAuthCodeCookie(ctx context.Context, writer http.ResponseWriter, authRequestURL string) error {
	ret := _m.Called(ctx, writer, authRequestURL)

	if len(ret) == 0 {
		panic("no return value specified for SetAuthCodeCookie")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter, string) error); ok {
		r0 = rf(ctx, writer, authRequestURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CookieHandler_SetAuthCodeCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAuthCodeCookie'
type CookieHandler_SetAuthCodeCookie_Call struct {
	*mock.Call
}

// SetAuthCodeCookie is a helper method to define mock.On call
//   - ctx context.Context
//   - writer http.ResponseWriter
//   - authRequestURL string
func (_e *CookieHandler_Expecter) SetAuthCodeCookie(ctx interface{}, writer interface{}, authRequestURL interface{}) *CookieHandler_SetAuthCodeCookie_Call {
	return &CookieHandler_SetAuthCodeCookie_Call{Call: _e.mock.On("SetAuthCodeCookie", ctx, writer, authRequestURL)}
}

func (_c *CookieHandler_SetAuthCodeCookie_Call) Run(run func(ctx context.Context, writer http.ResponseWriter, authRequestURL string)) *CookieHandler_SetAuthCodeCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(http.ResponseWriter), args[2].(string))
	})
	return _c
}

func (_c *CookieHandler_SetAuthCodeCookie_Call) Return(_a0 error) *CookieHandler_SetAuthCodeCookie_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CookieHandler_SetAuthCodeCookie_Call) RunAndReturn(run func(context.Context, http.ResponseWriter, string) error) *CookieHandler_SetAuthCodeCookie_Call {
	_c.Call.Return(run)
	return _c
}

// SetTokenCookies provides a mock function with given fields: ctx, writer, token
func (_m *CookieHandler) SetTokenCookies(ctx context.Context, writer http.ResponseWriter, token *oauth2.Token) error {
	ret := _m.Called(ctx, writer, token)

	if len(ret) == 0 {
		panic("no return value specified for SetTokenCookies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter, *oauth2.Token) error); ok {
		r0 = rf(ctx, writer, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CookieHandler_SetTokenCookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTokenCookies'
type CookieHandler_SetTokenCookies_Call struct {
	*mock.Call
}

// SetTokenCookies is a helper method to define mock.On call
//   - ctx context.Context
//   - writer http.ResponseWriter
//   - token *oauth2.Token
func (_e *CookieHandler_Expecter) SetTokenCookies(ctx interface{}, writer interface{}, token interface{}) *CookieHandler_SetTokenCookies_Call {
	return &CookieHandler_SetTokenCookies_Call{Call: _e.mock.On("SetTokenCookies", ctx, writer, token)}
}

func (_c *CookieHandler_SetTokenCookies_Call) Run(run func(ctx context.Context, writer http.ResponseWriter, token *oauth2.Token)) *CookieHandler_SetTokenCookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(http.ResponseWriter), args[2].(*oauth2.Token))
	})
	return _c
}

func (_c *CookieHandler_SetTokenCookies_Call) Return(_a0 error) *CookieHandler_SetTokenCookies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CookieHandler_SetTokenCookies_Call) RunAndReturn(run func(context.Context, http.ResponseWriter, *oauth2.Token) error) *CookieHandler_SetTokenCookies_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserInfoCookie provides a mock function with given fields: ctx, writer, userInfo
func (_m *CookieHandler) SetUserInfoCookie(ctx context.Context, writer http.ResponseWriter, userInfo *service.UserInfoResponse) error {
	ret := _m.Called(ctx, writer, userInfo)

	if len(ret) == 0 {
		panic("no return value specified for SetUserInfoCookie")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter, *service.UserInfoResponse) error); ok {
		r0 = rf(ctx, writer, userInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CookieHandler_SetUserInfoCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserInfoCookie'
type CookieHandler_SetUserInfoCookie_Call struct {
	*mock.Call
}

// SetUserInfoCookie is a helper method to define mock.On call
//   - ctx context.Context
//   - writer http.ResponseWriter
//   - userInfo *service.UserInfoResponse
func (_e *CookieHandler_Expecter) SetUserInfoCookie(ctx interface{}, writer interface{}, userInfo interface{}) *CookieHandler_SetUserInfoCookie_Call {
	return &CookieHandler_SetUserInfoCookie_Call{Call: _e.mock.On("SetUserInfoCookie", ctx, writer, userInfo)}
}

func (_c *CookieHandler_SetUserInfoCookie_Call) Run(run func(ctx context.Context, writer http.ResponseWriter, userInfo *service.UserInfoResponse)) *CookieHandler_SetUserInfoCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(http.ResponseWriter), args[2].(*service.UserInfoResponse))
	})
	return _c
}

func (_c *CookieHandler_SetUserInfoCookie_Call) Return(_a0 error) *CookieHandler_SetUserInfoCookie_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CookieHandler_SetUserInfoCookie_Call) RunAndReturn(run func(context.Context, http.ResponseWriter, *service.UserInfoResponse) error) *CookieHandler_SetUserInfoCookie_Call {
	_c.Call.Return(run)
	return _c
}

// NewCookieHandler creates a new instance of CookieHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCookieHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *CookieHandler {
	mock := &CookieHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
