// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HandlerRegisterer is an autogenerated mock type for the HandlerRegisterer type
type HandlerRegisterer struct {
	mock.Mock
}

type HandlerRegisterer_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerRegisterer) EXPECT() *HandlerRegisterer_Expecter {
	return &HandlerRegisterer_Expecter{mock: &_m.Mock}
}

// HandleFunc provides a mock function with given fields: pattern, handler
func (_m *HandlerRegisterer) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) {
	_m.Called(pattern, handler)
}

// HandlerRegisterer_HandleFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleFunc'
type HandlerRegisterer_HandleFunc_Call struct {
	*mock.Call
}

// HandleFunc is a helper method to define mock.On call
//   - pattern string
//   - handler func(http.ResponseWriter , *http.Request)
func (_e *HandlerRegisterer_Expecter) HandleFunc(pattern interface{}, handler interface{}) *HandlerRegisterer_HandleFunc_Call {
	return &HandlerRegisterer_HandleFunc_Call{Call: _e.mock.On("HandleFunc", pattern, handler)}
}

func (_c *HandlerRegisterer_HandleFunc_Call) Run(run func(pattern string, handler func(http.ResponseWriter, *http.Request))) *HandlerRegisterer_HandleFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(http.ResponseWriter, *http.Request)))
	})
	return _c
}

func (_c *HandlerRegisterer_HandleFunc_Call) Return() *HandlerRegisterer_HandleFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *HandlerRegisterer_HandleFunc_Call) RunAndReturn(run func(string, func(http.ResponseWriter, *http.Request))) *HandlerRegisterer_HandleFunc_Call {
	_c.Run(run)
	return _c
}

// NewHandlerRegisterer creates a new instance of HandlerRegisterer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerRegisterer(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerRegisterer {
	mock := &HandlerRegisterer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
