// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/flyteorg/flyte/flyteadmin/auth/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// OAuth2ResourceServer is an autogenerated mock type for the OAuth2ResourceServer type
type OAuth2ResourceServer struct {
	mock.Mock
}

type OAuth2ResourceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *OAuth2ResourceServer) EXPECT() *OAuth2ResourceServer_Expecter {
	return &OAuth2ResourceServer_Expecter{mock: &_m.Mock}
}

// ValidateAccessToken provides a mock function with given fields: ctx, expectedAudience, tokenStr
func (_m *OAuth2ResourceServer) ValidateAccessToken(ctx context.Context, expectedAudience string, tokenStr string) (interfaces.IdentityContext, error) {
	ret := _m.Called(ctx, expectedAudience, tokenStr)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccessToken")
	}

	var r0 interfaces.IdentityContext
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (interfaces.IdentityContext, error)); ok {
		return rf(ctx, expectedAudience, tokenStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) interfaces.IdentityContext); ok {
		r0 = rf(ctx, expectedAudience, tokenStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.IdentityContext)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, expectedAudience, tokenStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OAuth2ResourceServer_ValidateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccessToken'
type OAuth2ResourceServer_ValidateAccessToken_Call struct {
	*mock.Call
}

// ValidateAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - expectedAudience string
//   - tokenStr string
func (_e *OAuth2ResourceServer_Expecter) ValidateAccessToken(ctx interface{}, expectedAudience interface{}, tokenStr interface{}) *OAuth2ResourceServer_ValidateAccessToken_Call {
	return &OAuth2ResourceServer_ValidateAccessToken_Call{Call: _e.mock.On("ValidateAccessToken", ctx, expectedAudience, tokenStr)}
}

func (_c *OAuth2ResourceServer_ValidateAccessToken_Call) Run(run func(ctx context.Context, expectedAudience string, tokenStr string)) *OAuth2ResourceServer_ValidateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OAuth2ResourceServer_ValidateAccessToken_Call) Return(_a0 interfaces.IdentityContext, _a1 error) *OAuth2ResourceServer_ValidateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OAuth2ResourceServer_ValidateAccessToken_Call) RunAndReturn(run func(context.Context, string, string) (interfaces.IdentityContext, error)) *OAuth2ResourceServer_ValidateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewOAuth2ResourceServer creates a new instance of OAuth2ResourceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOAuth2ResourceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *OAuth2ResourceServer {
	mock := &OAuth2ResourceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
