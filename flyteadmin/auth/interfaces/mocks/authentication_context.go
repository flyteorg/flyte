// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	config "github.com/flyteorg/flyte/flyteadmin/auth/config"

	interfaces "github.com/flyteorg/flyte/flyteadmin/auth/interfaces"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"

	oidc "github.com/coreos/go-oidc/v3/oidc"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"

	url "net/url"
)

// AuthenticationContext is an autogenerated mock type for the AuthenticationContext type
type AuthenticationContext struct {
	mock.Mock
}

type AuthenticationContext_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthenticationContext) EXPECT() *AuthenticationContext_Expecter {
	return &AuthenticationContext_Expecter{mock: &_m.Mock}
}

// AuthMetadataService provides a mock function with given fields:
func (_m *AuthenticationContext) AuthMetadataService() service.AuthMetadataServiceServer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthMetadataService")
	}

	var r0 service.AuthMetadataServiceServer
	if rf, ok := ret.Get(0).(func() service.AuthMetadataServiceServer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.AuthMetadataServiceServer)
		}
	}

	return r0
}

// AuthenticationContext_AuthMetadataService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthMetadataService'
type AuthenticationContext_AuthMetadataService_Call struct {
	*mock.Call
}

// AuthMetadataService is a helper method to define mock.On call
func (_e *AuthenticationContext_Expecter) AuthMetadataService() *AuthenticationContext_AuthMetadataService_Call {
	return &AuthenticationContext_AuthMetadataService_Call{Call: _e.mock.On("AuthMetadataService")}
}

func (_c *AuthenticationContext_AuthMetadataService_Call) Run(run func()) *AuthenticationContext_AuthMetadataService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationContext_AuthMetadataService_Call) Return(_a0 service.AuthMetadataServiceServer) *AuthenticationContext_AuthMetadataService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationContext_AuthMetadataService_Call) RunAndReturn(run func() service.AuthMetadataServiceServer) *AuthenticationContext_AuthMetadataService_Call {
	_c.Call.Return(run)
	return _c
}

// CookieManager provides a mock function with given fields:
func (_m *AuthenticationContext) CookieManager() interfaces.CookieHandler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CookieManager")
	}

	var r0 interfaces.CookieHandler
	if rf, ok := ret.Get(0).(func() interfaces.CookieHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.CookieHandler)
		}
	}

	return r0
}

// AuthenticationContext_CookieManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CookieManager'
type AuthenticationContext_CookieManager_Call struct {
	*mock.Call
}

// CookieManager is a helper method to define mock.On call
func (_e *AuthenticationContext_Expecter) CookieManager() *AuthenticationContext_CookieManager_Call {
	return &AuthenticationContext_CookieManager_Call{Call: _e.mock.On("CookieManager")}
}

func (_c *AuthenticationContext_CookieManager_Call) Run(run func()) *AuthenticationContext_CookieManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationContext_CookieManager_Call) Return(_a0 interfaces.CookieHandler) *AuthenticationContext_CookieManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationContext_CookieManager_Call) RunAndReturn(run func() interfaces.CookieHandler) *AuthenticationContext_CookieManager_Call {
	_c.Call.Return(run)
	return _c
}

// GetHTTPClient provides a mock function with given fields:
func (_m *AuthenticationContext) GetHTTPClient() *http.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHTTPClient")
	}

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// AuthenticationContext_GetHTTPClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHTTPClient'
type AuthenticationContext_GetHTTPClient_Call struct {
	*mock.Call
}

// GetHTTPClient is a helper method to define mock.On call
func (_e *AuthenticationContext_Expecter) GetHTTPClient() *AuthenticationContext_GetHTTPClient_Call {
	return &AuthenticationContext_GetHTTPClient_Call{Call: _e.mock.On("GetHTTPClient")}
}

func (_c *AuthenticationContext_GetHTTPClient_Call) Run(run func()) *AuthenticationContext_GetHTTPClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationContext_GetHTTPClient_Call) Return(_a0 *http.Client) *AuthenticationContext_GetHTTPClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationContext_GetHTTPClient_Call) RunAndReturn(run func() *http.Client) *AuthenticationContext_GetHTTPClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetOAuth2MetadataURL provides a mock function with given fields:
func (_m *AuthenticationContext) GetOAuth2MetadataURL() *url.URL {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOAuth2MetadataURL")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// AuthenticationContext_GetOAuth2MetadataURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOAuth2MetadataURL'
type AuthenticationContext_GetOAuth2MetadataURL_Call struct {
	*mock.Call
}

// GetOAuth2MetadataURL is a helper method to define mock.On call
func (_e *AuthenticationContext_Expecter) GetOAuth2MetadataURL() *AuthenticationContext_GetOAuth2MetadataURL_Call {
	return &AuthenticationContext_GetOAuth2MetadataURL_Call{Call: _e.mock.On("GetOAuth2MetadataURL")}
}

func (_c *AuthenticationContext_GetOAuth2MetadataURL_Call) Run(run func()) *AuthenticationContext_GetOAuth2MetadataURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationContext_GetOAuth2MetadataURL_Call) Return(_a0 *url.URL) *AuthenticationContext_GetOAuth2MetadataURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationContext_GetOAuth2MetadataURL_Call) RunAndReturn(run func() *url.URL) *AuthenticationContext_GetOAuth2MetadataURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetOIdCMetadataURL provides a mock function with given fields:
func (_m *AuthenticationContext) GetOIdCMetadataURL() *url.URL {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOIdCMetadataURL")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// AuthenticationContext_GetOIdCMetadataURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOIdCMetadataURL'
type AuthenticationContext_GetOIdCMetadataURL_Call struct {
	*mock.Call
}

// GetOIdCMetadataURL is a helper method to define mock.On call
func (_e *AuthenticationContext_Expecter) GetOIdCMetadataURL() *AuthenticationContext_GetOIdCMetadataURL_Call {
	return &AuthenticationContext_GetOIdCMetadataURL_Call{Call: _e.mock.On("GetOIdCMetadataURL")}
}

func (_c *AuthenticationContext_GetOIdCMetadataURL_Call) Run(run func()) *AuthenticationContext_GetOIdCMetadataURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationContext_GetOIdCMetadataURL_Call) Return(_a0 *url.URL) *AuthenticationContext_GetOIdCMetadataURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationContext_GetOIdCMetadataURL_Call) RunAndReturn(run func() *url.URL) *AuthenticationContext_GetOIdCMetadataURL_Call {
	_c.Call.Return(run)
	return _c
}

// IdentityService provides a mock function with given fields:
func (_m *AuthenticationContext) IdentityService() service.IdentityServiceServer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IdentityService")
	}

	var r0 service.IdentityServiceServer
	if rf, ok := ret.Get(0).(func() service.IdentityServiceServer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.IdentityServiceServer)
		}
	}

	return r0
}

// AuthenticationContext_IdentityService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentityService'
type AuthenticationContext_IdentityService_Call struct {
	*mock.Call
}

// IdentityService is a helper method to define mock.On call
func (_e *AuthenticationContext_Expecter) IdentityService() *AuthenticationContext_IdentityService_Call {
	return &AuthenticationContext_IdentityService_Call{Call: _e.mock.On("IdentityService")}
}

func (_c *AuthenticationContext_IdentityService_Call) Run(run func()) *AuthenticationContext_IdentityService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationContext_IdentityService_Call) Return(_a0 service.IdentityServiceServer) *AuthenticationContext_IdentityService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationContext_IdentityService_Call) RunAndReturn(run func() service.IdentityServiceServer) *AuthenticationContext_IdentityService_Call {
	_c.Call.Return(run)
	return _c
}

// OAuth2ClientConfig provides a mock function with given fields: requestURL
func (_m *AuthenticationContext) OAuth2ClientConfig(requestURL *url.URL) *oauth2.Config {
	ret := _m.Called(requestURL)

	if len(ret) == 0 {
		panic("no return value specified for OAuth2ClientConfig")
	}

	var r0 *oauth2.Config
	if rf, ok := ret.Get(0).(func(*url.URL) *oauth2.Config); ok {
		r0 = rf(requestURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Config)
		}
	}

	return r0
}

// AuthenticationContext_OAuth2ClientConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OAuth2ClientConfig'
type AuthenticationContext_OAuth2ClientConfig_Call struct {
	*mock.Call
}

// OAuth2ClientConfig is a helper method to define mock.On call
//   - requestURL *url.URL
func (_e *AuthenticationContext_Expecter) OAuth2ClientConfig(requestURL interface{}) *AuthenticationContext_OAuth2ClientConfig_Call {
	return &AuthenticationContext_OAuth2ClientConfig_Call{Call: _e.mock.On("OAuth2ClientConfig", requestURL)}
}

func (_c *AuthenticationContext_OAuth2ClientConfig_Call) Run(run func(requestURL *url.URL)) *AuthenticationContext_OAuth2ClientConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*url.URL))
	})
	return _c
}

func (_c *AuthenticationContext_OAuth2ClientConfig_Call) Return(_a0 *oauth2.Config) *AuthenticationContext_OAuth2ClientConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationContext_OAuth2ClientConfig_Call) RunAndReturn(run func(*url.URL) *oauth2.Config) *AuthenticationContext_OAuth2ClientConfig_Call {
	_c.Call.Return(run)
	return _c
}

// OAuth2Provider provides a mock function with given fields:
func (_m *AuthenticationContext) OAuth2Provider() interfaces.OAuth2Provider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OAuth2Provider")
	}

	var r0 interfaces.OAuth2Provider
	if rf, ok := ret.Get(0).(func() interfaces.OAuth2Provider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.OAuth2Provider)
		}
	}

	return r0
}

// AuthenticationContext_OAuth2Provider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OAuth2Provider'
type AuthenticationContext_OAuth2Provider_Call struct {
	*mock.Call
}

// OAuth2Provider is a helper method to define mock.On call
func (_e *AuthenticationContext_Expecter) OAuth2Provider() *AuthenticationContext_OAuth2Provider_Call {
	return &AuthenticationContext_OAuth2Provider_Call{Call: _e.mock.On("OAuth2Provider")}
}

func (_c *AuthenticationContext_OAuth2Provider_Call) Run(run func()) *AuthenticationContext_OAuth2Provider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationContext_OAuth2Provider_Call) Return(_a0 interfaces.OAuth2Provider) *AuthenticationContext_OAuth2Provider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationContext_OAuth2Provider_Call) RunAndReturn(run func() interfaces.OAuth2Provider) *AuthenticationContext_OAuth2Provider_Call {
	_c.Call.Return(run)
	return _c
}

// OAuth2ResourceServer provides a mock function with given fields:
func (_m *AuthenticationContext) OAuth2ResourceServer() interfaces.OAuth2ResourceServer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OAuth2ResourceServer")
	}

	var r0 interfaces.OAuth2ResourceServer
	if rf, ok := ret.Get(0).(func() interfaces.OAuth2ResourceServer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.OAuth2ResourceServer)
		}
	}

	return r0
}

// AuthenticationContext_OAuth2ResourceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OAuth2ResourceServer'
type AuthenticationContext_OAuth2ResourceServer_Call struct {
	*mock.Call
}

// OAuth2ResourceServer is a helper method to define mock.On call
func (_e *AuthenticationContext_Expecter) OAuth2ResourceServer() *AuthenticationContext_OAuth2ResourceServer_Call {
	return &AuthenticationContext_OAuth2ResourceServer_Call{Call: _e.mock.On("OAuth2ResourceServer")}
}

func (_c *AuthenticationContext_OAuth2ResourceServer_Call) Run(run func()) *AuthenticationContext_OAuth2ResourceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationContext_OAuth2ResourceServer_Call) Return(_a0 interfaces.OAuth2ResourceServer) *AuthenticationContext_OAuth2ResourceServer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationContext_OAuth2ResourceServer_Call) RunAndReturn(run func() interfaces.OAuth2ResourceServer) *AuthenticationContext_OAuth2ResourceServer_Call {
	_c.Call.Return(run)
	return _c
}

// OidcProvider provides a mock function with given fields:
func (_m *AuthenticationContext) OidcProvider() *oidc.Provider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OidcProvider")
	}

	var r0 *oidc.Provider
	if rf, ok := ret.Get(0).(func() *oidc.Provider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.Provider)
		}
	}

	return r0
}

// AuthenticationContext_OidcProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OidcProvider'
type AuthenticationContext_OidcProvider_Call struct {
	*mock.Call
}

// OidcProvider is a helper method to define mock.On call
func (_e *AuthenticationContext_Expecter) OidcProvider() *AuthenticationContext_OidcProvider_Call {
	return &AuthenticationContext_OidcProvider_Call{Call: _e.mock.On("OidcProvider")}
}

func (_c *AuthenticationContext_OidcProvider_Call) Run(run func()) *AuthenticationContext_OidcProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationContext_OidcProvider_Call) Return(_a0 *oidc.Provider) *AuthenticationContext_OidcProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationContext_OidcProvider_Call) RunAndReturn(run func() *oidc.Provider) *AuthenticationContext_OidcProvider_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function with given fields:
func (_m *AuthenticationContext) Options() *config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	return r0
}

// AuthenticationContext_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type AuthenticationContext_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
func (_e *AuthenticationContext_Expecter) Options() *AuthenticationContext_Options_Call {
	return &AuthenticationContext_Options_Call{Call: _e.mock.On("Options")}
}

func (_c *AuthenticationContext_Options_Call) Run(run func()) *AuthenticationContext_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationContext_Options_Call) Return(_a0 *config.Config) *AuthenticationContext_Options_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationContext_Options_Call) RunAndReturn(run func() *config.Config) *AuthenticationContext_Options_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthenticationContext creates a new instance of AuthenticationContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticationContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthenticationContext {
	mock := &AuthenticationContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
