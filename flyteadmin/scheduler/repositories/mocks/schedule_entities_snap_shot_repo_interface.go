// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/flyteadmin/scheduler/repositories/models"
)

// ScheduleEntitiesSnapShotRepoInterface is an autogenerated mock type for the ScheduleEntitiesSnapShotRepoInterface type
type ScheduleEntitiesSnapShotRepoInterface struct {
	mock.Mock
}

type ScheduleEntitiesSnapShotRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ScheduleEntitiesSnapShotRepoInterface) EXPECT() *ScheduleEntitiesSnapShotRepoInterface_Expecter {
	return &ScheduleEntitiesSnapShotRepoInterface_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: ctx
func (_m *ScheduleEntitiesSnapShotRepoInterface) Read(ctx context.Context) (models.ScheduleEntitiesSnapshot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 models.ScheduleEntitiesSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.ScheduleEntitiesSnapshot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.ScheduleEntitiesSnapshot); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.ScheduleEntitiesSnapshot)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScheduleEntitiesSnapShotRepoInterface_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ScheduleEntitiesSnapShotRepoInterface_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ScheduleEntitiesSnapShotRepoInterface_Expecter) Read(ctx interface{}) *ScheduleEntitiesSnapShotRepoInterface_Read_Call {
	return &ScheduleEntitiesSnapShotRepoInterface_Read_Call{Call: _e.mock.On("Read", ctx)}
}

func (_c *ScheduleEntitiesSnapShotRepoInterface_Read_Call) Run(run func(ctx context.Context)) *ScheduleEntitiesSnapShotRepoInterface_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ScheduleEntitiesSnapShotRepoInterface_Read_Call) Return(_a0 models.ScheduleEntitiesSnapshot, _a1 error) *ScheduleEntitiesSnapShotRepoInterface_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ScheduleEntitiesSnapShotRepoInterface_Read_Call) RunAndReturn(run func(context.Context) (models.ScheduleEntitiesSnapshot, error)) *ScheduleEntitiesSnapShotRepoInterface_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx, input
func (_m *ScheduleEntitiesSnapShotRepoInterface) Write(ctx context.Context, input models.ScheduleEntitiesSnapshot) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ScheduleEntitiesSnapshot) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleEntitiesSnapShotRepoInterface_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type ScheduleEntitiesSnapShotRepoInterface_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - input models.ScheduleEntitiesSnapshot
func (_e *ScheduleEntitiesSnapShotRepoInterface_Expecter) Write(ctx interface{}, input interface{}) *ScheduleEntitiesSnapShotRepoInterface_Write_Call {
	return &ScheduleEntitiesSnapShotRepoInterface_Write_Call{Call: _e.mock.On("Write", ctx, input)}
}

func (_c *ScheduleEntitiesSnapShotRepoInterface_Write_Call) Run(run func(ctx context.Context, input models.ScheduleEntitiesSnapshot)) *ScheduleEntitiesSnapShotRepoInterface_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ScheduleEntitiesSnapshot))
	})
	return _c
}

func (_c *ScheduleEntitiesSnapShotRepoInterface_Write_Call) Return(_a0 error) *ScheduleEntitiesSnapShotRepoInterface_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScheduleEntitiesSnapShotRepoInterface_Write_Call) RunAndReturn(run func(context.Context, models.ScheduleEntitiesSnapshot) error) *ScheduleEntitiesSnapShotRepoInterface_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewScheduleEntitiesSnapShotRepoInterface creates a new instance of ScheduleEntitiesSnapShotRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduleEntitiesSnapShotRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduleEntitiesSnapShotRepoInterface {
	mock := &ScheduleEntitiesSnapShotRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
