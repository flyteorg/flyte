// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/flyteadmin/scheduler/repositories/models"
)

// SchedulableEntityRepoInterface is an autogenerated mock type for the SchedulableEntityRepoInterface type
type SchedulableEntityRepoInterface struct {
	mock.Mock
}

type SchedulableEntityRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *SchedulableEntityRepoInterface) EXPECT() *SchedulableEntityRepoInterface_Expecter {
	return &SchedulableEntityRepoInterface_Expecter{mock: &_m.Mock}
}

// Activate provides a mock function with given fields: ctx, input
func (_m *SchedulableEntityRepoInterface) Activate(ctx context.Context, input models.SchedulableEntity) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Activate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SchedulableEntity) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SchedulableEntityRepoInterface_Activate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activate'
type SchedulableEntityRepoInterface_Activate_Call struct {
	*mock.Call
}

// Activate is a helper method to define mock.On call
//   - ctx context.Context
//   - input models.SchedulableEntity
func (_e *SchedulableEntityRepoInterface_Expecter) Activate(ctx interface{}, input interface{}) *SchedulableEntityRepoInterface_Activate_Call {
	return &SchedulableEntityRepoInterface_Activate_Call{Call: _e.mock.On("Activate", ctx, input)}
}

func (_c *SchedulableEntityRepoInterface_Activate_Call) Run(run func(ctx context.Context, input models.SchedulableEntity)) *SchedulableEntityRepoInterface_Activate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SchedulableEntity))
	})
	return _c
}

func (_c *SchedulableEntityRepoInterface_Activate_Call) Return(_a0 error) *SchedulableEntityRepoInterface_Activate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchedulableEntityRepoInterface_Activate_Call) RunAndReturn(run func(context.Context, models.SchedulableEntity) error) *SchedulableEntityRepoInterface_Activate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, input
func (_m *SchedulableEntityRepoInterface) Create(ctx context.Context, input models.SchedulableEntity) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SchedulableEntity) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SchedulableEntityRepoInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SchedulableEntityRepoInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input models.SchedulableEntity
func (_e *SchedulableEntityRepoInterface_Expecter) Create(ctx interface{}, input interface{}) *SchedulableEntityRepoInterface_Create_Call {
	return &SchedulableEntityRepoInterface_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *SchedulableEntityRepoInterface_Create_Call) Run(run func(ctx context.Context, input models.SchedulableEntity)) *SchedulableEntityRepoInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SchedulableEntity))
	})
	return _c
}

func (_c *SchedulableEntityRepoInterface_Create_Call) Return(_a0 error) *SchedulableEntityRepoInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchedulableEntityRepoInterface_Create_Call) RunAndReturn(run func(context.Context, models.SchedulableEntity) error) *SchedulableEntityRepoInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Deactivate provides a mock function with given fields: ctx, ID
func (_m *SchedulableEntityRepoInterface) Deactivate(ctx context.Context, ID models.SchedulableEntityKey) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Deactivate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SchedulableEntityKey) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SchedulableEntityRepoInterface_Deactivate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deactivate'
type SchedulableEntityRepoInterface_Deactivate_Call struct {
	*mock.Call
}

// Deactivate is a helper method to define mock.On call
//   - ctx context.Context
//   - ID models.SchedulableEntityKey
func (_e *SchedulableEntityRepoInterface_Expecter) Deactivate(ctx interface{}, ID interface{}) *SchedulableEntityRepoInterface_Deactivate_Call {
	return &SchedulableEntityRepoInterface_Deactivate_Call{Call: _e.mock.On("Deactivate", ctx, ID)}
}

func (_c *SchedulableEntityRepoInterface_Deactivate_Call) Run(run func(ctx context.Context, ID models.SchedulableEntityKey)) *SchedulableEntityRepoInterface_Deactivate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SchedulableEntityKey))
	})
	return _c
}

func (_c *SchedulableEntityRepoInterface_Deactivate_Call) Return(_a0 error) *SchedulableEntityRepoInterface_Deactivate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchedulableEntityRepoInterface_Deactivate_Call) RunAndReturn(run func(context.Context, models.SchedulableEntityKey) error) *SchedulableEntityRepoInterface_Deactivate_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, ID
func (_m *SchedulableEntityRepoInterface) Get(ctx context.Context, ID models.SchedulableEntityKey) (models.SchedulableEntity, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.SchedulableEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SchedulableEntityKey) (models.SchedulableEntity, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SchedulableEntityKey) models.SchedulableEntity); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(models.SchedulableEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SchedulableEntityKey) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchedulableEntityRepoInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SchedulableEntityRepoInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - ID models.SchedulableEntityKey
func (_e *SchedulableEntityRepoInterface_Expecter) Get(ctx interface{}, ID interface{}) *SchedulableEntityRepoInterface_Get_Call {
	return &SchedulableEntityRepoInterface_Get_Call{Call: _e.mock.On("Get", ctx, ID)}
}

func (_c *SchedulableEntityRepoInterface_Get_Call) Run(run func(ctx context.Context, ID models.SchedulableEntityKey)) *SchedulableEntityRepoInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SchedulableEntityKey))
	})
	return _c
}

func (_c *SchedulableEntityRepoInterface_Get_Call) Return(_a0 models.SchedulableEntity, _a1 error) *SchedulableEntityRepoInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SchedulableEntityRepoInterface_Get_Call) RunAndReturn(run func(context.Context, models.SchedulableEntityKey) (models.SchedulableEntity, error)) *SchedulableEntityRepoInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *SchedulableEntityRepoInterface) GetAll(ctx context.Context) ([]models.SchedulableEntity, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.SchedulableEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.SchedulableEntity, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.SchedulableEntity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SchedulableEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchedulableEntityRepoInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type SchedulableEntityRepoInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SchedulableEntityRepoInterface_Expecter) GetAll(ctx interface{}) *SchedulableEntityRepoInterface_GetAll_Call {
	return &SchedulableEntityRepoInterface_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *SchedulableEntityRepoInterface_GetAll_Call) Run(run func(ctx context.Context)) *SchedulableEntityRepoInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SchedulableEntityRepoInterface_GetAll_Call) Return(_a0 []models.SchedulableEntity, _a1 error) *SchedulableEntityRepoInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SchedulableEntityRepoInterface_GetAll_Call) RunAndReturn(run func(context.Context) ([]models.SchedulableEntity, error)) *SchedulableEntityRepoInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewSchedulableEntityRepoInterface creates a new instance of SchedulableEntityRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchedulableEntityRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SchedulableEntityRepoInterface {
	mock := &SchedulableEntityRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
