name: Components Checks

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

on:
  pull_request:
  push:
    branches:
      - master
env:
  GO_VERSION: "1.22"
  PRIORITIES: "P0"
jobs:
  unpack-envvars:
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.step.outputs.go-version }}
    steps:
      - id: step
        run: |
          echo "go-version=${{ env.GO_VERSION }}" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    needs:
      - unpack-envvars
    strategy:
      fail-fast: false
      matrix:
        component:
          - datacatalog
          - flyteadmin
          # TODO(monorepo): Enable lint flytecopilot
          # - flytecopilot
          - flytectl
          - flyteidl
          - flyteplugins
          - flytepropeller
          - flytestdlib
    uses: ./.github/workflows/lint.yml
    with:
      component: ${{ matrix.component }}
      go-version: ${{ needs.unpack-envvars.outputs.go-version }}
  unit-tests:
    name: Unit Tests
    needs:
      - unpack-envvars
    strategy:
      fail-fast: false
      matrix:
        component:
          - datacatalog
          - flyteadmin
          - flytecopilot
          - flytectl
          - flyteplugins
          - flytepropeller
          - flytestdlib
    uses: ./.github/workflows/unit-tests.yml
    with:
      component: ${{ matrix.component }}
      go-version: ${{ needs.unpack-envvars.outputs.go-version }}
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  flyteadmin-int-tests-image-build:
    strategy:
      fail-fast: false
    name: flyteadmin integration tests image 
    uses: ./.github/workflows/component_docker_build.yml
    with:
      component: flyteadmin

  flyteadmin-integration-tests:
    name: Integration Test
    needs:
      - flyteadmin-int-tests-image-build
      - unpack-envvars
    strategy:
      fail-fast: false
      matrix:
        component:
          - flyteadmin
    uses: ./.github/workflows/integration.yml
    with:
      component: ${{ matrix.component }}
      cache_key: ${{ needs.flyteadmin-int-tests-image-build.outputs.cache_key }}
      go-version: ${{ needs.unpack-envvars.outputs.go-version }}

  generate:
    name: Check Go Generate
    needs:
      - unpack-envvars
    strategy:
      fail-fast: false
      matrix:
        component:
          - datacatalog
          - flyteadmin
          - flytecopilot
          - flytectl
          - flytepropeller
    uses: ./.github/workflows/go_generate.yml
    with:
      component: ${{ matrix.component }}
      go-version: ${{ needs.unpack-envvars.outputs.go-version }}
    secrets:
      FLYTE_BOT_PAT: ${{ secrets.FLYTE_BOT_PAT }}

  build_docker_images:
    name: Build Images
    uses: ./.github/workflows/publish-images.yml
    with:
      push: false
    secrets:
      FLYTE_BOT_PAT: ${{ secrets.FLYTE_BOT_PAT }}
      FLYTE_BOT_USERNAME: ${{ secrets.FLYTE_BOT_USERNAME }}

  dry_run_goreleaser:
    name: Dry Run Goreleaser
    runs-on: ubuntu-latest
    needs:
      - unpack-envvars
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ needs.unpack-envvars.outputs.go-version }}
      - name: Run GoReleaser dry run
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser-pro
          version: latest
          args: --snapshot  --skip-publish --rm-dist -f flytectl/.goreleaser.yml
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

  sandbox:
    name: Test Getting started
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flytectl
    needs:
      - unpack-envvars
    steps:
      - uses: insightsengineering/disk-space-reclaimer@v1
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ needs.unpack-envvars.outputs.go-version }}
      - name: Build Flytectl binary
        run: make compile
      - name: Create a sandbox cluster
        run: |
          bin/flytectl demo start
      - name: Setup flytectl config
        run: bin/flytectl config init
      - name: Register cookbook
        run: bin/flytectl register examples -d development  -p flytesnacks
      - name: Teardown Sandbox cluster
        run: bin/flytectl demo teardown
