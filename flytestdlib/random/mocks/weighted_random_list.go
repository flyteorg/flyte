// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	rand "math/rand"

	mock "github.com/stretchr/testify/mock"

	random "github.com/flyteorg/flyte/flytestdlib/random"
)

// WeightedRandomList is an autogenerated mock type for the WeightedRandomList type
type WeightedRandomList struct {
	mock.Mock
}

type WeightedRandomList_Expecter struct {
	mock *mock.Mock
}

func (_m *WeightedRandomList) EXPECT() *WeightedRandomList_Expecter {
	return &WeightedRandomList_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields:
func (_m *WeightedRandomList) Get() random.Comparable {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 random.Comparable
	if rf, ok := ret.Get(0).(func() random.Comparable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(random.Comparable)
		}
	}

	return r0
}

// WeightedRandomList_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type WeightedRandomList_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *WeightedRandomList_Expecter) Get() *WeightedRandomList_Get_Call {
	return &WeightedRandomList_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *WeightedRandomList_Get_Call) Run(run func()) *WeightedRandomList_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WeightedRandomList_Get_Call) Return(_a0 random.Comparable) *WeightedRandomList_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WeightedRandomList_Get_Call) RunAndReturn(run func() random.Comparable) *WeightedRandomList_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithSeed provides a mock function with given fields: seed
func (_m *WeightedRandomList) GetWithSeed(seed rand.Source) (random.Comparable, error) {
	ret := _m.Called(seed)

	if len(ret) == 0 {
		panic("no return value specified for GetWithSeed")
	}

	var r0 random.Comparable
	var r1 error
	if rf, ok := ret.Get(0).(func(rand.Source) (random.Comparable, error)); ok {
		return rf(seed)
	}
	if rf, ok := ret.Get(0).(func(rand.Source) random.Comparable); ok {
		r0 = rf(seed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(random.Comparable)
		}
	}

	if rf, ok := ret.Get(1).(func(rand.Source) error); ok {
		r1 = rf(seed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WeightedRandomList_GetWithSeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithSeed'
type WeightedRandomList_GetWithSeed_Call struct {
	*mock.Call
}

// GetWithSeed is a helper method to define mock.On call
//   - seed rand.Source
func (_e *WeightedRandomList_Expecter) GetWithSeed(seed interface{}) *WeightedRandomList_GetWithSeed_Call {
	return &WeightedRandomList_GetWithSeed_Call{Call: _e.mock.On("GetWithSeed", seed)}
}

func (_c *WeightedRandomList_GetWithSeed_Call) Run(run func(seed rand.Source)) *WeightedRandomList_GetWithSeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(rand.Source))
	})
	return _c
}

func (_c *WeightedRandomList_GetWithSeed_Call) Return(_a0 random.Comparable, _a1 error) *WeightedRandomList_GetWithSeed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WeightedRandomList_GetWithSeed_Call) RunAndReturn(run func(rand.Source) (random.Comparable, error)) *WeightedRandomList_GetWithSeed_Call {
	_c.Call.Return(run)
	return _c
}

// Len provides a mock function with given fields:
func (_m *WeightedRandomList) Len() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// WeightedRandomList_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type WeightedRandomList_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *WeightedRandomList_Expecter) Len() *WeightedRandomList_Len_Call {
	return &WeightedRandomList_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *WeightedRandomList_Len_Call) Run(run func()) *WeightedRandomList_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WeightedRandomList_Len_Call) Return(_a0 int) *WeightedRandomList_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WeightedRandomList_Len_Call) RunAndReturn(run func() int) *WeightedRandomList_Len_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields:
func (_m *WeightedRandomList) List() []random.Comparable {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []random.Comparable
	if rf, ok := ret.Get(0).(func() []random.Comparable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]random.Comparable)
		}
	}

	return r0
}

// WeightedRandomList_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type WeightedRandomList_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *WeightedRandomList_Expecter) List() *WeightedRandomList_List_Call {
	return &WeightedRandomList_List_Call{Call: _e.mock.On("List")}
}

func (_c *WeightedRandomList_List_Call) Run(run func()) *WeightedRandomList_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *WeightedRandomList_List_Call) Return(_a0 []random.Comparable) *WeightedRandomList_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WeightedRandomList_List_Call) RunAndReturn(run func() []random.Comparable) *WeightedRandomList_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewWeightedRandomList creates a new instance of WeightedRandomList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeightedRandomList(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeightedRandomList {
	mock := &WeightedRandomList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
