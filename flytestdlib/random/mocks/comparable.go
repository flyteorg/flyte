// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	random "github.com/flyteorg/flyte/flytestdlib/random"
	mock "github.com/stretchr/testify/mock"
)

// Comparable is an autogenerated mock type for the Comparable type
type Comparable struct {
	mock.Mock
}

type Comparable_Compare struct {
	*mock.Call
}

func (_m Comparable_Compare) Return(_a0 bool) *Comparable_Compare {
	return &Comparable_Compare{Call: _m.Call.Return(_a0)}
}

func (_m *Comparable) OnCompare(to random.Comparable) *Comparable_Compare {
	c_call := _m.On("Compare", to)
	return &Comparable_Compare{Call: c_call}
}

func (_m *Comparable) OnCompareMatch(matchers ...interface{}) *Comparable_Compare {
	c_call := _m.On("Compare", matchers...)
	return &Comparable_Compare{Call: c_call}
}

// Compare provides a mock function with given fields: to
func (_m *Comparable) Compare(to random.Comparable) bool {
	ret := _m.Called(to)

	var r0 bool
	if rf, ok := ret.Get(0).(func(random.Comparable) bool); ok {
		r0 = rf(to)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
