// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	random "github.com/flyteorg/flyte/flytestdlib/random"
	mock "github.com/stretchr/testify/mock"
)

// Comparable is an autogenerated mock type for the Comparable type
type Comparable struct {
	mock.Mock
}

type Comparable_Expecter struct {
	mock *mock.Mock
}

func (_m *Comparable) EXPECT() *Comparable_Expecter {
	return &Comparable_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function with given fields: to
func (_m *Comparable) Compare(to random.Comparable) bool {
	ret := _m.Called(to)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(random.Comparable) bool); ok {
		r0 = rf(to)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Comparable_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type Comparable_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - to random.Comparable
func (_e *Comparable_Expecter) Compare(to interface{}) *Comparable_Compare_Call {
	return &Comparable_Compare_Call{Call: _e.mock.On("Compare", to)}
}

func (_c *Comparable_Compare_Call) Run(run func(to random.Comparable)) *Comparable_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(random.Comparable))
	})
	return _c
}

func (_c *Comparable_Compare_Call) Return(_a0 bool) *Comparable_Compare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Comparable_Compare_Call) RunAndReturn(run func(random.Comparable) bool) *Comparable_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// NewComparable creates a new instance of Comparable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComparable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Comparable {
	mock := &Comparable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
