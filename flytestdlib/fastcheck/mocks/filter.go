// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Filter is an autogenerated mock type for the Filter type
type Filter struct {
	mock.Mock
}

type Filter_Add struct {
	*mock.Call
}

func (_m Filter_Add) Return(evicted bool) *Filter_Add {
	return &Filter_Add{Call: _m.Call.Return(evicted)}
}

func (_m *Filter) OnAdd(ctx context.Context, id []byte) *Filter_Add {
	c_call := _m.On("Add", ctx, id)
	return &Filter_Add{Call: c_call}
}

func (_m *Filter) OnAddMatch(matchers ...interface{}) *Filter_Add {
	c_call := _m.On("Add", matchers...)
	return &Filter_Add{Call: c_call}
}

// Add provides a mock function with given fields: ctx, id
func (_m *Filter) Add(ctx context.Context, id []byte) bool {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, []byte) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type Filter_Contains struct {
	*mock.Call
}

func (_m Filter_Contains) Return(_a0 bool) *Filter_Contains {
	return &Filter_Contains{Call: _m.Call.Return(_a0)}
}

func (_m *Filter) OnContains(ctx context.Context, id []byte) *Filter_Contains {
	c_call := _m.On("Contains", ctx, id)
	return &Filter_Contains{Call: c_call}
}

func (_m *Filter) OnContainsMatch(matchers ...interface{}) *Filter_Contains {
	c_call := _m.On("Contains", matchers...)
	return &Filter_Contains{Call: c_call}
}

// Contains provides a mock function with given fields: ctx, id
func (_m *Filter) Contains(ctx context.Context, id []byte) bool {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, []byte) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
