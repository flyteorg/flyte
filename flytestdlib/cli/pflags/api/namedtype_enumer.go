// Code generated by "enumer --type=NamedType --trimprefix=NamedType -json"; DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

const _NamedTypeName = "AB"

var _NamedTypeIndex = [...]uint8{0, 1, 2}

func (i NamedType) String() string {
	if i < 0 || i >= NamedType(len(_NamedTypeIndex)-1) {
		return fmt.Sprintf("NamedType(%d)", i)
	}
	return _NamedTypeName[_NamedTypeIndex[i]:_NamedTypeIndex[i+1]]
}

var _NamedTypeValues = []NamedType{0, 1}

var _NamedTypeNameToValueMap = map[string]NamedType{
	_NamedTypeName[0:1]: 0,
	_NamedTypeName[1:2]: 1,
}

// NamedTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func NamedTypeString(s string) (NamedType, error) {
	if val, ok := _NamedTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to NamedType values", s)
}

// NamedTypeValues returns all values of the enum
func NamedTypeValues() []NamedType {
	return _NamedTypeValues
}

// IsANamedType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i NamedType) IsANamedType() bool {
	for _, v := range _NamedTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for NamedType
func (i NamedType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for NamedType
func (i *NamedType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NamedType should be a string, got %s", data)
	}

	var err error
	*i, err = NamedTypeString(s)
	return err
}
