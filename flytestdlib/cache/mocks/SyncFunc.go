// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cache "github.com/flyteorg/flyte/flytestdlib/cache"

	mock "github.com/stretchr/testify/mock"
)

// SyncFunc is an autogenerated mock type for the SyncFunc type
type SyncFunc struct {
	mock.Mock
}

type SyncFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *SyncFunc) EXPECT() *SyncFunc_Expecter {
	return &SyncFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, batch
func (_m *SyncFunc) Execute(ctx context.Context, batch []cache.ItemWrapper) ([]cache.ItemSyncResponse, error) {
	ret := _m.Called(ctx, batch)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []cache.ItemSyncResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []cache.ItemWrapper) ([]cache.ItemSyncResponse, error)); ok {
		return rf(ctx, batch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []cache.ItemWrapper) []cache.ItemSyncResponse); ok {
		r0 = rf(ctx, batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cache.ItemSyncResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []cache.ItemWrapper) error); ok {
		r1 = rf(ctx, batch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type SyncFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - batch []cache.ItemWrapper
func (_e *SyncFunc_Expecter) Execute(ctx interface{}, batch interface{}) *SyncFunc_Execute_Call {
	return &SyncFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, batch)}
}

func (_c *SyncFunc_Execute_Call) Run(run func(ctx context.Context, batch []cache.ItemWrapper)) *SyncFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]cache.ItemWrapper))
	})
	return _c
}

func (_c *SyncFunc_Execute_Call) Return(updatedBatch []cache.ItemSyncResponse, err error) *SyncFunc_Execute_Call {
	_c.Call.Return(updatedBatch, err)
	return _c
}

func (_c *SyncFunc_Execute_Call) RunAndReturn(run func(context.Context, []cache.ItemWrapper) ([]cache.ItemSyncResponse, error)) *SyncFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewSyncFunc creates a new instance of SyncFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *SyncFunc {
	mock := &SyncFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
