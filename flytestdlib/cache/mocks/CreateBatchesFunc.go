// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	cache "github.com/flyteorg/flyte/flytestdlib/cache"

	mock "github.com/stretchr/testify/mock"
)

// CreateBatchesFunc is an autogenerated mock type for the CreateBatchesFunc type
type CreateBatchesFunc struct {
	mock.Mock
}

type CreateBatchesFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *CreateBatchesFunc) EXPECT() *CreateBatchesFunc_Expecter {
	return &CreateBatchesFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, snapshot
func (_m *CreateBatchesFunc) Execute(ctx context.Context, snapshot []cache.ItemWrapper) ([][]cache.ItemWrapper, error) {
	ret := _m.Called(ctx, snapshot)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 [][]cache.ItemWrapper
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []cache.ItemWrapper) ([][]cache.ItemWrapper, error)); ok {
		return rf(ctx, snapshot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []cache.ItemWrapper) [][]cache.ItemWrapper); ok {
		r0 = rf(ctx, snapshot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]cache.ItemWrapper)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []cache.ItemWrapper) error); ok {
		r1 = rf(ctx, snapshot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBatchesFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CreateBatchesFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - snapshot []cache.ItemWrapper
func (_e *CreateBatchesFunc_Expecter) Execute(ctx interface{}, snapshot interface{}) *CreateBatchesFunc_Execute_Call {
	return &CreateBatchesFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, snapshot)}
}

func (_c *CreateBatchesFunc_Execute_Call) Run(run func(ctx context.Context, snapshot []cache.ItemWrapper)) *CreateBatchesFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]cache.ItemWrapper))
	})
	return _c
}

func (_c *CreateBatchesFunc_Execute_Call) Return(batches [][]cache.ItemWrapper, err error) *CreateBatchesFunc_Execute_Call {
	_c.Call.Return(batches, err)
	return _c
}

func (_c *CreateBatchesFunc_Execute_Call) RunAndReturn(run func(context.Context, []cache.ItemWrapper) ([][]cache.ItemWrapper, error)) *CreateBatchesFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreateBatchesFunc creates a new instance of CreateBatchesFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreateBatchesFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreateBatchesFunc {
	mock := &CreateBatchesFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
