// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cache "github.com/flyteorg/flyte/flytestdlib/cache"

	mock "github.com/stretchr/testify/mock"
)

// AutoRefresh is an autogenerated mock type for the AutoRefresh type
type AutoRefresh struct {
	mock.Mock
}

type AutoRefresh_Expecter struct {
	mock *mock.Mock
}

func (_m *AutoRefresh) EXPECT() *AutoRefresh_Expecter {
	return &AutoRefresh_Expecter{mock: &_m.Mock}
}

// DeleteDelayed provides a mock function with given fields: id
func (_m *AutoRefresh) DeleteDelayed(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDelayed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AutoRefresh_DeleteDelayed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDelayed'
type AutoRefresh_DeleteDelayed_Call struct {
	*mock.Call
}

// DeleteDelayed is a helper method to define mock.On call
//   - id string
func (_e *AutoRefresh_Expecter) DeleteDelayed(id interface{}) *AutoRefresh_DeleteDelayed_Call {
	return &AutoRefresh_DeleteDelayed_Call{Call: _e.mock.On("DeleteDelayed", id)}
}

func (_c *AutoRefresh_DeleteDelayed_Call) Run(run func(id string)) *AutoRefresh_DeleteDelayed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AutoRefresh_DeleteDelayed_Call) Return(_a0 error) *AutoRefresh_DeleteDelayed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AutoRefresh_DeleteDelayed_Call) RunAndReturn(run func(string) error) *AutoRefresh_DeleteDelayed_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *AutoRefresh) Get(id string) (cache.Item, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 cache.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (cache.Item, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) cache.Item); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoRefresh_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type AutoRefresh_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *AutoRefresh_Expecter) Get(id interface{}) *AutoRefresh_Get_Call {
	return &AutoRefresh_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *AutoRefresh_Get_Call) Run(run func(id string)) *AutoRefresh_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AutoRefresh_Get_Call) Return(_a0 cache.Item, _a1 error) *AutoRefresh_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AutoRefresh_Get_Call) RunAndReturn(run func(string) (cache.Item, error)) *AutoRefresh_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreate provides a mock function with given fields: id, item
func (_m *AutoRefresh) GetOrCreate(id string, item cache.Item) (cache.Item, error) {
	ret := _m.Called(id, item)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreate")
	}

	var r0 cache.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(string, cache.Item) (cache.Item, error)); ok {
		return rf(id, item)
	}
	if rf, ok := ret.Get(0).(func(string, cache.Item) cache.Item); ok {
		r0 = rf(id, item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(string, cache.Item) error); ok {
		r1 = rf(id, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AutoRefresh_GetOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreate'
type AutoRefresh_GetOrCreate_Call struct {
	*mock.Call
}

// GetOrCreate is a helper method to define mock.On call
//   - id string
//   - item cache.Item
func (_e *AutoRefresh_Expecter) GetOrCreate(id interface{}, item interface{}) *AutoRefresh_GetOrCreate_Call {
	return &AutoRefresh_GetOrCreate_Call{Call: _e.mock.On("GetOrCreate", id, item)}
}

func (_c *AutoRefresh_GetOrCreate_Call) Run(run func(id string, item cache.Item)) *AutoRefresh_GetOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(cache.Item))
	})
	return _c
}

func (_c *AutoRefresh_GetOrCreate_Call) Return(_a0 cache.Item, _a1 error) *AutoRefresh_GetOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AutoRefresh_GetOrCreate_Call) RunAndReturn(run func(string, cache.Item) (cache.Item, error)) *AutoRefresh_GetOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *AutoRefresh) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AutoRefresh_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type AutoRefresh_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AutoRefresh_Expecter) Start(ctx interface{}) *AutoRefresh_Start_Call {
	return &AutoRefresh_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *AutoRefresh_Start_Call) Run(run func(ctx context.Context)) *AutoRefresh_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AutoRefresh_Start_Call) Return(_a0 error) *AutoRefresh_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AutoRefresh_Start_Call) RunAndReturn(run func(context.Context) error) *AutoRefresh_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewAutoRefresh creates a new instance of AutoRefresh. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAutoRefresh(t interface {
	mock.TestingT
	Cleanup(func())
}) *AutoRefresh {
	mock := &AutoRefresh{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
