// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	utils "github.com/flyteorg/flyte/flytestdlib/utils"
	mock "github.com/stretchr/testify/mock"
)

// CacheSyncItem is an autogenerated mock type for the CacheSyncItem type
type CacheSyncItem struct {
	mock.Mock
}

type CacheSyncItem_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheSyncItem) EXPECT() *CacheSyncItem_Expecter {
	return &CacheSyncItem_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, obj
func (_m *CacheSyncItem) Execute(ctx context.Context, obj utils.CacheItem) (utils.CacheItem, utils.CacheSyncAction, error) {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 utils.CacheItem
	var r1 utils.CacheSyncAction
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.CacheItem) (utils.CacheItem, utils.CacheSyncAction, error)); ok {
		return rf(ctx, obj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.CacheItem) utils.CacheItem); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.CacheItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.CacheItem) utils.CacheSyncAction); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Get(1).(utils.CacheSyncAction)
	}

	if rf, ok := ret.Get(2).(func(context.Context, utils.CacheItem) error); ok {
		r2 = rf(ctx, obj)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CacheSyncItem_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CacheSyncItem_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - obj utils.CacheItem
func (_e *CacheSyncItem_Expecter) Execute(ctx interface{}, obj interface{}) *CacheSyncItem_Execute_Call {
	return &CacheSyncItem_Execute_Call{Call: _e.mock.On("Execute", ctx, obj)}
}

func (_c *CacheSyncItem_Execute_Call) Run(run func(ctx context.Context, obj utils.CacheItem)) *CacheSyncItem_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(utils.CacheItem))
	})
	return _c
}

func (_c *CacheSyncItem_Execute_Call) Return(newItem utils.CacheItem, result utils.CacheSyncAction, err error) *CacheSyncItem_Execute_Call {
	_c.Call.Return(newItem, result, err)
	return _c
}

func (_c *CacheSyncItem_Execute_Call) RunAndReturn(run func(context.Context, utils.CacheItem) (utils.CacheItem, utils.CacheSyncAction, error)) *CacheSyncItem_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCacheSyncItem creates a new instance of CacheSyncItem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheSyncItem(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheSyncItem {
	mock := &CacheSyncItem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
