// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Sequencer is an autogenerated mock type for the Sequencer type
type Sequencer struct {
	mock.Mock
}

type Sequencer_Expecter struct {
	mock *mock.Mock
}

func (_m *Sequencer) EXPECT() *Sequencer_Expecter {
	return &Sequencer_Expecter{mock: &_m.Mock}
}

// GetCur provides a mock function with given fields:
func (_m *Sequencer) GetCur() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCur")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Sequencer_GetCur_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCur'
type Sequencer_GetCur_Call struct {
	*mock.Call
}

// GetCur is a helper method to define mock.On call
func (_e *Sequencer_Expecter) GetCur() *Sequencer_GetCur_Call {
	return &Sequencer_GetCur_Call{Call: _e.mock.On("GetCur")}
}

func (_c *Sequencer_GetCur_Call) Run(run func()) *Sequencer_GetCur_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sequencer_GetCur_Call) Return(_a0 uint64) *Sequencer_GetCur_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sequencer_GetCur_Call) RunAndReturn(run func() uint64) *Sequencer_GetCur_Call {
	_c.Call.Return(run)
	return _c
}

// GetNext provides a mock function with given fields:
func (_m *Sequencer) GetNext() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNext")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Sequencer_GetNext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNext'
type Sequencer_GetNext_Call struct {
	*mock.Call
}

// GetNext is a helper method to define mock.On call
func (_e *Sequencer_Expecter) GetNext() *Sequencer_GetNext_Call {
	return &Sequencer_GetNext_Call{Call: _e.mock.On("GetNext")}
}

func (_c *Sequencer_GetNext_Call) Run(run func()) *Sequencer_GetNext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Sequencer_GetNext_Call) Return(_a0 uint64) *Sequencer_GetNext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Sequencer_GetNext_Call) RunAndReturn(run func() uint64) *Sequencer_GetNext_Call {
	_c.Call.Return(run)
	return _c
}

// NewSequencer creates a new instance of Sequencer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSequencer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sequencer {
	mock := &Sequencer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
