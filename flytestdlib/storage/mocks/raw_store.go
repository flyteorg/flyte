// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/flyteorg/flyte/flytestdlib/storage"
)

// RawStore is an autogenerated mock type for the RawStore type
type RawStore struct {
	mock.Mock
}

type RawStore_Expecter struct {
	mock *mock.Mock
}

func (_m *RawStore) EXPECT() *RawStore_Expecter {
	return &RawStore_Expecter{mock: &_m.Mock}
}

// CopyRaw provides a mock function with given fields: ctx, source, destination, opts
func (_m *RawStore) CopyRaw(ctx context.Context, source storage.DataReference, destination storage.DataReference, opts storage.Options) error {
	ret := _m.Called(ctx, source, destination, opts)

	if len(ret) == 0 {
		panic("no return value specified for CopyRaw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference, storage.DataReference, storage.Options) error); ok {
		r0 = rf(ctx, source, destination, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RawStore_CopyRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyRaw'
type RawStore_CopyRaw_Call struct {
	*mock.Call
}

// CopyRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - source storage.DataReference
//   - destination storage.DataReference
//   - opts storage.Options
func (_e *RawStore_Expecter) CopyRaw(ctx interface{}, source interface{}, destination interface{}, opts interface{}) *RawStore_CopyRaw_Call {
	return &RawStore_CopyRaw_Call{Call: _e.mock.On("CopyRaw", ctx, source, destination, opts)}
}

func (_c *RawStore_CopyRaw_Call) Run(run func(ctx context.Context, source storage.DataReference, destination storage.DataReference, opts storage.Options)) *RawStore_CopyRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.DataReference), args[2].(storage.DataReference), args[3].(storage.Options))
	})
	return _c
}

func (_c *RawStore_CopyRaw_Call) Return(_a0 error) *RawStore_CopyRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawStore_CopyRaw_Call) RunAndReturn(run func(context.Context, storage.DataReference, storage.DataReference, storage.Options) error) *RawStore_CopyRaw_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSignedURL provides a mock function with given fields: ctx, reference, properties
func (_m *RawStore) CreateSignedURL(ctx context.Context, reference storage.DataReference, properties storage.SignedURLProperties) (storage.SignedURLResponse, error) {
	ret := _m.Called(ctx, reference, properties)

	if len(ret) == 0 {
		panic("no return value specified for CreateSignedURL")
	}

	var r0 storage.SignedURLResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference, storage.SignedURLProperties) (storage.SignedURLResponse, error)); ok {
		return rf(ctx, reference, properties)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference, storage.SignedURLProperties) storage.SignedURLResponse); ok {
		r0 = rf(ctx, reference, properties)
	} else {
		r0 = ret.Get(0).(storage.SignedURLResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.DataReference, storage.SignedURLProperties) error); ok {
		r1 = rf(ctx, reference, properties)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawStore_CreateSignedURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSignedURL'
type RawStore_CreateSignedURL_Call struct {
	*mock.Call
}

// CreateSignedURL is a helper method to define mock.On call
//   - ctx context.Context
//   - reference storage.DataReference
//   - properties storage.SignedURLProperties
func (_e *RawStore_Expecter) CreateSignedURL(ctx interface{}, reference interface{}, properties interface{}) *RawStore_CreateSignedURL_Call {
	return &RawStore_CreateSignedURL_Call{Call: _e.mock.On("CreateSignedURL", ctx, reference, properties)}
}

func (_c *RawStore_CreateSignedURL_Call) Run(run func(ctx context.Context, reference storage.DataReference, properties storage.SignedURLProperties)) *RawStore_CreateSignedURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.DataReference), args[2].(storage.SignedURLProperties))
	})
	return _c
}

func (_c *RawStore_CreateSignedURL_Call) Return(_a0 storage.SignedURLResponse, _a1 error) *RawStore_CreateSignedURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawStore_CreateSignedURL_Call) RunAndReturn(run func(context.Context, storage.DataReference, storage.SignedURLProperties) (storage.SignedURLResponse, error)) *RawStore_CreateSignedURL_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, reference
func (_m *RawStore) Delete(ctx context.Context, reference storage.DataReference) error {
	ret := _m.Called(ctx, reference)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference) error); ok {
		r0 = rf(ctx, reference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RawStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RawStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - reference storage.DataReference
func (_e *RawStore_Expecter) Delete(ctx interface{}, reference interface{}) *RawStore_Delete_Call {
	return &RawStore_Delete_Call{Call: _e.mock.On("Delete", ctx, reference)}
}

func (_c *RawStore_Delete_Call) Run(run func(ctx context.Context, reference storage.DataReference)) *RawStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.DataReference))
	})
	return _c
}

func (_c *RawStore_Delete_Call) Return(_a0 error) *RawStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawStore_Delete_Call) RunAndReturn(run func(context.Context, storage.DataReference) error) *RawStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetBaseContainerFQN provides a mock function with given fields: ctx
func (_m *RawStore) GetBaseContainerFQN(ctx context.Context) storage.DataReference {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBaseContainerFQN")
	}

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func(context.Context) storage.DataReference); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// RawStore_GetBaseContainerFQN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBaseContainerFQN'
type RawStore_GetBaseContainerFQN_Call struct {
	*mock.Call
}

// GetBaseContainerFQN is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RawStore_Expecter) GetBaseContainerFQN(ctx interface{}) *RawStore_GetBaseContainerFQN_Call {
	return &RawStore_GetBaseContainerFQN_Call{Call: _e.mock.On("GetBaseContainerFQN", ctx)}
}

func (_c *RawStore_GetBaseContainerFQN_Call) Run(run func(ctx context.Context)) *RawStore_GetBaseContainerFQN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RawStore_GetBaseContainerFQN_Call) Return(_a0 storage.DataReference) *RawStore_GetBaseContainerFQN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawStore_GetBaseContainerFQN_Call) RunAndReturn(run func(context.Context) storage.DataReference) *RawStore_GetBaseContainerFQN_Call {
	_c.Call.Return(run)
	return _c
}

// Head provides a mock function with given fields: ctx, reference
func (_m *RawStore) Head(ctx context.Context, reference storage.DataReference) (storage.Metadata, error) {
	ret := _m.Called(ctx, reference)

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 storage.Metadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference) (storage.Metadata, error)); ok {
		return rf(ctx, reference)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference) storage.Metadata); ok {
		r0 = rf(ctx, reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Metadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.DataReference) error); ok {
		r1 = rf(ctx, reference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawStore_Head_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Head'
type RawStore_Head_Call struct {
	*mock.Call
}

// Head is a helper method to define mock.On call
//   - ctx context.Context
//   - reference storage.DataReference
func (_e *RawStore_Expecter) Head(ctx interface{}, reference interface{}) *RawStore_Head_Call {
	return &RawStore_Head_Call{Call: _e.mock.On("Head", ctx, reference)}
}

func (_c *RawStore_Head_Call) Run(run func(ctx context.Context, reference storage.DataReference)) *RawStore_Head_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.DataReference))
	})
	return _c
}

func (_c *RawStore_Head_Call) Return(_a0 storage.Metadata, _a1 error) *RawStore_Head_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawStore_Head_Call) RunAndReturn(run func(context.Context, storage.DataReference) (storage.Metadata, error)) *RawStore_Head_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, reference, maxItems, cursor
func (_m *RawStore) List(ctx context.Context, reference storage.DataReference, maxItems int, cursor storage.Cursor) ([]storage.DataReference, storage.Cursor, error) {
	ret := _m.Called(ctx, reference, maxItems, cursor)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []storage.DataReference
	var r1 storage.Cursor
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference, int, storage.Cursor) ([]storage.DataReference, storage.Cursor, error)); ok {
		return rf(ctx, reference, maxItems, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference, int, storage.Cursor) []storage.DataReference); ok {
		r0 = rf(ctx, reference, maxItems, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.DataReference)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.DataReference, int, storage.Cursor) storage.Cursor); ok {
		r1 = rf(ctx, reference, maxItems, cursor)
	} else {
		r1 = ret.Get(1).(storage.Cursor)
	}

	if rf, ok := ret.Get(2).(func(context.Context, storage.DataReference, int, storage.Cursor) error); ok {
		r2 = rf(ctx, reference, maxItems, cursor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RawStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RawStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - reference storage.DataReference
//   - maxItems int
//   - cursor storage.Cursor
func (_e *RawStore_Expecter) List(ctx interface{}, reference interface{}, maxItems interface{}, cursor interface{}) *RawStore_List_Call {
	return &RawStore_List_Call{Call: _e.mock.On("List", ctx, reference, maxItems, cursor)}
}

func (_c *RawStore_List_Call) Run(run func(ctx context.Context, reference storage.DataReference, maxItems int, cursor storage.Cursor)) *RawStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.DataReference), args[2].(int), args[3].(storage.Cursor))
	})
	return _c
}

func (_c *RawStore_List_Call) Return(_a0 []storage.DataReference, _a1 storage.Cursor, _a2 error) *RawStore_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RawStore_List_Call) RunAndReturn(run func(context.Context, storage.DataReference, int, storage.Cursor) ([]storage.DataReference, storage.Cursor, error)) *RawStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// ReadRaw provides a mock function with given fields: ctx, reference
func (_m *RawStore) ReadRaw(ctx context.Context, reference storage.DataReference) (io.ReadCloser, error) {
	ret := _m.Called(ctx, reference)

	if len(ret) == 0 {
		panic("no return value specified for ReadRaw")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference) (io.ReadCloser, error)); ok {
		return rf(ctx, reference)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference) io.ReadCloser); ok {
		r0 = rf(ctx, reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.DataReference) error); ok {
		r1 = rf(ctx, reference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawStore_ReadRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadRaw'
type RawStore_ReadRaw_Call struct {
	*mock.Call
}

// ReadRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - reference storage.DataReference
func (_e *RawStore_Expecter) ReadRaw(ctx interface{}, reference interface{}) *RawStore_ReadRaw_Call {
	return &RawStore_ReadRaw_Call{Call: _e.mock.On("ReadRaw", ctx, reference)}
}

func (_c *RawStore_ReadRaw_Call) Run(run func(ctx context.Context, reference storage.DataReference)) *RawStore_ReadRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.DataReference))
	})
	return _c
}

func (_c *RawStore_ReadRaw_Call) Return(_a0 io.ReadCloser, _a1 error) *RawStore_ReadRaw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RawStore_ReadRaw_Call) RunAndReturn(run func(context.Context, storage.DataReference) (io.ReadCloser, error)) *RawStore_ReadRaw_Call {
	_c.Call.Return(run)
	return _c
}

// WriteRaw provides a mock function with given fields: ctx, reference, size, opts, raw
func (_m *RawStore) WriteRaw(ctx context.Context, reference storage.DataReference, size int64, opts storage.Options, raw io.Reader) error {
	ret := _m.Called(ctx, reference, size, opts, raw)

	if len(ret) == 0 {
		panic("no return value specified for WriteRaw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference, int64, storage.Options, io.Reader) error); ok {
		r0 = rf(ctx, reference, size, opts, raw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RawStore_WriteRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteRaw'
type RawStore_WriteRaw_Call struct {
	*mock.Call
}

// WriteRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - reference storage.DataReference
//   - size int64
//   - opts storage.Options
//   - raw io.Reader
func (_e *RawStore_Expecter) WriteRaw(ctx interface{}, reference interface{}, size interface{}, opts interface{}, raw interface{}) *RawStore_WriteRaw_Call {
	return &RawStore_WriteRaw_Call{Call: _e.mock.On("WriteRaw", ctx, reference, size, opts, raw)}
}

func (_c *RawStore_WriteRaw_Call) Run(run func(ctx context.Context, reference storage.DataReference, size int64, opts storage.Options, raw io.Reader)) *RawStore_WriteRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.DataReference), args[2].(int64), args[3].(storage.Options), args[4].(io.Reader))
	})
	return _c
}

func (_c *RawStore_WriteRaw_Call) Return(_a0 error) *RawStore_WriteRaw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RawStore_WriteRaw_Call) RunAndReturn(run func(context.Context, storage.DataReference, int64, storage.Options, io.Reader) error) *RawStore_WriteRaw_Call {
	_c.Call.Return(run)
	return _c
}

// NewRawStore creates a new instance of RawStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRawStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *RawStore {
	mock := &RawStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
