// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Metadata is an autogenerated mock type for the Metadata type
type Metadata struct {
	mock.Mock
}

type Metadata_Etag struct {
	*mock.Call
}

func (_m Metadata_Etag) Return(_a0 string) *Metadata_Etag {
	return &Metadata_Etag{Call: _m.Call.Return(_a0)}
}

func (_m *Metadata) OnEtag() *Metadata_Etag {
	c_call := _m.On("Etag")
	return &Metadata_Etag{Call: c_call}
}

func (_m *Metadata) OnEtagMatch(matchers ...interface{}) *Metadata_Etag {
	c_call := _m.On("Etag", matchers...)
	return &Metadata_Etag{Call: c_call}
}

// Etag provides a mock function with given fields:
func (_m *Metadata) Etag() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type Metadata_Exists struct {
	*mock.Call
}

func (_m Metadata_Exists) Return(_a0 bool) *Metadata_Exists {
	return &Metadata_Exists{Call: _m.Call.Return(_a0)}
}

func (_m *Metadata) OnExists() *Metadata_Exists {
	c_call := _m.On("Exists")
	return &Metadata_Exists{Call: c_call}
}

func (_m *Metadata) OnExistsMatch(matchers ...interface{}) *Metadata_Exists {
	c_call := _m.On("Exists", matchers...)
	return &Metadata_Exists{Call: c_call}
}

// Exists provides a mock function with given fields:
func (_m *Metadata) Exists() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type Metadata_Size struct {
	*mock.Call
}

func (_m Metadata_Size) Return(_a0 int64) *Metadata_Size {
	return &Metadata_Size{Call: _m.Call.Return(_a0)}
}

func (_m *Metadata) OnSize() *Metadata_Size {
	c_call := _m.On("Size")
	return &Metadata_Size{Call: c_call}
}

func (_m *Metadata) OnSizeMatch(matchers ...interface{}) *Metadata_Size {
	c_call := _m.On("Size", matchers...)
	return &Metadata_Size{Call: c_call}
}

// Size provides a mock function with given fields:
func (_m *Metadata) Size() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}
