// Code generated by "enumer --type=OutputFormat -json -yaml -trimprefix=OutputFormat"; DO NOT EDIT.

package printer

import (
	"encoding/json"
	"fmt"
)

const _OutputFormatName = "TABLEJSONYAMLDOTDOTURL"

var _OutputFormatIndex = [...]uint8{0, 5, 9, 13, 16, 22}

func (i OutputFormat) String() string {
	if i >= OutputFormat(len(_OutputFormatIndex)-1) {
		return fmt.Sprintf("OutputFormat(%d)", i)
	}
	return _OutputFormatName[_OutputFormatIndex[i]:_OutputFormatIndex[i+1]]
}

var _OutputFormatValues = []OutputFormat{0, 1, 2, 3, 4}

var _OutputFormatNameToValueMap = map[string]OutputFormat{
	_OutputFormatName[0:5]:   0,
	_OutputFormatName[5:9]:   1,
	_OutputFormatName[9:13]:  2,
	_OutputFormatName[13:16]: 3,
	_OutputFormatName[16:22]: 4,
}

// OutputFormatString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OutputFormatString(s string) (OutputFormat, error) {
	if val, ok := _OutputFormatNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OutputFormat values", s)
}

// OutputFormatValues returns all values of the enum
func OutputFormatValues() []OutputFormat {
	return _OutputFormatValues
}

// IsAOutputFormat returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OutputFormat) IsAOutputFormat() bool {
	for _, v := range _OutputFormatValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OutputFormat
func (i OutputFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OutputFormat
func (i *OutputFormat) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OutputFormat should be a string, got %s", data)
	}

	var err error
	*i, err = OutputFormatString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for OutputFormat
func (i OutputFormat) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for OutputFormat
func (i *OutputFormat) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = OutputFormatString(s)
	return err
}
