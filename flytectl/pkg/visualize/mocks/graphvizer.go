// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	gographviz "github.com/awalterschulze/gographviz"
	mock "github.com/stretchr/testify/mock"
)

// Graphvizer is an autogenerated mock type for the Graphvizer type
type Graphvizer struct {
	mock.Mock
}

type Graphvizer_AddAttr struct {
	*mock.Call
}

func (_m Graphvizer_AddAttr) Return(_a0 error) *Graphvizer_AddAttr {
	return &Graphvizer_AddAttr{Call: _m.Call.Return(_a0)}
}

func (_m *Graphvizer) OnAddAttr(parentGraph string, field string, value string) *Graphvizer_AddAttr {
	c_call := _m.On("AddAttr", parentGraph, field, value)
	return &Graphvizer_AddAttr{Call: c_call}
}

func (_m *Graphvizer) OnAddAttrMatch(matchers ...interface{}) *Graphvizer_AddAttr {
	c_call := _m.On("AddAttr", matchers...)
	return &Graphvizer_AddAttr{Call: c_call}
}

// AddAttr provides a mock function with given fields: parentGraph, field, value
func (_m *Graphvizer) AddAttr(parentGraph string, field string, value string) error {
	ret := _m.Called(parentGraph, field, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(parentGraph, field, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Graphvizer_AddEdge struct {
	*mock.Call
}

func (_m Graphvizer_AddEdge) Return(_a0 error) *Graphvizer_AddEdge {
	return &Graphvizer_AddEdge{Call: _m.Call.Return(_a0)}
}

func (_m *Graphvizer) OnAddEdge(src string, dst string, directed bool, attrs map[string]string) *Graphvizer_AddEdge {
	c_call := _m.On("AddEdge", src, dst, directed, attrs)
	return &Graphvizer_AddEdge{Call: c_call}
}

func (_m *Graphvizer) OnAddEdgeMatch(matchers ...interface{}) *Graphvizer_AddEdge {
	c_call := _m.On("AddEdge", matchers...)
	return &Graphvizer_AddEdge{Call: c_call}
}

// AddEdge provides a mock function with given fields: src, dst, directed, attrs
func (_m *Graphvizer) AddEdge(src string, dst string, directed bool, attrs map[string]string) error {
	ret := _m.Called(src, dst, directed, attrs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool, map[string]string) error); ok {
		r0 = rf(src, dst, directed, attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Graphvizer_AddNode struct {
	*mock.Call
}

func (_m Graphvizer_AddNode) Return(_a0 error) *Graphvizer_AddNode {
	return &Graphvizer_AddNode{Call: _m.Call.Return(_a0)}
}

func (_m *Graphvizer) OnAddNode(parentGraph string, name string, attrs map[string]string) *Graphvizer_AddNode {
	c_call := _m.On("AddNode", parentGraph, name, attrs)
	return &Graphvizer_AddNode{Call: c_call}
}

func (_m *Graphvizer) OnAddNodeMatch(matchers ...interface{}) *Graphvizer_AddNode {
	c_call := _m.On("AddNode", matchers...)
	return &Graphvizer_AddNode{Call: c_call}
}

// AddNode provides a mock function with given fields: parentGraph, name, attrs
func (_m *Graphvizer) AddNode(parentGraph string, name string, attrs map[string]string) error {
	ret := _m.Called(parentGraph, name, attrs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]string) error); ok {
		r0 = rf(parentGraph, name, attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Graphvizer_AddSubGraph struct {
	*mock.Call
}

func (_m Graphvizer_AddSubGraph) Return(_a0 error) *Graphvizer_AddSubGraph {
	return &Graphvizer_AddSubGraph{Call: _m.Call.Return(_a0)}
}

func (_m *Graphvizer) OnAddSubGraph(parentGraph string, name string, attrs map[string]string) *Graphvizer_AddSubGraph {
	c_call := _m.On("AddSubGraph", parentGraph, name, attrs)
	return &Graphvizer_AddSubGraph{Call: c_call}
}

func (_m *Graphvizer) OnAddSubGraphMatch(matchers ...interface{}) *Graphvizer_AddSubGraph {
	c_call := _m.On("AddSubGraph", matchers...)
	return &Graphvizer_AddSubGraph{Call: c_call}
}

// AddSubGraph provides a mock function with given fields: parentGraph, name, attrs
func (_m *Graphvizer) AddSubGraph(parentGraph string, name string, attrs map[string]string) error {
	ret := _m.Called(parentGraph, name, attrs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, map[string]string) error); ok {
		r0 = rf(parentGraph, name, attrs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Graphvizer_DoesEdgeExist struct {
	*mock.Call
}

func (_m Graphvizer_DoesEdgeExist) Return(_a0 bool) *Graphvizer_DoesEdgeExist {
	return &Graphvizer_DoesEdgeExist{Call: _m.Call.Return(_a0)}
}

func (_m *Graphvizer) OnDoesEdgeExist(src string, dest string) *Graphvizer_DoesEdgeExist {
	c_call := _m.On("DoesEdgeExist", src, dest)
	return &Graphvizer_DoesEdgeExist{Call: c_call}
}

func (_m *Graphvizer) OnDoesEdgeExistMatch(matchers ...interface{}) *Graphvizer_DoesEdgeExist {
	c_call := _m.On("DoesEdgeExist", matchers...)
	return &Graphvizer_DoesEdgeExist{Call: c_call}
}

// DoesEdgeExist provides a mock function with given fields: src, dest
func (_m *Graphvizer) DoesEdgeExist(src string, dest string) bool {
	ret := _m.Called(src, dest)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(src, dest)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type Graphvizer_GetEdge struct {
	*mock.Call
}

func (_m Graphvizer_GetEdge) Return(_a0 *gographviz.Edge) *Graphvizer_GetEdge {
	return &Graphvizer_GetEdge{Call: _m.Call.Return(_a0)}
}

func (_m *Graphvizer) OnGetEdge(src string, dest string) *Graphvizer_GetEdge {
	c_call := _m.On("GetEdge", src, dest)
	return &Graphvizer_GetEdge{Call: c_call}
}

func (_m *Graphvizer) OnGetEdgeMatch(matchers ...interface{}) *Graphvizer_GetEdge {
	c_call := _m.On("GetEdge", matchers...)
	return &Graphvizer_GetEdge{Call: c_call}
}

// GetEdge provides a mock function with given fields: src, dest
func (_m *Graphvizer) GetEdge(src string, dest string) *gographviz.Edge {
	ret := _m.Called(src, dest)

	var r0 *gographviz.Edge
	if rf, ok := ret.Get(0).(func(string, string) *gographviz.Edge); ok {
		r0 = rf(src, dest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gographviz.Edge)
		}
	}

	return r0
}

type Graphvizer_GetNode struct {
	*mock.Call
}

func (_m Graphvizer_GetNode) Return(_a0 *gographviz.Node) *Graphvizer_GetNode {
	return &Graphvizer_GetNode{Call: _m.Call.Return(_a0)}
}

func (_m *Graphvizer) OnGetNode(key string) *Graphvizer_GetNode {
	c_call := _m.On("GetNode", key)
	return &Graphvizer_GetNode{Call: c_call}
}

func (_m *Graphvizer) OnGetNodeMatch(matchers ...interface{}) *Graphvizer_GetNode {
	c_call := _m.On("GetNode", matchers...)
	return &Graphvizer_GetNode{Call: c_call}
}

// GetNode provides a mock function with given fields: key
func (_m *Graphvizer) GetNode(key string) *gographviz.Node {
	ret := _m.Called(key)

	var r0 *gographviz.Node
	if rf, ok := ret.Get(0).(func(string) *gographviz.Node); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gographviz.Node)
		}
	}

	return r0
}

type Graphvizer_SetName struct {
	*mock.Call
}

func (_m Graphvizer_SetName) Return(_a0 error) *Graphvizer_SetName {
	return &Graphvizer_SetName{Call: _m.Call.Return(_a0)}
}

func (_m *Graphvizer) OnSetName(name string) *Graphvizer_SetName {
	c_call := _m.On("SetName", name)
	return &Graphvizer_SetName{Call: c_call}
}

func (_m *Graphvizer) OnSetNameMatch(matchers ...interface{}) *Graphvizer_SetName {
	c_call := _m.On("SetName", matchers...)
	return &Graphvizer_SetName{Call: c_call}
}

// SetName provides a mock function with given fields: name
func (_m *Graphvizer) SetName(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
