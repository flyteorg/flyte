// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
)

// AdminUpdaterExtInterface is an autogenerated mock type for the AdminUpdaterExtInterface type
type AdminUpdaterExtInterface struct {
	mock.Mock
}

type AdminUpdaterExtInterface_AdminServiceClient struct {
	*mock.Call
}

func (_m AdminUpdaterExtInterface_AdminServiceClient) Return(_a0 service.AdminServiceClient) *AdminUpdaterExtInterface_AdminServiceClient {
	return &AdminUpdaterExtInterface_AdminServiceClient{Call: _m.Call.Return(_a0)}
}

func (_m *AdminUpdaterExtInterface) OnAdminServiceClient() *AdminUpdaterExtInterface_AdminServiceClient {
	c_call := _m.On("AdminServiceClient")
	return &AdminUpdaterExtInterface_AdminServiceClient{Call: c_call}
}

func (_m *AdminUpdaterExtInterface) OnAdminServiceClientMatch(matchers ...interface{}) *AdminUpdaterExtInterface_AdminServiceClient {
	c_call := _m.On("AdminServiceClient", matchers...)
	return &AdminUpdaterExtInterface_AdminServiceClient{Call: c_call}
}

// AdminServiceClient provides a mock function with given fields:
func (_m *AdminUpdaterExtInterface) AdminServiceClient() service.AdminServiceClient {
	ret := _m.Called()

	var r0 service.AdminServiceClient
	if rf, ok := ret.Get(0).(func() service.AdminServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.AdminServiceClient)
		}
	}

	return r0
}

type AdminUpdaterExtInterface_UpdateProjectAttributes struct {
	*mock.Call
}

func (_m AdminUpdaterExtInterface_UpdateProjectAttributes) Return(_a0 error) *AdminUpdaterExtInterface_UpdateProjectAttributes {
	return &AdminUpdaterExtInterface_UpdateProjectAttributes{Call: _m.Call.Return(_a0)}
}

func (_m *AdminUpdaterExtInterface) OnUpdateProjectAttributes(ctx context.Context, project string, matchingAttr *admin.MatchingAttributes) *AdminUpdaterExtInterface_UpdateProjectAttributes {
	c_call := _m.On("UpdateProjectAttributes", ctx, project, matchingAttr)
	return &AdminUpdaterExtInterface_UpdateProjectAttributes{Call: c_call}
}

func (_m *AdminUpdaterExtInterface) OnUpdateProjectAttributesMatch(matchers ...interface{}) *AdminUpdaterExtInterface_UpdateProjectAttributes {
	c_call := _m.On("UpdateProjectAttributes", matchers...)
	return &AdminUpdaterExtInterface_UpdateProjectAttributes{Call: c_call}
}

// UpdateProjectAttributes provides a mock function with given fields: ctx, project, matchingAttr
func (_m *AdminUpdaterExtInterface) UpdateProjectAttributes(ctx context.Context, project string, matchingAttr *admin.MatchingAttributes) error {
	ret := _m.Called(ctx, project, matchingAttr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.MatchingAttributes) error); ok {
		r0 = rf(ctx, project, matchingAttr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AdminUpdaterExtInterface_UpdateProjectDomainAttributes struct {
	*mock.Call
}

func (_m AdminUpdaterExtInterface_UpdateProjectDomainAttributes) Return(_a0 error) *AdminUpdaterExtInterface_UpdateProjectDomainAttributes {
	return &AdminUpdaterExtInterface_UpdateProjectDomainAttributes{Call: _m.Call.Return(_a0)}
}

func (_m *AdminUpdaterExtInterface) OnUpdateProjectDomainAttributes(ctx context.Context, project string, domain string, matchingAttr *admin.MatchingAttributes) *AdminUpdaterExtInterface_UpdateProjectDomainAttributes {
	c_call := _m.On("UpdateProjectDomainAttributes", ctx, project, domain, matchingAttr)
	return &AdminUpdaterExtInterface_UpdateProjectDomainAttributes{Call: c_call}
}

func (_m *AdminUpdaterExtInterface) OnUpdateProjectDomainAttributesMatch(matchers ...interface{}) *AdminUpdaterExtInterface_UpdateProjectDomainAttributes {
	c_call := _m.On("UpdateProjectDomainAttributes", matchers...)
	return &AdminUpdaterExtInterface_UpdateProjectDomainAttributes{Call: c_call}
}

// UpdateProjectDomainAttributes provides a mock function with given fields: ctx, project, domain, matchingAttr
func (_m *AdminUpdaterExtInterface) UpdateProjectDomainAttributes(ctx context.Context, project string, domain string, matchingAttr *admin.MatchingAttributes) error {
	ret := _m.Called(ctx, project, domain, matchingAttr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.MatchingAttributes) error); ok {
		r0 = rf(ctx, project, domain, matchingAttr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AdminUpdaterExtInterface_UpdateWorkflowAttributes struct {
	*mock.Call
}

func (_m AdminUpdaterExtInterface_UpdateWorkflowAttributes) Return(_a0 error) *AdminUpdaterExtInterface_UpdateWorkflowAttributes {
	return &AdminUpdaterExtInterface_UpdateWorkflowAttributes{Call: _m.Call.Return(_a0)}
}

func (_m *AdminUpdaterExtInterface) OnUpdateWorkflowAttributes(ctx context.Context, project string, domain string, name string, matchingAttr *admin.MatchingAttributes) *AdminUpdaterExtInterface_UpdateWorkflowAttributes {
	c_call := _m.On("UpdateWorkflowAttributes", ctx, project, domain, name, matchingAttr)
	return &AdminUpdaterExtInterface_UpdateWorkflowAttributes{Call: c_call}
}

func (_m *AdminUpdaterExtInterface) OnUpdateWorkflowAttributesMatch(matchers ...interface{}) *AdminUpdaterExtInterface_UpdateWorkflowAttributes {
	c_call := _m.On("UpdateWorkflowAttributes", matchers...)
	return &AdminUpdaterExtInterface_UpdateWorkflowAttributes{Call: c_call}
}

// UpdateWorkflowAttributes provides a mock function with given fields: ctx, project, domain, name, matchingAttr
func (_m *AdminUpdaterExtInterface) UpdateWorkflowAttributes(ctx context.Context, project string, domain string, name string, matchingAttr *admin.MatchingAttributes) error {
	ret := _m.Called(ctx, project, domain, name, matchingAttr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.MatchingAttributes) error); ok {
		r0 = rf(ctx, project, domain, name, matchingAttr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
