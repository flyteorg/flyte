// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
)

// AdminServiceFetcherExtInterface is an autogenerated mock type for the AdminServiceFetcherExtInterface type
type AdminServiceFetcherExtInterface struct {
	mock.Mock
}

type AdminServiceFetcherExtInterface_AdminServiceClient struct {
	*mock.Call
}

func (_m AdminServiceFetcherExtInterface_AdminServiceClient) Return(_a0 service.AdminServiceClient) *AdminServiceFetcherExtInterface_AdminServiceClient {
	return &AdminServiceFetcherExtInterface_AdminServiceClient{Call: _m.Call.Return(_a0)}
}

func (_m *AdminServiceFetcherExtInterface) OnAdminServiceClient() *AdminServiceFetcherExtInterface_AdminServiceClient {
	c := _m.On("AdminServiceClient")
	return &AdminServiceFetcherExtInterface_AdminServiceClient{Call: c}
}

func (_m *AdminServiceFetcherExtInterface) OnAdminServiceClientMatch(matchers ...interface{}) *AdminServiceFetcherExtInterface_AdminServiceClient {
	c := _m.On("AdminServiceClient", matchers...)
	return &AdminServiceFetcherExtInterface_AdminServiceClient{Call: c}
}

// AdminServiceClient provides a mock function with given fields:
func (_m *AdminServiceFetcherExtInterface) AdminServiceClient() service.AdminServiceClient {
	ret := _m.Called()

	var r0 service.AdminServiceClient
	if rf, ok := ret.Get(0).(func() service.AdminServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.AdminServiceClient)
		}
	}

	return r0
}

type AdminServiceFetcherExtInterface_FetchAllVerOfLP struct {
	*mock.Call
}

func (_m AdminServiceFetcherExtInterface_FetchAllVerOfLP) Return(_a0 []*admin.LaunchPlan, _a1 error) *AdminServiceFetcherExtInterface_FetchAllVerOfLP {
	return &AdminServiceFetcherExtInterface_FetchAllVerOfLP{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchAllVerOfLP(ctx context.Context, lpName string, project string, domain string) *AdminServiceFetcherExtInterface_FetchAllVerOfLP {
	c := _m.On("FetchAllVerOfLP", ctx, lpName, project, domain)
	return &AdminServiceFetcherExtInterface_FetchAllVerOfLP{Call: c}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchAllVerOfLPMatch(matchers ...interface{}) *AdminServiceFetcherExtInterface_FetchAllVerOfLP {
	c := _m.On("FetchAllVerOfLP", matchers...)
	return &AdminServiceFetcherExtInterface_FetchAllVerOfLP{Call: c}
}

// FetchAllVerOfLP provides a mock function with given fields: ctx, lpName, project, domain
func (_m *AdminServiceFetcherExtInterface) FetchAllVerOfLP(ctx context.Context, lpName string, project string, domain string) ([]*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, lpName, project, domain)

	var r0 []*admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*admin.LaunchPlan); ok {
		r0 = rf(ctx, lpName, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, lpName, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AdminServiceFetcherExtInterface_FetchAllVerOfTask struct {
	*mock.Call
}

func (_m AdminServiceFetcherExtInterface_FetchAllVerOfTask) Return(_a0 []*admin.Task, _a1 error) *AdminServiceFetcherExtInterface_FetchAllVerOfTask {
	return &AdminServiceFetcherExtInterface_FetchAllVerOfTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchAllVerOfTask(ctx context.Context, name string, project string, domain string) *AdminServiceFetcherExtInterface_FetchAllVerOfTask {
	c := _m.On("FetchAllVerOfTask", ctx, name, project, domain)
	return &AdminServiceFetcherExtInterface_FetchAllVerOfTask{Call: c}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchAllVerOfTaskMatch(matchers ...interface{}) *AdminServiceFetcherExtInterface_FetchAllVerOfTask {
	c := _m.On("FetchAllVerOfTask", matchers...)
	return &AdminServiceFetcherExtInterface_FetchAllVerOfTask{Call: c}
}

// FetchAllVerOfTask provides a mock function with given fields: ctx, name, project, domain
func (_m *AdminServiceFetcherExtInterface) FetchAllVerOfTask(ctx context.Context, name string, project string, domain string) ([]*admin.Task, error) {
	ret := _m.Called(ctx, name, project, domain)

	var r0 []*admin.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*admin.Task); ok {
		r0 = rf(ctx, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AdminServiceFetcherExtInterface_FetchExecution struct {
	*mock.Call
}

func (_m AdminServiceFetcherExtInterface_FetchExecution) Return(_a0 *admin.Execution, _a1 error) *AdminServiceFetcherExtInterface_FetchExecution {
	return &AdminServiceFetcherExtInterface_FetchExecution{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchExecution(ctx context.Context, name string, project string, domain string) *AdminServiceFetcherExtInterface_FetchExecution {
	c := _m.On("FetchExecution", ctx, name, project, domain)
	return &AdminServiceFetcherExtInterface_FetchExecution{Call: c}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchExecutionMatch(matchers ...interface{}) *AdminServiceFetcherExtInterface_FetchExecution {
	c := _m.On("FetchExecution", matchers...)
	return &AdminServiceFetcherExtInterface_FetchExecution{Call: c}
}

// FetchExecution provides a mock function with given fields: ctx, name, project, domain
func (_m *AdminServiceFetcherExtInterface) FetchExecution(ctx context.Context, name string, project string, domain string) (*admin.Execution, error) {
	ret := _m.Called(ctx, name, project, domain)

	var r0 *admin.Execution
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *admin.Execution); ok {
		r0 = rf(ctx, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Execution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AdminServiceFetcherExtInterface_FetchLPLatestVersion struct {
	*mock.Call
}

func (_m AdminServiceFetcherExtInterface_FetchLPLatestVersion) Return(_a0 *admin.LaunchPlan, _a1 error) *AdminServiceFetcherExtInterface_FetchLPLatestVersion {
	return &AdminServiceFetcherExtInterface_FetchLPLatestVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchLPLatestVersion(ctx context.Context, name string, project string, domain string) *AdminServiceFetcherExtInterface_FetchLPLatestVersion {
	c := _m.On("FetchLPLatestVersion", ctx, name, project, domain)
	return &AdminServiceFetcherExtInterface_FetchLPLatestVersion{Call: c}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchLPLatestVersionMatch(matchers ...interface{}) *AdminServiceFetcherExtInterface_FetchLPLatestVersion {
	c := _m.On("FetchLPLatestVersion", matchers...)
	return &AdminServiceFetcherExtInterface_FetchLPLatestVersion{Call: c}
}

// FetchLPLatestVersion provides a mock function with given fields: ctx, name, project, domain
func (_m *AdminServiceFetcherExtInterface) FetchLPLatestVersion(ctx context.Context, name string, project string, domain string) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, name, project, domain)

	var r0 *admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *admin.LaunchPlan); ok {
		r0 = rf(ctx, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AdminServiceFetcherExtInterface_FetchLPVersion struct {
	*mock.Call
}

func (_m AdminServiceFetcherExtInterface_FetchLPVersion) Return(_a0 *admin.LaunchPlan, _a1 error) *AdminServiceFetcherExtInterface_FetchLPVersion {
	return &AdminServiceFetcherExtInterface_FetchLPVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchLPVersion(ctx context.Context, name string, version string, project string, domain string) *AdminServiceFetcherExtInterface_FetchLPVersion {
	c := _m.On("FetchLPVersion", ctx, name, version, project, domain)
	return &AdminServiceFetcherExtInterface_FetchLPVersion{Call: c}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchLPVersionMatch(matchers ...interface{}) *AdminServiceFetcherExtInterface_FetchLPVersion {
	c := _m.On("FetchLPVersion", matchers...)
	return &AdminServiceFetcherExtInterface_FetchLPVersion{Call: c}
}

// FetchLPVersion provides a mock function with given fields: ctx, name, version, project, domain
func (_m *AdminServiceFetcherExtInterface) FetchLPVersion(ctx context.Context, name string, version string, project string, domain string) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, name, version, project, domain)

	var r0 *admin.LaunchPlan
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *admin.LaunchPlan); ok {
		r0 = rf(ctx, name, version, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, version, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AdminServiceFetcherExtInterface_FetchTaskLatestVersion struct {
	*mock.Call
}

func (_m AdminServiceFetcherExtInterface_FetchTaskLatestVersion) Return(_a0 *admin.Task, _a1 error) *AdminServiceFetcherExtInterface_FetchTaskLatestVersion {
	return &AdminServiceFetcherExtInterface_FetchTaskLatestVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchTaskLatestVersion(ctx context.Context, name string, project string, domain string) *AdminServiceFetcherExtInterface_FetchTaskLatestVersion {
	c := _m.On("FetchTaskLatestVersion", ctx, name, project, domain)
	return &AdminServiceFetcherExtInterface_FetchTaskLatestVersion{Call: c}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchTaskLatestVersionMatch(matchers ...interface{}) *AdminServiceFetcherExtInterface_FetchTaskLatestVersion {
	c := _m.On("FetchTaskLatestVersion", matchers...)
	return &AdminServiceFetcherExtInterface_FetchTaskLatestVersion{Call: c}
}

// FetchTaskLatestVersion provides a mock function with given fields: ctx, name, project, domain
func (_m *AdminServiceFetcherExtInterface) FetchTaskLatestVersion(ctx context.Context, name string, project string, domain string) (*admin.Task, error) {
	ret := _m.Called(ctx, name, project, domain)

	var r0 *admin.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *admin.Task); ok {
		r0 = rf(ctx, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AdminServiceFetcherExtInterface_FetchTaskVersion struct {
	*mock.Call
}

func (_m AdminServiceFetcherExtInterface_FetchTaskVersion) Return(_a0 *admin.Task, _a1 error) *AdminServiceFetcherExtInterface_FetchTaskVersion {
	return &AdminServiceFetcherExtInterface_FetchTaskVersion{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchTaskVersion(ctx context.Context, name string, version string, project string, domain string) *AdminServiceFetcherExtInterface_FetchTaskVersion {
	c := _m.On("FetchTaskVersion", ctx, name, version, project, domain)
	return &AdminServiceFetcherExtInterface_FetchTaskVersion{Call: c}
}

func (_m *AdminServiceFetcherExtInterface) OnFetchTaskVersionMatch(matchers ...interface{}) *AdminServiceFetcherExtInterface_FetchTaskVersion {
	c := _m.On("FetchTaskVersion", matchers...)
	return &AdminServiceFetcherExtInterface_FetchTaskVersion{Call: c}
}

// FetchTaskVersion provides a mock function with given fields: ctx, name, version, project, domain
func (_m *AdminServiceFetcherExtInterface) FetchTaskVersion(ctx context.Context, name string, version string, project string, domain string) (*admin.Task, error) {
	ret := _m.Called(ctx, name, version, project, domain)

	var r0 *admin.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *admin.Task); ok {
		r0 = rf(ctx, name, version, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, version, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
