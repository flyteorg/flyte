// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	filters "github.com/flyteorg/flyte/flytectl/pkg/filters"

	mock "github.com/stretchr/testify/mock"

	service "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/service"
)

// AdminFetcherExtInterface is an autogenerated mock type for the AdminFetcherExtInterface type
type AdminFetcherExtInterface struct {
	mock.Mock
}

type AdminFetcherExtInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AdminFetcherExtInterface) EXPECT() *AdminFetcherExtInterface_Expecter {
	return &AdminFetcherExtInterface_Expecter{mock: &_m.Mock}
}

// AdminServiceClient provides a mock function with no fields
func (_m *AdminFetcherExtInterface) AdminServiceClient() service.AdminServiceClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AdminServiceClient")
	}

	var r0 service.AdminServiceClient
	if rf, ok := ret.Get(0).(func() service.AdminServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.AdminServiceClient)
		}
	}

	return r0
}

// AdminFetcherExtInterface_AdminServiceClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminServiceClient'
type AdminFetcherExtInterface_AdminServiceClient_Call struct {
	*mock.Call
}

// AdminServiceClient is a helper method to define mock.On call
func (_e *AdminFetcherExtInterface_Expecter) AdminServiceClient() *AdminFetcherExtInterface_AdminServiceClient_Call {
	return &AdminFetcherExtInterface_AdminServiceClient_Call{Call: _e.mock.On("AdminServiceClient")}
}

func (_c *AdminFetcherExtInterface_AdminServiceClient_Call) Run(run func()) *AdminFetcherExtInterface_AdminServiceClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AdminFetcherExtInterface_AdminServiceClient_Call) Return(_a0 service.AdminServiceClient) *AdminFetcherExtInterface_AdminServiceClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AdminFetcherExtInterface_AdminServiceClient_Call) RunAndReturn(run func() service.AdminServiceClient) *AdminFetcherExtInterface_AdminServiceClient_Call {
	_c.Call.Return(run)
	return _c
}

// FetchAllVerOfLP provides a mock function with given fields: ctx, lpName, project, domain, filter
func (_m *AdminFetcherExtInterface) FetchAllVerOfLP(ctx context.Context, lpName string, project string, domain string, filter filters.Filters) ([]*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, lpName, project, domain, filter)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllVerOfLP")
	}

	var r0 []*admin.LaunchPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, filters.Filters) ([]*admin.LaunchPlan, error)); ok {
		return rf(ctx, lpName, project, domain, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, filters.Filters) []*admin.LaunchPlan); ok {
		r0 = rf(ctx, lpName, project, domain, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.LaunchPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, filters.Filters) error); ok {
		r1 = rf(ctx, lpName, project, domain, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchAllVerOfLP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAllVerOfLP'
type AdminFetcherExtInterface_FetchAllVerOfLP_Call struct {
	*mock.Call
}

// FetchAllVerOfLP is a helper method to define mock.On call
//   - ctx context.Context
//   - lpName string
//   - project string
//   - domain string
//   - filter filters.Filters
func (_e *AdminFetcherExtInterface_Expecter) FetchAllVerOfLP(ctx interface{}, lpName interface{}, project interface{}, domain interface{}, filter interface{}) *AdminFetcherExtInterface_FetchAllVerOfLP_Call {
	return &AdminFetcherExtInterface_FetchAllVerOfLP_Call{Call: _e.mock.On("FetchAllVerOfLP", ctx, lpName, project, domain, filter)}
}

func (_c *AdminFetcherExtInterface_FetchAllVerOfLP_Call) Run(run func(ctx context.Context, lpName string, project string, domain string, filter filters.Filters)) *AdminFetcherExtInterface_FetchAllVerOfLP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(filters.Filters))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchAllVerOfLP_Call) Return(_a0 []*admin.LaunchPlan, _a1 error) *AdminFetcherExtInterface_FetchAllVerOfLP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchAllVerOfLP_Call) RunAndReturn(run func(context.Context, string, string, string, filters.Filters) ([]*admin.LaunchPlan, error)) *AdminFetcherExtInterface_FetchAllVerOfLP_Call {
	_c.Call.Return(run)
	return _c
}

// FetchAllVerOfTask provides a mock function with given fields: ctx, name, project, domain, filter
func (_m *AdminFetcherExtInterface) FetchAllVerOfTask(ctx context.Context, name string, project string, domain string, filter filters.Filters) ([]*admin.Task, error) {
	ret := _m.Called(ctx, name, project, domain, filter)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllVerOfTask")
	}

	var r0 []*admin.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, filters.Filters) ([]*admin.Task, error)); ok {
		return rf(ctx, name, project, domain, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, filters.Filters) []*admin.Task); ok {
		r0 = rf(ctx, name, project, domain, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, filters.Filters) error); ok {
		r1 = rf(ctx, name, project, domain, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchAllVerOfTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAllVerOfTask'
type AdminFetcherExtInterface_FetchAllVerOfTask_Call struct {
	*mock.Call
}

// FetchAllVerOfTask is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - project string
//   - domain string
//   - filter filters.Filters
func (_e *AdminFetcherExtInterface_Expecter) FetchAllVerOfTask(ctx interface{}, name interface{}, project interface{}, domain interface{}, filter interface{}) *AdminFetcherExtInterface_FetchAllVerOfTask_Call {
	return &AdminFetcherExtInterface_FetchAllVerOfTask_Call{Call: _e.mock.On("FetchAllVerOfTask", ctx, name, project, domain, filter)}
}

func (_c *AdminFetcherExtInterface_FetchAllVerOfTask_Call) Run(run func(ctx context.Context, name string, project string, domain string, filter filters.Filters)) *AdminFetcherExtInterface_FetchAllVerOfTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(filters.Filters))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchAllVerOfTask_Call) Return(_a0 []*admin.Task, _a1 error) *AdminFetcherExtInterface_FetchAllVerOfTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchAllVerOfTask_Call) RunAndReturn(run func(context.Context, string, string, string, filters.Filters) ([]*admin.Task, error)) *AdminFetcherExtInterface_FetchAllVerOfTask_Call {
	_c.Call.Return(run)
	return _c
}

// FetchAllVerOfWorkflow provides a mock function with given fields: ctx, name, project, domain, filter
func (_m *AdminFetcherExtInterface) FetchAllVerOfWorkflow(ctx context.Context, name string, project string, domain string, filter filters.Filters) ([]*admin.Workflow, error) {
	ret := _m.Called(ctx, name, project, domain, filter)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllVerOfWorkflow")
	}

	var r0 []*admin.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, filters.Filters) ([]*admin.Workflow, error)); ok {
		return rf(ctx, name, project, domain, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, filters.Filters) []*admin.Workflow); ok {
		r0 = rf(ctx, name, project, domain, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, filters.Filters) error); ok {
		r1 = rf(ctx, name, project, domain, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchAllVerOfWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAllVerOfWorkflow'
type AdminFetcherExtInterface_FetchAllVerOfWorkflow_Call struct {
	*mock.Call
}

// FetchAllVerOfWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - project string
//   - domain string
//   - filter filters.Filters
func (_e *AdminFetcherExtInterface_Expecter) FetchAllVerOfWorkflow(ctx interface{}, name interface{}, project interface{}, domain interface{}, filter interface{}) *AdminFetcherExtInterface_FetchAllVerOfWorkflow_Call {
	return &AdminFetcherExtInterface_FetchAllVerOfWorkflow_Call{Call: _e.mock.On("FetchAllVerOfWorkflow", ctx, name, project, domain, filter)}
}

func (_c *AdminFetcherExtInterface_FetchAllVerOfWorkflow_Call) Run(run func(ctx context.Context, name string, project string, domain string, filter filters.Filters)) *AdminFetcherExtInterface_FetchAllVerOfWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(filters.Filters))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchAllVerOfWorkflow_Call) Return(_a0 []*admin.Workflow, _a1 error) *AdminFetcherExtInterface_FetchAllVerOfWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchAllVerOfWorkflow_Call) RunAndReturn(run func(context.Context, string, string, string, filters.Filters) ([]*admin.Workflow, error)) *AdminFetcherExtInterface_FetchAllVerOfWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// FetchAllWorkflows provides a mock function with given fields: ctx, project, domain, filter
func (_m *AdminFetcherExtInterface) FetchAllWorkflows(ctx context.Context, project string, domain string, filter filters.Filters) ([]*admin.NamedEntity, error) {
	ret := _m.Called(ctx, project, domain, filter)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllWorkflows")
	}

	var r0 []*admin.NamedEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, filters.Filters) ([]*admin.NamedEntity, error)); ok {
		return rf(ctx, project, domain, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, filters.Filters) []*admin.NamedEntity); ok {
		r0 = rf(ctx, project, domain, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.NamedEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, filters.Filters) error); ok {
		r1 = rf(ctx, project, domain, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchAllWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAllWorkflows'
type AdminFetcherExtInterface_FetchAllWorkflows_Call struct {
	*mock.Call
}

// FetchAllWorkflows is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - domain string
//   - filter filters.Filters
func (_e *AdminFetcherExtInterface_Expecter) FetchAllWorkflows(ctx interface{}, project interface{}, domain interface{}, filter interface{}) *AdminFetcherExtInterface_FetchAllWorkflows_Call {
	return &AdminFetcherExtInterface_FetchAllWorkflows_Call{Call: _e.mock.On("FetchAllWorkflows", ctx, project, domain, filter)}
}

func (_c *AdminFetcherExtInterface_FetchAllWorkflows_Call) Run(run func(ctx context.Context, project string, domain string, filter filters.Filters)) *AdminFetcherExtInterface_FetchAllWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(filters.Filters))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchAllWorkflows_Call) Return(_a0 []*admin.NamedEntity, _a1 error) *AdminFetcherExtInterface_FetchAllWorkflows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchAllWorkflows_Call) RunAndReturn(run func(context.Context, string, string, filters.Filters) ([]*admin.NamedEntity, error)) *AdminFetcherExtInterface_FetchAllWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// FetchExecution provides a mock function with given fields: ctx, name, project, domain
func (_m *AdminFetcherExtInterface) FetchExecution(ctx context.Context, name string, project string, domain string) (*admin.Execution, error) {
	ret := _m.Called(ctx, name, project, domain)

	if len(ret) == 0 {
		panic("no return value specified for FetchExecution")
	}

	var r0 *admin.Execution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*admin.Execution, error)); ok {
		return rf(ctx, name, project, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *admin.Execution); ok {
		r0 = rf(ctx, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Execution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchExecution'
type AdminFetcherExtInterface_FetchExecution_Call struct {
	*mock.Call
}

// FetchExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - project string
//   - domain string
func (_e *AdminFetcherExtInterface_Expecter) FetchExecution(ctx interface{}, name interface{}, project interface{}, domain interface{}) *AdminFetcherExtInterface_FetchExecution_Call {
	return &AdminFetcherExtInterface_FetchExecution_Call{Call: _e.mock.On("FetchExecution", ctx, name, project, domain)}
}

func (_c *AdminFetcherExtInterface_FetchExecution_Call) Run(run func(ctx context.Context, name string, project string, domain string)) *AdminFetcherExtInterface_FetchExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchExecution_Call) Return(_a0 *admin.Execution, _a1 error) *AdminFetcherExtInterface_FetchExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchExecution_Call) RunAndReturn(run func(context.Context, string, string, string) (*admin.Execution, error)) *AdminFetcherExtInterface_FetchExecution_Call {
	_c.Call.Return(run)
	return _c
}

// FetchLPLatestVersion provides a mock function with given fields: ctx, name, project, domain
func (_m *AdminFetcherExtInterface) FetchLPLatestVersion(ctx context.Context, name string, project string, domain string) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, name, project, domain)

	if len(ret) == 0 {
		panic("no return value specified for FetchLPLatestVersion")
	}

	var r0 *admin.LaunchPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*admin.LaunchPlan, error)); ok {
		return rf(ctx, name, project, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *admin.LaunchPlan); ok {
		r0 = rf(ctx, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchLPLatestVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchLPLatestVersion'
type AdminFetcherExtInterface_FetchLPLatestVersion_Call struct {
	*mock.Call
}

// FetchLPLatestVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - project string
//   - domain string
func (_e *AdminFetcherExtInterface_Expecter) FetchLPLatestVersion(ctx interface{}, name interface{}, project interface{}, domain interface{}) *AdminFetcherExtInterface_FetchLPLatestVersion_Call {
	return &AdminFetcherExtInterface_FetchLPLatestVersion_Call{Call: _e.mock.On("FetchLPLatestVersion", ctx, name, project, domain)}
}

func (_c *AdminFetcherExtInterface_FetchLPLatestVersion_Call) Run(run func(ctx context.Context, name string, project string, domain string)) *AdminFetcherExtInterface_FetchLPLatestVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchLPLatestVersion_Call) Return(_a0 *admin.LaunchPlan, _a1 error) *AdminFetcherExtInterface_FetchLPLatestVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchLPLatestVersion_Call) RunAndReturn(run func(context.Context, string, string, string) (*admin.LaunchPlan, error)) *AdminFetcherExtInterface_FetchLPLatestVersion_Call {
	_c.Call.Return(run)
	return _c
}

// FetchLPVersion provides a mock function with given fields: ctx, name, version, project, domain
func (_m *AdminFetcherExtInterface) FetchLPVersion(ctx context.Context, name string, version string, project string, domain string) (*admin.LaunchPlan, error) {
	ret := _m.Called(ctx, name, version, project, domain)

	if len(ret) == 0 {
		panic("no return value specified for FetchLPVersion")
	}

	var r0 *admin.LaunchPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*admin.LaunchPlan, error)); ok {
		return rf(ctx, name, version, project, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *admin.LaunchPlan); ok {
		r0 = rf(ctx, name, version, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.LaunchPlan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, version, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchLPVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchLPVersion'
type AdminFetcherExtInterface_FetchLPVersion_Call struct {
	*mock.Call
}

// FetchLPVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
//   - project string
//   - domain string
func (_e *AdminFetcherExtInterface_Expecter) FetchLPVersion(ctx interface{}, name interface{}, version interface{}, project interface{}, domain interface{}) *AdminFetcherExtInterface_FetchLPVersion_Call {
	return &AdminFetcherExtInterface_FetchLPVersion_Call{Call: _e.mock.On("FetchLPVersion", ctx, name, version, project, domain)}
}

func (_c *AdminFetcherExtInterface_FetchLPVersion_Call) Run(run func(ctx context.Context, name string, version string, project string, domain string)) *AdminFetcherExtInterface_FetchLPVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchLPVersion_Call) Return(_a0 *admin.LaunchPlan, _a1 error) *AdminFetcherExtInterface_FetchLPVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchLPVersion_Call) RunAndReturn(run func(context.Context, string, string, string, string) (*admin.LaunchPlan, error)) *AdminFetcherExtInterface_FetchLPVersion_Call {
	_c.Call.Return(run)
	return _c
}

// FetchNodeExecutionData provides a mock function with given fields: ctx, nodeID, execName, project, domain
func (_m *AdminFetcherExtInterface) FetchNodeExecutionData(ctx context.Context, nodeID string, execName string, project string, domain string) (*admin.NodeExecutionGetDataResponse, error) {
	ret := _m.Called(ctx, nodeID, execName, project, domain)

	if len(ret) == 0 {
		panic("no return value specified for FetchNodeExecutionData")
	}

	var r0 *admin.NodeExecutionGetDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*admin.NodeExecutionGetDataResponse, error)); ok {
		return rf(ctx, nodeID, execName, project, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *admin.NodeExecutionGetDataResponse); ok {
		r0 = rf(ctx, nodeID, execName, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionGetDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, nodeID, execName, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchNodeExecutionData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchNodeExecutionData'
type AdminFetcherExtInterface_FetchNodeExecutionData_Call struct {
	*mock.Call
}

// FetchNodeExecutionData is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
//   - execName string
//   - project string
//   - domain string
func (_e *AdminFetcherExtInterface_Expecter) FetchNodeExecutionData(ctx interface{}, nodeID interface{}, execName interface{}, project interface{}, domain interface{}) *AdminFetcherExtInterface_FetchNodeExecutionData_Call {
	return &AdminFetcherExtInterface_FetchNodeExecutionData_Call{Call: _e.mock.On("FetchNodeExecutionData", ctx, nodeID, execName, project, domain)}
}

func (_c *AdminFetcherExtInterface_FetchNodeExecutionData_Call) Run(run func(ctx context.Context, nodeID string, execName string, project string, domain string)) *AdminFetcherExtInterface_FetchNodeExecutionData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchNodeExecutionData_Call) Return(_a0 *admin.NodeExecutionGetDataResponse, _a1 error) *AdminFetcherExtInterface_FetchNodeExecutionData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchNodeExecutionData_Call) RunAndReturn(run func(context.Context, string, string, string, string) (*admin.NodeExecutionGetDataResponse, error)) *AdminFetcherExtInterface_FetchNodeExecutionData_Call {
	_c.Call.Return(run)
	return _c
}

// FetchNodeExecutionDetails provides a mock function with given fields: ctx, name, project, domain, uniqueParentID
func (_m *AdminFetcherExtInterface) FetchNodeExecutionDetails(ctx context.Context, name string, project string, domain string, uniqueParentID string) (*admin.NodeExecutionList, error) {
	ret := _m.Called(ctx, name, project, domain, uniqueParentID)

	if len(ret) == 0 {
		panic("no return value specified for FetchNodeExecutionDetails")
	}

	var r0 *admin.NodeExecutionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*admin.NodeExecutionList, error)); ok {
		return rf(ctx, name, project, domain, uniqueParentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *admin.NodeExecutionList); ok {
		r0 = rf(ctx, name, project, domain, uniqueParentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.NodeExecutionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain, uniqueParentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchNodeExecutionDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchNodeExecutionDetails'
type AdminFetcherExtInterface_FetchNodeExecutionDetails_Call struct {
	*mock.Call
}

// FetchNodeExecutionDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - project string
//   - domain string
//   - uniqueParentID string
func (_e *AdminFetcherExtInterface_Expecter) FetchNodeExecutionDetails(ctx interface{}, name interface{}, project interface{}, domain interface{}, uniqueParentID interface{}) *AdminFetcherExtInterface_FetchNodeExecutionDetails_Call {
	return &AdminFetcherExtInterface_FetchNodeExecutionDetails_Call{Call: _e.mock.On("FetchNodeExecutionDetails", ctx, name, project, domain, uniqueParentID)}
}

func (_c *AdminFetcherExtInterface_FetchNodeExecutionDetails_Call) Run(run func(ctx context.Context, name string, project string, domain string, uniqueParentID string)) *AdminFetcherExtInterface_FetchNodeExecutionDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchNodeExecutionDetails_Call) Return(_a0 *admin.NodeExecutionList, _a1 error) *AdminFetcherExtInterface_FetchNodeExecutionDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchNodeExecutionDetails_Call) RunAndReturn(run func(context.Context, string, string, string, string) (*admin.NodeExecutionList, error)) *AdminFetcherExtInterface_FetchNodeExecutionDetails_Call {
	_c.Call.Return(run)
	return _c
}

// FetchProjectAttributes provides a mock function with given fields: ctx, project, rsType
func (_m *AdminFetcherExtInterface) FetchProjectAttributes(ctx context.Context, project string, rsType admin.MatchableResource) (*admin.ProjectAttributesGetResponse, error) {
	ret := _m.Called(ctx, project, rsType)

	if len(ret) == 0 {
		panic("no return value specified for FetchProjectAttributes")
	}

	var r0 *admin.ProjectAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, admin.MatchableResource) (*admin.ProjectAttributesGetResponse, error)); ok {
		return rf(ctx, project, rsType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, admin.MatchableResource) *admin.ProjectAttributesGetResponse); ok {
		r0 = rf(ctx, project, rsType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, admin.MatchableResource) error); ok {
		r1 = rf(ctx, project, rsType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchProjectAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchProjectAttributes'
type AdminFetcherExtInterface_FetchProjectAttributes_Call struct {
	*mock.Call
}

// FetchProjectAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - rsType admin.MatchableResource
func (_e *AdminFetcherExtInterface_Expecter) FetchProjectAttributes(ctx interface{}, project interface{}, rsType interface{}) *AdminFetcherExtInterface_FetchProjectAttributes_Call {
	return &AdminFetcherExtInterface_FetchProjectAttributes_Call{Call: _e.mock.On("FetchProjectAttributes", ctx, project, rsType)}
}

func (_c *AdminFetcherExtInterface_FetchProjectAttributes_Call) Run(run func(ctx context.Context, project string, rsType admin.MatchableResource)) *AdminFetcherExtInterface_FetchProjectAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(admin.MatchableResource))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchProjectAttributes_Call) Return(_a0 *admin.ProjectAttributesGetResponse, _a1 error) *AdminFetcherExtInterface_FetchProjectAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchProjectAttributes_Call) RunAndReturn(run func(context.Context, string, admin.MatchableResource) (*admin.ProjectAttributesGetResponse, error)) *AdminFetcherExtInterface_FetchProjectAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// FetchProjectDomainAttributes provides a mock function with given fields: ctx, project, domain, rsType
func (_m *AdminFetcherExtInterface) FetchProjectDomainAttributes(ctx context.Context, project string, domain string, rsType admin.MatchableResource) (*admin.ProjectDomainAttributesGetResponse, error) {
	ret := _m.Called(ctx, project, domain, rsType)

	if len(ret) == 0 {
		panic("no return value specified for FetchProjectDomainAttributes")
	}

	var r0 *admin.ProjectDomainAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, admin.MatchableResource) (*admin.ProjectDomainAttributesGetResponse, error)); ok {
		return rf(ctx, project, domain, rsType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, admin.MatchableResource) *admin.ProjectDomainAttributesGetResponse); ok {
		r0 = rf(ctx, project, domain, rsType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ProjectDomainAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, admin.MatchableResource) error); ok {
		r1 = rf(ctx, project, domain, rsType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchProjectDomainAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchProjectDomainAttributes'
type AdminFetcherExtInterface_FetchProjectDomainAttributes_Call struct {
	*mock.Call
}

// FetchProjectDomainAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - domain string
//   - rsType admin.MatchableResource
func (_e *AdminFetcherExtInterface_Expecter) FetchProjectDomainAttributes(ctx interface{}, project interface{}, domain interface{}, rsType interface{}) *AdminFetcherExtInterface_FetchProjectDomainAttributes_Call {
	return &AdminFetcherExtInterface_FetchProjectDomainAttributes_Call{Call: _e.mock.On("FetchProjectDomainAttributes", ctx, project, domain, rsType)}
}

func (_c *AdminFetcherExtInterface_FetchProjectDomainAttributes_Call) Run(run func(ctx context.Context, project string, domain string, rsType admin.MatchableResource)) *AdminFetcherExtInterface_FetchProjectDomainAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(admin.MatchableResource))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchProjectDomainAttributes_Call) Return(_a0 *admin.ProjectDomainAttributesGetResponse, _a1 error) *AdminFetcherExtInterface_FetchProjectDomainAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchProjectDomainAttributes_Call) RunAndReturn(run func(context.Context, string, string, admin.MatchableResource) (*admin.ProjectDomainAttributesGetResponse, error)) *AdminFetcherExtInterface_FetchProjectDomainAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// FetchTaskExecutionsOnNode provides a mock function with given fields: ctx, nodeID, execName, project, domain
func (_m *AdminFetcherExtInterface) FetchTaskExecutionsOnNode(ctx context.Context, nodeID string, execName string, project string, domain string) (*admin.TaskExecutionList, error) {
	ret := _m.Called(ctx, nodeID, execName, project, domain)

	if len(ret) == 0 {
		panic("no return value specified for FetchTaskExecutionsOnNode")
	}

	var r0 *admin.TaskExecutionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*admin.TaskExecutionList, error)); ok {
		return rf(ctx, nodeID, execName, project, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *admin.TaskExecutionList); ok {
		r0 = rf(ctx, nodeID, execName, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.TaskExecutionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, nodeID, execName, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchTaskExecutionsOnNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchTaskExecutionsOnNode'
type AdminFetcherExtInterface_FetchTaskExecutionsOnNode_Call struct {
	*mock.Call
}

// FetchTaskExecutionsOnNode is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
//   - execName string
//   - project string
//   - domain string
func (_e *AdminFetcherExtInterface_Expecter) FetchTaskExecutionsOnNode(ctx interface{}, nodeID interface{}, execName interface{}, project interface{}, domain interface{}) *AdminFetcherExtInterface_FetchTaskExecutionsOnNode_Call {
	return &AdminFetcherExtInterface_FetchTaskExecutionsOnNode_Call{Call: _e.mock.On("FetchTaskExecutionsOnNode", ctx, nodeID, execName, project, domain)}
}

func (_c *AdminFetcherExtInterface_FetchTaskExecutionsOnNode_Call) Run(run func(ctx context.Context, nodeID string, execName string, project string, domain string)) *AdminFetcherExtInterface_FetchTaskExecutionsOnNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchTaskExecutionsOnNode_Call) Return(_a0 *admin.TaskExecutionList, _a1 error) *AdminFetcherExtInterface_FetchTaskExecutionsOnNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchTaskExecutionsOnNode_Call) RunAndReturn(run func(context.Context, string, string, string, string) (*admin.TaskExecutionList, error)) *AdminFetcherExtInterface_FetchTaskExecutionsOnNode_Call {
	_c.Call.Return(run)
	return _c
}

// FetchTaskLatestVersion provides a mock function with given fields: ctx, name, project, domain, filter
func (_m *AdminFetcherExtInterface) FetchTaskLatestVersion(ctx context.Context, name string, project string, domain string, filter filters.Filters) (*admin.Task, error) {
	ret := _m.Called(ctx, name, project, domain, filter)

	if len(ret) == 0 {
		panic("no return value specified for FetchTaskLatestVersion")
	}

	var r0 *admin.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, filters.Filters) (*admin.Task, error)); ok {
		return rf(ctx, name, project, domain, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, filters.Filters) *admin.Task); ok {
		r0 = rf(ctx, name, project, domain, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, filters.Filters) error); ok {
		r1 = rf(ctx, name, project, domain, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchTaskLatestVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchTaskLatestVersion'
type AdminFetcherExtInterface_FetchTaskLatestVersion_Call struct {
	*mock.Call
}

// FetchTaskLatestVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - project string
//   - domain string
//   - filter filters.Filters
func (_e *AdminFetcherExtInterface_Expecter) FetchTaskLatestVersion(ctx interface{}, name interface{}, project interface{}, domain interface{}, filter interface{}) *AdminFetcherExtInterface_FetchTaskLatestVersion_Call {
	return &AdminFetcherExtInterface_FetchTaskLatestVersion_Call{Call: _e.mock.On("FetchTaskLatestVersion", ctx, name, project, domain, filter)}
}

func (_c *AdminFetcherExtInterface_FetchTaskLatestVersion_Call) Run(run func(ctx context.Context, name string, project string, domain string, filter filters.Filters)) *AdminFetcherExtInterface_FetchTaskLatestVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(filters.Filters))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchTaskLatestVersion_Call) Return(_a0 *admin.Task, _a1 error) *AdminFetcherExtInterface_FetchTaskLatestVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchTaskLatestVersion_Call) RunAndReturn(run func(context.Context, string, string, string, filters.Filters) (*admin.Task, error)) *AdminFetcherExtInterface_FetchTaskLatestVersion_Call {
	_c.Call.Return(run)
	return _c
}

// FetchTaskVersion provides a mock function with given fields: ctx, name, version, project, domain
func (_m *AdminFetcherExtInterface) FetchTaskVersion(ctx context.Context, name string, version string, project string, domain string) (*admin.Task, error) {
	ret := _m.Called(ctx, name, version, project, domain)

	if len(ret) == 0 {
		panic("no return value specified for FetchTaskVersion")
	}

	var r0 *admin.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*admin.Task, error)); ok {
		return rf(ctx, name, version, project, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *admin.Task); ok {
		r0 = rf(ctx, name, version, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, version, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchTaskVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchTaskVersion'
type AdminFetcherExtInterface_FetchTaskVersion_Call struct {
	*mock.Call
}

// FetchTaskVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
//   - project string
//   - domain string
func (_e *AdminFetcherExtInterface_Expecter) FetchTaskVersion(ctx interface{}, name interface{}, version interface{}, project interface{}, domain interface{}) *AdminFetcherExtInterface_FetchTaskVersion_Call {
	return &AdminFetcherExtInterface_FetchTaskVersion_Call{Call: _e.mock.On("FetchTaskVersion", ctx, name, version, project, domain)}
}

func (_c *AdminFetcherExtInterface_FetchTaskVersion_Call) Run(run func(ctx context.Context, name string, version string, project string, domain string)) *AdminFetcherExtInterface_FetchTaskVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchTaskVersion_Call) Return(_a0 *admin.Task, _a1 error) *AdminFetcherExtInterface_FetchTaskVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchTaskVersion_Call) RunAndReturn(run func(context.Context, string, string, string, string) (*admin.Task, error)) *AdminFetcherExtInterface_FetchTaskVersion_Call {
	_c.Call.Return(run)
	return _c
}

// FetchWorkflowAttributes provides a mock function with given fields: ctx, project, domain, name, rsType
func (_m *AdminFetcherExtInterface) FetchWorkflowAttributes(ctx context.Context, project string, domain string, name string, rsType admin.MatchableResource) (*admin.WorkflowAttributesGetResponse, error) {
	ret := _m.Called(ctx, project, domain, name, rsType)

	if len(ret) == 0 {
		panic("no return value specified for FetchWorkflowAttributes")
	}

	var r0 *admin.WorkflowAttributesGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, admin.MatchableResource) (*admin.WorkflowAttributesGetResponse, error)); ok {
		return rf(ctx, project, domain, name, rsType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, admin.MatchableResource) *admin.WorkflowAttributesGetResponse); ok {
		r0 = rf(ctx, project, domain, name, rsType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.WorkflowAttributesGetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, admin.MatchableResource) error); ok {
		r1 = rf(ctx, project, domain, name, rsType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchWorkflowAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchWorkflowAttributes'
type AdminFetcherExtInterface_FetchWorkflowAttributes_Call struct {
	*mock.Call
}

// FetchWorkflowAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - domain string
//   - name string
//   - rsType admin.MatchableResource
func (_e *AdminFetcherExtInterface_Expecter) FetchWorkflowAttributes(ctx interface{}, project interface{}, domain interface{}, name interface{}, rsType interface{}) *AdminFetcherExtInterface_FetchWorkflowAttributes_Call {
	return &AdminFetcherExtInterface_FetchWorkflowAttributes_Call{Call: _e.mock.On("FetchWorkflowAttributes", ctx, project, domain, name, rsType)}
}

func (_c *AdminFetcherExtInterface_FetchWorkflowAttributes_Call) Run(run func(ctx context.Context, project string, domain string, name string, rsType admin.MatchableResource)) *AdminFetcherExtInterface_FetchWorkflowAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(admin.MatchableResource))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchWorkflowAttributes_Call) Return(_a0 *admin.WorkflowAttributesGetResponse, _a1 error) *AdminFetcherExtInterface_FetchWorkflowAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchWorkflowAttributes_Call) RunAndReturn(run func(context.Context, string, string, string, admin.MatchableResource) (*admin.WorkflowAttributesGetResponse, error)) *AdminFetcherExtInterface_FetchWorkflowAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// FetchWorkflowLatestVersion provides a mock function with given fields: ctx, name, project, domain
func (_m *AdminFetcherExtInterface) FetchWorkflowLatestVersion(ctx context.Context, name string, project string, domain string) (*admin.Workflow, error) {
	ret := _m.Called(ctx, name, project, domain)

	if len(ret) == 0 {
		panic("no return value specified for FetchWorkflowLatestVersion")
	}

	var r0 *admin.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*admin.Workflow, error)); ok {
		return rf(ctx, name, project, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *admin.Workflow); ok {
		r0 = rf(ctx, name, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchWorkflowLatestVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchWorkflowLatestVersion'
type AdminFetcherExtInterface_FetchWorkflowLatestVersion_Call struct {
	*mock.Call
}

// FetchWorkflowLatestVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - project string
//   - domain string
func (_e *AdminFetcherExtInterface_Expecter) FetchWorkflowLatestVersion(ctx interface{}, name interface{}, project interface{}, domain interface{}) *AdminFetcherExtInterface_FetchWorkflowLatestVersion_Call {
	return &AdminFetcherExtInterface_FetchWorkflowLatestVersion_Call{Call: _e.mock.On("FetchWorkflowLatestVersion", ctx, name, project, domain)}
}

func (_c *AdminFetcherExtInterface_FetchWorkflowLatestVersion_Call) Run(run func(ctx context.Context, name string, project string, domain string)) *AdminFetcherExtInterface_FetchWorkflowLatestVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchWorkflowLatestVersion_Call) Return(_a0 *admin.Workflow, _a1 error) *AdminFetcherExtInterface_FetchWorkflowLatestVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchWorkflowLatestVersion_Call) RunAndReturn(run func(context.Context, string, string, string) (*admin.Workflow, error)) *AdminFetcherExtInterface_FetchWorkflowLatestVersion_Call {
	_c.Call.Return(run)
	return _c
}

// FetchWorkflowVersion provides a mock function with given fields: ctx, name, version, project, domain
func (_m *AdminFetcherExtInterface) FetchWorkflowVersion(ctx context.Context, name string, version string, project string, domain string) (*admin.Workflow, error) {
	ret := _m.Called(ctx, name, version, project, domain)

	if len(ret) == 0 {
		panic("no return value specified for FetchWorkflowVersion")
	}

	var r0 *admin.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*admin.Workflow, error)); ok {
		return rf(ctx, name, version, project, domain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *admin.Workflow); ok {
		r0 = rf(ctx, name, version, project, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, name, version, project, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_FetchWorkflowVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchWorkflowVersion'
type AdminFetcherExtInterface_FetchWorkflowVersion_Call struct {
	*mock.Call
}

// FetchWorkflowVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
//   - project string
//   - domain string
func (_e *AdminFetcherExtInterface_Expecter) FetchWorkflowVersion(ctx interface{}, name interface{}, version interface{}, project interface{}, domain interface{}) *AdminFetcherExtInterface_FetchWorkflowVersion_Call {
	return &AdminFetcherExtInterface_FetchWorkflowVersion_Call{Call: _e.mock.On("FetchWorkflowVersion", ctx, name, version, project, domain)}
}

func (_c *AdminFetcherExtInterface_FetchWorkflowVersion_Call) Run(run func(ctx context.Context, name string, version string, project string, domain string)) *AdminFetcherExtInterface_FetchWorkflowVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_FetchWorkflowVersion_Call) Return(_a0 *admin.Workflow, _a1 error) *AdminFetcherExtInterface_FetchWorkflowVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_FetchWorkflowVersion_Call) RunAndReturn(run func(context.Context, string, string, string, string) (*admin.Workflow, error)) *AdminFetcherExtInterface_FetchWorkflowVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetDomains provides a mock function with given fields: ctx
func (_m *AdminFetcherExtInterface) GetDomains(ctx context.Context) (*admin.GetDomainsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDomains")
	}

	var r0 *admin.GetDomainsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*admin.GetDomainsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *admin.GetDomainsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GetDomainsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_GetDomains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDomains'
type AdminFetcherExtInterface_GetDomains_Call struct {
	*mock.Call
}

// GetDomains is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AdminFetcherExtInterface_Expecter) GetDomains(ctx interface{}) *AdminFetcherExtInterface_GetDomains_Call {
	return &AdminFetcherExtInterface_GetDomains_Call{Call: _e.mock.On("GetDomains", ctx)}
}

func (_c *AdminFetcherExtInterface_GetDomains_Call) Run(run func(ctx context.Context)) *AdminFetcherExtInterface_GetDomains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_GetDomains_Call) Return(_a0 *admin.GetDomainsResponse, _a1 error) *AdminFetcherExtInterface_GetDomains_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_GetDomains_Call) RunAndReturn(run func(context.Context) (*admin.GetDomainsResponse, error)) *AdminFetcherExtInterface_GetDomains_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByID provides a mock function with given fields: ctx, projectID
func (_m *AdminFetcherExtInterface) GetProjectByID(ctx context.Context, projectID string) (*admin.Project, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByID")
	}

	var r0 *admin.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*admin.Project, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *admin.Project); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_GetProjectByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByID'
type AdminFetcherExtInterface_GetProjectByID_Call struct {
	*mock.Call
}

// GetProjectByID is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *AdminFetcherExtInterface_Expecter) GetProjectByID(ctx interface{}, projectID interface{}) *AdminFetcherExtInterface_GetProjectByID_Call {
	return &AdminFetcherExtInterface_GetProjectByID_Call{Call: _e.mock.On("GetProjectByID", ctx, projectID)}
}

func (_c *AdminFetcherExtInterface_GetProjectByID_Call) Run(run func(ctx context.Context, projectID string)) *AdminFetcherExtInterface_GetProjectByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_GetProjectByID_Call) Return(_a0 *admin.Project, _a1 error) *AdminFetcherExtInterface_GetProjectByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_GetProjectByID_Call) RunAndReturn(run func(context.Context, string) (*admin.Project, error)) *AdminFetcherExtInterface_GetProjectByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListExecution provides a mock function with given fields: ctx, project, domain, filter
func (_m *AdminFetcherExtInterface) ListExecution(ctx context.Context, project string, domain string, filter filters.Filters) (*admin.ExecutionList, error) {
	ret := _m.Called(ctx, project, domain, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListExecution")
	}

	var r0 *admin.ExecutionList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, filters.Filters) (*admin.ExecutionList, error)); ok {
		return rf(ctx, project, domain, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, filters.Filters) *admin.ExecutionList); ok {
		r0 = rf(ctx, project, domain, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ExecutionList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, filters.Filters) error); ok {
		r1 = rf(ctx, project, domain, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_ListExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExecution'
type AdminFetcherExtInterface_ListExecution_Call struct {
	*mock.Call
}

// ListExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - project string
//   - domain string
//   - filter filters.Filters
func (_e *AdminFetcherExtInterface_Expecter) ListExecution(ctx interface{}, project interface{}, domain interface{}, filter interface{}) *AdminFetcherExtInterface_ListExecution_Call {
	return &AdminFetcherExtInterface_ListExecution_Call{Call: _e.mock.On("ListExecution", ctx, project, domain, filter)}
}

func (_c *AdminFetcherExtInterface_ListExecution_Call) Run(run func(ctx context.Context, project string, domain string, filter filters.Filters)) *AdminFetcherExtInterface_ListExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(filters.Filters))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_ListExecution_Call) Return(_a0 *admin.ExecutionList, _a1 error) *AdminFetcherExtInterface_ListExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_ListExecution_Call) RunAndReturn(run func(context.Context, string, string, filters.Filters) (*admin.ExecutionList, error)) *AdminFetcherExtInterface_ListExecution_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function with given fields: ctx, filter
func (_m *AdminFetcherExtInterface) ListProjects(ctx context.Context, filter filters.Filters) (*admin.Projects, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 *admin.Projects
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, filters.Filters) (*admin.Projects, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, filters.Filters) *admin.Projects); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Projects)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, filters.Filters) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminFetcherExtInterface_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type AdminFetcherExtInterface_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - filter filters.Filters
func (_e *AdminFetcherExtInterface_Expecter) ListProjects(ctx interface{}, filter interface{}) *AdminFetcherExtInterface_ListProjects_Call {
	return &AdminFetcherExtInterface_ListProjects_Call{Call: _e.mock.On("ListProjects", ctx, filter)}
}

func (_c *AdminFetcherExtInterface_ListProjects_Call) Run(run func(ctx context.Context, filter filters.Filters)) *AdminFetcherExtInterface_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(filters.Filters))
	})
	return _c
}

func (_c *AdminFetcherExtInterface_ListProjects_Call) Return(_a0 *admin.Projects, _a1 error) *AdminFetcherExtInterface_ListProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AdminFetcherExtInterface_ListProjects_Call) RunAndReturn(run func(context.Context, filters.Filters) (*admin.Projects, error)) *AdminFetcherExtInterface_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// NewAdminFetcherExtInterface creates a new instance of AdminFetcherExtInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminFetcherExtInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminFetcherExtInterface {
	mock := &AdminFetcherExtInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
