// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	container "github.com/docker/docker/api/types/container"

	image "github.com/docker/docker/api/types/image"

	io "io"

	mock "github.com/stretchr/testify/mock"

	network "github.com/docker/docker/api/types/network"

	types "github.com/docker/docker/api/types"

	v1 "github.com/opencontainers/image-spec/specs-go/v1"

	volume "github.com/docker/docker/api/types/volume"
)

// Docker is an autogenerated mock type for the Docker type
type Docker struct {
	mock.Mock
}

type Docker_Expecter struct {
	mock *mock.Mock
}

func (_m *Docker) EXPECT() *Docker_Expecter {
	return &Docker_Expecter{mock: &_m.Mock}
}

// ContainerCreate provides a mock function with given fields: ctx, config, hostConfig, networkingConfig, platform, containerName
func (_m *Docker) ContainerCreate(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string) (container.CreateResponse, error) {
	ret := _m.Called(ctx, config, hostConfig, networkingConfig, platform, containerName)

	if len(ret) == 0 {
		panic("no return value specified for ContainerCreate")
	}

	var r0 container.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) (container.CreateResponse, error)); ok {
		return rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) container.CreateResponse); ok {
		r0 = rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r0 = ret.Get(0).(container.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) error); ok {
		r1 = rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_ContainerCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerCreate'
type Docker_ContainerCreate_Call struct {
	*mock.Call
}

// ContainerCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - config *container.Config
//   - hostConfig *container.HostConfig
//   - networkingConfig *network.NetworkingConfig
//   - platform *v1.Platform
//   - containerName string
func (_e *Docker_Expecter) ContainerCreate(ctx interface{}, config interface{}, hostConfig interface{}, networkingConfig interface{}, platform interface{}, containerName interface{}) *Docker_ContainerCreate_Call {
	return &Docker_ContainerCreate_Call{Call: _e.mock.On("ContainerCreate", ctx, config, hostConfig, networkingConfig, platform, containerName)}
}

func (_c *Docker_ContainerCreate_Call) Run(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string)) *Docker_ContainerCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.Config), args[2].(*container.HostConfig), args[3].(*network.NetworkingConfig), args[4].(*v1.Platform), args[5].(string))
	})
	return _c
}

func (_c *Docker_ContainerCreate_Call) Return(_a0 container.CreateResponse, _a1 error) *Docker_ContainerCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_ContainerCreate_Call) RunAndReturn(run func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) (container.CreateResponse, error)) *Docker_ContainerCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecAttach provides a mock function with given fields: ctx, execID, config
func (_m *Docker) ContainerExecAttach(ctx context.Context, execID string, config types.ExecStartCheck) (types.HijackedResponse, error) {
	ret := _m.Called(ctx, execID, config)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecAttach")
	}

	var r0 types.HijackedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.ExecStartCheck) (types.HijackedResponse, error)); ok {
		return rf(ctx, execID, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.ExecStartCheck) types.HijackedResponse); ok {
		r0 = rf(ctx, execID, config)
	} else {
		r0 = ret.Get(0).(types.HijackedResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.ExecStartCheck) error); ok {
		r1 = rf(ctx, execID, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_ContainerExecAttach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecAttach'
type Docker_ContainerExecAttach_Call struct {
	*mock.Call
}

// ContainerExecAttach is a helper method to define mock.On call
//   - ctx context.Context
//   - execID string
//   - config types.ExecStartCheck
func (_e *Docker_Expecter) ContainerExecAttach(ctx interface{}, execID interface{}, config interface{}) *Docker_ContainerExecAttach_Call {
	return &Docker_ContainerExecAttach_Call{Call: _e.mock.On("ContainerExecAttach", ctx, execID, config)}
}

func (_c *Docker_ContainerExecAttach_Call) Run(run func(ctx context.Context, execID string, config types.ExecStartCheck)) *Docker_ContainerExecAttach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.ExecStartCheck))
	})
	return _c
}

func (_c *Docker_ContainerExecAttach_Call) Return(_a0 types.HijackedResponse, _a1 error) *Docker_ContainerExecAttach_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_ContainerExecAttach_Call) RunAndReturn(run func(context.Context, string, types.ExecStartCheck) (types.HijackedResponse, error)) *Docker_ContainerExecAttach_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecCreate provides a mock function with given fields: ctx, _a1, config
func (_m *Docker) ContainerExecCreate(ctx context.Context, _a1 string, config types.ExecConfig) (types.IDResponse, error) {
	ret := _m.Called(ctx, _a1, config)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecCreate")
	}

	var r0 types.IDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.ExecConfig) (types.IDResponse, error)); ok {
		return rf(ctx, _a1, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.ExecConfig) types.IDResponse); ok {
		r0 = rf(ctx, _a1, config)
	} else {
		r0 = ret.Get(0).(types.IDResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.ExecConfig) error); ok {
		r1 = rf(ctx, _a1, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_ContainerExecCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecCreate'
type Docker_ContainerExecCreate_Call struct {
	*mock.Call
}

// ContainerExecCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - config types.ExecConfig
func (_e *Docker_Expecter) ContainerExecCreate(ctx interface{}, _a1 interface{}, config interface{}) *Docker_ContainerExecCreate_Call {
	return &Docker_ContainerExecCreate_Call{Call: _e.mock.On("ContainerExecCreate", ctx, _a1, config)}
}

func (_c *Docker_ContainerExecCreate_Call) Run(run func(ctx context.Context, _a1 string, config types.ExecConfig)) *Docker_ContainerExecCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.ExecConfig))
	})
	return _c
}

func (_c *Docker_ContainerExecCreate_Call) Return(_a0 types.IDResponse, _a1 error) *Docker_ContainerExecCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_ContainerExecCreate_Call) RunAndReturn(run func(context.Context, string, types.ExecConfig) (types.IDResponse, error)) *Docker_ContainerExecCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecInspect provides a mock function with given fields: ctx, execID
func (_m *Docker) ContainerExecInspect(ctx context.Context, execID string) (types.ContainerExecInspect, error) {
	ret := _m.Called(ctx, execID)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecInspect")
	}

	var r0 types.ContainerExecInspect
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.ContainerExecInspect, error)); ok {
		return rf(ctx, execID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.ContainerExecInspect); ok {
		r0 = rf(ctx, execID)
	} else {
		r0 = ret.Get(0).(types.ContainerExecInspect)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, execID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_ContainerExecInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecInspect'
type Docker_ContainerExecInspect_Call struct {
	*mock.Call
}

// ContainerExecInspect is a helper method to define mock.On call
//   - ctx context.Context
//   - execID string
func (_e *Docker_Expecter) ContainerExecInspect(ctx interface{}, execID interface{}) *Docker_ContainerExecInspect_Call {
	return &Docker_ContainerExecInspect_Call{Call: _e.mock.On("ContainerExecInspect", ctx, execID)}
}

func (_c *Docker_ContainerExecInspect_Call) Run(run func(ctx context.Context, execID string)) *Docker_ContainerExecInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Docker_ContainerExecInspect_Call) Return(_a0 types.ContainerExecInspect, _a1 error) *Docker_ContainerExecInspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_ContainerExecInspect_Call) RunAndReturn(run func(context.Context, string) (types.ContainerExecInspect, error)) *Docker_ContainerExecInspect_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerList provides a mock function with given fields: ctx, options
func (_m *Docker) ContainerList(ctx context.Context, options container.ListOptions) ([]types.Container, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerList")
	}

	var r0 []types.Container
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, container.ListOptions) ([]types.Container, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, container.ListOptions) []types.Container); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Container)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, container.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_ContainerList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerList'
type Docker_ContainerList_Call struct {
	*mock.Call
}

// ContainerList is a helper method to define mock.On call
//   - ctx context.Context
//   - options container.ListOptions
func (_e *Docker_Expecter) ContainerList(ctx interface{}, options interface{}) *Docker_ContainerList_Call {
	return &Docker_ContainerList_Call{Call: _e.mock.On("ContainerList", ctx, options)}
}

func (_c *Docker_ContainerList_Call) Run(run func(ctx context.Context, options container.ListOptions)) *Docker_ContainerList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(container.ListOptions))
	})
	return _c
}

func (_c *Docker_ContainerList_Call) Return(_a0 []types.Container, _a1 error) *Docker_ContainerList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_ContainerList_Call) RunAndReturn(run func(context.Context, container.ListOptions) ([]types.Container, error)) *Docker_ContainerList_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerLogs provides a mock function with given fields: ctx, _a1, options
func (_m *Docker) ContainerLogs(ctx context.Context, _a1 string, options container.LogsOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerLogs")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, _a1, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) io.ReadCloser); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, container.LogsOptions) error); ok {
		r1 = rf(ctx, _a1, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_ContainerLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerLogs'
type Docker_ContainerLogs_Call struct {
	*mock.Call
}

// ContainerLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options container.LogsOptions
func (_e *Docker_Expecter) ContainerLogs(ctx interface{}, _a1 interface{}, options interface{}) *Docker_ContainerLogs_Call {
	return &Docker_ContainerLogs_Call{Call: _e.mock.On("ContainerLogs", ctx, _a1, options)}
}

func (_c *Docker_ContainerLogs_Call) Run(run func(ctx context.Context, _a1 string, options container.LogsOptions)) *Docker_ContainerLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.LogsOptions))
	})
	return _c
}

func (_c *Docker_ContainerLogs_Call) Return(_a0 io.ReadCloser, _a1 error) *Docker_ContainerLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_ContainerLogs_Call) RunAndReturn(run func(context.Context, string, container.LogsOptions) (io.ReadCloser, error)) *Docker_ContainerLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRemove provides a mock function with given fields: ctx, containerID, options
func (_m *Docker) ContainerRemove(ctx context.Context, containerID string, options container.RemoveOptions) error {
	ret := _m.Called(ctx, containerID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.RemoveOptions) error); ok {
		r0 = rf(ctx, containerID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Docker_ContainerRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRemove'
type Docker_ContainerRemove_Call struct {
	*mock.Call
}

// ContainerRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - options container.RemoveOptions
func (_e *Docker_Expecter) ContainerRemove(ctx interface{}, containerID interface{}, options interface{}) *Docker_ContainerRemove_Call {
	return &Docker_ContainerRemove_Call{Call: _e.mock.On("ContainerRemove", ctx, containerID, options)}
}

func (_c *Docker_ContainerRemove_Call) Run(run func(ctx context.Context, containerID string, options container.RemoveOptions)) *Docker_ContainerRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.RemoveOptions))
	})
	return _c
}

func (_c *Docker_ContainerRemove_Call) Return(_a0 error) *Docker_ContainerRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Docker_ContainerRemove_Call) RunAndReturn(run func(context.Context, string, container.RemoveOptions) error) *Docker_ContainerRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStart provides a mock function with given fields: ctx, containerID, options
func (_m *Docker) ContainerStart(ctx context.Context, containerID string, options container.StartOptions) error {
	ret := _m.Called(ctx, containerID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.StartOptions) error); ok {
		r0 = rf(ctx, containerID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Docker_ContainerStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStart'
type Docker_ContainerStart_Call struct {
	*mock.Call
}

// ContainerStart is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - options container.StartOptions
func (_e *Docker_Expecter) ContainerStart(ctx interface{}, containerID interface{}, options interface{}) *Docker_ContainerStart_Call {
	return &Docker_ContainerStart_Call{Call: _e.mock.On("ContainerStart", ctx, containerID, options)}
}

func (_c *Docker_ContainerStart_Call) Run(run func(ctx context.Context, containerID string, options container.StartOptions)) *Docker_ContainerStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.StartOptions))
	})
	return _c
}

func (_c *Docker_ContainerStart_Call) Return(_a0 error) *Docker_ContainerStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Docker_ContainerStart_Call) RunAndReturn(run func(context.Context, string, container.StartOptions) error) *Docker_ContainerStart_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStatPath provides a mock function with given fields: ctx, containerID, path
func (_m *Docker) ContainerStatPath(ctx context.Context, containerID string, path string) (types.ContainerPathStat, error) {
	ret := _m.Called(ctx, containerID, path)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStatPath")
	}

	var r0 types.ContainerPathStat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (types.ContainerPathStat, error)); ok {
		return rf(ctx, containerID, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) types.ContainerPathStat); ok {
		r0 = rf(ctx, containerID, path)
	} else {
		r0 = ret.Get(0).(types.ContainerPathStat)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, containerID, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_ContainerStatPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStatPath'
type Docker_ContainerStatPath_Call struct {
	*mock.Call
}

// ContainerStatPath is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - path string
func (_e *Docker_Expecter) ContainerStatPath(ctx interface{}, containerID interface{}, path interface{}) *Docker_ContainerStatPath_Call {
	return &Docker_ContainerStatPath_Call{Call: _e.mock.On("ContainerStatPath", ctx, containerID, path)}
}

func (_c *Docker_ContainerStatPath_Call) Run(run func(ctx context.Context, containerID string, path string)) *Docker_ContainerStatPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Docker_ContainerStatPath_Call) Return(_a0 types.ContainerPathStat, _a1 error) *Docker_ContainerStatPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_ContainerStatPath_Call) RunAndReturn(run func(context.Context, string, string) (types.ContainerPathStat, error)) *Docker_ContainerStatPath_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerWait provides a mock function with given fields: ctx, _a1, condition
func (_m *Docker) ContainerWait(ctx context.Context, _a1 string, condition container.WaitCondition) (<-chan container.WaitResponse, <-chan error) {
	ret := _m.Called(ctx, _a1, condition)

	if len(ret) == 0 {
		panic("no return value specified for ContainerWait")
	}

	var r0 <-chan container.WaitResponse
	var r1 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.WaitCondition) (<-chan container.WaitResponse, <-chan error)); ok {
		return rf(ctx, _a1, condition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, container.WaitCondition) <-chan container.WaitResponse); ok {
		r0 = rf(ctx, _a1, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan container.WaitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, container.WaitCondition) <-chan error); ok {
		r1 = rf(ctx, _a1, condition)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// Docker_ContainerWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerWait'
type Docker_ContainerWait_Call struct {
	*mock.Call
}

// ContainerWait is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - condition container.WaitCondition
func (_e *Docker_Expecter) ContainerWait(ctx interface{}, _a1 interface{}, condition interface{}) *Docker_ContainerWait_Call {
	return &Docker_ContainerWait_Call{Call: _e.mock.On("ContainerWait", ctx, _a1, condition)}
}

func (_c *Docker_ContainerWait_Call) Run(run func(ctx context.Context, _a1 string, condition container.WaitCondition)) *Docker_ContainerWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.WaitCondition))
	})
	return _c
}

func (_c *Docker_ContainerWait_Call) Return(_a0 <-chan container.WaitResponse, _a1 <-chan error) *Docker_ContainerWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_ContainerWait_Call) RunAndReturn(run func(context.Context, string, container.WaitCondition) (<-chan container.WaitResponse, <-chan error)) *Docker_ContainerWait_Call {
	_c.Call.Return(run)
	return _c
}

// CopyFromContainer provides a mock function with given fields: ctx, containerID, srcPath
func (_m *Docker) CopyFromContainer(ctx context.Context, containerID string, srcPath string) (io.ReadCloser, types.ContainerPathStat, error) {
	ret := _m.Called(ctx, containerID, srcPath)

	if len(ret) == 0 {
		panic("no return value specified for CopyFromContainer")
	}

	var r0 io.ReadCloser
	var r1 types.ContainerPathStat
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (io.ReadCloser, types.ContainerPathStat, error)); ok {
		return rf(ctx, containerID, srcPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = rf(ctx, containerID, srcPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) types.ContainerPathStat); ok {
		r1 = rf(ctx, containerID, srcPath)
	} else {
		r1 = ret.Get(1).(types.ContainerPathStat)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, containerID, srcPath)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Docker_CopyFromContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFromContainer'
type Docker_CopyFromContainer_Call struct {
	*mock.Call
}

// CopyFromContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - srcPath string
func (_e *Docker_Expecter) CopyFromContainer(ctx interface{}, containerID interface{}, srcPath interface{}) *Docker_CopyFromContainer_Call {
	return &Docker_CopyFromContainer_Call{Call: _e.mock.On("CopyFromContainer", ctx, containerID, srcPath)}
}

func (_c *Docker_CopyFromContainer_Call) Run(run func(ctx context.Context, containerID string, srcPath string)) *Docker_CopyFromContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Docker_CopyFromContainer_Call) Return(_a0 io.ReadCloser, _a1 types.ContainerPathStat, _a2 error) *Docker_CopyFromContainer_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Docker_CopyFromContainer_Call) RunAndReturn(run func(context.Context, string, string) (io.ReadCloser, types.ContainerPathStat, error)) *Docker_CopyFromContainer_Call {
	_c.Call.Return(run)
	return _c
}

// ImageList provides a mock function with given fields: ctx, listOption
func (_m *Docker) ImageList(ctx context.Context, listOption image.ListOptions) ([]image.Summary, error) {
	ret := _m.Called(ctx, listOption)

	if len(ret) == 0 {
		panic("no return value specified for ImageList")
	}

	var r0 []image.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, image.ListOptions) ([]image.Summary, error)); ok {
		return rf(ctx, listOption)
	}
	if rf, ok := ret.Get(0).(func(context.Context, image.ListOptions) []image.Summary); ok {
		r0 = rf(ctx, listOption)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]image.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, image.ListOptions) error); ok {
		r1 = rf(ctx, listOption)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_ImageList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageList'
type Docker_ImageList_Call struct {
	*mock.Call
}

// ImageList is a helper method to define mock.On call
//   - ctx context.Context
//   - listOption image.ListOptions
func (_e *Docker_Expecter) ImageList(ctx interface{}, listOption interface{}) *Docker_ImageList_Call {
	return &Docker_ImageList_Call{Call: _e.mock.On("ImageList", ctx, listOption)}
}

func (_c *Docker_ImageList_Call) Run(run func(ctx context.Context, listOption image.ListOptions)) *Docker_ImageList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(image.ListOptions))
	})
	return _c
}

func (_c *Docker_ImageList_Call) Return(_a0 []image.Summary, _a1 error) *Docker_ImageList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_ImageList_Call) RunAndReturn(run func(context.Context, image.ListOptions) ([]image.Summary, error)) *Docker_ImageList_Call {
	_c.Call.Return(run)
	return _c
}

// ImagePull provides a mock function with given fields: ctx, refStr, options
func (_m *Docker) ImagePull(ctx context.Context, refStr string, options image.PullOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, refStr, options)

	if len(ret) == 0 {
		panic("no return value specified for ImagePull")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, refStr, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullOptions) io.ReadCloser); ok {
		r0 = rf(ctx, refStr, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, image.PullOptions) error); ok {
		r1 = rf(ctx, refStr, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_ImagePull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImagePull'
type Docker_ImagePull_Call struct {
	*mock.Call
}

// ImagePull is a helper method to define mock.On call
//   - ctx context.Context
//   - refStr string
//   - options image.PullOptions
func (_e *Docker_Expecter) ImagePull(ctx interface{}, refStr interface{}, options interface{}) *Docker_ImagePull_Call {
	return &Docker_ImagePull_Call{Call: _e.mock.On("ImagePull", ctx, refStr, options)}
}

func (_c *Docker_ImagePull_Call) Run(run func(ctx context.Context, refStr string, options image.PullOptions)) *Docker_ImagePull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(image.PullOptions))
	})
	return _c
}

func (_c *Docker_ImagePull_Call) Return(_a0 io.ReadCloser, _a1 error) *Docker_ImagePull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_ImagePull_Call) RunAndReturn(run func(context.Context, string, image.PullOptions) (io.ReadCloser, error)) *Docker_ImagePull_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeCreate provides a mock function with given fields: ctx, options
func (_m *Docker) VolumeCreate(ctx context.Context, options volume.CreateOptions) (volume.Volume, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for VolumeCreate")
	}

	var r0 volume.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, volume.CreateOptions) (volume.Volume, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, volume.CreateOptions) volume.Volume); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(volume.Volume)
	}

	if rf, ok := ret.Get(1).(func(context.Context, volume.CreateOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_VolumeCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeCreate'
type Docker_VolumeCreate_Call struct {
	*mock.Call
}

// VolumeCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - options volume.CreateOptions
func (_e *Docker_Expecter) VolumeCreate(ctx interface{}, options interface{}) *Docker_VolumeCreate_Call {
	return &Docker_VolumeCreate_Call{Call: _e.mock.On("VolumeCreate", ctx, options)}
}

func (_c *Docker_VolumeCreate_Call) Run(run func(ctx context.Context, options volume.CreateOptions)) *Docker_VolumeCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(volume.CreateOptions))
	})
	return _c
}

func (_c *Docker_VolumeCreate_Call) Return(_a0 volume.Volume, _a1 error) *Docker_VolumeCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_VolumeCreate_Call) RunAndReturn(run func(context.Context, volume.CreateOptions) (volume.Volume, error)) *Docker_VolumeCreate_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeList provides a mock function with given fields: ctx, options
func (_m *Docker) VolumeList(ctx context.Context, options volume.ListOptions) (volume.ListResponse, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for VolumeList")
	}

	var r0 volume.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, volume.ListOptions) (volume.ListResponse, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, volume.ListOptions) volume.ListResponse); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(volume.ListResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, volume.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Docker_VolumeList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeList'
type Docker_VolumeList_Call struct {
	*mock.Call
}

// VolumeList is a helper method to define mock.On call
//   - ctx context.Context
//   - options volume.ListOptions
func (_e *Docker_Expecter) VolumeList(ctx interface{}, options interface{}) *Docker_VolumeList_Call {
	return &Docker_VolumeList_Call{Call: _e.mock.On("VolumeList", ctx, options)}
}

func (_c *Docker_VolumeList_Call) Run(run func(ctx context.Context, options volume.ListOptions)) *Docker_VolumeList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(volume.ListOptions))
	})
	return _c
}

func (_c *Docker_VolumeList_Call) Return(_a0 volume.ListResponse, _a1 error) *Docker_VolumeList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Docker_VolumeList_Call) RunAndReturn(run func(context.Context, volume.ListOptions) (volume.ListResponse, error)) *Docker_VolumeList_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeRemove provides a mock function with given fields: ctx, volumeID, force
func (_m *Docker) VolumeRemove(ctx context.Context, volumeID string, force bool) error {
	ret := _m.Called(ctx, volumeID, force)

	if len(ret) == 0 {
		panic("no return value specified for VolumeRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, volumeID, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Docker_VolumeRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeRemove'
type Docker_VolumeRemove_Call struct {
	*mock.Call
}

// VolumeRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - volumeID string
//   - force bool
func (_e *Docker_Expecter) VolumeRemove(ctx interface{}, volumeID interface{}, force interface{}) *Docker_VolumeRemove_Call {
	return &Docker_VolumeRemove_Call{Call: _e.mock.On("VolumeRemove", ctx, volumeID, force)}
}

func (_c *Docker_VolumeRemove_Call) Run(run func(ctx context.Context, volumeID string, force bool)) *Docker_VolumeRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *Docker_VolumeRemove_Call) Return(_a0 error) *Docker_VolumeRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Docker_VolumeRemove_Call) RunAndReturn(run func(context.Context, string, bool) error) *Docker_VolumeRemove_Call {
	_c.Call.Return(run)
	return _c
}

// NewDocker creates a new instance of Docker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDocker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Docker {
	mock := &Docker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
