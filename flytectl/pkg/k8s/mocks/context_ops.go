// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	clientcmd "k8s.io/client-go/tools/clientcmd"

	mock "github.com/stretchr/testify/mock"
)

// ContextOps is an autogenerated mock type for the ContextOps type
type ContextOps struct {
	mock.Mock
}

type ContextOps_CheckConfig struct {
	*mock.Call
}

func (_m ContextOps_CheckConfig) Return(_a0 error) *ContextOps_CheckConfig {
	return &ContextOps_CheckConfig{Call: _m.Call.Return(_a0)}
}

func (_m *ContextOps) OnCheckConfig() *ContextOps_CheckConfig {
	c_call := _m.On("CheckConfig")
	return &ContextOps_CheckConfig{Call: c_call}
}

func (_m *ContextOps) OnCheckConfigMatch(matchers ...interface{}) *ContextOps_CheckConfig {
	c_call := _m.On("CheckConfig", matchers...)
	return &ContextOps_CheckConfig{Call: c_call}
}

// CheckConfig provides a mock function with given fields:
func (_m *ContextOps) CheckConfig() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ContextOps_CopyContext struct {
	*mock.Call
}

func (_m ContextOps_CopyContext) Return(_a0 error) *ContextOps_CopyContext {
	return &ContextOps_CopyContext{Call: _m.Call.Return(_a0)}
}

func (_m *ContextOps) OnCopyContext(srcConfigAccess clientcmd.ConfigAccess, srcCtxName string, targetCtxName string, targetNamespace string) *ContextOps_CopyContext {
	c_call := _m.On("CopyContext", srcConfigAccess, srcCtxName, targetCtxName, targetNamespace)
	return &ContextOps_CopyContext{Call: c_call}
}

func (_m *ContextOps) OnCopyContextMatch(matchers ...interface{}) *ContextOps_CopyContext {
	c_call := _m.On("CopyContext", matchers...)
	return &ContextOps_CopyContext{Call: c_call}
}

// CopyContext provides a mock function with given fields: srcConfigAccess, srcCtxName, targetCtxName, targetNamespace
func (_m *ContextOps) CopyContext(srcConfigAccess clientcmd.ConfigAccess, srcCtxName string, targetCtxName string, targetNamespace string) error {
	ret := _m.Called(srcConfigAccess, srcCtxName, targetCtxName, targetNamespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(clientcmd.ConfigAccess, string, string, string) error); ok {
		r0 = rf(srcConfigAccess, srcCtxName, targetCtxName, targetNamespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ContextOps_RemoveContext struct {
	*mock.Call
}

func (_m ContextOps_RemoveContext) Return(_a0 error) *ContextOps_RemoveContext {
	return &ContextOps_RemoveContext{Call: _m.Call.Return(_a0)}
}

func (_m *ContextOps) OnRemoveContext(ctxName string) *ContextOps_RemoveContext {
	c_call := _m.On("RemoveContext", ctxName)
	return &ContextOps_RemoveContext{Call: c_call}
}

func (_m *ContextOps) OnRemoveContextMatch(matchers ...interface{}) *ContextOps_RemoveContext {
	c_call := _m.On("RemoveContext", matchers...)
	return &ContextOps_RemoveContext{Call: c_call}
}

// RemoveContext provides a mock function with given fields: ctxName
func (_m *ContextOps) RemoveContext(ctxName string) error {
	ret := _m.Called(ctxName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ctxName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
