// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	clientcmd "k8s.io/client-go/tools/clientcmd"

	mock "github.com/stretchr/testify/mock"
)

// ContextOps is an autogenerated mock type for the ContextOps type
type ContextOps struct {
	mock.Mock
}

type ContextOps_Expecter struct {
	mock *mock.Mock
}

func (_m *ContextOps) EXPECT() *ContextOps_Expecter {
	return &ContextOps_Expecter{mock: &_m.Mock}
}

// CheckConfig provides a mock function with no fields
func (_m *ContextOps) CheckConfig() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CheckConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContextOps_CheckConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckConfig'
type ContextOps_CheckConfig_Call struct {
	*mock.Call
}

// CheckConfig is a helper method to define mock.On call
func (_e *ContextOps_Expecter) CheckConfig() *ContextOps_CheckConfig_Call {
	return &ContextOps_CheckConfig_Call{Call: _e.mock.On("CheckConfig")}
}

func (_c *ContextOps_CheckConfig_Call) Run(run func()) *ContextOps_CheckConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContextOps_CheckConfig_Call) Return(_a0 error) *ContextOps_CheckConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextOps_CheckConfig_Call) RunAndReturn(run func() error) *ContextOps_CheckConfig_Call {
	_c.Call.Return(run)
	return _c
}

// CopyContext provides a mock function with given fields: srcConfigAccess, srcCtxName, targetCtxName, targetNamespace
func (_m *ContextOps) CopyContext(srcConfigAccess clientcmd.ConfigAccess, srcCtxName string, targetCtxName string, targetNamespace string) error {
	ret := _m.Called(srcConfigAccess, srcCtxName, targetCtxName, targetNamespace)

	if len(ret) == 0 {
		panic("no return value specified for CopyContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(clientcmd.ConfigAccess, string, string, string) error); ok {
		r0 = rf(srcConfigAccess, srcCtxName, targetCtxName, targetNamespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContextOps_CopyContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyContext'
type ContextOps_CopyContext_Call struct {
	*mock.Call
}

// CopyContext is a helper method to define mock.On call
//   - srcConfigAccess clientcmd.ConfigAccess
//   - srcCtxName string
//   - targetCtxName string
//   - targetNamespace string
func (_e *ContextOps_Expecter) CopyContext(srcConfigAccess interface{}, srcCtxName interface{}, targetCtxName interface{}, targetNamespace interface{}) *ContextOps_CopyContext_Call {
	return &ContextOps_CopyContext_Call{Call: _e.mock.On("CopyContext", srcConfigAccess, srcCtxName, targetCtxName, targetNamespace)}
}

func (_c *ContextOps_CopyContext_Call) Run(run func(srcConfigAccess clientcmd.ConfigAccess, srcCtxName string, targetCtxName string, targetNamespace string)) *ContextOps_CopyContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(clientcmd.ConfigAccess), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ContextOps_CopyContext_Call) Return(_a0 error) *ContextOps_CopyContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextOps_CopyContext_Call) RunAndReturn(run func(clientcmd.ConfigAccess, string, string, string) error) *ContextOps_CopyContext_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveContext provides a mock function with given fields: ctxName
func (_m *ContextOps) RemoveContext(ctxName string) error {
	ret := _m.Called(ctxName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ctxName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContextOps_RemoveContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveContext'
type ContextOps_RemoveContext_Call struct {
	*mock.Call
}

// RemoveContext is a helper method to define mock.On call
//   - ctxName string
func (_e *ContextOps_Expecter) RemoveContext(ctxName interface{}) *ContextOps_RemoveContext_Call {
	return &ContextOps_RemoveContext_Call{Call: _e.mock.On("RemoveContext", ctxName)}
}

func (_c *ContextOps_RemoveContext_Call) Run(run func(ctxName string)) *ContextOps_RemoveContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContextOps_RemoveContext_Call) Return(_a0 error) *ContextOps_RemoveContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContextOps_RemoveContext_Call) RunAndReturn(run func(string) error) *ContextOps_RemoveContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewContextOps creates a new instance of ContextOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContextOps(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContextOps {
	mock := &ContextOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
