// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v42/github"
	mock "github.com/stretchr/testify/mock"
)

// GHRepoService is an autogenerated mock type for the GHRepoService type
type GHRepoService struct {
	mock.Mock
}

type GHRepoService_Expecter struct {
	mock *mock.Mock
}

func (_m *GHRepoService) EXPECT() *GHRepoService_Expecter {
	return &GHRepoService_Expecter{mock: &_m.Mock}
}

// GetCommitSHA1 provides a mock function with given fields: ctx, owner, repo, ref, lastSHA
func (_m *GHRepoService) GetCommitSHA1(ctx context.Context, owner string, repo string, ref string, lastSHA string) (string, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, ref, lastSHA)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitSHA1")
	}

	var r0 string
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (string, *github.Response, error)); ok {
		return rf(ctx, owner, repo, ref, lastSHA)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) string); ok {
		r0 = rf(ctx, owner, repo, ref, lastSHA)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, repo, ref, lastSHA)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string) error); ok {
		r2 = rf(ctx, owner, repo, ref, lastSHA)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GHRepoService_GetCommitSHA1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitSHA1'
type GHRepoService_GetCommitSHA1_Call struct {
	*mock.Call
}

// GetCommitSHA1 is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - ref string
//   - lastSHA string
func (_e *GHRepoService_Expecter) GetCommitSHA1(ctx interface{}, owner interface{}, repo interface{}, ref interface{}, lastSHA interface{}) *GHRepoService_GetCommitSHA1_Call {
	return &GHRepoService_GetCommitSHA1_Call{Call: _e.mock.On("GetCommitSHA1", ctx, owner, repo, ref, lastSHA)}
}

func (_c *GHRepoService_GetCommitSHA1_Call) Run(run func(ctx context.Context, owner string, repo string, ref string, lastSHA string)) *GHRepoService_GetCommitSHA1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *GHRepoService_GetCommitSHA1_Call) Return(_a0 string, _a1 *github.Response, _a2 error) *GHRepoService_GetCommitSHA1_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GHRepoService_GetCommitSHA1_Call) RunAndReturn(run func(context.Context, string, string, string, string) (string, *github.Response, error)) *GHRepoService_GetCommitSHA1_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestRelease provides a mock function with given fields: ctx, owner, repo
func (_m *GHRepoService) GetLatestRelease(ctx context.Context, owner string, repo string) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRelease")
	}

	var r0 *github.RepositoryRelease
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*github.RepositoryRelease, *github.Response, error)); ok {
		return rf(ctx, owner, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *github.RepositoryRelease); ok {
		r0 = rf(ctx, owner, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, repo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, owner, repo)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GHRepoService_GetLatestRelease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestRelease'
type GHRepoService_GetLatestRelease_Call struct {
	*mock.Call
}

// GetLatestRelease is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
func (_e *GHRepoService_Expecter) GetLatestRelease(ctx interface{}, owner interface{}, repo interface{}) *GHRepoService_GetLatestRelease_Call {
	return &GHRepoService_GetLatestRelease_Call{Call: _e.mock.On("GetLatestRelease", ctx, owner, repo)}
}

func (_c *GHRepoService_GetLatestRelease_Call) Run(run func(ctx context.Context, owner string, repo string)) *GHRepoService_GetLatestRelease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GHRepoService_GetLatestRelease_Call) Return(_a0 *github.RepositoryRelease, _a1 *github.Response, _a2 error) *GHRepoService_GetLatestRelease_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GHRepoService_GetLatestRelease_Call) RunAndReturn(run func(context.Context, string, string) (*github.RepositoryRelease, *github.Response, error)) *GHRepoService_GetLatestRelease_Call {
	_c.Call.Return(run)
	return _c
}

// GetReleaseByTag provides a mock function with given fields: ctx, owner, repo, tag
func (_m *GHRepoService) GetReleaseByTag(ctx context.Context, owner string, repo string, tag string) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, tag)

	if len(ret) == 0 {
		panic("no return value specified for GetReleaseByTag")
	}

	var r0 *github.RepositoryRelease
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*github.RepositoryRelease, *github.Response, error)); ok {
		return rf(ctx, owner, repo, tag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.RepositoryRelease); ok {
		r0 = rf(ctx, owner, repo, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, repo, tag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, owner, repo, tag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GHRepoService_GetReleaseByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleaseByTag'
type GHRepoService_GetReleaseByTag_Call struct {
	*mock.Call
}

// GetReleaseByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - tag string
func (_e *GHRepoService_Expecter) GetReleaseByTag(ctx interface{}, owner interface{}, repo interface{}, tag interface{}) *GHRepoService_GetReleaseByTag_Call {
	return &GHRepoService_GetReleaseByTag_Call{Call: _e.mock.On("GetReleaseByTag", ctx, owner, repo, tag)}
}

func (_c *GHRepoService_GetReleaseByTag_Call) Run(run func(ctx context.Context, owner string, repo string, tag string)) *GHRepoService_GetReleaseByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *GHRepoService_GetReleaseByTag_Call) Return(_a0 *github.RepositoryRelease, _a1 *github.Response, _a2 error) *GHRepoService_GetReleaseByTag_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GHRepoService_GetReleaseByTag_Call) RunAndReturn(run func(context.Context, string, string, string) (*github.RepositoryRelease, *github.Response, error)) *GHRepoService_GetReleaseByTag_Call {
	_c.Call.Return(run)
	return _c
}

// ListReleases provides a mock function with given fields: ctx, owner, repo, opts
func (_m *GHRepoService) ListReleases(ctx context.Context, owner string, repo string, opts *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListReleases")
	}

	var r0 []*github.RepositoryRelease
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error)); ok {
		return rf(ctx, owner, repo, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.ListOptions) []*github.RepositoryRelease); ok {
		r0 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryRelease)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.ListOptions) *github.Response); ok {
		r1 = rf(ctx, owner, repo, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.ListOptions) error); ok {
		r2 = rf(ctx, owner, repo, opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GHRepoService_ListReleases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReleases'
type GHRepoService_ListReleases_Call struct {
	*mock.Call
}

// ListReleases is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - opts *github.ListOptions
func (_e *GHRepoService_Expecter) ListReleases(ctx interface{}, owner interface{}, repo interface{}, opts interface{}) *GHRepoService_ListReleases_Call {
	return &GHRepoService_ListReleases_Call{Call: _e.mock.On("ListReleases", ctx, owner, repo, opts)}
}

func (_c *GHRepoService_ListReleases_Call) Run(run func(ctx context.Context, owner string, repo string, opts *github.ListOptions)) *GHRepoService_ListReleases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*github.ListOptions))
	})
	return _c
}

func (_c *GHRepoService_ListReleases_Call) Return(_a0 []*github.RepositoryRelease, _a1 *github.Response, _a2 error) *GHRepoService_ListReleases_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GHRepoService_ListReleases_Call) RunAndReturn(run func(context.Context, string, string, *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error)) *GHRepoService_ListReleases_Call {
	_c.Call.Return(run)
	return _c
}

// NewGHRepoService creates a new instance of GHRepoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGHRepoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GHRepoService {
	mock := &GHRepoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
