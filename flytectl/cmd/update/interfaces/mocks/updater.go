// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	cmdcore "github.com/flyteorg/flyte/flytectl/cmd/core"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"
)

// Updater is an autogenerated mock type for the Updater type
type Updater struct {
	mock.Mock
}

type Updater_Expecter struct {
	mock *mock.Mock
}

func (_m *Updater) EXPECT() *Updater_Expecter {
	return &Updater_Expecter{mock: &_m.Mock}
}

// UpdateNamedEntity provides a mock function with given fields: ctx, name, project, domain, rsType, cmdCtx
func (_m *Updater) UpdateNamedEntity(ctx context.Context, name string, project string, domain string, rsType core.ResourceType, cmdCtx cmdcore.CommandContext) error {
	ret := _m.Called(ctx, name, project, domain, rsType, cmdCtx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNamedEntity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, core.ResourceType, cmdcore.CommandContext) error); ok {
		r0 = rf(ctx, name, project, domain, rsType, cmdCtx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Updater_UpdateNamedEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNamedEntity'
type Updater_UpdateNamedEntity_Call struct {
	*mock.Call
}

// UpdateNamedEntity is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - project string
//   - domain string
//   - rsType core.ResourceType
//   - cmdCtx cmdcore.CommandContext
func (_e *Updater_Expecter) UpdateNamedEntity(ctx interface{}, name interface{}, project interface{}, domain interface{}, rsType interface{}, cmdCtx interface{}) *Updater_UpdateNamedEntity_Call {
	return &Updater_UpdateNamedEntity_Call{Call: _e.mock.On("UpdateNamedEntity", ctx, name, project, domain, rsType, cmdCtx)}
}

func (_c *Updater_UpdateNamedEntity_Call) Run(run func(ctx context.Context, name string, project string, domain string, rsType core.ResourceType, cmdCtx cmdcore.CommandContext)) *Updater_UpdateNamedEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(core.ResourceType), args[5].(cmdcore.CommandContext))
	})
	return _c
}

func (_c *Updater_UpdateNamedEntity_Call) Return(_a0 error) *Updater_UpdateNamedEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Updater_UpdateNamedEntity_Call) RunAndReturn(run func(context.Context, string, string, string, core.ResourceType, cmdcore.CommandContext) error) *Updater_UpdateNamedEntity_Call {
	_c.Call.Return(run)
	return _c
}

// NewUpdater creates a new instance of Updater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *Updater {
	mock := &Updater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
